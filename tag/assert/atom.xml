<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://enjundu.github.io</id>
    <title>Hexo • Posts by &#34;assert&#34; tag</title>
    <link href="https://enjundu.github.io" />
    <updated>2024-07-18T18:07:35.000Z</updated>
    <category term="Hexo" />
    <category term="Front Matter" />
    <category term="code" />
    <category term="recommendation" />
    <category term="homework" />
    <category term="deep_learning" />
    <category term="LLM" />
    <category term="assert" />
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/01_conductor-main/</id>
        <title>01_conductor</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/01_conductor-main/"/>
        <content type="html">&lt;h1 id=&#34;conductor&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#conductor&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NvbmR1Y3Rvci1vc3MvY29uZHVjdG9y&#34;&gt;conductor&lt;/span&gt;&lt;/h1&gt;
&lt;h1 id=&#34;原代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原代码&#34;&gt;#&lt;/a&gt; 原代码&lt;/h1&gt;
&lt;p&gt;地址: &lt;code&gt;\conductor-main\es7-persistence\src\test\java\com\netflix\conductor\es7\dao\query\parser\TestExpression.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Copyright 2023 Conductor Authors.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may not use this file except in compliance with&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * the License. You may obtain a copy of the License at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * http://www.apache.org/licenses/LICENSE-2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * an &amp;quot;AS IS&amp;quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * specific language governing permissions and limitations under the License.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.BufferedInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.ByteArrayInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertFalse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertNotNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertTrue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; Viren&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestExpression&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractParserTest&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType	=&amp;#x27;sdp&amp;#x27; AND (metadata.width &amp;gt; 50 OR metadata.height &amp;gt; 50)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// test = &amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType	=&amp;#x27;sdp&amp;#x27;&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// test = &amp;quot;(metadata.type = &amp;#x27;IMAGE&amp;#x27;)&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertTrue(expr.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(expr.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(expr.getNameValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NameValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;IMAGE\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertTrue(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv); &lt;span class=&#34;comment&#34;&gt;// subType = sdp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(rhs.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;subType&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;sdp\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;AND&amp;quot;&lt;/span&gt;, rhs.getOperator().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = rhs.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertFalse(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;GroupedExpression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rhs.getGroupedExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(ge);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        expr = ge.getExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertTrue(expr.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;metadata.width&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;50&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;OR&amp;quot;&lt;/span&gt;, expr.getOperator().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertFalse(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;metadata.height&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;50&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;testWithSysConstants&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType	=&amp;#x27;sdp&amp;#x27; AND description IS null&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertTrue(expr.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(expr.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(expr.getNameValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NameValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;IMAGE\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertTrue(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv); &lt;span class=&#34;comment&#34;&gt;// subType = sdp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(rhs.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;subType&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;sdp\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;AND&amp;quot;&lt;/span&gt;, rhs.getOperator().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = rhs.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertFalse(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;GroupedExpression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rhs.getGroupedExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(ge);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ConstValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; nv.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(cv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test = &lt;span class=&#34;string&#34;&gt;&amp;quot;description IS not null&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        is = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        expr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv = nv.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(cv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;投喂代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#投喂代码&#34;&gt;#&lt;/a&gt; 投喂代码&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Copyright 2023 Conductor Authors.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); you may not use this file except in compliance with&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * the License. You may obtain a copy of the License at&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * http://www.apache.org/licenses/LICENSE-2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * an &amp;quot;AS IS&amp;quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * specific language governing permissions and limitations under the License.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.BufferedInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.ByteArrayInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertFalse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertNotNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertTrue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; Viren&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestExpression&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractParserTest&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subTy	pe	=&amp;#x27;sdp&amp;#x27; AND (metadata.width &amp;gt; 50 OR metadata.height &amp;gt; 50)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// test = &amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType	=&amp;#x27;sdp&amp;#x27;&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// test = &amp;quot;(metadata.type = &amp;#x27;IMAGE&amp;#x27;)&amp;quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NameValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = rhs.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;GroupedExpression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rhs.getGroupedExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        expr = ge.getExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;testWithSysConstants&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType	=&amp;#x27;sdp&amp;#x27; AND description IS null&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NameValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = rhs.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;GroupedExpression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rhs.getGroupedExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ConstValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; nv.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test = &lt;span class=&#34;string&#34;&gt;&amp;quot;description IS not null&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        is = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        expr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv = nv.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;llm生成代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#llm生成代码&#34;&gt;#&lt;/a&gt; LLM 生成代码&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.BufferedInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.ByteArrayInputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.InputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertEquals;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertFalse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertNotNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertNull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; org.junit.Assert.assertTrue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Author: Viren&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestExpression&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AbstractParserTest&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType=&amp;#x27;sdp&amp;#x27; AND (metadata.width &amp;gt; 50 OR metadata.height &amp;gt; 50)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NameValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = rhs.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;GroupedExpression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rhs.getGroupedExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(ge);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        expr = ge.getExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;testWithSysConstants&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;type=&amp;#x27;IMAGE&amp;#x27; AND subType=&amp;#x27;sdp&amp;#x27; AND description IS null&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;expr&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;NameValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;nv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;rhs&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; expr.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs = rhs.getRightHandSide();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;GroupedExpression&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ge&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; rhs.getGroupedExpression();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(ge);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = rhs.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;ConstValue&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;cv&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; nv.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(cv);  &lt;span class=&#34;comment&#34;&gt;// Assuming null due to &amp;#x27;description IS null&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test = &lt;span class=&#34;string&#34;&gt;&amp;quot;description IS not null&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        is = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BufferedInputStream&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(test.getBytes()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        expr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Expression&lt;/span&gt;(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nv = expr.getNameValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cv = nv.getValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(cv);  &lt;span class=&#34;comment&#34;&gt;// Assuming not null due to &amp;#x27;description IS not null&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;代码分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码分析&#34;&gt;#&lt;/a&gt; 代码分析&lt;/h1&gt;
&lt;h2 id=&#34;原代码含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原代码含义&#34;&gt;#&lt;/a&gt; 原代码含义：&lt;/h2&gt;
&lt;h3 id=&#34;test-方法中的断言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#test-方法中的断言&#34;&gt;#&lt;/a&gt;  &lt;code&gt;test&lt;/code&gt;  方法中的断言&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertTrue(expr.isBinaryExpr());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;expr&lt;/code&gt;  是否是一个二元表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为只有在输入表达式被解析为二元表达式时，这个断言才会通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNull(expr.getGroupedExpression());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;expr&lt;/code&gt;  是否没有组表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为只有在输入表达式没有包含组表达式时，这个断言才会通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(expr.getNameValue());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;expr&lt;/code&gt;  的  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为只有在输入表达式包含一个  &lt;code&gt;NameValue&lt;/code&gt;  时，这个断言才会通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;type&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;type&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为  &lt;code&gt;NameValue&lt;/code&gt;  的名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;=&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;=&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;\&amp;quot;IMAGE\&amp;quot;&amp;quot;, nv.getValue().getValue());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的值是否为  &lt;code&gt;&amp;quot;IMAGE&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(rhs);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertTrue(rhs.isBinaryExpr());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否是一个二元表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须被解析为二元表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(nv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  &lt;code&gt;NameValue&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNull(rhs.getGroupedExpression());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式是否没有组表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须不包含组表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;subType&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;subType&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;=&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;=&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;\&amp;quot;sdp\&amp;quot;&amp;quot;, nv.getValue().getValue());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的值是否为  &lt;code&gt;&amp;quot;sdp&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;AND&amp;quot;, rhs.getOperator().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式的操作符是否为  &lt;code&gt;&amp;quot;AND&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(rhs);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertFalse(rhs.isBinaryExpr());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否不是一个二元表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须不是二元表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNull(ge);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧组表达式  &lt;code&gt;ge&lt;/code&gt;  是否为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式不包含组表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(nv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  &lt;code&gt;NameValue&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;description&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;description&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;IS&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;IS&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(cv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的值是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的系统常量值是否为  &lt;code&gt;ConstValue.SystemConsts.NULL&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;testwithsysconstants-方法中的断言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#testwithsysconstants-方法中的断言&#34;&gt;#&lt;/a&gt;  &lt;code&gt;testWithSysConstants&lt;/code&gt;  方法中的断言&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertTrue(expr.isBinaryExpr());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;expr&lt;/code&gt;  是否是一个二元表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为只有在输入表达式被解析为二元表达式时，这个断言才会通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNull(expr.getGroupedExpression());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;expr&lt;/code&gt;  是否没有组表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为只有在输入表达式没有包含组表达式时，这个断言才会通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(expr.getNameValue());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;expr&lt;/code&gt;  的  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为只有在输入表达式包含一个  &lt;code&gt;NameValue&lt;/code&gt;  时，这个断言才会通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;type&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;type&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为  &lt;code&gt;NameValue&lt;/code&gt;  的名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;=&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;=&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;\&amp;quot;IMAGE\&amp;quot;&amp;quot;, nv.getValue().getValue());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的值是否为  &lt;code&gt;&amp;quot;IMAGE&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(rhs);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertTrue(rhs.isBinaryExpr());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否是一个二元表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须被解析为二元表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(nv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  &lt;code&gt;NameValue&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNull(rhs.getGroupedExpression());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式是否没有组表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须不包含组表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;subType&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;subType&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;=&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;=&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;\&amp;quot;sdp\&amp;quot;&amp;quot;, nv.getValue().getValue());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的值是否为  &lt;code&gt;&amp;quot;sdp&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;AND&amp;quot;, rhs.getOperator().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式的操作符是否为  &lt;code&gt;&amp;quot;AND&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(rhs);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertFalse(rhs.isBinaryExpr());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧表达式  &lt;code&gt;rhs&lt;/code&gt;  是否不是一个二元表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须不是二元表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNull(ge);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧组表达式  &lt;code&gt;ge&lt;/code&gt;  是否为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式不包含组表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(nv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  &lt;code&gt;NameValue&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;description&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;description&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;IS&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;IS&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(cv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的值是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查右侧  &lt;code&gt;NameValue&lt;/code&gt;  的系统常量值是否为  &lt;code&gt;ConstValue.SystemConsts.NULL&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(nv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为  &lt;code&gt;NameValue&lt;/code&gt;  必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;description&amp;quot;, nv.getName().getName());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的名称是否为  &lt;code&gt;&amp;quot;description&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(&amp;quot;IS&amp;quot;, nv.getOp().getOperator());&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的操作符是否为  &lt;code&gt;&amp;quot;IS&amp;quot;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertNotNull(cv);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的值是否不为  &lt;code&gt;null&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为值必须存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);&lt;/code&gt; &lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证内容&lt;/strong&gt;：检查  &lt;code&gt;NameValue&lt;/code&gt;  的系统常量值是否为  &lt;code&gt;ConstValue.SystemConsts.NOT_NULL&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖性&lt;/strong&gt;：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;相似率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相似率&#34;&gt;#&lt;/a&gt; 相似率&lt;/h2&gt;
&lt;h3 id=&#34;原代码和填充后代码相同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原代码和填充后代码相同&#34;&gt;#&lt;/a&gt; 原代码和填充后代码相同&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv); &lt;span class=&#34;comment&#34;&gt;// subType = sdp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(ge);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(expr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv); &lt;span class=&#34;comment&#34;&gt;// subType = sdp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(rhs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(cv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(cv);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;原代码有填充后无&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原代码有填充后无&#34;&gt;#&lt;/a&gt; 原代码有，填充后无&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;assertTrue(expr.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNull(expr.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(expr.getNameValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertTrue(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNull(rhs.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;subType&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;sdp\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;AND&amp;quot;&lt;/span&gt;, rhs.getOperator().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertFalse(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertTrue(expr.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;metadata.width&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;50&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;OR&amp;quot;&lt;/span&gt;, expr.getOperator().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertFalse(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;metadata.height&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;50&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertTrue(expr.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNull(expr.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNotNull(expr.getNameValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertTrue(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertNull(rhs.getGroupedExpression());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;subType&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;sdp\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;AND&amp;quot;&lt;/span&gt;, rhs.getOperator().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertFalse(rhs.isBinaryExpr());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;原代码和填充后不同&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原代码和填充后不同&#34;&gt;#&lt;/a&gt; 原代码和填充后不同&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;**原代码**：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;IMAGE\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;, nv.getName().getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;, nv.getOp().getOperator());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertEquals(&lt;span class=&#34;string&#34;&gt;&amp;quot;\&amp;quot;IMAGE\&amp;quot;&amp;quot;&lt;/span&gt;, nv.getValue().getValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNull(ge);☆&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;**填充后的代码**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(nv);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assertNotNull(ge);☆&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;相似率-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相似率-2&#34;&gt;#&lt;/a&gt; 相似率&lt;/h3&gt;
&lt;p&gt;原代码共&lt;strong&gt; 58&lt;/strong&gt; 个 assert 语句，填充后的代码与原代码测试语句相同的部分占&lt;strong&gt; 16&lt;/strong&gt; 项，不同的部分占&lt;strong&gt; 7&lt;/strong&gt; 项，其中填充后与原代码含义相反的代码&lt;strong&gt; 1&lt;/strong&gt; 项（已用☆标出），原代码有而填充后代码缺失的语句占&lt;strong&gt; 35&lt;/strong&gt; 项。填充正确率为&lt;strong&gt; 27.58%&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;原因分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原因分析&#34;&gt;#&lt;/a&gt; 原因分析&lt;/h2&gt;
</content>
        <category term="Hexo" />
        <category term="LLM" />
        <category term="assert" />
        <updated>2024-07-18T18:07:35.000Z</updated>
    </entry>
</feed>
