{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"assert\" tag",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/LLMstestoracle/01_conductor-main/",
            "url": "https://enjundu.github.io/LLMstestoracle/01_conductor-main/",
            "title": "01_conductor",
            "date_published": "2024-07-18T18:07:35.000Z",
            "content_html": "<h1 id=\"conductor\"><a class=\"anchor\" href=\"#conductor\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbmR1Y3Rvci1vc3MvY29uZHVjdG9y\">conductor</span></h1>\n<h1 id=\"原代码\"><a class=\"anchor\" href=\"#原代码\">#</a> 原代码</h1>\n<p>地址: <code>\\conductor-main\\es7-persistence\\src\\test\\java\\com\\netflix\\conductor\\es7\\dao\\query\\parser\\TestExpression.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2023 Conductor Authors.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License. You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on</span></span><br><span class=\"line\"><span class=\"comment\"> * an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertFalse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27;&quot;;</span></span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;(metadata.type = &#x27;IMAGE&#x27;)&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">        assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">        assertNotNull(expr.getNameValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">        assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">        assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">        assertNotNull(expr.getNameValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">        assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNull(ge);</span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);</span><br><span class=\"line\">        assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);</span><br><span class=\"line\">        assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"投喂代码\"><a class=\"anchor\" href=\"#投喂代码\">#</a> 投喂代码</h1>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2023 Conductor Authors.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License. You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on</span></span><br><span class=\"line\"><span class=\"comment\"> * an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertFalse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subTy\tpe\t=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27;&quot;;</span></span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;(metadata.type = &#x27;IMAGE&#x27;)&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        </span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"llm生成代码\"><a class=\"anchor\" href=\"#llm生成代码\">#</a> LLM 生成代码</h1>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertFalse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\"></span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">        assertNull(cv);  <span class=\"comment\">// Assuming null due to &#x27;description IS null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);  <span class=\"comment\">// Assuming not null due to &#x27;description IS not null&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"代码分析\"><a class=\"anchor\" href=\"#代码分析\">#</a> 代码分析</h1>\n<h2 id=\"原代码含义\"><a class=\"anchor\" href=\"#原代码含义\">#</a> 原代码含义：</h2>\n<h3 id=\"test-方法中的断言\"><a class=\"anchor\" href=\"#test-方法中的断言\">#</a>  <code>test</code>  方法中的断言</h3>\n<ol>\n<li><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式被解析为二元表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式没有包含组表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(expr.getNameValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  的  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式包含一个  <code>NameValue</code>  时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的名称是否为  <code>&quot;type&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为  <code>NameValue</code>  的名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的值是否为  <code>&quot;IMAGE&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须被解析为二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;subType&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否为  <code>&quot;sdp&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式的操作符是否为  <code>&quot;AND&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不是二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(ge);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧组表达式  <code>ge</code>  是否为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;description&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;description&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;IS&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(cv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的系统常量值是否为  <code>ConstValue.SystemConsts.NULL</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"testwithsysconstants-方法中的断言\"><a class=\"anchor\" href=\"#testwithsysconstants-方法中的断言\">#</a>  <code>testWithSysConstants</code>  方法中的断言</h3>\n<ol>\n<li><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式被解析为二元表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式没有包含组表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(expr.getNameValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  的  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式包含一个  <code>NameValue</code>  时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的名称是否为  <code>&quot;type&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为  <code>NameValue</code>  的名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的值是否为  <code>&quot;IMAGE&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须被解析为二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;subType&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否为  <code>&quot;sdp&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式的操作符是否为  <code>&quot;AND&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不是二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(ge);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧组表达式  <code>ge</code>  是否为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;description&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;description&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;IS&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(cv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的系统常量值是否为  <code>ConstValue.SystemConsts.NULL</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为  <code>NameValue</code>  必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;description&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的名称是否为  <code>&quot;description&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的操作符是否为  <code>&quot;IS&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(cv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的值是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的系统常量值是否为  <code>ConstValue.SystemConsts.NOT_NULL</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"相似率\"><a class=\"anchor\" href=\"#相似率\">#</a> 相似率</h2>\n<h3 id=\"原代码和填充后代码相同\"><a class=\"anchor\" href=\"#原代码和填充后代码相同\">#</a> 原代码和填充后代码相同</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(ge);</span><br><span class=\"line\">assertNotNull(expr);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(cv);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(cv);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原代码有填充后无\"><a class=\"anchor\" href=\"#原代码有填充后无\">#</a> 原代码有，填充后无</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原代码和填充后不同\"><a class=\"anchor\" href=\"#原代码和填充后不同\">#</a> 原代码和填充后不同</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**原代码**：</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">        assertNull(ge);☆</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**填充后的代码**</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertNotNull(ge);☆</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"相似率-2\"><a class=\"anchor\" href=\"#相似率-2\">#</a> 相似率</h3>\n<p>原代码共<strong> 58</strong> 个 assert 语句，填充后的代码与原代码测试语句相同的部分占<strong> 16</strong> 项，不同的部分占<strong> 7</strong> 项，其中填充后与原代码含义相反的代码<strong> 1</strong> 项（已用☆标出），原代码有而填充后代码缺失的语句占<strong> 35</strong> 项。填充正确率为<strong> 27.58%</strong>。</p>\n<h1 id=\"具体分析\"><a class=\"anchor\" href=\"#具体分析\">#</a> 具体分析</h1>\n<h2 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  是否为二元表达式。这确保了表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其类型。</li>\n</ul>\n<p><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认表达式  <code>expr</code>  的分组表达式为空。确保表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertNotNull(expr.getNameValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  的名称和值对象是否存在。确保表达式包含有效的名称和值。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并返回名称和值对象。</li>\n</ul>\n<p><strong>LLM 填充后：</strong> 没有填充这些 assert 语句。</p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>isBinaryExpr</code>  和  <code>getGroupedExpression</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 提供的代码中缺少关于  <code>Expression</code>  类的具体信息，使得 LLM 无法生成与这些方法相关的断言。</li>\n</ul>\n<h2 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;type&quot;。确保名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;IMAGE&quot;</code> 。确保值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有描述  <code>NameValue</code>  类的  <code>getName</code> 、 <code>getOp</code>  和  <code>getValue</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少  <code>NameValue</code>  类的详细信息，导致 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"3\"><a class=\"anchor\" href=\"#3\">#</a> 3</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为二元表达式。确保右侧表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"4\"><a class=\"anchor\" href=\"#4\">#</a> 4</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认右侧表达式  <code>rhs</code>  的分组表达式为空。确保右侧表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;subType&quot;。确保右侧表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;sdp&quot;</code> 。确保右侧表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;AND&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并返回操作符字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li>\n<p><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  和  <code>Expression</code>  类的相关方法。LLM 无法推断这些方法的存在和它们的预期行为。</p>\n</li>\n<li>\n<p><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</p>\n</li>\n</ul>\n<h2 id=\"5\"><a class=\"anchor\" href=\"#5\">#</a> 5</h2>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为非二元表达式。确保右侧表达式不是二元表达式，可能是其他类型的表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"6\"><a class=\"anchor\" href=\"#6\">#</a> 6</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p><strong>验证内容：</strong> 验证分组表达式  <code>ge</code>  是否存在。确保右侧表达式中包含有效的分组表达式。</p>\n</li>\n<li>\n<p><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>GroupedExpression</code>  对象。<strong>LLM 填充后：</strong></p>\n</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>成功原因：</strong></p>\n<ul>\n<li><strong>方法名称和返回类型明确：</strong>  <code>getGroupedExpression</code>  方法名称和返回类型明确，容易被 LLM 推断和理解。</li>\n<li><strong>存在性检查：</strong>  <code>assertNotNull</code>  是基本的存在性检查，容易生成。</li>\n</ul>\n<h2 id=\"7\"><a class=\"anchor\" href=\"#7\">#</a> 7</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr = ge.getExpression();</span><br><span class=\"line\">assertNotNull(expr);</span><br><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(expr);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证嵌套表达式  <code>expr</code>  是否存在。确保分组表达式中包含有效的嵌套表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>GroupedExpression</code>  类正确解析并返回  <code>Expression</code>  对象。</li>\n</ul>\n<p><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证嵌套表达式  <code>expr</code>  是否为二元表达式。确保嵌套表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析嵌套表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr = ge.getExpression();</span><br><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>GroupedExpression</code>  类的  <code>getExpression</code>  方法和  <code>Expression</code>  类的  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>GroupedExpression</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"8\"><a class=\"anchor\" href=\"#8\">#</a> 8</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保嵌套表达式中的名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;metadata.width&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;metadata.width&quot;。确保嵌套表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;&gt;&quot;。确保嵌套表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;50&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为 &quot;50&quot;。确保嵌套表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;OR&quot;, expr.getOperator().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;OR&quot;。确保嵌套表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  和  <code>Expression</code>  类的相关方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"9\"><a class=\"anchor\" href=\"#9\">#</a> 9</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为非二元表达式。确保右侧表达式不是二元表达式，可能是其他类型的表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"10\"><a class=\"anchor\" href=\"#10\">#</a> 10</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保右侧表达式中的名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;metadata.height&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;metadata.height&quot;。确保右侧表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;&gt;&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;50&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为 &quot;50&quot;。确保右侧表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  类的  <code>getName</code> 、 <code>getOp</code>  和  <code>getValue</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"11\"><a class=\"anchor\" href=\"#11\">#</a> 11</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  是否为二元表达式。这确保了表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其类型。</li>\n</ul>\n<p><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认表达式  <code>expr</code>  的分组表达式为空。确保表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertNotNull(expr.getNameValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  的名称和值对象是否存在。确保表达式包含有效的名称和值。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并返回名称和值对象。</li>\n</ul>\n<p><strong>LLM 填充后：</strong> 没有填充这些 assert 语句。</p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>isBinaryExpr</code>  和  <code>getGroupedExpression</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 提供的代码中缺少关于  <code>Expression</code>  类的具体信息，使得 LLM 无法生成与这些方法相关的断言。</li>\n</ul>\n<h2 id=\"12\"><a class=\"anchor\" href=\"#12\">#</a> 12</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;type&quot;。确保名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;IMAGE&quot;</code> 。确保值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有描述  <code>NameValue</code>  类的  <code>getName</code> 、 <code>getOp</code>  和  <code>getValue</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少  <code>NameValue</code>  类的详细信息，导致 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"13\"><a class=\"anchor\" href=\"#13\">#</a> 13</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为二元表达式。确保右侧表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"14\"><a class=\"anchor\" href=\"#14\">#</a> 14</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认右侧表达式  <code>rhs</code>  的分组表达式为空。确保右侧表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;subType&quot;。确保右侧表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;sdp&quot;</code> 。确保右侧表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;AND&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并返回操作符字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  和  <code>Expression</code>  类的相关方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"15\"><a class=\"anchor\" href=\"#15\">#</a> 15</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为非二元表达式。确保右侧表达式不是二元表达式，可能是其他类型的表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"16\"><a class=\"anchor\" href=\"#16\">#</a> 16</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNull(ge);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认分组表达式  <code>ge</code>  为空。确保右侧表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>GroupedExpression</code>  对象。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>成功原因：</strong></p>\n<ul>\n<li><strong>方法名称和返回类型明确：</strong>  <code>getGroupedExpression</code>  方法名称和返回类型明确，容易被 LLM 推断和理解。</li>\n<li><strong>存在性检查：</strong>  <code>assertNull</code>  是基本的存在性检查，容易生成。</li>\n</ul>\n<h2 id=\"17\"><a class=\"anchor\" href=\"#17\">#</a> 17</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>象。</li>\n</ul>\n<p>** <code>assertNotNull(nv);</code></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在，确保名称字段为 &quot;description&quot;，操作符字段为 &quot;IS&quot;。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称和操作符字段。</li>\n</ul>\n<p>**  <code>assertEquals(cv.getSysConstant()</code> **</p>\n<ul>\n<li><strong>验证内容：</strong> 验证常量值  <code>cv</code>  是否存在，并确保其系统常量为  <code>NULL</code> 。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>ConstValue</code>  类正确解析并返回系统常量。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在，确保名称字段为 &quot;description&quot;，操作符字段为 &quot;IS&quot;。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称和操作符字段。</li>\n</ul>\n<p>** <code>as</code> **<strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  类的  <code>getName</code>  和  <code>getOp</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"18\"><a class=\"anchor\" href=\"#18\">#</a> 18</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">assertNotNull(cv);</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>** 验证内容：** 验证常量值  <code>cv</code>  是否存在，并确保其系统常量为  <code>NULL</code> 。</li>\n<li>** 依赖性：** 依赖具体的 SUT 输出。需要  <code>ConstValue</code>  类正确解析并返回系统常量。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">assertNull(cv);  <span class=\"comment\">// Assuming null due to &#x27;description IS null&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>ConstValue</code>  类的  <code>getSysConstant</code>  方法和  <code>SystemConsts</code>  常量。LLM 无法推断这些方法和常量的存在及其预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>ConstValue</code>  类的详细信息，导致 LLM 生成了错误的断言。</li>\n</ul>\n<h2 id=\"19\"><a class=\"anchor\" href=\"#19\">#</a> 19</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>** 验证内容：** 验证名称和值对象  <code>nv</code>  是否存在，确保名称字段为 &quot;description&quot;，操作符字段为 &quot;IS&quot;。</p>\n</li>\n<li>\n<p>** 依赖性：** 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称和操作符字段。</p>\n</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  类的  <code>getName</code>  和  <code>getOp</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h2 id=\"20\"><a class=\"anchor\" href=\"#20\">#</a> 20</h2>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv = nv.getValue();</span><br><span class=\"line\">assertNotNull(cv);</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>** 验证内容：** 验证常量值  <code>cv</code>  是否存在，并确保其系统常量为  <code>NOT_NULL</code> 。</p>\n</li>\n<li>\n<p>** 依赖性：** 依赖具体的 SUT 输出。需要  <code>ConstValue</code>  类正确解析并返回系统常量。</p>\n</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv = nv.getValue();</span><br><span class=\"line\">assertNotNull(cv);  <span class=\"comment\">// Assuming not null due to &#x27;description IS not null&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>ConstValue</code>  类的  <code>getSysConstant</code>  方法和  <code>SystemConsts</code>  常量。LLM 无法推断这些方法和常量的存在及其预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>ConstValue</code>  类的详细信息，导致 LLM 生成了错误的断言。</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "LLM",
                "assert"
            ]
        }
    ]
}