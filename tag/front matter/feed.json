{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"front matter\" tag",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/bit/%E4%BA%9A%E5%A4%AA%E6%95%B0%E6%A8%A1%E2%80%94%E2%80%94%E6%B4%AA%E6%B0%B4/",
            "url": "https://enjundu.github.io/bit/%E4%BA%9A%E5%A4%AA%E6%95%B0%E6%A8%A1%E2%80%94%E2%80%94%E6%B4%AA%E6%B0%B4/",
            "title": "亚太数模——洪水",
            "date_published": "2024-07-04T14:49:23.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> statsmodels.api <span class=\"keyword\">as</span> sm</span><br><span class=\"line\"><span class=\"keyword\">import</span> statsmodels.formula.api <span class=\"keyword\">as</span> smf</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LinearRegression</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> r2_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> preprocessing</span><br><span class=\"line\"><span class=\"keyword\">import</span> joblib</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">u&#x27;simHei&#x27;</span>]   <span class=\"comment\"># 显示中文</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span>      <span class=\"comment\"># 解决负号问题</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data_path=<span class=\"string\">&#x27;../Data/train.csv&#x27;</span></span><br><span class=\"line\">train_data = pd.read_csv(train_data_path)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data = train_data.drop(columns=<span class=\"string\">&#x27;id&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X=train_data.drop(columns=<span class=\"string\">&#x27;洪水概率&#x27;</span>)</span><br><span class=\"line\">y=train_data[<span class=\"string\">&#x27;洪水概率&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y=np.array(y)</span><br><span class=\"line\">y=-np.log(<span class=\"number\">1</span>/y-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data[<span class=\"string\">&#x27;洪水概率&#x27;</span>]=y</span><br><span class=\"line\">heat_corr = train_data.corr()[<span class=\"string\">&#x27;洪水概率&#x27;</span>]</span><br><span class=\"line\">heat_corr=heat_corr[:-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">heat_corr.plot(kind=<span class=\"string\">&#x27;bar&#x27;</span>, color=<span class=\"string\">&#x27;skyblue&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;不同因素对洪水概率的影响&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;影响因素&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;corr&#x27;</span>)</span><br><span class=\"line\">plt.grid(axis=<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cosine</span>(<span class=\"params\">a,b</span>):</span><br><span class=\"line\">    dot_product = np.dot(a, b)</span><br><span class=\"line\">    norm_a = np.linalg.norm(a)</span><br><span class=\"line\">    norm_b = np.linalg.norm(b)</span><br><span class=\"line\">    cosine_similarity = dot_product / (norm_a * norm_b) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> cosine_similarity</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\">model_line=LinearRegression()</span><br><span class=\"line\">model_line.fit(X_train,y_train)</span><br><span class=\"line\">y_pred = model_line.predict(X_test)</span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\">score = model_line.score(X_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model score: <span class=\"subst\">&#123;score&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;均方误差为: <span class=\"subst\">&#123;mse&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的系数为: <span class=\"subst\">&#123;model_line.coef_&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的截距为: <span class=\"subst\">&#123;model_line.intercept_&#125;</span>&quot;</span>)</span><br><span class=\"line\">accuracy = cosine(y_test,y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;accuracy&#125;</span>&#x27;</span>)</span><br><span class=\"line\">joblib.dump(model_line,<span class=\"string\">&#x27;../Model/linear.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> GradientBoostingRegressor</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> plot_tree</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"comment\"># 设置迭代次数为100</span></span><br><span class=\"line\">n_estimators = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并训练梯度提升树回归模型</span></span><br><span class=\"line\">gb_model = GradientBoostingRegressor(n_estimators=n_estimators, random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行 K 折交叉验证</span></span><br><span class=\"line\">cv_scores = cross_val_score(gb_model, X_train, y_train, cv=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出每折交叉验证的评分</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每折交叉验证的评分:&quot;</span>, cv_scores)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出交叉验证评分的平均值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;交叉验证评分的平均值:&quot;</span>, np.mean(cv_scores))</span><br><span class=\"line\">gb_model.fit(X_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在测试集上评估模型性能</span></span><br><span class=\"line\">gb_score  = gb_model.score(X_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model Score : <span class=\"subst\">&#123;gb_score&#125;</span>&#x27;</span>)</span><br><span class=\"line\">feature_importances = gb_model.feature_importances_</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征重要性:&quot;</span>, feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 计算每轮迭代的损失值</span></span><br><span class=\"line\">train_loss = np.zeros((gb_model.n_estimators,), dtype=np.float64)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, y_pred <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(gb_model.staged_predict(X_train)):</span><br><span class=\"line\">    train_loss[i] = mean_squared_error(y_train, y_pred)</span><br><span class=\"line\"></span><br><span class=\"line\">test_loss = np.zeros((gb_model.n_estimators,), dtype=np.float64)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, y_pred <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(gb_model.staged_predict(X_test)):</span><br><span class=\"line\">    test_loss[i] = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上进行预测</span></span><br><span class=\"line\">y_pred = gb_model.predict(X_test)</span><br><span class=\"line\">theta = cosine(y_pred,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;theta&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 计算均方误差</span></span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;均方误差为<span class=\"subst\">&#123;mse&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 绘制损失曲线</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(np.arange(<span class=\"number\">1</span>, gb_model.n_estimators + <span class=\"number\">1</span>), train_loss, label=<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.plot(np.arange(<span class=\"number\">1</span>, gb_model.n_estimators + <span class=\"number\">1</span>), test_loss, label=<span class=\"string\">&#x27;Test Loss&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Number of Iterations&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Mean Squared Error&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training and Test Loss&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 可视化特征重要性</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">18</span>))</span><br><span class=\"line\">plt.bar(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(feature_importances)), feature_importances, tick_label=[<span class=\"string\">f&#x27;Feature <span class=\"subst\">&#123;i&#125;</span>&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(feature_importances) + <span class=\"number\">1</span>)])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Feature&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Importance&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Feature Importance&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">joblib.dump(gb_model,<span class=\"string\">&#x27;../Model/gb_tree.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> plot_tree</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"comment\"># 创建并训练决策树回归模型</span></span><br><span class=\"line\">tree_model = DecisionTreeRegressor(random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行 K 折交叉验证</span></span><br><span class=\"line\">cv_scores = cross_val_score(tree_model, X_train, y_train, cv=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出每折交叉验证的评分</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每折交叉验证的评分:&quot;</span>, cv_scores)</span><br><span class=\"line\"><span class=\"comment\"># 输出交叉验证评分的平均值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;交叉验证评分的平均值:&quot;</span>, np.mean(cv_scores))</span><br><span class=\"line\">tree_model.fit(X_train, y_train)</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上评估模型性能</span></span><br><span class=\"line\">tree_score = tree_model.score(X_test, y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Model Score :&quot;</span>, tree_score)</span><br><span class=\"line\"><span class=\"comment\"># 输出特征重要性</span></span><br><span class=\"line\">feature_importances = tree_model.feature_importances_</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征重要性:&quot;</span>, feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 将特征重要性展平</span></span><br><span class=\"line\">feature_importances_flat = np.ravel(feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 可视化特征重要性</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">18</span>))</span><br><span class=\"line\">plt.bar(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(feature_importances_flat)), feature_importances_flat, tick_label=[<span class=\"string\">f&#x27;Feature <span class=\"subst\">&#123;i&#125;</span>&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(feature_importances_flat) + <span class=\"number\">1</span>)])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Feature&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Importance&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Feature Importance&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 绘制决策树树状图</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">50</span>, <span class=\"number\">25</span>))  <span class=\"comment\"># 设置图形大小</span></span><br><span class=\"line\">plot_tree(tree_model, filled=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&#x27;judetree.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上进行预测</span></span><br><span class=\"line\">y_pred = tree_model.predict(X_test)</span><br><span class=\"line\">theta = cosine(y_pred,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;theta&#125;</span>&#x27;</span>)</span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;均方误差为<span class=\"subst\">&#123;mse&#125;</span>&#x27;</span>)</span><br><span class=\"line\">joblib.dump(tree_model,<span class=\"string\">&#x27;../Model/ju_tree.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data_path=<span class=\"string\">&#x27;../Data/train.csv&#x27;</span></span><br><span class=\"line\">train_data = pd.read_csv(train_data_path)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">predict_cluster</span>(<span class=\"params\">kmeans, point</span>):</span><br><span class=\"line\">    cluster_label = kmeans.predict([point])[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cluster_label</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.cluster <span class=\"keyword\">import</span> KMeans</span><br><span class=\"line\">y=train_data[<span class=\"string\">&#x27;洪水概率&#x27;</span>]</span><br><span class=\"line\">data=np.array(y)</span><br><span class=\"line\">kmeans = KMeans(n_clusters=<span class=\"number\">3</span>)</span><br><span class=\"line\">kmeans.fit(data)</span><br><span class=\"line\">cluster_centers = kmeans.cluster_centers_</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sigmod</span>(<span class=\"params\">y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.e**(-y))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyModel</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,model</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.model = model</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">predict</span>(<span class=\"params\">self,X_test</span>) -&gt; np.ndarray:</span><br><span class=\"line\">        y_pred=self.model.predict(X_test)</span><br><span class=\"line\">        y_pred=np.array(y_pred)</span><br><span class=\"line\">        sig=np.vectorize(sigmod)</span><br><span class=\"line\">        y_pred=sig(y_pred)</span><br><span class=\"line\">        vectorized_function = np.vectorize(predict_cluster)</span><br><span class=\"line\">        y_pred=vectorized_function(kmeans,y_pred)</span><br><span class=\"line\">        y_pred=np.array(y_pred)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> y_pred</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">score</span>(<span class=\"params\">self,X_test,y_test</span>):</span><br><span class=\"line\">        y_pred=self.predict(X_test)</span><br><span class=\"line\">        vectorized_function = np.vectorize(predict_cluster)</span><br><span class=\"line\">        y_true=vectorized_function(kmeans,y_test)</span><br><span class=\"line\">        <span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> r2_score</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r2_score(y_true,y_pred)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data_path=<span class=\"string\">&#x27;../Data/train.csv&#x27;</span></span><br><span class=\"line\">train_data = pd.read_csv(train_data_path)</span><br><span class=\"line\">train_data=train_data.drop(columns=<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">X=train_data.drop(columns=<span class=\"string\">&#x27;洪水概率&#x27;</span>)</span><br><span class=\"line\">y=train_data[<span class=\"string\">&#x27;洪水概率&#x27;</span>]</span><br><span class=\"line\">y=np.array(y)</span><br><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class=\"number\">0.2</span>, random_state=<span class=\"number\">42</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">models = [<span class=\"string\">&#x27;linear.pkl&#x27;</span>,<span class=\"string\">&#x27;gb_tree.pkl&#x27;</span>,<span class=\"string\">&#x27;ju_tree.pkl&#x27;</span>]</span><br><span class=\"line\">path = <span class=\"string\">&#x27;../Model&#x27;</span></span><br><span class=\"line\">m_path=<span class=\"string\">&#x27;../Model/3-means&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> model <span class=\"keyword\">in</span> models:</span><br><span class=\"line\">    model_name=model.replace(<span class=\"string\">&#x27;.pkl&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;当前模型为<span class=\"subst\">&#123;model&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    model_path=os.path.join(path,model)</span><br><span class=\"line\">    model = joblib.load(model_path)</span><br><span class=\"line\">    model = MyModel(model)</span><br><span class=\"line\">    <span class=\"comment\"># 这里可以加入模型的预测过程</span></span><br><span class=\"line\">    y_pred = model.predict(X_test)</span><br><span class=\"line\">    vectorized_function = np.vectorize(predict_cluster)</span><br><span class=\"line\">    y_true=vectorized_function(kmeans,y_test)</span><br><span class=\"line\">    mse = mean_squared_error(y_true, y_pred)</span><br><span class=\"line\">    score = model.score(X_test,y_test)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model score: <span class=\"subst\">&#123;score&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;均方误差为: <span class=\"subst\">&#123;mse&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的系数为: <span class=\"subst\">&#123;model_line.coef_&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的截距为: <span class=\"subst\">&#123;model_line.intercept_&#125;</span>&quot;</span>)</span><br><span class=\"line\">    accuracy = cosine(y_true,y_pred)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;accuracy&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> model_name == <span class=\"string\">&#x27;linear.pkl&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;不同指标的权重为&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(model.model.coef_)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;不同指标的权重为&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(model.model.feature_importances_)</span><br><span class=\"line\">    joblib.dump(model,m_path+<span class=\"string\">&#x27;/&#x27;</span>+model_name+<span class=\"string\">&#x27;.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data_path=<span class=\"string\">&#x27;../Data/train.csv&#x27;</span></span><br><span class=\"line\">train_data = pd.read_csv(train_data_path)</span><br><span class=\"line\">train_data = train_data.drop(columns=<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">X=train_data.drop(columns=<span class=\"string\">&#x27;洪水概率&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 在这里进行数据指标的选择</span></span><br><span class=\"line\">X=X[[]]</span><br><span class=\"line\">y=train_data[<span class=\"string\">&#x27;洪水概率&#x27;</span>]</span><br><span class=\"line\">y=np.array(y)</span><br><span class=\"line\">y=-np.log(<span class=\"number\">1</span>/y-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\">model_line=LinearRegression()</span><br><span class=\"line\">model_line.fit(X_train,y_train)</span><br><span class=\"line\">y_pred = model_line.predict(X_test)</span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\">score = model_line.score(X_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model score: <span class=\"subst\">&#123;score&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;均方误差为: <span class=\"subst\">&#123;mse&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的系数为: <span class=\"subst\">&#123;model_line.coef_&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的截距为: <span class=\"subst\">&#123;model_line.intercept_&#125;</span>&quot;</span>)</span><br><span class=\"line\">accuracy = cosine(y_test,y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;accuracy&#125;</span>&#x27;</span>)</span><br><span class=\"line\">joblib.dump(model_line,<span class=\"string\">&#x27;../Model/min20/linear.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> GradientBoostingRegressor</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> plot_tree</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"comment\"># 设置迭代次数为100</span></span><br><span class=\"line\">n_estimators = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并训练梯度提升树回归模型</span></span><br><span class=\"line\">gb_model = GradientBoostingRegressor(n_estimators=n_estimators, random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行 K 折交叉验证</span></span><br><span class=\"line\">cv_scores = cross_val_score(gb_model, X_train, y_train, cv=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出每折交叉验证的评分</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每折交叉验证的评分:&quot;</span>, cv_scores)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出交叉验证评分的平均值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;交叉验证评分的平均值:&quot;</span>, np.mean(cv_scores))</span><br><span class=\"line\">gb_model.fit(X_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在测试集上评估模型性能</span></span><br><span class=\"line\">gb_score  = gb_model.score(X_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model Score : <span class=\"subst\">&#123;gb_score&#125;</span>&#x27;</span>)</span><br><span class=\"line\">feature_importances = gb_model.feature_importances_</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征重要性:&quot;</span>, feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 计算每轮迭代的损失值</span></span><br><span class=\"line\">train_loss = np.zeros((gb_model.n_estimators,), dtype=np.float64)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, y_pred <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(gb_model.staged_predict(X_train)):</span><br><span class=\"line\">    train_loss[i] = mean_squared_error(y_train, y_pred)</span><br><span class=\"line\"></span><br><span class=\"line\">test_loss = np.zeros((gb_model.n_estimators,), dtype=np.float64)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, y_pred <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(gb_model.staged_predict(X_test)):</span><br><span class=\"line\">    test_loss[i] = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上进行预测</span></span><br><span class=\"line\">y_pred = gb_model.predict(X_test)</span><br><span class=\"line\">theta = cosine(y_pred,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;theta&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 计算均方误差</span></span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;均方误差为<span class=\"subst\">&#123;mse&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 绘制损失曲线</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(np.arange(<span class=\"number\">1</span>, gb_model.n_estimators + <span class=\"number\">1</span>), train_loss, label=<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.plot(np.arange(<span class=\"number\">1</span>, gb_model.n_estimators + <span class=\"number\">1</span>), test_loss, label=<span class=\"string\">&#x27;Test Loss&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Number of Iterations&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Mean Squared Error&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training and Test Loss&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 可视化特征重要性</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">18</span>))</span><br><span class=\"line\">plt.bar(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(feature_importances)), feature_importances, tick_label=[<span class=\"string\">f&#x27;Feature <span class=\"subst\">&#123;i&#125;</span>&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(feature_importances) + <span class=\"number\">1</span>)])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Feature&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Importance&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Feature Importance&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">joblib.dump(gb_model,<span class=\"string\">&#x27;../Model/min20/gb_tree.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> plot_tree</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"comment\"># 创建并训练决策树回归模型</span></span><br><span class=\"line\">tree_model = DecisionTreeRegressor(random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行 K 折交叉验证</span></span><br><span class=\"line\">cv_scores = cross_val_score(tree_model, X_train, y_train, cv=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出每折交叉验证的评分</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每折交叉验证的评分:&quot;</span>, cv_scores)</span><br><span class=\"line\"><span class=\"comment\"># 输出交叉验证评分的平均值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;交叉验证评分的平均值:&quot;</span>, np.mean(cv_scores))</span><br><span class=\"line\">tree_model.fit(X_train, y_train)</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上评估模型性能</span></span><br><span class=\"line\">tree_score = tree_model.score(X_test, y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Model Score :&quot;</span>, tree_score)</span><br><span class=\"line\"><span class=\"comment\"># 输出特征重要性</span></span><br><span class=\"line\">feature_importances = tree_model.feature_importances_</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征重要性:&quot;</span>, feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 将特征重要性展平</span></span><br><span class=\"line\">feature_importances_flat = np.ravel(feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 可视化特征重要性</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">18</span>))</span><br><span class=\"line\">plt.bar(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(feature_importances_flat)), feature_importances_flat, tick_label=[<span class=\"string\">f&#x27;Feature <span class=\"subst\">&#123;i&#125;</span>&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(feature_importances_flat) + <span class=\"number\">1</span>)])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Feature&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Importance&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Feature Importance&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 绘制决策树树状图</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">50</span>, <span class=\"number\">25</span>))  <span class=\"comment\"># 设置图形大小</span></span><br><span class=\"line\">plot_tree(tree_model, filled=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&#x27;judetree.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上进行预测</span></span><br><span class=\"line\">y_pred = tree_model.predict(X_test)</span><br><span class=\"line\">theta = cosine(y_pred,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;theta&#125;</span>&#x27;</span>)</span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;均方误差为<span class=\"subst\">&#123;mse&#125;</span>&#x27;</span>)</span><br><span class=\"line\">joblib.dump(tree_model,<span class=\"string\">&#x27;../Model/min20/ju_tree.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">train_data_path=<span class=\"string\">&#x27;../Data/train.csv&#x27;</span></span><br><span class=\"line\">train_data = pd.read_csv(train_data_path)</span><br><span class=\"line\">train_data = train_data.drop(columns=<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">X=train_data.drop(columns=<span class=\"string\">&#x27;洪水概率&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 在这里进行数据指标的选择</span></span><br><span class=\"line\">X=X[[]]</span><br><span class=\"line\">y=train_data[<span class=\"string\">&#x27;洪水概率&#x27;</span>]</span><br><span class=\"line\">y=np.array(y)</span><br><span class=\"line\">y=-np.log(<span class=\"number\">1</span>/y-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\">model_line=LinearRegression()</span><br><span class=\"line\">model_line.fit(X_train,y_train)</span><br><span class=\"line\">y_pred = model_line.predict(X_test)</span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\">score = model_line.score(X_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model score: <span class=\"subst\">&#123;score&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;均方误差为: <span class=\"subst\">&#123;mse&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的系数为: <span class=\"subst\">&#123;model_line.coef_&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;模型的截距为: <span class=\"subst\">&#123;model_line.intercept_&#125;</span>&quot;</span>)</span><br><span class=\"line\">accuracy = cosine(y_test,y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;accuracy&#125;</span>&#x27;</span>)</span><br><span class=\"line\">joblib.dump(model_line,<span class=\"string\">&#x27;../Model/5features/linear.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> GradientBoostingRegressor</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> plot_tree</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"comment\"># 设置迭代次数为100</span></span><br><span class=\"line\">n_estimators = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"comment\"># 创建并训练梯度提升树回归模型</span></span><br><span class=\"line\">gb_model = GradientBoostingRegressor(n_estimators=n_estimators, random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行 K 折交叉验证</span></span><br><span class=\"line\">cv_scores = cross_val_score(gb_model, X_train, y_train, cv=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出每折交叉验证的评分</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每折交叉验证的评分:&quot;</span>, cv_scores)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出交叉验证评分的平均值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;交叉验证评分的平均值:&quot;</span>, np.mean(cv_scores))</span><br><span class=\"line\">gb_model.fit(X_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在测试集上评估模型性能</span></span><br><span class=\"line\">gb_score  = gb_model.score(X_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Model Score : <span class=\"subst\">&#123;gb_score&#125;</span>&#x27;</span>)</span><br><span class=\"line\">feature_importances = gb_model.feature_importances_</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征重要性:&quot;</span>, feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 计算每轮迭代的损失值</span></span><br><span class=\"line\">train_loss = np.zeros((gb_model.n_estimators,), dtype=np.float64)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, y_pred <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(gb_model.staged_predict(X_train)):</span><br><span class=\"line\">    train_loss[i] = mean_squared_error(y_train, y_pred)</span><br><span class=\"line\"></span><br><span class=\"line\">test_loss = np.zeros((gb_model.n_estimators,), dtype=np.float64)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, y_pred <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(gb_model.staged_predict(X_test)):</span><br><span class=\"line\">    test_loss[i] = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上进行预测</span></span><br><span class=\"line\">y_pred = gb_model.predict(X_test)</span><br><span class=\"line\">theta = cosine(y_pred,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;theta&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 计算均方误差</span></span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;均方误差为<span class=\"subst\">&#123;mse&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 绘制损失曲线</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(np.arange(<span class=\"number\">1</span>, gb_model.n_estimators + <span class=\"number\">1</span>), train_loss, label=<span class=\"string\">&#x27;Training Loss&#x27;</span>)</span><br><span class=\"line\">plt.plot(np.arange(<span class=\"number\">1</span>, gb_model.n_estimators + <span class=\"number\">1</span>), test_loss, label=<span class=\"string\">&#x27;Test Loss&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Number of Iterations&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Mean Squared Error&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Training and Test Loss&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 可视化特征重要性</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">18</span>))</span><br><span class=\"line\">plt.bar(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(feature_importances)), feature_importances, tick_label=[<span class=\"string\">f&#x27;Feature <span class=\"subst\">&#123;i&#125;</span>&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(feature_importances) + <span class=\"number\">1</span>)])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Feature&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Importance&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Feature Importance&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">joblib.dump(gb_model,<span class=\"string\">&#x27;../Model/5features/gb_tree.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> plot_tree</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> mean_squared_error</span><br><span class=\"line\"><span class=\"comment\"># 创建并训练决策树回归模型</span></span><br><span class=\"line\">tree_model = DecisionTreeRegressor(random_state=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行 K 折交叉验证</span></span><br><span class=\"line\">cv_scores = cross_val_score(tree_model, X_train, y_train, cv=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出每折交叉验证的评分</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;每折交叉验证的评分:&quot;</span>, cv_scores)</span><br><span class=\"line\"><span class=\"comment\"># 输出交叉验证评分的平均值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;交叉验证评分的平均值:&quot;</span>, np.mean(cv_scores))</span><br><span class=\"line\">tree_model.fit(X_train, y_train)</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上评估模型性能</span></span><br><span class=\"line\">tree_score = tree_model.score(X_test, y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Model Score :&quot;</span>, tree_score)</span><br><span class=\"line\"><span class=\"comment\"># 输出特征重要性</span></span><br><span class=\"line\">feature_importances = tree_model.feature_importances_</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征重要性:&quot;</span>, feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 将特征重要性展平</span></span><br><span class=\"line\">feature_importances_flat = np.ravel(feature_importances)</span><br><span class=\"line\"><span class=\"comment\"># 可视化特征重要性</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">30</span>, <span class=\"number\">18</span>))</span><br><span class=\"line\">plt.bar(<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(feature_importances_flat)), feature_importances_flat, tick_label=[<span class=\"string\">f&#x27;Feature <span class=\"subst\">&#123;i&#125;</span>&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(feature_importances_flat) + <span class=\"number\">1</span>)])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Feature&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Importance&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Feature Importance&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 绘制决策树树状图</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">50</span>, <span class=\"number\">25</span>))  <span class=\"comment\"># 设置图形大小</span></span><br><span class=\"line\">plot_tree(tree_model, filled=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&#x27;judetree.png&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"><span class=\"comment\"># 在测试集上进行预测</span></span><br><span class=\"line\">y_pred = tree_model.predict(X_test)</span><br><span class=\"line\">theta = cosine(y_pred,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;余弦相似度为<span class=\"subst\">&#123;theta&#125;</span>&#x27;</span>)</span><br><span class=\"line\">mse = mean_squared_error(y_test, y_pred)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;均方误差为<span class=\"subst\">&#123;mse&#125;</span>&#x27;</span>)</span><br><span class=\"line\">joblib.dump(tree_model,<span class=\"string\">&#x27;../Model/5features/ju_tree.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_path = <span class=\"string\">&#x27;../Data/test.csv&#x27;</span></span><br><span class=\"line\">data=pd.read_csv(data_path)</span><br><span class=\"line\">data=data.drop(columns=[<span class=\"string\">&#x27;id&#x27;</span>,<span class=\"string\">&#x27;洪水概率&#x27;</span>])</span><br><span class=\"line\">model_path=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">model=joblib.load(path)</span><br><span class=\"line\">y_pred=model.predict(data)</span><br><span class=\"line\">data_path=<span class=\"string\">&#x27;../Data/submit.csv&#x27;</span></span><br><span class=\"line\">df=pd.read_csv(data_path)</span><br><span class=\"line\">sig=np.vectorize(sigmod)</span><br><span class=\"line\">y_pred=sig(y_pred)</span><br><span class=\"line\">df[<span class=\"string\">&#x27;洪水概率&#x27;</span>]=y_pred</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;../Data/submit.csv&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>,index=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data=y_pred</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第一个子图：直方图</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.hist(data, bins=<span class=\"number\">30</span>, alpha=<span class=\"number\">0.5</span>, color=<span class=\"string\">&#x27;blue&#x27;</span>, edgecolor=<span class=\"string\">&#x27;black&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Histogram&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Value&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Frequency&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二个子图：折线图</span></span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.plot(data, color=<span class=\"string\">&#x27;red&#x27;</span>, linestyle=<span class=\"string\">&#x27;-&#x27;</span>, marker=<span class=\"string\">&#x27;o&#x27;</span>, markersize=<span class=\"number\">3</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Line Plot&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Index&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Value&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示图表</span></span><br><span class=\"line\">plt.tight_layout()</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scipy.stats <span class=\"keyword\">as</span> stats</span><br><span class=\"line\"><span class=\"comment\"># Kolmogorov-Smirnov Test</span></span><br><span class=\"line\">ks_stat, ks_p = stats.kstest((data - np.mean(data)) / np.std(data), <span class=\"string\">&#x27;norm&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\nKolmogorov-Smirnov Test:&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Statistics:&quot;</span>, ks_stat)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;p-value:&quot;</span>, ks_p)</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "recommendation"
            ]
        },
        {
            "id": "https://enjundu.github.io/bit/%E4%BA%9A%E5%A4%AA%E6%95%B0%E6%A8%A1%E2%80%94%E2%80%94%E6%96%B0%E8%83%BD%E6%BA%90%E6%B1%BD%E8%BD%A6/",
            "url": "https://enjundu.github.io/bit/%E4%BA%9A%E5%A4%AA%E6%95%B0%E6%A8%A1%E2%80%94%E2%80%94%E6%96%B0%E8%83%BD%E6%BA%90%E6%B1%BD%E8%BD%A6/",
            "title": "亚太数模——新能源汽车",
            "date_published": "2024-07-04T14:49:23.000Z",
            "content_html": "<h2 id=\"abstract\"><a class=\"markdownIt-Anchor\" href=\"#abstract\">#</a> ABSTRACT</h2>\n<p>This study presents a comprehensive analysis of new energy electric vehicles (NEEVs) in China, employing a range of statistical methods and advanced algorithms. Using tools such as MATLAB, SPSS, and Excel, the research systematically addresses several critical questions regarding the development, impact, and future trajectory of NEEVs.</p>\n<ol>\n<li><strong>Development of NEEVs in China</strong>: The study investigates the rapid growth of NEEVs in China, highlighting the influence of technological advancements and supportive government policies. An upward trend in vehicle ownership and market size is revealed, attributed to factors such as government subsidies, carbon emissions, and advancements in battery technology.</li>\n<li><strong>Predictive Modeling</strong>: Predictive models, including multiple regression, ARIMA time series, and random forest algorithms, are employed to forecast the development of NEEVs over the next decade. The models indicate robust growth in sales and market penetration, driven by reduced costs and technological improvements.</li>\n<li><strong>Market Dynamics</strong>: The research delves into the specific factors affecting the NEEV market in China, identifying key contributors such as patent applications, subsidies, and battery capacities. Regression analysis shows a positive relationship between these factors and the growth of NEEV ownership and market size.</li>\n<li><strong>Impact on Traditional Energy Vehicles</strong>: The study assesses the impact of NEEVs on the global traditional energy vehicle industry, indicating a market transition favoring electric vehicles. This shift is driven by technological advancements, economic considerations, and environmental benefits associated with electric vehicles.</li>\n<li><strong>Government and International Policies</strong>: The analysis extends to the effects of international policies on the development of NEEVs in China. Policies from countries like Germany, Japan, and the United States are examined, revealing their influence on China’s NEEV market dynamics.</li>\n<li><strong>Ecological Benefits</strong>: The study evaluates the ecological benefits of NEEVs, particularly in urban areas. It highlights significant reductions in carbon emissions when conventional vehicles are replaced with electric ones, underscoring the environmental advantages of NEEV adoption.</li>\n</ol>\n<p>In conclusion, the paper provides a detailed evaluation of the NEEV market in China, offering valuable insights into its development, market dynamics, and future prospects. The findings underscore the importance of NEEVs in fostering environmental sustainability and economic growth.</p>\n<p><strong>Keywords</strong>: New Energy Electric Vehicles, Statistical Analysis, ARIMA, GA-BP Neural Network, Random Forest, Market Trends, Environmental Sustainability.</p>\n<p><em><strong>*Content*</strong></em></p>\n<p><em><strong>*ABSTRACT*</strong></em>\t<em><strong>*1*</strong></em></p>\n<p><em><strong>*Content*</strong></em>\t2</p>\n<p><em><strong>*1.*</strong></em>\t<em><strong>*Introduction*</strong></em>\t3</p>\n<p>1.2 Problem background\t3</p>\n<p>1.3 Restatement of the Problem\t3</p>\n<p>1.4 Our work\t4</p>\n<p><em><strong>*2.*</strong></em>\t<em><strong>*Assumptions and Justifications.*</strong></em>\t6</p>\n<p><em><strong>*3.*</strong></em>\t****Notation****s\t6</p>\n<p><em><strong>*4.*</strong></em>\t<em><strong>*Data Desceiption*</strong></em>\t7</p>\n<p>4.1Data Collection\t7</p>\n<p>4.2 Data Cleaning\t7</p>\n<p><em><strong>*5.Models and solutions*</strong></em>\t8</p>\n<p>5.1 Analyzing the main factors affecting the development of new energy electric vehicles in China\t8</p>\n<p>5.2 Predicting the future development of new energy electric vehicles in China in the next 10 years.\t12</p>\n<p>5.3 Collect data and establish a mathematical model to analyze the impact of new energy electric vehicles on the global traditional energy vehicle industry.\t19</p>\n<p>5.4 Some countries have formulated a series of policies targeted to resist the development of new energy electric vehicles in China. Establish a mathematical model to analyze the effects of these policies on the development of new energy electric vehicles in China.\t23</p>\n<p>5.6 Based on the conclusion of question 5, write an open letter to the citizens to publicize the benefits of new energy electric vehicles and the contributions of the electric vehicle industry in various countries around the world.\t25</p>\n<p><em><strong>*Appendi*</strong></em><em><strong>*x*</strong></em>\t27</p>\n<p>\\1. <strong>Introduction</strong></p>\n<p><strong>1.1</strong> <em><strong>*Problem background*</strong></em></p>\n<p>New energy vehicles refer to vehicles with advanced technical principles, new</p>\n<p>technologies and new structures, which use unconventional vehicle fuel as their power source (unconventional automotive fuels refer to fuels other than gasoline and diesel) and integrate advanced technologies in vehicle power control and drive. New energy vehicles include four major types: hybrid electric vehicles, pure electric vehicles, fuel cell electric vehicles, and other new energy vehicles. As a type of new energy vehicle, new energy electric vehicles have achieved rapid development in recent years due to their properties of low pollution, low energy consumption, and ability to regulate peak electricity consumption. New energy electric vehicles, including electric buses and family electric cars with less than 7 seats, have been popular with consumers and governments around the world.</p>\n<p>Since 2011, the Chinese government has actively promoted the development of new energy electric vehicles and formulated a series of preferential policies. The new energy electric vehicle industry has achieved tremendous development, gradually becoming another Chinese symbol after the “China High Speed Railway”.</p>\n<p><strong>1.2</strong> <em><strong>*Restatement of the Problem*</strong></em></p>\n<p><em><strong>*problem*</strong></em> <em><strong>*1*</strong></em></p>\n<p>Analyze the main factors that affect the development of new energy electric vehicles in China, establish a mathematical model, and describe the impact of these factors on the development of new energy electric vehicles in China.</p>\n<p><em><strong>*problem*</strong></em> <em><strong>*2*</strong></em></p>\n<p>Collect industry development data on China’s new energy electric vehicles, establish a mathematical model to describe and predict the development of China’s new energy electric vehicles in the next 10 years.</p>\n<p><em><strong>*problem*</strong></em> <em><strong>*3*</strong></em></p>\n<p>Collect data and establish a mathematical model to analyze the impact of new energy electric vehicles on the global traditional energy vehicle industry.</p>\n<p><em><strong>*problem*</strong></em> <em><strong>*4*</strong></em></p>\n<p>Some countries have formulated a series of policies targeted to resist the development of new energy electric vehicles in China. Establish a mathematical model to analyze the effects of these policies on the development of new energy electric vehicles in China.2</p>\n<p><em><strong>*problem*</strong></em> <em><strong>*5*</strong></em></p>\n<p>Analyze the impact of the electrification of new energy electric vehicles (including electric buses) in cities on the ecological environment. Assuming that there is an urban population of 1 million, provide the calculation results of the model.</p>\n<p><em><strong>*problem*</strong></em> <em><strong>*6*</strong></em></p>\n<p>Based on the conclusion of question 5, write an open letter to the citizens to publicize the benefits of new energy electric vehicles and the contributions of the electric vehicle industry in various countries around the world.</p>\n<p><strong>1.3</strong> <em><strong>*Our work*</strong></em></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/UbNpk4d2zYBxO1s.png\" alt=\"image.png\"></p>\n<p><strong>1.1.1</strong> <em><strong>*problem 1*</strong></em></p>\n<p>In analyzing China’s new energy electric vehicles, we identified key factors like vehicle ownership and market size as dependent variables and included patent applications, subsidies, carbon emissions, battery capacities, vehicle price, and market penetration as independent variables. Our regression analysis showed an upward trend in vehicle ownership, suggesting a positive development in the sector. We addressed variable collinearity and established a robust model, highlighting the significant relationship between vehicle ownership, yearly changes, patent applications, and subsidy amounts.</p>\n<p><strong>1.1.2</strong> <em><strong>*Problem 2*</strong></em></p>\n<p>Our study predicts a bright future for China’s new energy vehicles, with sales trends showing considerable growth since 2013. Using a multiple linear regression model based on 19 independent variables, we forecasted the sector’s growth for the next decade. The model exhibited an excellent fit, accurately mirroring the actual sales trends and projecting a continued rise in new energy vehicle sales.</p>\n<p><strong>1.1.3</strong> <em><strong>*Problem 3*</strong></em></p>\n<p>Our research involved extensive data preparation and exploratory analysis to understand the impact of electric vehicles on the traditional energy vehicle industry. By employing time series, scatter plots, and correlation matrices, we established a VAR model to analyze the dynamic relationship between electric and traditional vehicle sales. The results indicated a significant influence of electric vehicle growth on the traditional vehicle market, informing policy implications and future industry trends.</p>\n<p><strong>1.1.4</strong> <em><strong>*Problem 4*</strong></em></p>\n<p>This section assessed how international policies like Germany and Japan’s opposition, the US Inflation Reduction Act, and the EU’s investigation into Chinese electric vehicles affected China’s market. Our analysis, based on export data and policy impacts in 2022 and 2023, revealed that these policies have somewhat hindered the growth of China’s new energy vehicle exports.</p>\n<p><strong>1.1.5</strong> <em><strong>*Problem 5*</strong></em></p>\n<p>Our study evaluated the ecological benefits of electrifying vehicles in urban areas. By comparing carbon emissions from traditional and electric vehicles, we concluded that a complete switch to electric vehicles could drastically reduce carbon emissions in a city of one million people, emphasizing the environmental advantages of electric vehicle adoption.</p>\n<p><strong>1.1.6</strong> <em><strong>*Problem 6*</strong></em></p>\n<p>In an open letter to citizens, we highlighted the significant role of new energy electric vehicles in achieving a sustainable future. The letter underlined the environmental and technological benefits of electric vehicles, noting advancements in battery technology and smart systems. We encouraged public recognition of these benefits and the positive future outlook for the electric vehicle industry.</p>\n<p>\\1. <strong>Assumptions and Justifications</strong>**.**</p>\n<p><strong>A****ssumption 1:</strong> It is assumed that the data in each form is real and valid, and the sampling error is small. Only when the model is built on real data can reliable prediction results be obtained.</p>\n<p><strong>A****ssumption 2:</strong> It is assumed that the influence of other factors such as Consumer Acceptance is not considered. The model selects some factors that have a greater impact on vehicle ownership, vehicle market size and etc. as independent variables. Only by ignoring the influence of other factors can be reasonable prediction equation be obtained.</p>\n<p><strong>A****ssumption 3</strong>: It is assumed that the data obtained from the search has a certain degree of credibility and rationality. And the data is relatively complete.</p>\n<p>\\2. <strong>Notations</strong></p>\n<p><strong>Table</strong> <strong>1</strong> <strong>Symbol</strong> <strong>Description</strong></p>\n<table>\n<thead>\n<tr>\n<th><em><strong>*Symbol*</strong></em></th>\n<th><em><strong>*Explanation*</strong></em></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em><strong>*β*</strong></em></td>\n<td>the coefficient of x</td>\n</tr>\n<tr>\n<td><em><strong>*X*</strong></em><em><strong>*Y*</strong></em></td>\n<td>self variantimplicit variant</td>\n</tr>\n</tbody>\n</table>\n<p>\\3. <strong>Data Desceiption</strong></p>\n<p><em><strong>*4.1Data Collection*</strong></em></p>\n<p>Due to the fact that the mathematical modeling problem in this study is related to the development of new energy vehicles, in order to collect datasets related to the development of new energy vehicles, we searched many databases. The data in these databases are all related to new energy vehicles, and due to the different types of data provided by different databases, we integrated the data on an annual basis into a table. Below are the sources of the data and the meanings of variables.</p>\n<p><em><strong>*Table 2 Dataset source*</strong></em></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/CnsZD9HIi3qmerM.png\" alt=\"image.png\"></p>\n<p><em><strong>*4.2 Data Cleaning*</strong></em></p>\n<p><em><strong>*4.2.1 Data missing value processing*</strong></em></p>\n<p>Due to the different departments and cycles of data recording, the amount of data in different data sets is not the same. In order to make the data sets of each variable available, the missing values in the data sets should be dealt with accordingly. In this paper, the regression interpolation method based on the serial trend is used to deal with the missing values of the data.</p>\n<p><em><strong>*4.2.2 Data Standardization processing*</strong></em></p>\n<p>Since each variable has different units and orders of magnitude, we standardize each data in order to facilitate the construction of our multiple regression model. In this paper, z-scores are used to process the data. It can be expressed by the following equation:</p>\n<p>*z=(x-μ)/*<em>σ</em>\t\t\t\t\t\t\t\t\t（1）</p>\n<p><em><strong>*4.2.3 Factor correlation analysis chart*</strong></em></p>\n<p>According to the following correlation coefficient heatmap, it can be seen that when New energy vehicle ownership (10000 vehicles) and New Energy Vehicle Market Size (RMB bill) are used as dependent variables, their values are related to Year, Number of patient applications for new energy vehicles (items), Amount of subsidiaries for new energy vehicles (RMB bill), Total carbon emissions (miles of tons) Lithium iron phosphate power battery installed capacity/GWh, installed capacity of term battery/GWh, and weighted average price of new energy vehicles ($10000) are all related. And the correlation coefficients are relatively large (greater than 0.8 and mostly 0.95-1)</p>\n<p>Therefore, the quantities we collected all have strong correlation, and they can all be used as independent variables to predict the sales or development of new energy vehicles.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/M3q9CDOzgfIFwJN.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture2 Correlation coefficient heat map*</strong></em></p>\n<p><strong>5.Models and solutions</strong></p>\n<p><em><strong>*5.1 Analyzing the main factors affecting the development of new energy electric vehicles in China*</strong></em></p>\n<p><em><strong>*（1）Data collection*</strong></em></p>\n<p>We organize the collected data and set Year as an irrelevant variable, but changes in Year will affect the subsequent changes, so we keep Year. then we set New energy vehicle ownership (10,000 vehicles) and New Energy Vehicle Market Size (RMB billion) as dependent variables because our group believes that changes in these two variables can reflect changes in the development of new energy electric vehicles in China. Then we set Number of patent applications for new energy vehicles (items), Amount of subsidies for new energy vehicles (RMB billion), Total carbon emissions ( millions of tons), Lithium iron phosphate power battery installed capacity/GWh, Installed capacity of ternary battery/GWh, Weighted average price of new energy vehicles ($10,000), New energy vehicle market penetration (%) are set as independent variables, considering that they are the main factors affecting the change of the dependent variable.</p>\n<p>Therefore, we design the statistical graph as shown below.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/f4hN28J9a1mEk6X.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture3 Statistical data on factors affecting the development of new energy vehicles*</strong></em></p>\n<p><strong>（2）</strong><em><strong>*New energy vehicle ownership (10,000 vehicles) multiple regression curve*</strong></em></p>\n<p>According to the change of New energy vehicle ownership (10,000 vehicles) and its first-order difference curve over the years, it can be seen that New energy vehicle ownership (10,000 vehicles) shows an upward trend, so the factors in the multivariate regression curve of New energy vehicle ownership (10,000 vehicles) should generally show an upward trend after weighting. Therefore, the factors in the multiple regression curve of New energy vehicle ownership (10,000 vehicles) should be in an upward trend after weighting in general. And we can also know that the curve of New energy vehicle ownership (10,000 vehicles) is accelerating in general.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/waLd5vgBN1xM4pt.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture4 Vehicle ownership and its first-order difference curve vary with year*</strong></em></p>\n<p>The analysis of the results of the F-test shows that the P-value of significance is 0.001 * * *, which is significant at the level and rejects the null hypothesis of a regression coefficient of 0. Therefore, the model basically meets the requirements.</p>\n<p>For the collinearity performance of variables, the VIF values of Year, Number of patent applications for new energy vehicles (items), Amount of subsidiaries for new energy vehicles (RMB bill), Total carbon emissions (miles of tons), Lithium iron phase power battery installed capacity/GWh, Installed capacity of term battery/GWh, Weighted average price of new energy vehicles ($10000) are greater than 10, There is a collinear relationship, so it is easy to remove the collinear independent variables or perform ridge regression or stepwise regression.</p>\n<p>The formula of the model is as follows: y=-0.046-0.507 * Year -0.155 * Number of patient applications for new energy vehicles (items)+1.81 * Amount of subsidiaries for new energy vehicles (RMB bill)+0.028 * Total carbon emissions (miles of tons) -0.556 * Lithium iron phase power battery installed capacity/GWh+1.402 * Installed capacity of term battery/GWh+44.817 * Weighted average price of new energy vehicles ($10000).</p>\n<p>This also confirms that the fit is very good.</p>\n<p><strong>Table3 Table of results of linear regression analysis</strong></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/eT6WKdN4sLfBkYz.png\" alt=\"image.png\"></p>\n<p New=\"\" energy=\"\" vehicle=\"\" ownership=\"\" (10000=\"\" vehicles)=\"\">The following figure shows the independent variables X: {Year, Number of patient applications for new energy vehicles (items), Amount of subsidiaries for new energy vehicles (RMB bill), Total carbon emissions (miles of tons), Lithium iron phase power battery installed capacity/GWh, Installed capacity of term battery/GWh, Weighted average price of new energy vehicles ($10000)}; The relationship between the dependent variable Y:</p>\n<p>We order:</p>\n<p>y=New energy vehicle ownership (10,000 vehicles)</p>\n<p><em>x</em>1=Year</p>\n<p><em>x</em>2=Number of patent applications for new energy vehicles (items)</p>\n<p><em>x</em>3=Amount of subsidies for new energy vehicles (RMB billion)</p>\n<p><em>x</em>4=Total carbon emissions (millions of tons)</p>\n<p><em>x</em>5=Lithium iron phosphate power battery installed capacity/GWh</p>\n<p><em>x</em>6=Installed capacity of ternary battery/GWh</p>\n<p><em>x</em>7=Weighted average price of new energy vehicles ($10,000)</p>\n<p>According to the statistics listed above,we could get this function：</p>\n<p>y=-0.046-0.507<em>x</em>1-0.155<em>x</em>2+1.81<em>x</em>3+0.028<em>x</em>4-0.556<em>x</em>5+1.402<em>x</em>6+44.817<em>x</em>7（2）</p>\n<p><strong>Table4 multivariate regression coefficient value</strong></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/Sa6Z4jpmUWsYM21.png\" alt=\"image.png\"></p>\n<p>The following graph shows the raw data plot, model fitted values, and model predicted values for this model.</p>\n<p>According to the graph, the fit is very good.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/oG1wCaSuvhMyKEj.png\" alt=\"image.png\"></p>\n<p><strong>Picture5 Comparison of model fit and true value</strong></p>\n<p>Based on the resultant fit we know that the predicted value of New energy vehicle ownership (10,000 vehicles) is very close to the true value and the fit is successful.</p>\n<p><strong>（3）</strong><em><strong>*New Energy Vehicle Market Size (RMB billion) multiple regression curve*</strong></em></p>\n<p><em><strong>*In the same way as above, we can obtain a set of equations：*</strong></em></p>\n<p>New Energy Vehicle Market Size (RMB billion)=-0.569-6.291（Year）-1.893*（Number of patent applications for new energy vehicles (items)）+28.455*（Amount of subsidies for new energy vehicles (RMB billion)）+0.344（Total carbon emissions (millions of tons)）-5.866*（Lithium iron phosphate power battery installed capacity/GWh）+16.201*（Installed capacity of ternary battery/GWh）+559.405*（Weighted average price of new energy vehicles ($10,000)）</p>\n<p><strong>（4）</strong><em><strong>*Analyzing and summarizing the first question*</strong></em></p>\n<p>In general, government subsidies, total carbon emissions, installed capacity of ternary batteries, and the weighted average price of new energy vehicles have a positive impact on the market size, while the number of patent applications and the installed capacity of lithium iron phosphate power batteries have a negative impact.</p>\n<p>However, from my perspective, an increase in the number of patent applications may signify the growing applicability of patents to new energy vehicles. Additionally, as the development of lithium iron phosphate power batteries matures, it is likely to have a positive impact on the market size. We recognize that during the initial stages of technological development, significant investments are required, and any short-term negative impacts may be inconsequential. Following our group research, a consensus has emerged that these factors will likely contribute positively to the new energy vehicle market in the future.</p>\n<p>Therefore, it is conceivable that a higher number of patent applications could reflect increased technological relevance to new energy vehicles, and the mature development of lithium iron phosphate power batteries may eventually contribute positively to the market size. As our group collectively believes, these factors are expected to benefit the new energy vehicle market substantially in the future.</p>\n<p><em><strong>*5.2 Predicting the future development of new energy electric vehicles in China in the next 10 years.*</strong></em></p>\n<p>(1)<em><strong>*Preliminary trend of increase/decrease based on sales graphs*</strong></em></p>\n<p>The sales of new energy vehicles year by year according to the year - sales plotted as the following curve, from which we can see that the sales of new energy vehicles and the year between the year does have a rising trend, and we can see that the sales of new energy vehicles in the initial emergence of the trend of low-frequency slow growth in about 2013, and in 2020 after the trend of high rate of growth, the analysis of the world’s new energy science and technology and the Chinese government’s new energy vehicle policy support and other factors, to be discussed in the follow-up.<img data-src=\"https://s2.loli.net/2024/07/04/nysUCTQd6HGLNzp.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture6 Year vs. graph Production and sales of new energy vehicles (10,000 units)*</strong></em></p>\n<p>After the sales of new energy vehicles are processed by the first-order difference, the obtained first-order difference-year graph shows an exponential growth trend, which generally shows a relatively smooth first and a rapid growth trend until the beginning of 2020. Overall it is still in the form of growth.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/aBuoMKwGljnqWkF.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture*</strong></em><em><strong>*7 first-order difference in value Production and sales of new energy vehicles*</strong></em></p>\n<p><strong>(2)</strong> <em><strong>*Modeling based on multiple regression linear curves*</strong></em></p>\n<p>(3) Combining examples and research, we can find that the change of annual sales of new energy vehicles is related to Year、New energy vehicle ownership (10,000 vehicles)、New Energy Vehicle Market Size (RMB billion)、New energy vehicle market penetration (%)、New Energy Vehicle YoY Growth Rate (%)、Number of new energy vehicle enterprises (number)、Number of patent applications for new energy vehicles (items)、Scale of new energy vehicle industry chain (home)、Number of charging piles for new energy vehicles (10,000)、Coverage of new energy vehicle charging infrastructure (%)、Amount of subsidies for new energy vehicles (RMB billion)、Market penetration of conventional fuel vehicles (%)、Total carbon emissions in the Yangtze River Delta region (million tons)、Production and sales of conventional vehicles (10,000 units)、Conventional Vehicles YoY Growth Rate (%)、Lithium iron phosphate power battery installed capacity/GWh、Installed capacity of ternary battery/GWh、Total carbon emissions (millions of tons)、Weighted average price of new energy vehicles ($10,000)and other variable factors are closely related.</p>\n<p>Therefore, we will model the relationship between Production and sales of new energy vehicles (10,000 units) and the other 19 independent variables based on the collected dataset.And the model’s conclusions are used to predict the development of new energy electric vehicles in China over the next decade.</p>\n<p>​\t⚫ Build multiple linear models</p>\n<p>We order:</p>\n<p><em>x</em>1=Year</p>\n<p><em>x</em>2=New energy vehicle ownership (10,000 vehicles)</p>\n<p><em>x</em>3=New Energy Vehicle Market Size (RMB billion)</p>\n<p><em>x</em>4=New energy vehicle market penetration (%)</p>\n<p><em>x</em>5=New Energy Vehicle YoY Growth Rate (%)</p>\n<p><em>x</em>6=Number of new energy vehicle enterprises (number)</p>\n<p><em>x</em>7=Number of patent applications for new energy vehicles (items)</p>\n<p><em>x</em>8=Scale of new energy vehicle industry chain (home)</p>\n<p><em>x</em>9=Number of charging piles for new energy vehicles (10,000)</p>\n<p><em>x</em>10=Coverage of new energy vehicle charging infrastructure (%)</p>\n<p><em>x</em>11=Amount of subsidies for new energy vehicles (RMB billion)</p>\n<p><em>x</em>12=Market penetration of conventional fuel vehicles (%)</p>\n<p><em>x</em>13=Total carbon emissions in the Yangtze River Delta region (million tons)</p>\n<p><em>x</em>14=Production and sales of conventional vehicles (10,000 units)</p>\n<p><em>x</em>15=Conventional Vehicles YoY Growth Rate (%)</p>\n<p><em>x</em>16=Lithium iron phosphate power battery installed capacity/GWh</p>\n<p><em>x</em>17=Installed capacity of ternary battery/GWh</p>\n<p><em>x</em>18=Total carbon emissions (millions of tons)</p>\n<p><em>x</em>19=Weighted average price of new energy vehicles ($10,000)</p>\n<p>y=β0+β1<em>x</em>1+β2<em>x</em>2+β3<em>x</em>3+β4<em>x</em>4+β5<em>x</em>5+β6<em>x</em>6+β7<em>x</em>7+β8<em>x</em>8+β9<em>x</em>9+β10<em>x</em>10+β11<em>x</em>11+β12<em>x</em>12+β13<em>x</em>13+β14<em>x</em>14+β15<em>x</em>15+β16<em>x</em>16+β17<em>x</em>17+β18<em>x</em>18+β19<em>x</em>19 \t\t\t\t\t\t\t\t\t\t\t\t<strong>(<strong><strong>3</strong></strong>)</strong></p>\n<p>Using the python code for the multiple regression algorithm (Appendix 1), we can get the value of this multiple regression equation as:</p>\n<p>y=-175.361921+0.786334<em>x</em>1+4.674333<em>x</em>2+0.133171<em>x</em>3+1.340155<em>x</em>4+0.203066<em>x</em>5+5.114536<em>x</em>6-1.460884<em>x</em>7+0.602279<em>x</em>8+2.367206<em>x</em>9-7.039104<em>x</em>10+7.524213<em>x</em>11-1.340155<em>x</em>12-0.623688<em>x</em>13+0.488335<em>x</em>14-6.786688<em>x</em>15-2.279974<em>x</em>16+5.143792<em>x</em>17-0.075757<em>x</em>18+0.393167<em>x</em>19\t\t\t\t\t\t\t\t\t\t\t\t\t\t  <strong>(<strong><strong>4</strong></strong>)</strong></p>\n<p>​</p>\n<p><strong>Table****5</strong> <strong>Model</strong> <strong>Summary</strong></p>\n<table>\n<thead>\n<tr>\n<th>Model</th>\n<th>R</th>\n<th>R square</th>\n<th>Adjust R square</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>0.930</td>\n<td>0.865</td>\n<td>0.980</td>\n</tr>\n</tbody>\n</table>\n<p>According to the multiple regression model it is shown that the model R is 0.930, the square of R is 0.865 and the adjusted R square value is 0.980, which indicates a very good fit.</p>\n<p>Hypothesis is raised in F-test: all coefficients are 0. From the ANOVA table (see appendix), it can be seen that the p value of the F test is &lt;0.001, and the null hypothesis is rejected at the significance level of 0.05, and the test is passed.</p>\n<p>We substituted formulas to calculate projected annual sales based on the values of the other nineteen formulas (the algorithm is attached in the Appendix), and then calculated a graph of year-annual sales - projected sales as follows.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/OjX4MycbRzuod8W.png\" alt=\"image.png\"></p>\n<p><em><strong>*picture8 imagery of year-annual sales - projected sales*</strong></em></p>\n<p>From the above figure, we can find that the number of expected annual sales and the actual number of annual sales is really too close, leading to the fact that we may wonder whether there is a second line drawn, so we do not put a different way of thinking, to make the number of expected annual sales - the actual number of annual sales of the x-y curve, we can clearly see that the slope of the image k = 1, and the intercept is only -0.0046, which is very small, so you can approximate that the predicted results are exactly the same as the actual results. The fit is valid.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/W7yidw4JYGRtPUK.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture9 Forecasted - Actuall Number of units sold*</strong></em></p>\n<p>From the graph I gave and the formula new energy vehicle production and sales (10,000 units) = -175.361921 + 0.786334 × year + 4.674333 × new energy vehicle ownership (10,000 units) + 0.133171 × new energy vehicle market size (100 million yuan) + 1.340155 × new energy vehicle market penetration rate (%) + 0.203066 × new energy vehicle vehicle chain growth rate (%) +5.114536×number of new energy vehicle enterprises (home) ±1.460884×number of new energy vehicle patent applications (item) +0.602279×size of new energy vehicle industry chain (home) +2.367206×number of new energy vehicle charging piles (10,000 pcs) ±7.039104×coverage of new energy vehicle charging infrastructure ( %) + 7.524213 × amount of subsidies for new energy vehicles (RMB 100 million) + -1.340155 × market penetration rate of traditional fuel vehicles (%) + -0.623688 × total carbon emissions in the Yangtze River Delta region (millions of tons) + 0.488335 × production and sales volume of traditional vehicles (10,000 vehicles) + -6.786688 × chain growth rate of traditional vehicles (%) + - 2.279974×Lithium iron phosphate power battery installed volume/GWh+5.143792×Ternary battery installed volume/GWh± can be known.</p>\n<p>\\1. New energy vehicle production and sales (10,000 units) and year, new energy vehicle ownership (10,000 units), new energy vehicle market size (RMB 100 million), new energy vehicle market penetration rate (%), new energy vehicle chain growth rate (%), number of new energy vehicle enterprises (home), new energy vehicle industry chain size (home) new energy vehicle industry chain size (home), number of new energy vehicle charging piles (10,000) The independent variables of new energy vehicle subsidy amount (RMB 100 million), installed capacity of ternary batteries/GWh, and weighted average price of new energy vehicles (RMB 10,000) are positively correlated.</p>\n<p>\\2. Negative correlation with total carbon emissions (million tons), chain growth rate of conventional vehicles (%), etc.</p>\n<p>From the following change curves of the respective variables, it can be seen that the total sales volume of new energy vehicles (10,000 units) will grow exponentially in the next ten years.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/BwtxHlyNRXcsh3g.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture10 The variation curve of each variable over the year（1）*</strong></em></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/2wXANi7ZkCgn4FW.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture11 Comparison of Market Penetration Rates of Conventional and New Energy Vehicles*</strong></em></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/5PZpFxaSj2vr8Xo.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture12 The variation curve of each variable over the year（2）*</strong></em></p>\n<p>In summary, I have the following views on the development of new energy vehicles in China in the next decade:</p>\n<p>\\1. In the next decade, the number of new energy vehicles (10000 units) will steadily increase, currently showing a cubic growth, and will continue to grow until reaching a certain order of magnitude and starting to grow steadily and slowly.</p>\n<p>\\2. The scale of the new energy vehicle market (in billions of RMB) will be greatly increased, gradually surpassing the sharp decline in the traditional vehicle market size with increasing derivatives</p>\n<p>\\3. The penetration rate (%) of the new energy vehicle market will gradually increase, ultimately reaching over 70%.</p>\n<p>\\4. The month on month growth rate (%) of new energy vehicles will first increase and then decrease. As the month on month growth is compared to the previous year’s growth, the growth rate will not be particularly high in the future, but overall it still shows a growth trend.</p>\n<p>\\5. The number of new energy vehicle enterprises will increase. As new energy vehicles are an emerging market, manufacturers such as Tesla will make a lot of money, which will attract more manufacturers to enter new energy. At present, the most representative manufacturers are Huawei’s Wenjie and Xiaomi Motors.</p>\n<p>The number of patent applications for new energy vehicles will gradually increase, and then gradually decrease. Due to the current peak period of new energy vehicle development, it is normal for patents to spring up one after another. As the new energy industry gradually matures in the future, the number of patents will decrease.</p>\n<p>\\7. The scale of the new energy vehicle industry chain will gradually increase, consistent with the conclusion in 5</p>\n<p>The number of new energy vehicle charging stations (10000) will be significantly increased to adapt to the increasing holdings of new energy vehicles and attract new customers.</p>\n<p>\\9. The coverage rate (%) of new energy vehicle charging infrastructure will be significantly increased, for the same reason.</p>\n<p>The most important thing is that the sales of new energy vehicles will also steadily increase. In short, the development of new energy electric vehicles in China in the next 10 years will be very promising, and the future is bound to be limitless!</p>\n<p><em><strong>*5.3*</strong></em> <em><strong>*Collect data and establish a mathematical model to analyze the impact of new energy electric vehicles on the global traditional energy vehicle industry.*</strong></em></p>\n<h3 id=\"data-preparation-and-preprocessing\"><a class=\"markdownIt-Anchor\" href=\"#data-preparation-and-preprocessing\">#</a> Data Preparation and Preprocessing:</h3>\n<p>Data Organization: Transform raw data into an analyzable format, ensuring correct data types for each variable (e.g., years as date format, sales volumes as numerical values).</p>\n<p>Missing Values: Inspect the dataset for any missing entries. If present, choose to impute (using methods like mean of neighboring values, median, or regression prediction based on other variables) or to exclude missing records.</p>\n<p>Outlier Analysis: Identify and scrutinize outliers to determine whether they result from input errors or natural fluctuations. Correct or exclude errors; retain natural fluctuations as they may represent real-world scenarios.</p>\n<p>Normalization/Standardization: Apply normalization or standardization techniques (such as Z-score standardization) to adjust the scale of data, eliminating the influence of different variable magnitudes.</p>\n<h3 id=\"exploratory-data-analysis-eda\"><a class=\"markdownIt-Anchor\" href=\"#exploratory-data-analysis-eda\">#</a> Exploratory Data Analysis (EDA):</h3>\n<p>Time Series Analysis: Plot time series for each variable to observe trends and patterns over time, identifying any evident trends or seasonality.</p>\n<p>Scatter Plot Analysis: Create scatter plots to explore relationships between variables, such as the relationship between electric vehicle sales and crude oil prices.</p>\n<p>Correlation Matrix Visualization: Construct a correlation matrix and visualize it to discern linear relationships between variables, aiding in variable selection for the VAR model.</p>\n<h3 id=\"correlation-analysis\"><a class=\"markdownIt-Anchor\" href=\"#correlation-analysis\">#</a> Correlation Analysis:</h3>\n<p>Pearson Correlation Coefficient: Compute the Pearson correlation coefficient between electric vehicle sales, traditional vehicle sales, and crude oil prices to quantitatively describe their linear relationships.</p>\n<p>Significance Testing: Perform tests to ascertain the statistical significance of the correlation coefficients, thus determining the reliability of the relationships between variables.</p>\n<h3 id=\"causality-testing\"><a class=\"markdownIt-Anchor\" href=\"#causality-testing\">#</a> Causality Testing:</h3>\n<p>Granger Causality Test: Conduct Granger causality tests to determine if one variable’s historical values can significantly predict future values of another, thereby establishing a Granger cause.</p>\n<p>Lag Selection: Choose the number of lags to use in Granger causality testing, typically selected based on information criteria such as AIC or BIC.</p>\n<h3 id=\"var-model-construction\"><a class=\"markdownIt-Anchor\" href=\"#var-model-construction\">#</a> VAR Model Construction:</h3>\n<p>Variable Selection: Based on EDA and correlation analysis outcomes, select appropriate variables for the VAR model.</p>\n<p>Model Estimation: Estimate the VAR model’s parameters using the ordinary least squares method.</p>\n<p>Lag Structure Determination: Determine the optimal lag order for the VAR model using information criteria.</p>\n<h3 id=\"model-estimation-and-testing\"><a class=\"markdownIt-Anchor\" href=\"#model-estimation-and-testing\">#</a> Model Estimation and Testing:</h3>\n<p>Model Diagnostics: Conduct diagnostic tests, including tests for autocorrelation of residuals, heteroscedasticity, and model stability.</p>\n<p>Predictive Accuracy: Assess the model’s predictive accuracy, often by reserving a portion of data as a test set.</p>\n<h3 id=\"model-interpretation-and-policy-analysis\"><a class=\"markdownIt-Anchor\" href=\"#model-interpretation-and-policy-analysis\">#</a> Model Interpretation and Policy Analysis:</h3>\n<p>Impact Interpretation: Interpret the results of the VAR model, discussing how the growth in electric vehicle sales dynamically influences the sales of traditional energy vehicles.</p>\n<p>Policy Impact Discussion: Explore how electric vehicle-related policies might affect the relationships between these variables and how policymakers can utilize these findings.</p>\n<p>External Factors Consideration: Discuss potential external factors that may impact the markets for electric vehicles and traditional energy vehicles, and how these factors might be incorporated into future research.</p>\n<h3 id=\"translated-conclusions\"><a class=\"markdownIt-Anchor\" href=\"#translated-conclusions\">#</a> Translated Conclusions:</h3>\n<p>The data indicates that the market share of electric vehicles grew from 0.4% in 2013 to 18.6% in 2022, a substantial increase that correlates with a decline in traditional energy vehicle sales. Specifically, as electric vehicle sales have risen, traditional vehicle sales have demonstrated a downward trend. This suggests a shift in consumer preferences and the impact of reduced costs and technological advancements in electric vehicles, attracting more buyers.</p>\n<p>The increase in the electric vehicle market share significantly correlates with a decrease in the average fuel consumption of traditional vehicles. This suggests that automobile manufacturers may be enhancing the fuel efficiency of traditional vehicles to compete with electric vehicles, or consumers may be increasingly opting for models with lower fuel consumption.</p>\n<p>While the growth in electric vehicle market share has not directly impacted crude oil prices (the correlation is not significant), it does not preclude the potential for long-term effects on the energy market. As electric vehicle costs continue to decrease and policies further support, the demand for traditional fuel vehicles might decline, potentially affecting future crude oil demand and prices.</p>\n<p>In conclusion, the emergence of electric vehicles is gradually impacting the global traditional energy vehicle industry. Specifically, with the continuing expansion of the electric vehicle market share, global sales of traditional vehicles have begun to be affected, as indicated by decreasing sales. Meanwhile, the traditional vehicle industry’s technological adaptation is reflected in improved fuel efficiency and reduced consumption. However, so far, the rise in the electric vehicle market has not had a significant impact on crude oil prices, which may be due to the crude oil market being influenced by a variety of factors, including global economic activity levels, international political situations, and the development of alternative energy markets.</p>\n<p><em><strong>*5.4 Some countries have formulated a series of policies targeted to resist the*</strong></em> <em><strong>*development of new energy electric vehicles in China. Establish a mathematical model to*</strong></em> <em><strong>*analyze the effects of these policies on the development of new energy electric vehicles in China.*</strong></em></p>\n<p><em><strong>*（1）Policy*</strong></em> <em><strong>*Collection*</strong></em></p>\n<p>​\tIn June 2022, Germany and Japan were strongly opposed to new energy sources.</p>\n<p>On 16 August 2022 the Inflation Reduction Act (IRA) was signed into law, under which only electric vehicles assembled in North America are eligible for tax credits.</p>\n<p>On 4 October 2023, the EU launched a countervailing investigation into China’s new battery electric vehicles.</p>\n<p><em><strong>*（2）*</strong></em><em><strong>*Data collection*</strong></em></p>\n<p>In order to analyse these policies on the development of new energy electric vehicles in China, we collected the export volume of new energy vehicles from 2011 to 2023, As shown in the figure below</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/6mILXTDCbUc7htY.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture13 New Energy Vehicle Export Volume scatterplot*</strong></em></p>\n<p>The anomaly is removed due to the impact of the New Crown Epidemic, which resulted in a decrease rather than an increase in exports of new energy electric vehicles in 2020</p>\n<p>As the above policies are concentrated in 2022 as well as 2023, we fitted a non-linear fit to the data as shown in the following figure, to specifically compare exports in 2022 and 2023.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/nudLeiwcsNBbSXJ.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture14 New Energy Vehicle Export Volume and Time curve*</strong></em></p>\n<p>Get the polynomial function:</p>\n<p>y=-0.0049x6-59.72x5+301061x4 \t\t\t\t\t\t\t\t\t <em><strong>*（5）*</strong></em></p>\n<p>Comparing the estimates of new energy vehicle exports corresponding to the fitted curves with the actual data using the fitted curves, it can be seen that these policies have indeed inhibited the development of new energy electric vehicles in China.</p>\n<p><em><strong>*5*</strong></em><em><strong>*.5 Analyze the impact of the electrification of new energy electric vehicles (including*</strong></em> <em><strong>*electric buses) in cities on the ecological environment. Assuming that there is an urban*</strong></em> <em><strong>*population of 1 million, provide the calculation results of the model.*</strong></em></p>\n<p><em><strong>*(*</strong></em><em><strong>*1) Data Collection*</strong></em></p>\n<p>The carbon emission factor for petrol is 2.951kg-CO2/kg, each liter of petrol weights approximately 750g, total combustion produces 2.194kg CO2, the average fuel consumption of a conventional car is 6.46L/ 100 kilometres, The resulting 100 km for conventional cars CO2 emissions: 14.17kg/km, average fuel consumption of conventional buses is 25L/100km, conventional buses 100km CO2 emissions: 54.85kg/km;</p>\n<p>grid carbon intensity is 0.65kg/kWh, and the average electric vehicle power consumption is 15kWh/100km, resulting in 100km CO2 emissions from electric vehicles: 9.75kg/100km, electric buses on average Electricity consumption is 56.6kWh/100km, CO2 emission of 100km from electric bus: 36.79kg/km.</p>\n<p><em><strong>*(*</strong></em><em><strong>*2)*</strong></em> <em><strong>*model assumption*</strong></em></p>\n<p>​\tThe population of the city is 1 million, assuming that there are on average 3 people in a household, and each household has a car, i.e., there are 333,000 cars in the city; there are 70,000 buses in the city. The average journey of a car in a day is 300km, which gives the difference in CO2 emissions between new energy electric cars and traditional cars as 48.4 tons/vehicle<em>per year, and the difference in CO2 emissions between new energy electric buses and traditional buses as 197.76 tons/vehicle</em>per year, and the difference in the total annual CO2emissions between new energy electric vehicles and traditional vehicles as 2,996 tons, and China’s average per capita carbon emissions as 6.8 tons. When all vehicles in the city are replaced with new energy vehicles, the city’s per capita carbon emissions can be reduced by 2.996 tons, a whopping 44%!</p>\n<p><em><strong>*5.*</strong></em><em><strong>*6*</strong></em> <em><strong>*Based on the conclusion of question 5, write an open letter to the citizens to publicize the benefits of new energy electric vehicles and the contributions of the electric vehicle industry in various countries around the world.*</strong></em></p>\n<p>Dear Citizens,</p>\n<p>In our journey towards a sustainable future, the emergence and expansion of new energy electric vehicles (EVs) stand as a testament to our collective commitment to environmental stewardship and technological innovation. These vehicles, characterized by their minimal environmental footprint, are pivotal in reducing urban pollution and enhancing air quality. Unlike their traditional counterparts, EVs convert energy with remarkable efficiency, offering a sustainable alternative that aligns with the global imperative to conserve resources.</p>\n<p>In addition to their environmental benefits, electric vehicles are driving technological advancements across multiple sectors, including battery technology, smart connectivity, and autonomous driving systems. This evolution is not just a leap in vehicular technology but a catalyst for broader socio-economic changes. Economically, EVs present a cost-effective solution for consumers, promising lower long-term operating and maintenance expenses.</p>\n<p>Globally, countries have been contributing significantly to this transformative movement. China, for instance, has solidified its position as a leader in the EV market, boasting record-breaking sales and a rapidly increasing market penetration. The Chinese government’s robust policies under its dual carbon goals have been instrumental in catalyzing this growth, demonstrating a commitment to high-quality industry development. Concurrently, the United States has embarked on an ambitious plan to integrate EVs into its national fabric. With strategic investments in infrastructure and manufacturing, driven by comprehensive legislative support like the Bipartisan Infrastructure Law and the Inflation Reduction Act, the U.S. is poised to significantly influence the global EV landscape.</p>\n<p>Similarly, the European Union’s initiatives have been pivotal in driving EV adoption. By implementing stringent CO2 emission standards, the EU has not only promoted environmentally friendly vehicles but also spurred innovation in green technologies. The collaborative efforts of European nations in policy formulation and infrastructure development further underline a shared vision for a green and sustainable future.</p>\n<p>As we embrace this era of electric vehicles, it is evident that our choices transcend beyond individual preferences to a collective responsibility towards a greener, more efficient, and sustainable world. The commitment and actions of countries like China, the United States, and the European Union reflect a global paradigm shift, one where the adoption of electric vehicles is a key component in our pursuit of environmental sustainability and economic resilience.</p>\n<p>In closing, the journey towards a sustainable future is not a solitary endeavor but a collaborative effort that requires the participation and support of each one of us. As we continue to witness and contribute to this transformation, let us remember that each step towards embracing electric vehicles is a step towards a cleaner and more sustainable world.</p>\n<p>Sincerely</p>\n<p>2023-11-25</p>\n<p><em><strong>*Appendix*</strong></em></p>\n<p>Data</p>\n<table>\n<thead>\n<tr>\n<th>Data</th>\n<th>Data sources</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Market share of new energy vehicles, etc.</td>\n<td>NDANEV：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5uZGFuZXYuY29tLw==\">http://www.ndanev.com/</span></td>\n</tr>\n<tr>\n<td>Market penetration of new energy vehicles and conventional vehicles</td>\n<td>National Bureau of Statistics, Ministry of Industry and Information Technology, New Energy Vehicle Association</td>\n</tr>\n<tr>\n<td>China’s total annual carbon emissions</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGhlcGFwZXIuY24vbmV3c0RldGFpbF9mb3J3YXJkXzE5ODk1MjQ3\">https://www.thepaper.cn/newsDetail_forward_19895247</span></td>\n</tr>\n<tr>\n<td>Number of new energy vehicle patents</td>\n<td>China Patent Publication Announcement Network</td>\n</tr>\n<tr>\n<td>Development of New Energy Vehicle Battery</td>\n<td>China ICT</td>\n</tr>\n<tr>\n<td>Infrastructure coverage and number of charging piles for new energy vehicles</td>\n<td>Data Center for Resource and Environmental Sciences, Chinese Academy of Sciences</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>新能源汽车销量（万 / 辆）</td>\n<td></td>\n<td></td>\n<td>年份</td>\n<td>市场占有率（%）</td>\n<td></td>\n<td></td>\n<td>年份</td>\n<td>电池平均能量密度（Wh/kg）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>-----------------------</td>\n<td>----</td>\n<td>----</td>\n<td>----</td>\n<td>---------------</td>\n<td>----</td>\n<td>----</td>\n<td>----</td>\n<td>-------------------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>50.7</td>\n<td></td>\n<td></td>\n<td>2016</td>\n<td>1.8</td>\n<td></td>\n<td></td>\n<td>2016</td>\n<td>75</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>77.7</td>\n<td></td>\n<td></td>\n<td>2017</td>\n<td>2.7</td>\n<td></td>\n<td></td>\n<td>2017</td>\n<td>95</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>126.8</td>\n<td></td>\n<td></td>\n<td>2018</td>\n<td>4.5</td>\n<td></td>\n<td></td>\n<td>2018</td>\n<td>105</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>120.6</td>\n<td></td>\n<td></td>\n<td>2019</td>\n<td>4.68</td>\n<td></td>\n<td></td>\n<td>2019</td>\n<td>140</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>140.9</td>\n<td></td>\n<td></td>\n<td>2020</td>\n<td>5.4</td>\n<td></td>\n<td></td>\n<td>2020</td>\n<td>153</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>352.9</td>\n<td></td>\n<td></td>\n<td>2021</td>\n<td>23.5</td>\n<td></td>\n<td></td>\n<td>2021</td>\n<td>215</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>689.9</td>\n<td></td>\n<td></td>\n<td>2022</td>\n<td>25.6</td>\n<td></td>\n<td></td>\n<td>2022</td>\n<td>280</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>945.9</td>\n<td></td>\n<td></td>\n<td>2023</td>\n<td>30.4</td>\n<td></td>\n<td></td>\n<td>2023</td>\n<td>300</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>电机效率（%）</td>\n<td></td>\n<td></td>\n<td>年份</td>\n<td>充电桩数量（万个）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>-------------</td>\n<td>----</td>\n<td>----</td>\n<td>----</td>\n<td>------------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>80-88</td>\n<td>84</td>\n<td></td>\n<td>2016</td>\n<td>16.6</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>85-90</td>\n<td>87.5</td>\n<td></td>\n<td>2017</td>\n<td>45</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>88-92</td>\n<td>90</td>\n<td></td>\n<td>2018</td>\n<td>77.7</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>90-95</td>\n<td>93</td>\n<td></td>\n<td>2019</td>\n<td>121.9</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>91-96</td>\n<td>93.5</td>\n<td></td>\n<td>2020</td>\n<td>168.1</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>92-97</td>\n<td>94.5</td>\n<td></td>\n<td>2021</td>\n<td>261.7</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>93-98</td>\n<td>95.5</td>\n<td></td>\n<td>2022</td>\n<td>521</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>94-98</td>\n<td>96</td>\n<td></td>\n<td>2023</td>\n<td>795.4</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>补贴估计值（万）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>----------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>5</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>7</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>3.5</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>2</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>1.5</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>产业协同率（%）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>---------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>35</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>40</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>45</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>50</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>55</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>60</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>65</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>70</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>中国新能源汽车产量（万辆）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>--------------------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>51.7</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>79.4</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>127.9</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>124.9</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>145.9</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>367.8</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>700.8</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>1000</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>新能源汽车产量增长率（%）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>-------------------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>53</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>53.3</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>79.5</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>0.11</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>7.5</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>145.6</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>96.9</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>40</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>中国燃油车产量（万辆）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>----------------------</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>2819</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>2942.5</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>2781</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>2456</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>2531.1</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>2458.8</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>1508.1</td>\n</tr>\n<tr>\n<td>2023</td>\n<td>1955.7</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>新能源汽车保有量（万辆）</td>\n<td>新能源汽车市场规模（亿元人民币）</td>\n<td>新能源汽车企业数量（家）</td>\n<td>新能源汽车专利申请数量（项）</td>\n<td>新能源汽车产业链规模（家）</td>\n<td>新能源汽车充电桩数量（万个）</td>\n<td>新能源汽车充电基础设施覆盖率（%）</td>\n<td>新能源汽车补贴金额（亿元人民币）</td>\n<td>传统燃油车市场渗透率（%）</td>\n<td>新能源汽车市场渗透率（%）</td>\n<td>长三角地区碳排放总量 (百万吨)</td>\n<td>新能源汽车产销量（万辆）</td>\n<td>新能源汽车环比增长率 (%)</td>\n<td>传统汽车产销量（万辆）</td>\n<td>传统汽车环比增长率 (%)</td>\n<td>磷酸铁锂动力电池装机量 / GWh</td>\n<td>三元电池装机量 / GWh</td>\n<td>碳排放总量 (百万吨)</td>\n<td>新能源汽车加权平均价格 (万元)</td>\n</tr>\n<tr>\n<td>----</td>\n<td>------------------------</td>\n<td>--------------------------------</td>\n<td>------------------------</td>\n<td>----------------------------</td>\n<td>--------------------------</td>\n<td>----------------------------</td>\n<td>---------------------------------</td>\n<td>--------------------------------</td>\n<td>-------------------------</td>\n<td>-------------------------</td>\n<td>----------------------------</td>\n<td>------------------------</td>\n<td>-----------------------</td>\n<td>----------------------</td>\n<td>---------------------</td>\n<td>--------------------------</td>\n<td>------------------</td>\n<td>------------------</td>\n<td>----------------------------</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>0.2</td>\n<td>7.3</td>\n<td>30</td>\n<td>630</td>\n<td>230</td>\n<td>0.3</td>\n<td>0.5</td>\n<td>6.2</td>\n<td>99.9</td>\n<td>0.1</td>\n<td>1608.79</td>\n<td>1.79</td>\n<td>39.8</td>\n<td>2198.3</td>\n<td>15</td>\n<td>2</td>\n<td>15</td>\n<td>9839.7</td>\n<td>18</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>1.2</td>\n<td>25.4</td>\n<td>50</td>\n<td>870</td>\n<td>280</td>\n<td>0.6</td>\n<td>1.7</td>\n<td>7.5</td>\n<td>99.6</td>\n<td>0.4</td>\n<td>1569.41</td>\n<td>7.48</td>\n<td>317.9</td>\n<td>2341.2</td>\n<td>6.5</td>\n<td>5</td>\n<td>20</td>\n<td>10029.8</td>\n<td>18.5</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>3.3</td>\n<td>71.5</td>\n<td>70</td>\n<td>1020</td>\n<td>320</td>\n<td>1.2</td>\n<td>3.5</td>\n<td>9.8</td>\n<td>98.7</td>\n<td>1.3</td>\n<td>1578.45</td>\n<td>33.01</td>\n<td>341.4</td>\n<td>2406.5</td>\n<td>2.8</td>\n<td>6.1</td>\n<td>26.9</td>\n<td>9980.2</td>\n<td>19</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>7.3</td>\n<td>162.5</td>\n<td>90</td>\n<td>1170</td>\n<td>370</td>\n<td>3.5</td>\n<td>8.7</td>\n<td>13.2</td>\n<td>98.2</td>\n<td>1.8</td>\n<td>1496.37</td>\n<td>50.71</td>\n<td>53.6</td>\n<td>2801.5</td>\n<td>16.4</td>\n<td>21.8</td>\n<td>28.9</td>\n<td>9861</td>\n<td>19.5</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>16.7</td>\n<td>331.5</td>\n<td>120</td>\n<td>1360</td>\n<td>420</td>\n<td>8.2</td>\n<td>17.2</td>\n<td>19.6</td>\n<td>97.4</td>\n<td>2.6</td>\n<td>1602.22</td>\n<td>77.68</td>\n<td>53.3</td>\n<td>2871.5</td>\n<td>2.5</td>\n<td>39.9</td>\n<td>37.8</td>\n<td>10058.8</td>\n<td>20</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>31.7</td>\n<td>609.5</td>\n<td>150</td>\n<td>1470</td>\n<td>460</td>\n<td>15.6</td>\n<td>30.5</td>\n<td>28.4</td>\n<td>96.4</td>\n<td>3.6</td>\n<td>1602.72</td>\n<td>125.6</td>\n<td>61.7</td>\n<td>2791.7</td>\n<td>-2.8</td>\n<td>79.9</td>\n<td>45.7</td>\n<td>10291.8</td>\n<td>20.5</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>57.2</td>\n<td>956.7</td>\n<td>180</td>\n<td>1610</td>\n<td>500</td>\n<td>28.4</td>\n<td>52.3</td>\n<td>38.7</td>\n<td>95.3</td>\n<td>4.7</td>\n<td>1623.18</td>\n<td>120.6</td>\n<td>-4.0</td>\n<td>2535.4</td>\n<td>-9.2</td>\n<td>79.8</td>\n<td>49.8</td>\n<td>10492.5</td>\n<td>21</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>94.3</td>\n<td>1521.6</td>\n<td>220</td>\n<td>1750</td>\n<td>550</td>\n<td>44.7</td>\n<td>77.9</td>\n<td>46.3</td>\n<td>94.3</td>\n<td>5.7</td>\n<td>1649.15</td>\n<td>136.8</td>\n<td>13.4</td>\n<td>2023.1</td>\n<td>-20.2</td>\n<td>96.3</td>\n<td>61.6</td>\n<td>10713.5</td>\n<td>21.5</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>127.9</td>\n<td>2002.5</td>\n<td>250</td>\n<td>1900</td>\n<td>590</td>\n<td>59.1</td>\n<td>80.2</td>\n<td>53.9</td>\n<td>93.6</td>\n<td>6.4</td>\n<td>1675.53</td>\n<td>352.1</td>\n<td>157.6</td>\n<td>2334.1</td>\n<td>15.4</td>\n<td>183.8</td>\n<td>110.4</td>\n<td>10934.6</td>\n<td>22</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>164.5</td>\n<td>2483.4</td>\n<td>280</td>\n<td>2000</td>\n<td>630</td>\n<td>74.2</td>\n<td>87.6</td>\n<td>61.5</td>\n<td>92.7</td>\n<td>7.3</td>\n<td>1702.35</td>\n<td>688.7</td>\n<td>95.6</td>\n<td>1997.7</td>\n<td>-14.4</td>\n<td>184.5</td>\n<td>117.3</td>\n<td>11155.6</td>\n<td>22.5</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>年份</td>\n<td>新能源汽车保有量（万辆）</td>\n<td>新能源汽车市场规模（亿元人民币）</td>\n<td>新能源汽车专利申请数量（项）</td>\n<td>新能源汽车补贴金额（亿元人民币）</td>\n<td>碳排放总量 (百万吨)</td>\n<td>磷酸铁锂动力电池装机量 / GWh</td>\n<td>三元电池装机量 / GWh</td>\n<td>新能源汽车加权平均价格 (万元)</td>\n<td>新能源汽车市场渗透率（%）</td>\n</tr>\n<tr>\n<td>----</td>\n<td>------------------------</td>\n<td>--------------------------------</td>\n<td>----------------------------</td>\n<td>--------------------------------</td>\n<td>------------------</td>\n<td>--------------------------</td>\n<td>------------------</td>\n<td>----------------------------</td>\n<td>-------------------------</td>\n</tr>\n<tr>\n<td>2013</td>\n<td>0.2</td>\n<td>7.3</td>\n<td>630</td>\n<td>6.2</td>\n<td>9839.7</td>\n<td>2</td>\n<td>15</td>\n<td>18</td>\n<td>0.1</td>\n</tr>\n<tr>\n<td>2014</td>\n<td>1.2</td>\n<td>25.4</td>\n<td>870</td>\n<td>7.5</td>\n<td>10029.8</td>\n<td>5</td>\n<td>20</td>\n<td>18.5</td>\n<td>0.4</td>\n</tr>\n<tr>\n<td>2015</td>\n<td>3.3</td>\n<td>71.5</td>\n<td>1020</td>\n<td>9.8</td>\n<td>9980.2</td>\n<td>6.1</td>\n<td>26.9</td>\n<td>19</td>\n<td>1.3</td>\n</tr>\n<tr>\n<td>2016</td>\n<td>7.3</td>\n<td>162.5</td>\n<td>1170</td>\n<td>13.2</td>\n<td>9861</td>\n<td>21.8</td>\n<td>28.9</td>\n<td>19.5</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>2017</td>\n<td>16.7</td>\n<td>331.5</td>\n<td>1360</td>\n<td>19.6</td>\n<td>10058.8</td>\n<td>39.9</td>\n<td>37.8</td>\n<td>20</td>\n<td>2.6</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>31.7</td>\n<td>609.5</td>\n<td>1470</td>\n<td>28.4</td>\n<td>10291.8</td>\n<td>79.9</td>\n<td>45.7</td>\n<td>20.5</td>\n<td>3.6</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>57.2</td>\n<td>956.7</td>\n<td>1610</td>\n<td>38.7</td>\n<td>10492.5</td>\n<td>79.8</td>\n<td>49.8</td>\n<td>21</td>\n<td>4.7</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>94.3</td>\n<td>1521.6</td>\n<td>1750</td>\n<td>46.3</td>\n<td>10713.5</td>\n<td>96.3</td>\n<td>61.6</td>\n<td>21.5</td>\n<td>5.7</td>\n</tr>\n<tr>\n<td>2021</td>\n<td>127.9</td>\n<td>2002.5</td>\n<td>1900</td>\n<td>53.9</td>\n<td>10934.6</td>\n<td>183.8</td>\n<td>110.4</td>\n<td>22</td>\n<td>6.4</td>\n</tr>\n<tr>\n<td>2022</td>\n<td>164.5</td>\n<td>2483.4</td>\n<td>2000</td>\n<td>61.5</td>\n<td>11155.6</td>\n<td>184.5</td>\n<td>117.3</td>\n<td>22.5</td>\n<td>7.3</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LinearRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> r2_score, mean_squared_error</span><br><span class=\"line\"><span class=\"comment\"># 读取 Excel 文件</span></span><br><span class=\"line\">excel_path = <span class=\"string\">r&#x27;D:\\desktop\\2023亚太赛 c 数据\\第二问\\data\\第二问数据整合.xlsx&#x27;</span></span><br><span class=\"line\">df = pd.read_excel(excel_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择自变量和因变量</span></span><br><span class=\"line\">X = df[[<span class=\"string\">&#x27;年份&#x27;</span>, <span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>,<span class=\"string\">&#x27;新能源汽车市场规模（亿元人民币）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车市场渗透率（%）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车环比增长率(%)&#x27;</span>, <span class=\"string\">&#x27;新能源汽车企业数量（家）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车专利申请数量（项）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车产业链规模（家）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车充电桩数量（万个）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车充电基础设施覆盖率（%）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车补贴金额（亿元人民币）&#x27;</span>, <span class=\"string\">&#x27;传统燃油车市场渗透率（%）&#x27;</span>, <span class=\"string\">&#x27;长三角地区碳排放总量(百万吨)&#x27;</span>, <span class=\"string\">&#x27;传统汽车产销量（万辆）&#x27;</span>, <span class=\"string\">&#x27;传统汽车环比增长率(%)&#x27;</span>, <span class=\"string\">&#x27;磷酸铁锂动力电池装机量/GWh&#x27;</span>, <span class=\"string\">&#x27;三元电池装机量/GWh&#x27;</span>, <span class=\"string\">&#x27;碳排放总量(百万吨)&#x27;</span>, <span class=\"string\">&#x27;新能源汽车加权平均价格(万元)&#x27;</span>]]</span><br><span class=\"line\">Y = df[<span class=\"string\">&#x27;新能源汽车产销量（万辆）&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 创建线性回归模型</span></span><br><span class=\"line\">model = LinearRegression()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拟合模型</span></span><br><span class=\"line\">model.fit(X, Y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取回归系数</span></span><br><span class=\"line\">coefficients = pd.DataFrame(&#123;<span class=\"string\">&#x27;Variable&#x27;</span>: [<span class=\"string\">&#x27;intercept&#x27;</span>] + <span class=\"built_in\">list</span>(X.columns), <span class=\"string\">&#x27;Coefficient&#x27;</span>: [model.intercept_] + <span class=\"built_in\">list</span>(model.coef_)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出回归系数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(coefficients)</span><br><span class=\"line\"><span class=\"comment\"># 预测值</span></span><br><span class=\"line\">predictions = model.predict(X)</span><br><span class=\"line\"><span class=\"comment\"># 计算R²和标准估计误差</span></span><br><span class=\"line\">r2 = r2_score(Y, predictions)</span><br><span class=\"line\">mse = mean_squared_error(Y, predictions)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出R²和标准估计误差</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;R²:&#x27;</span>, r2)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;标准估计误差:&#x27;</span>, mse)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> statsmodels.tsa.holtwinters <span class=\"keyword\">import</span> ExponentialSmoothing</span><br><span class=\"line\"><span class=\"keyword\">from</span> statsmodels.tsa.seasonal <span class=\"keyword\">import</span> seasonal_decompose</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]  <span class=\"comment\"># 设置中文字体为黑体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 数据导入和准备</span></span><br><span class=\"line\">df = pd.read_excel(<span class=\"string\">&quot;第二问数据整合.xlsx&quot;</span>, index_col=<span class=\"string\">&quot;年份&quot;</span>)</span><br><span class=\"line\">df.index = pd.to_datetime(df.index, <span class=\"built_in\">format</span>=<span class=\"string\">&#x27;%Y&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 可视化数据</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(df[<span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>], marker=<span class=\"string\">&#x27;o&#x27;</span>, label=<span class=\"string\">&#x27;新能源汽车保有量&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;新能源汽车保有量 Over Time&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Year&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;可视化数据.png&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 趋势分析</span></span><br><span class=\"line\">result = seasonal_decompose(df[<span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>], model=<span class=\"string\">&#x27;multiplicative&#x27;</span>, period=<span class=\"number\">1</span>)  <span class=\"comment\"># 选择合适的周期</span></span><br><span class=\"line\">result.plot()</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;趋势分析.png&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4. 时间序列预测模型 - Holt-Winters Exponential Smoothing</span></span><br><span class=\"line\"><span class=\"comment\"># 将数据拆分为训练集和测试集</span></span><br><span class=\"line\">train_size = <span class=\"built_in\">int</span>(<span class=\"built_in\">len</span>(df) * <span class=\"number\">0.8</span>)</span><br><span class=\"line\">train, test = df[<span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>][:train_size], df[<span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>][train_size:]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建并拟合模型</span></span><br><span class=\"line\"><span class=\"comment\"># 使用Holt-Winters指数平滑模型</span></span><br><span class=\"line\">model = ExponentialSmoothing(train, seasonal=<span class=\"string\">&#x27;add&#x27;</span>, seasonal_periods=<span class=\"number\">2</span>)</span><br><span class=\"line\">result = model.fit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预测</span></span><br><span class=\"line\">forecast = result.forecast(steps=<span class=\"built_in\">len</span>(test))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 保存预测结果为 Excel 文件</span></span><br><span class=\"line\">result_df = pd.DataFrame(&#123;<span class=\"string\">&#x27;实际值&#x27;</span>: test, <span class=\"string\">&#x27;预测值&#x27;</span>: forecast&#125;)</span><br><span class=\"line\">result_df.to_excel(<span class=\"string\">&#x27;预测结果.xlsx&#x27;</span>, index=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可视化预测结果</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(train.index, train, label=<span class=\"string\">&#x27;Train&#x27;</span>)</span><br><span class=\"line\">plt.plot(test.index, test, label=<span class=\"string\">&#x27;Test&#x27;</span>)</span><br><span class=\"line\">plt.plot(test.index, forecast, label=<span class=\"string\">&#x27;Predicted&#x27;</span>, linestyle=<span class=\"string\">&#x27;dashed&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;新能源汽车保有量预测&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Year&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;新能源汽车保有量预测.png&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> statsmodels.api <span class=\"keyword\">as</span> sm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取 Excel 文件</span></span><br><span class=\"line\">excel_path = <span class=\"string\">r&#x27;D:\\desktop\\2023亚太赛 c 数据\\第二问\\data\\第二问数据整合.xlsx&#x27;</span></span><br><span class=\"line\">df = pd.read_excel(excel_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择自变量和因变量</span></span><br><span class=\"line\">X = df[[<span class=\"string\">&#x27;年份&#x27;</span>, <span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>,<span class=\"string\">&#x27;新能源汽车市场规模（亿元人民币）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车市场渗透率（%）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车环比增长率(%)&#x27;</span>, <span class=\"string\">&#x27;新能源汽车企业数量（家）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车专利申请数量（项）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车产业链规模（家）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车充电桩数量（万个）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车充电基础设施覆盖率（%）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车补贴金额（亿元人民币）&#x27;</span>, <span class=\"string\">&#x27;传统燃油车市场渗透率（%）&#x27;</span>, <span class=\"string\">&#x27;长三角地区碳排放总量(百万吨)&#x27;</span>, <span class=\"string\">&#x27;传统汽车产销量（万辆）&#x27;</span>, <span class=\"string\">&#x27;传统汽车环比增长率(%)&#x27;</span>, <span class=\"string\">&#x27;磷酸铁锂动力电池装机量/GWh&#x27;</span>, <span class=\"string\">&#x27;三元电池装机量/GWh&#x27;</span>, <span class=\"string\">&#x27;碳排放总量(百万吨)&#x27;</span>, <span class=\"string\">&#x27;新能源汽车加权平均价格(万元)&#x27;</span>]]</span><br><span class=\"line\">Y = df[<span class=\"string\">&#x27;新能源汽车产销量（万辆）&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加截距项</span></span><br><span class=\"line\">X = sm.add_constant(X)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拟合线性回归模型</span></span><br><span class=\"line\">model = sm.OLS(Y, X).fit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进行F检验</span></span><br><span class=\"line\">f_test = model.f_test(<span class=\"string\">&quot; &quot;</span>.join(X.columns[<span class=\"number\">1</span>:]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(f_test)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> statsmodels.tsa.holtwinters <span class=\"keyword\">import</span> ExponentialSmoothing</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;SimHei&#x27;</span>]  <span class=\"comment\"># 设置中文字体为黑体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1. 数据导入和准备</span></span><br><span class=\"line\">df = pd.read_excel(<span class=\"string\">&quot;data/第二问数据整合.xlsx&quot;</span>, index_col=<span class=\"string\">&quot;年份&quot;</span>)</span><br><span class=\"line\">df.index = pd.to_datetime(df.index, <span class=\"built_in\">format</span>=<span class=\"string\">&#x27;%Y&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2. 需要预测的列名</span></span><br><span class=\"line\">columns_to_predict = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车市场渗透率（%）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车环比增长率(%)&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车企业数量（家）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车专利申请数量（项）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车产业链规模（家）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车充电桩数量（万个）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车充电基础设施覆盖率（%）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车补贴金额（亿元人民币）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;传统燃油车市场渗透率（%）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;长三角地区碳排放总量(百万吨)&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;传统汽车产销量（万辆）&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;传统汽车环比增长率(%)&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;磷酸铁锂动力电池装机量/GWh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;三元电池装机量/GWh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;碳排放总量(百万吨)&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;新能源汽车加权平均价格(万元)&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3. 循环预测并保存结果和图</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> column <span class=\"keyword\">in</span> columns_to_predict:</span><br><span class=\"line\">    <span class=\"comment\"># 创建并拟合模型</span></span><br><span class=\"line\">    model = ExponentialSmoothing(df[column], seasonal=<span class=\"string\">&#x27;add&#x27;</span>, seasonal_periods=<span class=\"number\">2</span>)</span><br><span class=\"line\">    result = model.fit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 预测</span></span><br><span class=\"line\">    forecast = result.forecast(steps=<span class=\"number\">11</span>)  <span class=\"comment\"># 预测2023年到2033年的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 输出预测结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;column&#125;</span> 预测结果:&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(forecast)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 可视化预测结果</span></span><br><span class=\"line\">    plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">    plt.plot(df.index, df[column], label=<span class=\"string\">&#x27;历史数据&#x27;</span>)</span><br><span class=\"line\">    plt.plot(pd.date_range(start=<span class=\"string\">&#x27;2023-01-01&#x27;</span>, periods=<span class=\"number\">11</span>, freq=<span class=\"string\">&#x27;Y&#x27;</span>), forecast, label=<span class=\"string\">&#x27;预测&#x27;</span>, linestyle=<span class=\"string\">&#x27;dashed&#x27;</span>)</span><br><span class=\"line\">    plt.title(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;column&#125;</span>预测&#x27;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;年份&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(column)</span><br><span class=\"line\">    plt.legend()</span><br><span class=\"line\">    plt.savefig(<span class=\"string\">f&quot;<span class=\"subst\">&#123;column&#125;</span>_预测.png&quot;</span>)</span><br><span class=\"line\">    plt.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> statsmodels.api <span class=\"keyword\">as</span> sm</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\"># 读取 Excel 文件</span></span><br><span class=\"line\">excel_path = <span class=\"string\">r&#x27;D:\\desktop\\2023亚太赛 c 数据\\第二问\\data\\第二问数据整合.xlsx&#x27;</span></span><br><span class=\"line\">df = pd.read_excel(excel_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用回归方程的系数</span></span><br><span class=\"line\">coefficients = [-<span class=\"number\">175.361921</span>, <span class=\"number\">0.786334</span>, <span class=\"number\">4.674333</span>, <span class=\"number\">0.133171</span>, <span class=\"number\">1.340155</span>, <span class=\"number\">0.203066</span>, <span class=\"number\">5.114536</span>, -<span class=\"number\">1.460884</span>, <span class=\"number\">0.602279</span>,</span><br><span class=\"line\">                <span class=\"number\">2.367206</span>, -<span class=\"number\">7.039104</span>, <span class=\"number\">7.524213</span>, -<span class=\"number\">1.340155</span>, -<span class=\"number\">0.623688</span>, <span class=\"number\">0.488335</span>, -<span class=\"number\">6.786688</span>, -<span class=\"number\">2.279974</span>, <span class=\"number\">5.143792</span>,</span><br><span class=\"line\">                -<span class=\"number\">0.075757</span>, <span class=\"number\">0.393167</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选择自变量</span></span><br><span class=\"line\">features = df[[<span class=\"string\">&#x27;年份&#x27;</span>, <span class=\"string\">&#x27;新能源汽车保有量（万辆）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车市场规模（亿元人民币）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车市场渗透率（%）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车环比增长率(%)&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;新能源汽车企业数量（家）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车专利申请数量（项）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车产业链规模（家）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车充电桩数量（万个）&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;新能源汽车充电基础设施覆盖率（%）&#x27;</span>, <span class=\"string\">&#x27;新能源汽车补贴金额（亿元人民币）&#x27;</span>, <span class=\"string\">&#x27;传统燃油车市场渗透率（%）&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;长三角地区碳排放总量(百万吨)&#x27;</span>, <span class=\"string\">&#x27;传统汽车产销量（万辆）&#x27;</span>, <span class=\"string\">&#x27;传统汽车环比增长率(%)&#x27;</span>, <span class=\"string\">&#x27;磷酸铁锂动力电池装机量/GWh&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;三元电池装机量/GWh&#x27;</span>, <span class=\"string\">&#x27;碳排放总量(百万吨)&#x27;</span>, <span class=\"string\">&#x27;新能源汽车加权平均价格(万元)&#x27;</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加截距项</span></span><br><span class=\"line\">features = sm.add_constant(features)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算预测值</span></span><br><span class=\"line\">predicted_sales = np.dot(features.values, coefficients)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将预测值添加到数据框</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;预测新能源汽车产销量（万辆）&#x27;</span>] = predicted_sales</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(df[[<span class=\"string\">&#x27;年份&#x27;</span>, <span class=\"string\">&#x27;新能源汽车产销量（万辆）&#x27;</span>, <span class=\"string\">&#x27;预测新能源汽车产销量（万辆）&#x27;</span>]])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "recommendation"
            ]
        },
        {
            "id": "https://enjundu.github.io/shudian/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%8A%A5%E5%91%8A/",
            "url": "https://enjundu.github.io/shudian/%E5%AE%9E%E9%AA%8C%E4%BA%8C%E6%8A%A5%E5%91%8A/",
            "title": "复杂组合逻辑模块设计",
            "date_published": "2024-07-04T13:15:48.000Z",
            "content_html": "<h1 id=\"复杂组合逻辑模块设计\"><a class=\"markdownIt-Anchor\" href=\"#复杂组合逻辑模块设计\">#</a> 复杂组合逻辑模块设计</h1>\n<h2 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h2>\n<p><strong>设计一个多功能数字电路模块</strong></p>\n<ul>\n<li>输入数据为两个一位十进制数 A 和 B，A 和 B 均为 8421 码表示，其中数据 A 由拨动开关 <code>SW7-SW4</code>  输入（SW7 为 MSB），数据 B 由 <code>SW3-SW0</code>  输入（SW3 为 MSB）</li>\n<li>电路的功能包括求和、比较大小、输出最大值和输出最小值四种；分别由如下图所示的按键开关控制，当按键按下时，电路执行相对应的功能并输出结果<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/ieVYagIbBy8pSvq.png\" alt=\"1.png\"></li>\n<li>输出显示在如下图所示的两个数码管上<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/aur41Fvs6Toqcbt.png\" alt=\"2.png\"></li>\n<li>求和功能描述：当按下求和键时，对 A 和 B 两个数相加，相加的结果显示在数码管上，注意相加的结果需要进行 BCD 码调整，显示模块必须调用实验一中设计的显示译码电路，当十位为 0 时，需要灭零。</li>\n<li>比较大小模块描述：当比较大小功能键按下时，比较 A 和 B 的大小，当 A&lt;B 时显示 01（不灭 0），当 A&gt;B 时显示 10，A=B 时显示 11</li>\n<li>输出最大（小）值功能描述：当按下输出最大（小）值功能键时，将 A 和 B 中的最大（小）值显示在数码管上。</li>\n<li><strong>灭零</strong>：即不亮灯，不显示任何东西的意思</li>\n</ul>\n<h2 id=\"实验设计\"><a class=\"markdownIt-Anchor\" href=\"#实验设计\">#</a> 实验设计</h2>\n<h3 id=\"2位bcd加法器模块2_bcd_adderv\"><a class=\"markdownIt-Anchor\" href=\"#2位bcd加法器模块2_bcd_adderv\">#</a> 2 位 BCD 加法器模块（2_bcd_adder.v）</h3>\n<h4 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\">#</a> 需求分析</h4>\n<p>该模块需要对两个 1 位十进制的 BCD 表示数进行相加，并进行 BCD 调整，使结果在数码管上正确显示。</p>\n<h4 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h4>\n<ul>\n<li>\n<p>首先将两个输入数相加，得到临时和。</p>\n</li>\n<li>\n<p>判断临时和是否大于 9（即是否需要进行 BCD 调整）。</p>\n</li>\n<li>\n<p>如果临时和大于 9，则需要加 6 进行调整，否则保持原结果。</p>\n</li>\n<li>\n<p>输出调整后的结果和进位信号。</p>\n</li>\n<li>\n<p>十位为零的时候要灭零</p>\n</li>\n</ul>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">module</span> bcd_adder(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] numa1,<span class=\"comment\">//输入数字1</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] numa2,<span class=\"comment\">//输入数字2</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_adder,<span class=\"comment\">//按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] resulta1,<span class=\"comment\">//结果，十位数</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] resulta2<span class=\"comment\">//结果，个位数</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] temp;</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ *</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    temp=&#123;<span class=\"number\">4&#x27;b0000</span>,numa1&#125;+&#123;<span class=\"number\">4&#x27;b0000</span>,numa2&#125;;<span class=\"comment\">//扩充位数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(temp&gt;<span class=\"number\">8&#x27;b00001001</span>)<span class=\"comment\">//产生进位</span></span><br><span class=\"line\">        <span class=\"keyword\">begin</span></span><br><span class=\"line\">            &#123;resulta1,resulta2&#125;=temp+<span class=\"number\">8&#x27;b00000110</span>;<span class=\"comment\">//加6</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">begin</span></span><br><span class=\"line\">        resulta1=<span class=\"number\">4&#x27;b1111</span>;<span class=\"comment\">//十位数为0时要灭零</span></span><br><span class=\"line\">        resulta2=temp[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// 加法模块</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验图片\"><a class=\"markdownIt-Anchor\" href=\"#实验图片\">#</a> 实验图片</h4>\n<ul>\n<li>A 为 0101，B 为 0100 时，调用相加功能输出为 9</li>\n<li>此时十位为零，调用灭零功能</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/BFZ5VKb2zsx6dDu.png\" alt=\"3.png\"></p>\n<ul>\n<li>A 为 0101，B 位 0110，此时相加结果为 11</li>\n<li>十位为 1</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/K6ONPHiSdhkc523.png\" alt=\"4.png\"></p>\n<h3 id=\"比较器模块2_comparev\"><a class=\"markdownIt-Anchor\" href=\"#比较器模块2_comparev\">#</a> 比较器模块（2_compare.v）</h3>\n<h4 id=\"需求分析-2\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-2\">#</a> 需求分析</h4>\n<p>该模块需要比较两个 1 位十进制的 BCD 表示数的大小，并输出比较结果。</p>\n<h4 id=\"设计思路-2\"><a class=\"markdownIt-Anchor\" href=\"#设计思路-2\">#</a> 设计思路</h4>\n<ul>\n<li>比较两个输入数的大小。</li>\n<li>如果 A 小于 B，输出 01。</li>\n<li>如果 A 大于 B，输出 10。</li>\n<li>如果 A 等于 B，输出 11。</li>\n</ul>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">module</span> compare(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] numc1,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] numc2,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_compare,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] resultc1,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] resultc2</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//resultc1</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ *</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numc1&lt;numc2)</span><br><span class=\"line\">            resultc1=<span class=\"number\">4&#x27;b0000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numc1&gt;numc2)</span><br><span class=\"line\">            resultc1=<span class=\"number\">4&#x27;b0001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">            resultc1=<span class=\"number\">4&#x27;b0001</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">//resultc2</span></span><br><span class=\"line\"><span class=\"keyword\">always</span> @ *</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numc1&lt;numc2)</span><br><span class=\"line\">        resultc2=<span class=\"number\">4&#x27;b0001</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numc1&gt;numc2)</span><br><span class=\"line\">        resultc2=<span class=\"number\">4&#x27;b0000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        resultc2=<span class=\"number\">4&#x27;b0001</span>; </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// 比较模块</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验图片-2\"><a class=\"markdownIt-Anchor\" href=\"#实验图片-2\">#</a> 实验图片</h4>\n<p>A 为 0101，B 位 0110.<strong>A&lt;B</strong>，故显示<strong> 01</strong></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/1yvOiZt7EuHd6zn.png\" alt=\"5.png\"></p>\n<p>A 和 B 均为 0101 时，A=B，输出 11</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/qCXfAU14tZms8zM.png\" alt=\"6.png\"></p>\n<h3 id=\"最大值输出模块2_export_maxv\"><a class=\"markdownIt-Anchor\" href=\"#最大值输出模块2_export_maxv\">#</a> 最大值输出模块 (2_export_max.v)</h3>\n<h4 id=\"需求分析-3\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-3\">#</a> 需求分析</h4>\n<p>该模块需要输出两个 1 位十进制的 BCD 表示数中的最大值。</p>\n<h4 id=\"设计思路-3\"><a class=\"markdownIt-Anchor\" href=\"#设计思路-3\">#</a> 设计思路</h4>\n<ul>\n<li>比较两个输入数的大小。</li>\n<li>如果 A 大于 B，则输出 A。</li>\n<li>如果 B 大于或等于 A，则输出 B。</li>\n</ul>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">module</span> export_max(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] num_max1,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] num_max2,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_max,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] result_max1=<span class=\"number\">4&#x27;b1111</span>, <span class=\"comment\">//十位是0</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] result_max2</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ *</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num_max1&gt;num_max2)</span><br><span class=\"line\">            result_max2=num_max1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">            result_max2=num_max2;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// 输出最大值模块</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验图片-3\"><a class=\"markdownIt-Anchor\" href=\"#实验图片-3\">#</a> 实验图片</h4>\n<p>A=0101，B=0100 时，最大值是 A，此时按下最大值输出 5</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/BcV9IbStWTYR7Na.png\" alt=\"7.png\"></p>\n<h3 id=\"最小值输出模块2_export_minv\"><a class=\"markdownIt-Anchor\" href=\"#最小值输出模块2_export_minv\">#</a> 最小值输出模块（2_export_min.v）</h3>\n<h4 id=\"需求分析-4\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-4\">#</a> 需求分析</h4>\n<p>该模块需要输出两个 1 位十进制的 BCD 表示数中的最小值。</p>\n<h4 id=\"设计思路-4\"><a class=\"markdownIt-Anchor\" href=\"#设计思路-4\">#</a> 设计思路</h4>\n<ul>\n<li>比较两个输入数的大小。</li>\n<li>如果 A 小于 B，则输出 A。</li>\n<li>如果 B 小于或等于 A，则输出 B。</li>\n</ul>\n<h4 id=\"代码实现-4\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-4\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> export_min(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] num_min1,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] num_min2,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_min,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] result_min1=<span class=\"number\">4&#x27;b1111</span>,<span class=\"comment\">//十位是0</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] result_min2</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ *</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num_min1&lt;num_min2)</span><br><span class=\"line\">            result_min2=num_min1;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">            result_min2=num_min2;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// 输出最小值模块</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验图片-4\"><a class=\"markdownIt-Anchor\" href=\"#实验图片-4\">#</a> 实验图片</h4>\n<p>A 为 0101，B 位 0100 时，最小值为 4，输出 4</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/jZJ7QNdBemo8xaI.png\" alt=\"8.png\"></p>\n<h3 id=\"多路选择器模块2_muxv\"><a class=\"markdownIt-Anchor\" href=\"#多路选择器模块2_muxv\">#</a> 多路选择器模块（2_mux.v）</h3>\n<h4 id=\"需求分析-5\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-5\">#</a> 需求分析</h4>\n<p>该模块需要根据按键选择不同的功能输出，包括求和、最大值、最小值和比较结果。</p>\n<h4 id=\"设计思路-5\"><a class=\"markdownIt-Anchor\" href=\"#设计思路-5\">#</a> 设计思路</h4>\n<ul>\n<li>输入部分包括四个按钮信号（分别对应求和、比较、求最大值和求最小值）和四个功能模块的输出。</li>\n<li>输出部分包括两个结果输出端口，用于显示选定功能的输出结果。</li>\n<li>使用 <code>always</code>  块监视输入信号的变化。</li>\n<li>当某个按钮被按下时，选择相应模块的输出并赋值给结果输出端口。</li>\n<li>如果没有按钮被按下，则输出两个零。</li>\n<li><code>add_output_1</code> ,  <code>add_output_2</code> : 求和功能的两个输出。</li>\n<li><code>cmp_output_1</code> ,  <code>cmp_output_2</code> : 比较功能的两个输出。</li>\n<li><code>max_output_1</code> ,  <code>max_output_2</code> : 求最大值功能的两个输出。</li>\n<li><code>min_output_1</code> ,  <code>min_output_2</code> : 求最小值功能的两个输出。</li>\n<li><code>button_a</code> ,  <code>button_c</code> ,  <code>button_x</code> ,  <code>button_n</code> : 分别对应求和、比较、求最大值和求最小值的按钮信号。</li>\n<li><code>result_1</code> ,  <code>result_2</code> : 最终输出的结果位，用于连接到显示模块。</li>\n<li>通过 <code>always</code>  块监视按钮信号的变化，当某个按钮被按下时，相应的功能输出被选择并赋值给结果端口。</li>\n<li>如果没有按钮被按下，输出默认值为两个零，以确保在无输入状态下显示无效值。</li>\n</ul>\n<h4 id=\"代码实现-5\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-5\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">module</span> mux(</span><br><span class=\"line\">\t<span class=\"comment\">//四个模块的八个输出</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] add_output_1,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] add_output_2,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] cmp_output_1,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] cmp_output_2,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] max_output_1,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] max_output_2,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] min_output_1,</span><br><span class=\"line\"><span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] min_output_2,</span><br><span class=\"line\"><span class=\"comment\">//四个按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_a,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_c,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> button_x,</span><br><span class=\"line\"><span class=\"keyword\">input</span> button_n,</span><br><span class=\"line\"><span class=\"comment\">//输出：第一位数和第二位数</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] result_1,</span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] result_2</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">always</span> @ *</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (button_a==<span class=\"number\">1</span>)<span class=\"comment\">//如果是加法功能</span></span><br><span class=\"line\">        &#123;result_1,result_2&#125;=&#123;add_output_1,add_output_2&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (button_c==<span class=\"number\">1</span>)<span class=\"comment\">//如果是比较功能</span></span><br><span class=\"line\">        &#123;result_1,result_2&#125;=&#123;cmp_output_1,cmp_output_2&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (button_x==<span class=\"number\">1</span>)<span class=\"comment\">//如果是求最大值功能</span></span><br><span class=\"line\">        &#123;result_1,result_2&#125;=&#123;max_output_1,max_output_2&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(button_n==<span class=\"number\">1</span>)<span class=\"comment\">//如果是求最小值功能</span></span><br><span class=\"line\">        &#123;result_1,result_2&#125;=&#123;min_output_1,min_output_2&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"comment\">//如果都不是（没有按钮被摁下），就输出两个0.</span></span><br><span class=\"line\">        &#123;result_1,result_2&#125;=&#123;<span class=\"number\">4&#x27;b0000</span>,<span class=\"number\">4&#x27;b0000</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// 选择器 对输出信号进行选择送到LED模块</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"显示译码器模块seven_segment_decoderv\"><a class=\"markdownIt-Anchor\" href=\"#显示译码器模块seven_segment_decoderv\">#</a> 显示译码器模块（seven_segment_decoder.v）</h3>\n<h4 id=\"需求分析-6\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-6\">#</a> 需求分析</h4>\n<p>该模块需要将 4 位二进制输入（BCD 码）转换为对应的 7 段数码管显示，同时支持一些额外功能，如灭灯、测灯、灭零等。</p>\n<h4 id=\"设计思路-6\"><a class=\"markdownIt-Anchor\" href=\"#设计思路-6\">#</a> 设计思路</h4>\n<ul>\n<li><code>IB_n</code> ：灭灯信号，优先级最高，低电平有效。</li>\n<li><code>LT_n</code> ：测灯信号，优先级次高，低电平有效。</li>\n<li><code>RBI_n</code> ：灭零信号输入，低电平有效。</li>\n<li><code>RBO_n</code> ：灭零信号输出，低电平有效。</li>\n<li><code>P</code> ：最右侧数码管控制信号，用于控制显示状态。</li>\n<li>最高优先级的灭灯信号  <code>IB_n</code> ：如果  <code>IB_n</code>  为低电平，则数码管不显示任何内容。</li>\n<li>次高优先级的测灯信号  <code>LT_n</code> ：如果  <code>LT_n</code>  为低电平，则所有数码管段都点亮（包括小数点）。</li>\n<li>再次的灭零信号  <code>RBI_n</code> ：如果  <code>RBI_n</code>  为低电平且输入数据为 0，则数码管不显示内容，并将  <code>RBO_n</code>  设为低电平。</li>\n<li>在以上信号都未触发的情况下，根据输入的 4 位 BCD 码，输出相应的数码管显示编码。</li>\n<li>根据输入数据  <code>D</code>  对应的 4 位 BCD 码进行显示转换，并输出相应的 8 位数码管显示编码。</li>\n</ul>\n<h4 id=\"代码实现-6\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-6\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> seven_segment_decoder(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] D,              <span class=\"comment\">//输入</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> IB_n,                 <span class=\"comment\">//灭灯信号，优先级最高，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> LT_n,                 <span class=\"comment\">//测灯信号，优先级次高，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> RBI_n,                <span class=\"comment\">//灭零信号输入，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] L,         <span class=\"comment\">//数码管八个引脚</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> RBO_n,           <span class=\"comment\">//灭零信号输出，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> P               <span class=\"comment\">//最右侧数码管</span></span><br><span class=\"line\">    );   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">\tRBO_n=<span class=\"number\">1</span>;                                <span class=\"comment\">//非灭零状态</span></span><br><span class=\"line\">\tP=<span class=\"number\">1</span>;                                   <span class=\"comment\">//正常运行状态</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(IB_n==<span class=\"number\">0</span>) P=<span class=\"number\">0</span>;                       <span class=\"comment\">//灭灯状态</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(LT_n==<span class=\"number\">0</span>) <span class=\"keyword\">begin</span>                  <span class=\"comment\">//测灯状态</span></span><br><span class=\"line\">\t\tL=<span class=\"number\">8&#x27;b11111111</span>;                      <span class=\"comment\">//小数点也一起点亮</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RBI_n==<span class=\"number\">0</span>) <span class=\"keyword\">begin</span>     <span class=\"comment\">//灭零输入</span></span><br><span class=\"line\">\t\tRBO_n=<span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">//灭零状态</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(D==<span class=\"number\">4&#x27;b0000</span>)</span><br><span class=\"line\">\t\tL=<span class=\"number\">8&#x27;b00000000</span>;                            </span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">\t  <span class=\"keyword\">case</span>(D)\t</span><br><span class=\"line\">\t    <span class=\"comment\">//0-15数码管显示</span></span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0000</span>:L=<span class=\"number\">8&#x27;b11111100</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0001</span>:L=<span class=\"number\">8&#x27;b01100000</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0010</span>:L=<span class=\"number\">8&#x27;b11011010</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0011</span>:L=<span class=\"number\">8&#x27;b11110010</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0100</span>:L=<span class=\"number\">8&#x27;b01100110</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0101</span>:L=<span class=\"number\">8&#x27;b10110110</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0110</span>:L=<span class=\"number\">8&#x27;b10111110</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b0111</span>:L=<span class=\"number\">8&#x27;b11100000</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b1000</span>:L=<span class=\"number\">8&#x27;b11111110</span>;</span><br><span class=\"line\">\t\t<span class=\"number\">4&#x27;b1001</span>:L=<span class=\"number\">8&#x27;b11110110</span>;  </span><br><span class=\"line\">  \t\t<span class=\"number\">4&#x27;b1010</span>:L=<span class=\"number\">8&#x27;b00011010</span>;</span><br><span class=\"line\">  \t\t<span class=\"number\">4&#x27;b1011</span>:L=<span class=\"number\">8&#x27;b00110010</span>; </span><br><span class=\"line\">  \t\t<span class=\"number\">4&#x27;b1100</span>:L=<span class=\"number\">8&#x27;b01000110</span>;</span><br><span class=\"line\">  \t\t<span class=\"number\">4&#x27;b1101</span>:L=<span class=\"number\">8&#x27;b10010110</span>;</span><br><span class=\"line\">  \t\t<span class=\"number\">4&#x27;b1110</span>:L=<span class=\"number\">8&#x27;b00011110</span>;</span><br><span class=\"line\">  \t\t<span class=\"number\">4&#x27;b1111</span>:<span class=\"keyword\">begin</span></span><br><span class=\"line\">\t\t\tL=<span class=\"number\">8&#x27;b00000000</span>;</span><br><span class=\"line\">\t\t\tRBO_n=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span> \t\t</span><br><span class=\"line\">\t   <span class=\"keyword\">endcase</span></span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"顶层模块complexv\"><a class=\"markdownIt-Anchor\" href=\"#顶层模块complexv\">#</a> 顶层模块（complex.v）</h3>\n<h4 id=\"需求分析-7\"><a class=\"markdownIt-Anchor\" href=\"#需求分析-7\">#</a> 需求分析</h4>\n<p>该模块需要整合之前设计的所有功能模块，包括 BCD 加法器、比较器、最大值输出和最小值输出模块，以及多路选择器和数码管显示译码器。顶层模块的职责是协调这些模块的输入输出，实现输入数的求和、比较、最大值、最小值等功能，并将结果显示在数码管上。</p>\n<h4 id=\"设计思路-7\"><a class=\"markdownIt-Anchor\" href=\"#设计思路-7\">#</a> 设计思路</h4>\n<ul>\n<li>输入：包括两个 4 位 BCD 数  <code>num1</code>  和  <code>num2</code> ，以及四个功能按钮  <code>B_add</code> ,  <code>B_cmp</code> ,  <code>B_max</code> ,  <code>B_min</code> 。</li>\n<li>输出：包括两个 8 位数码管显示  <code>display1</code>  和  <code>display2</code> ，两个数码管选择信号  <code>select1</code>  和  <code>select2</code> ，以及两个灭零灯信号  <code>led1</code>  和  <code>led2</code> 。</li>\n<li>实例化四个功能模块（BCD 加法器、比较器、最大值输出和最小值输出），将输入数和相应按钮连接到各个模块。</li>\n<li>实例化多路选择器模块，将四个功能模块的输出和按钮信号连接到多路选择器。</li>\n<li>实例化数码管显示译码器，将多路选择器的输出连接到显示模块，并处理显示信号。</li>\n<li>定义中间连线，将各功能模块的输出连接到多路选择器，再将多路选择器的输出连接到数码管显示译码器。</li>\n</ul>\n<h4 id=\"代码实现-7\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-7\">#</a> 代码实现</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顶层模块</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> complex(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] num1,<span class=\"comment\">//输入A</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] num2,<span class=\"comment\">//输入B</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> B_add,<span class=\"comment\">//求和按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> B_cmp,<span class=\"comment\">//比较按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> B_max,<span class=\"comment\">//求最大值按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> B_min,<span class=\"comment\">//求最小值按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] display1,<span class=\"comment\">//左灯管脚</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] display2,<span class=\"comment\">//右灯管脚</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> select1,<span class=\"comment\">//左灯</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> select2,<span class=\"comment\">//右灯</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> led1,<span class=\"comment\">//左灭零灯</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> led2<span class=\"comment\">//右灭零灯</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//中间连线</span></span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_a_1;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_a_2;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_c_1;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_c_2;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_max_1;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_max_2;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_min_1;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] led_number_min_2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] to_led_1;</span><br><span class=\"line\"><span class=\"keyword\">wire</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] to_led_2;</span><br><span class=\"line\"><span class=\"comment\">//将四个功能模块实例化</span></span><br><span class=\"line\">bcd_adder BCD_ADDER</span><br><span class=\"line\">(<span class=\"variable\">.numa1</span>(num1),<span class=\"variable\">.numa2</span>(num2),<span class=\"variable\">.button_adder</span>(B_add),<span class=\"variable\">.resulta1</span>(led_number_a_1),<span class=\"variable\">.resulta2</span>(led_number_a_2));</span><br><span class=\"line\">compare CMP</span><br><span class=\"line\">(<span class=\"variable\">.numc1</span>(num1),<span class=\"variable\">.numc2</span>(num2),<span class=\"variable\">.button_compare</span>(B_cmp),<span class=\"variable\">.resultc1</span>(led_number_c_1),<span class=\"variable\">.resultc2</span>(led_number_c_2));</span><br><span class=\"line\">export_max EPMAX</span><br><span class=\"line\">(<span class=\"variable\">.num_max1</span>(num1),<span class=\"variable\">.num_max2</span>(num2),<span class=\"variable\">.button_max</span>(B_max),<span class=\"variable\">.result_max1</span>(led_number_max_1),<span class=\"variable\">.result_max2</span>(led_number_max_2));</span><br><span class=\"line\">export_min EPMIN</span><br><span class=\"line\">(<span class=\"variable\">.num_min1</span>(num1),<span class=\"variable\">.num_min2</span>(num2),<span class=\"variable\">.button_min</span>(B_min),<span class=\"variable\">.result_min1</span>(led_number_min_1),<span class=\"variable\">.result_min2</span>(led_number_min_2));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将选择器实例化</span></span><br><span class=\"line\">mux MUX1 (</span><br><span class=\"line\">    <span class=\"variable\">.add_output_1</span>(led_number_a_1),<span class=\"variable\">.add_output_2</span>(led_number_a_2),<span class=\"comment\">//加法输出</span></span><br><span class=\"line\">    <span class=\"variable\">.cmp_output_1</span>(led_number_c_1),<span class=\"variable\">.cmp_output_2</span>(led_number_c_2),<span class=\"comment\">//比较输出</span></span><br><span class=\"line\">    <span class=\"variable\">.max_output_1</span>(led_number_max_1),<span class=\"variable\">.max_output_2</span>(led_number_max_2),<span class=\"comment\">//最大值输出</span></span><br><span class=\"line\">    <span class=\"variable\">.min_output_1</span>(led_number_min_1),<span class=\"variable\">.min_output_2</span>(led_number_min_2),<span class=\"comment\">//最小值输出</span></span><br><span class=\"line\">    <span class=\"variable\">.button_a</span>(B_add),<span class=\"variable\">.button_c</span>(B_cmp),<span class=\"variable\">.button_x</span>(B_max),<span class=\"variable\">.button_n</span>(B_min),<span class=\"comment\">//四个按钮</span></span><br><span class=\"line\">    <span class=\"variable\">.result_1</span>(to_led_1),<span class=\"variable\">.result_2</span>(to_led_2));<span class=\"comment\">//输出，传给LED模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//LED模块实例化</span></span><br><span class=\"line\">seven_segment_decoder LED1</span><br><span class=\"line\">(<span class=\"variable\">.IB_n</span>(<span class=\"number\">1&#x27;b1</span>),<span class=\"variable\">.LT_n</span>(<span class=\"number\">1&#x27;b1</span>),<span class=\"variable\">.RBI_n</span>(<span class=\"number\">1&#x27;b1</span>),<span class=\"variable\">.D</span>(to_led_1),<span class=\"variable\">.L</span>(display1),<span class=\"variable\">.RBO_n</span>(led1),<span class=\"variable\">.P</span>(select1));</span><br><span class=\"line\">seven_segment_decoder LED2</span><br><span class=\"line\">(<span class=\"variable\">.IB_n</span>(<span class=\"number\">1&#x27;b1</span>),<span class=\"variable\">.LT_n</span>(<span class=\"number\">1&#x27;b1</span>),<span class=\"variable\">.RBI_n</span>(<span class=\"number\">1&#x27;b1</span>),<span class=\"variable\">.D</span>(to_led_2),<span class=\"variable\">.L</span>(display2),<span class=\"variable\">.RBO_n</span>(led2),<span class=\"variable\">.P</span>(select2));</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code"
            ]
        },
        {
            "id": "https://enjundu.github.io/shudian/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C%E4%B8%80/",
            "url": "https://enjundu.github.io/shudian/%E6%95%B0%E7%94%B5%E5%AE%9E%E9%AA%8C%E4%B8%80/",
            "title": "组合逻辑基础模块",
            "date_published": "2024-07-04T12:17:48.000Z",
            "content_html": "<h1 id=\"实验一组合逻辑基础模块\"><a class=\"markdownIt-Anchor\" href=\"#实验一组合逻辑基础模块\">#</a> 实验一：组合逻辑基础模块</h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>本实验主要基于 EGO1 实现常用组合电路模块，包括编码器 / 译码器 / 显示译码器 / 比较器。实验的主要目的包括：</p>\n<ul>\n<li>熟悉基于 FPGA 的组合数字电路设计流程，学习使用 vivado、modelsim 等软件</li>\n<li>基于 FPGA 实现常用组合电路模块，加深对相关模块功能的理解</li>\n</ul>\n<h3 id=\"实验内容\"><a class=\"markdownIt-Anchor\" href=\"#实验内容\">#</a> 实验内容</h3>\n<h4 id=\"一-8-3优先编码器设计\"><a class=\"markdownIt-Anchor\" href=\"#一-8-3优先编码器设计\">#</a> 一、8-3 优先编码器设计</h4>\n<ul>\n<li>8 位输入数据由拨动开关 SW7-SW0 输入，高电平有效（拨动开关向上拨）</li>\n<li>输出由发光二极管 LD2 中的 2-0 显示（输出为 1 的时候发光管亮）</li>\n<li>SW7 的优先级最高，对应输出编码为 111，SW6 优先级次之，对应输出编码为 110，依次类推，SW0 的优先级最低，对应输出编码为 000</li>\n</ul>\n<h4 id=\"二-3-8译码器设计\"><a class=\"markdownIt-Anchor\" href=\"#二-3-8译码器设计\">#</a> 二、3-8 译码器设计</h4>\n<ul>\n<li>三位输入数据由拨动开关 SW2-SW0 输入，SW2 为 MSB</li>\n<li>输出由发光二极管 LD2 中的 7-0 显示，高电平有效</li>\n</ul>\n<h4 id=\"三-四位数据比较器设计\"><a class=\"markdownIt-Anchor\" href=\"#三-四位数据比较器设计\">#</a> 三、四位数据比较器设计</h4>\n<ul>\n<li>数据 A 由拨动开关 SW7-SW4 输入，SW7 为 MSB</li>\n<li>数据 B 由拨动开关 SW3-SW0 输入，SW3 为 MSB</li>\n<li>输出由 LD2 的 2-0 输出；当 A&gt;B 时 2 号灯亮，当 A&lt;B 时 0 号灯亮，当 A=B 时 1 号灯亮</li>\n</ul>\n<h4 id=\"四-七段译码器\"><a class=\"markdownIt-Anchor\" href=\"#四-七段译码器\">#</a> 四、七段译码器</h4>\n<ul>\n<li>四位输入数据由拨动开关 SW3-SW0 输入，SW3 为 MSB</li>\n<li>IB_n（灭灯信号）由 SW7 输入，优先级最高，低电平有效</li>\n<li>LT_n（测灯信号）由 SW6 输入，优先级仅次于 IB_n, 低电平有效</li>\n<li>RBI_n（灭零信号输入）由 SW5 输入，低电平有效</li>\n<li>RBO_n（灭零信号输出）由 LD2 的 0 号灯输出，低电平有效，此设计中灭零信号输出不需要与灭灯信号复用管脚</li>\n<li>显示输出信号 Ya…Yb 用于控制最右侧数码管的显示</li>\n<li>显示图案与输入数据的关系如下表：</li>\n<li><img data-src=\"https://s2.loli.net/2024/07/03/CEYpIaTK8GZlhUF.png\" alt=\"image.png\"></li>\n</ul>\n<h2 id=\"实验设计\"><a class=\"markdownIt-Anchor\" href=\"#实验设计\">#</a> 实验设计</h2>\n<h3 id=\"8-3优先编码器设计\"><a class=\"markdownIt-Anchor\" href=\"#8-3优先编码器设计\">#</a> 8-3 优先编码器设计</h3>\n<h4 id=\"8-3优先编码器介绍\"><a class=\"markdownIt-Anchor\" href=\"#8-3优先编码器介绍\">#</a> 8-3 优先编码器介绍</h4>\n<p>使用基础逻辑门电路实现一个 8 线路（输入）至 3 线路（输出）的 8-3 优先编码器。其中，输入信号从 I0 至 I7 为高电平有效，可以视作数字 0 至数字 7 的指示位。8-3 优先权编码器是一个能够将 8 个输入信号进行编码，并根据优先级生成 3 位输出的电路。它可以根据输入信号的优先级，将其中优先级最高的输入转换成对应的三位编码。如果同时有多个输入信号被激活，那么只有优先级最高的信号会被编码器编码。这种编码器通常被用在状况监测、中断控制等场合。</p>\n<p>组合电路图如下：</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/hGzFRLUDrgImbCx.png\" alt=\"image.png\"></p>\n<h4 id=\"列真值表\"><a class=\"markdownIt-Anchor\" href=\"#列真值表\">#</a> 列真值表</h4>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/cfAqJRj5atnzX8i.png\" alt=\"image.png\"></p>\n<h4 id=\"设计伪代码\"><a class=\"markdownIt-Anchor\" href=\"#设计伪代码\">#</a> 设计伪代码</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (IN[<span class=\"number\">7</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">111</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">6</span>] == <span class=\"number\">1</span>) OUT =<span class=\"number\">110</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">5</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">101</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">4</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">100</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">3</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">011</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">2</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">010</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">1</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">001</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">000</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最终代码部分\"><a class=\"markdownIt-Anchor\" href=\"#最终代码部分\">#</a> 最终代码部分</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> priority_encoder_823(  </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] IN, </span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] OUT</span><br><span class=\"line\">);</span><br><span class=\"line\">    <span class=\"keyword\">always</span> @(*) <span class=\"keyword\">begin</span>  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IN[<span class=\"number\">7</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b111</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">6</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b110</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">5</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b101</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">4</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b100</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">3</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b011</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">2</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b010</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">1</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b001</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IN[<span class=\"number\">0</span>] == <span class=\"number\">1</span>) OUT = <span class=\"number\">3&#x27;b000</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> OUT = <span class=\"number\">3&#x27;b000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span>  </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验照片\"><a class=\"markdownIt-Anchor\" href=\"#实验照片\">#</a> 实验照片</h4>\n<h5 id=\"sw0为高电位其余均为低电位时的电路000\"><a class=\"markdownIt-Anchor\" href=\"#sw0为高电位其余均为低电位时的电路000\">#</a> SW0 为高电位，其余均为低电位时的电路:——000</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/ivyCuBNQ27naXpA.png\" alt=\"image.png\"></p>\n<h5 id=\"最高的高电位的优先级为sw7时的效果图111\"><a class=\"markdownIt-Anchor\" href=\"#最高的高电位的优先级为sw7时的效果图111\">#</a> 最高的高电位的优先级为 SW7 时的效果图 ——111</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/7rOi9C34SHWkoeA.png\" alt=\"image.png\"></p>\n<h3 id=\"3-8译码器设计\"><a class=\"markdownIt-Anchor\" href=\"#3-8译码器设计\">#</a> 3-8 译码器设计</h3>\n<h4 id=\"3-8译码器介绍\"><a class=\"markdownIt-Anchor\" href=\"#3-8译码器介绍\">#</a> 3-8 译码器介绍</h4>\n<p>38 译码器是一种数字逻辑电路，用于将 3 位二进制输入编码为 8 位输出。它的作用是将特定的输入模式映射到相应的输出。在数字电路设计和信息处理中，38 译码器是一个常见且有用的组件，可以帮助实现数据的解码和选择性输出。</p>\n<p>3-8 译码器由三个输入引脚和八个输出引脚组成。输入引脚是 A0、A1 和 A2，它们可以是 0 或 1。输出引脚是 YO 到 Y7，它们中的一个会被激活，其它的则处于非激活状态。当输入引脚的二进制值为 000 时，输出引脚 YO 会被激活。当输入引脚的二进制值为 001 时，输出引脚 Y1 会被激活，以此类推，直到输入引脚的二进制值为 111 时，输出引脚 Y7 会被激活。</p>\n<p>3-8 译码器的结构及真值表如下图所示：</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/QStADY916CZPMjX.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/js1nc7mEzWdJQHB.png\" alt=\"image.png\"></p>\n<h4 id=\"程序伪代码和基本思路\"><a class=\"markdownIt-Anchor\" href=\"#程序伪代码和基本思路\">#</a> 程序伪代码和基本思路</h4>\n<p>简单来说，就是使输入的三位二进制数的<strong>对应的十进制数为 a</strong>，使得 SWa=1</p>\n<p>即代码为：</p>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span>(IN)  \t</span><br><span class=\"line\">       <span class=\"number\">3&#x27;b000</span>: OUT = <span class=\"number\">8&#x27;b00000001</span>; <span class=\"comment\">// IN = 000, OUT0 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b001</span>: OUT = <span class=\"number\">8&#x27;b00000010</span>; <span class=\"comment\">// IN = 001, OUT1 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b010</span>: OUT = <span class=\"number\">8&#x27;b00000100</span>; <span class=\"comment\">// IN = 010, OUT2 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b011</span>: OUT = <span class=\"number\">8&#x27;b00001000</span>; <span class=\"comment\">// IN = 011, OUT3 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b100</span>: OUT = <span class=\"number\">8&#x27;b00010000</span>; <span class=\"comment\">// IN = 100, OUT4 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b101</span>: OUT = <span class=\"number\">8&#x27;b00100000</span>; <span class=\"comment\">// IN = 101, OUT5 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b110</span>: OUT = <span class=\"number\">8&#x27;b01000000</span>; <span class=\"comment\">// IN = 110, OUT6 is high  </span></span><br><span class=\"line\">       <span class=\"number\">3&#x27;b111</span>: OUT = <span class=\"number\">8&#x27;b10000000</span>; <span class=\"comment\">// IN = 111, OUT7 is high  </span></span><br><span class=\"line\">       <span class=\"keyword\">default</span>: OUT = <span class=\"number\">8&#x27;b00000000</span>; <span class=\"comment\">// No valid input, all OUT are low  </span></span><br></pre></td></tr></table></figure>\n<p>该代码的电路图如下所示：<img data-src=\"https://s2.loli.net/2024/07/03/wlR9WOLubageVG8.png\" alt=\"image.png\"></p>\n<h4 id=\"最终代码部分-2\"><a class=\"markdownIt-Anchor\" href=\"#最终代码部分-2\">#</a> 最终代码部分</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> decoder_328(  </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] IN, <span class=\"comment\">// IN2, IN1, IN0 as the 3-bit input  </span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] OUT <span class=\"comment\">// OUT7 to OUT0 as the 8-bit output  </span></span><br><span class=\"line\">);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">always</span> @(*) <span class=\"keyword\">begin</span>  </span><br><span class=\"line\">    <span class=\"keyword\">case</span>(IN)  \t</span><br><span class=\"line\">        <span class=\"number\">3&#x27;b000</span>: OUT = <span class=\"number\">8&#x27;b00000001</span>; <span class=\"comment\">// IN = 000, OUT0 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b001</span>: OUT = <span class=\"number\">8&#x27;b00000010</span>; <span class=\"comment\">// IN = 001, OUT1 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b010</span>: OUT = <span class=\"number\">8&#x27;b00000100</span>; <span class=\"comment\">// IN = 010, OUT2 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b011</span>: OUT = <span class=\"number\">8&#x27;b00001000</span>; <span class=\"comment\">// IN = 011, OUT3 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b100</span>: OUT = <span class=\"number\">8&#x27;b00010000</span>; <span class=\"comment\">// IN = 100, OUT4 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b101</span>: OUT = <span class=\"number\">8&#x27;b00100000</span>; <span class=\"comment\">// IN = 101, OUT5 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b110</span>: OUT = <span class=\"number\">8&#x27;b01000000</span>; <span class=\"comment\">// IN = 110, OUT6 is high  </span></span><br><span class=\"line\">        <span class=\"number\">3&#x27;b111</span>: OUT = <span class=\"number\">8&#x27;b10000000</span>; <span class=\"comment\">// IN = 111, OUT7 is high  </span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: OUT = <span class=\"number\">8&#x27;b00000000</span>; <span class=\"comment\">// No valid input, all OUT are low  </span></span><br><span class=\"line\">    <span class=\"keyword\">endcase</span>  </span><br><span class=\"line\"><span class=\"keyword\">end</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验照片-2\"><a class=\"markdownIt-Anchor\" href=\"#实验照片-2\">#</a> 实验照片</h4>\n<h5 id=\"输入111则7f6灯应亮\"><a class=\"markdownIt-Anchor\" href=\"#输入111则7f6灯应亮\">#</a> 输入 111，则 7 (F6) 灯应亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/xO4I38UrDj6dFPZ.png\" alt=\"image.png\"></p>\n<h5 id=\"输入000则0k2灯亮\"><a class=\"markdownIt-Anchor\" href=\"#输入000则0k2灯亮\">#</a> 输入 000，则 0 (K2) 灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/c4R8ZKAw5rgjufM.png\" alt=\"image.png\"></p>\n<h5 id=\"输入010则2j3灯亮\"><a class=\"markdownIt-Anchor\" href=\"#输入010则2j3灯亮\">#</a> 输入 010，则 2 (J3) 灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/RwXsdnmu2SaeAMz.png\" alt=\"image.png\"></p>\n<h5 id=\"输入011则3h4灯亮\"><a class=\"markdownIt-Anchor\" href=\"#输入011则3h4灯亮\">#</a> 输入 011. 则 3 (H4) 灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/xnsPCcRkG4umD5B.png\" alt=\"image.png\"></p>\n<h3 id=\"四位数值比较器\"><a class=\"markdownIt-Anchor\" href=\"#四位数值比较器\">#</a> 四位数值比较器</h3>\n<h4 id=\"四位数值比较器介绍\"><a class=\"markdownIt-Anchor\" href=\"#四位数值比较器介绍\">#</a> 四位数值比较器介绍</h4>\n<p>四位数值比较器即为通过 SW4~SW7 的输入作为数据 A，将 SW0~SW3 的输入作为数据 B，通过比较数据 A 和数据 B 的大小，设计了发光二极管 LD0~2. 当 A&lt;B 时 0 号灯亮，当 A=B 时 1 号灯亮，当 A&gt;B 的时候 2 号灯亮</p>\n<p>真值表简图如下所示</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/l5uN7FfwXMB8ziP.png\" alt=\"image.png\"></p>\n<h4 id=\"主要伪代码介绍\"><a class=\"markdownIt-Anchor\" href=\"#主要伪代码介绍\">#</a> 主要伪代码介绍</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (SW_A &gt; SW_B) LD2 = <span class=\"number\">3&#x27;b100</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SW_A &lt; SW_B) LD2 = <span class=\"number\">3&#x27;b001</span>;  </span><br><span class=\"line\"><span class=\"keyword\">else</span> LD2 = <span class=\"number\">3&#x27;b010</span>;  </span><br></pre></td></tr></table></figure>\n<h4 id=\"最终代码\"><a class=\"markdownIt-Anchor\" href=\"#最终代码\">#</a> 最终代码</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> data_comparator(  </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] SW_A,  </span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] SW_B,  </span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] LD2  </span><br><span class=\"line\">);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">always</span> @(*) <span class=\"keyword\">begin</span>  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (SW_A &gt; SW_B) LD2 = <span class=\"number\">3&#x27;b100</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (SW_A &lt; SW_B) LD2 = <span class=\"number\">3&#x27;b001</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> LD2 = <span class=\"number\">3&#x27;b010</span>;  </span><br><span class=\"line\"><span class=\"keyword\">end</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验照片-3\"><a class=\"markdownIt-Anchor\" href=\"#实验照片-3\">#</a> 实验照片</h4>\n<h5 id=\"a为0011b为1000则0号灯亮\"><a class=\"markdownIt-Anchor\" href=\"#a为0011b为1000则0号灯亮\">#</a> A 为 0011，B 为 1000，则 0 号灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/d3X1gjWzhHJUwO5.png\" alt=\"image.png\"></p>\n<h5 id=\"ab均为01001号灯亮\"><a class=\"markdownIt-Anchor\" href=\"#ab均为01001号灯亮\">#</a> AB 均为\t0100,1 号灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/WH4nks7IORfLlXw.png\" alt=\"image.png\"></p>\n<h5 id=\"a为0100b为00002号灯亮\"><a class=\"markdownIt-Anchor\" href=\"#a为0100b为00002号灯亮\">#</a> A 为 0100，B 为 0000，2 号灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/6ujZGIkK8os39yY.png\" alt=\"image.png\"></p>\n<h5 id=\"ab均为00001号灯亮\"><a class=\"markdownIt-Anchor\" href=\"#ab均为00001号灯亮\">#</a> AB 均为 0000,1 号灯亮</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/wGb9omK4Jh5VBiM.png\" alt=\"image.png\"></p>\n<h3 id=\"七段译码器\"><a class=\"markdownIt-Anchor\" href=\"#七段译码器\">#</a> 七段译码器</h3>\n<h4 id=\"七段译码器介绍\"><a class=\"markdownIt-Anchor\" href=\"#七段译码器介绍\">#</a> 七段译码器介绍</h4>\n<p>七段译码器是一种常见的数字逻辑电路，用于将数字输入转换为对应的七段数码管显示。它通常由四个主要部分组成：</p>\n<p>输入端：七段译码器接受数字输入信号，通常是二进制形式，可以是四位、八位或更多位的数字。</p>\n<p>译码逻辑：译码逻辑是七段译码器的核心部分，它根据输入信号的状态，将对应的七段数码管的段选引脚控制为高电平或低电平，从而实现数字的显示。</p>\n<p>七段数码管：七段数码管是一种常见的数字显示器件，它由七个独立的 LED 段组成，每个段对应一个特定的显示元素，包括水平线段和斜线段，可以显示数字 0 到 9 以及一些字母和符号。</p>\n<p>输出端：输出端连接到七段数码管的各个段选引脚，将译码逻辑生成的信号传递给数码管，控制其显示相应的数字或字符。</p>\n<p>七段译码器通常用于数字仪表、计数器、计时器、闹钟、温度计等各种电子设备中，提供了一种简单而有效的数字显示解决方案。</p>\n<h4 id=\"细节理解\"><a class=\"markdownIt-Anchor\" href=\"#细节理解\">#</a> 细节理解</h4>\n<p>这个实验是关于七段译码器的设计与应用。七段译码器是一种数字逻辑电路，用于将二进制数据输入转换为对应的七段数码管显示。在这个实验中，具体要求如下：</p>\n<p>输入数据：四位二进制数据由拨动开关 SW3-SW0 输入，其中 SW3 为最高有效位（Most Significant Bit，MSB）。</p>\n<p>灭灯信号（IB_n）：由开关 SW7 输入，优先级最高，低电平有效。这个信号用于指示需要将特定数码管熄灭。</p>\n<p>测灯信号（LT_n）：由开关 SW6 输入，优先级次于灭灯信号，低电平有效。类似于灭灯信号，这个信号也用于指示特定数码管的状态。</p>\n<p>灭零信号输入（RBI_n）：由开关 SW5 输入，低电平有效。这个信号用于指示需要将数码管中的零段熄灭。</p>\n<p>灭零信号输出（RBO_n）：由 LD2 的 0 号灯输出，低电平有效。这个信号通常用于控制其他部分电路中的逻辑，以使零段熄灭。在这个设计中，灭零信号输出不需要与灭灯信号复用管脚。</p>\n<h4 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h4>\n<p>根据各个优先级，通过设计各个状态来满足该实验的前置要求：</p>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三、RBO_n=<span class=\"number\">1</span>;                                <span class=\"comment\">//非灭零状态</span></span><br><span class=\"line\">    P=<span class=\"number\">1</span>;                                   <span class=\"comment\">//正常运行状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IB_n==<span class=\"number\">0</span>) P=<span class=\"number\">0</span>;                       <span class=\"comment\">//灭灯状态</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(IT_n==<span class=\"number\">0</span>) <span class=\"keyword\">begin</span>                  <span class=\"comment\">//测灯状态</span></span><br><span class=\"line\">        L=<span class=\"number\">8&#x27;b11111111</span>;                      <span class=\"comment\">//小数点也一起点亮</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RBI_n==<span class=\"number\">0</span>&amp;&amp;D==<span class=\"number\">4&#x27;b0000</span>) <span class=\"keyword\">begin</span>     <span class=\"comment\">//灭零输入</span></span><br><span class=\"line\">        L=<span class=\"number\">8&#x27;b00000000</span>;</span><br><span class=\"line\">        RBO_n=<span class=\"number\">0</span>;                            <span class=\"comment\">//灭零状态</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/CEYpIaTK8GZlhUF.png\" alt=\"image.png\"></p>\n<p>再根据给出的显示要求，我们通过其特征来设计 4 位二进制数（0~15）时七段译码器的显示。即不同输入情况下灯管的亮灭状态。通过观察，我们有如下设计：</p>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"comment\">//0-15数码管显示</span></span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0000</span>:L=<span class=\"number\">8&#x27;b11111100</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0001</span>:L=<span class=\"number\">8&#x27;b01100000</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0010</span>:L=<span class=\"number\">8&#x27;b11011010</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0011</span>:L=<span class=\"number\">8&#x27;b11110010</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0100</span>:L=<span class=\"number\">8&#x27;b01100110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0101</span>:L=<span class=\"number\">8&#x27;b10110110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0110</span>:L=<span class=\"number\">8&#x27;b10111110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0111</span>:L=<span class=\"number\">8&#x27;b11100000</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1000</span>:L=<span class=\"number\">8&#x27;b11111110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1001</span>:L=<span class=\"number\">8&#x27;b11110110</span>;  </span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1010</span>:L=<span class=\"number\">8&#x27;b00011010</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1011</span>:L=<span class=\"number\">8&#x27;b00110010</span>; </span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1100</span>:L=<span class=\"number\">8&#x27;b01000110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1101</span>:L=<span class=\"number\">8&#x27;b10010110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1110</span>:L=<span class=\"number\">8&#x27;b00011110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1111</span>:L=<span class=\"number\">8&#x27;b00000000</span>;      </span><br></pre></td></tr></table></figure>\n<h4 id=\"最终代码-2\"><a class=\"markdownIt-Anchor\" href=\"#最终代码-2\">#</a> 最终代码</h4>\n<figure class=\"highlight v\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> seven_segment_decoder(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] D,              <span class=\"comment\">//输入</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> IB_n,                 <span class=\"comment\">//灭灯信号，优先级最高，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> LT_n,                 <span class=\"comment\">//测灯信号，优先级次高，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span> RBI_n,                <span class=\"comment\">//灭零信号输入，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] L,         <span class=\"comment\">//数码管八个引脚</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> RBO_n,           <span class=\"comment\">//灭零信号输出，低电平有效</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> P               <span class=\"comment\">//最右侧数码管</span></span><br><span class=\"line\">    );   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    RBO_n=<span class=\"number\">1</span>;                                <span class=\"comment\">//非灭零状态</span></span><br><span class=\"line\">    P=<span class=\"number\">1</span>;                                   <span class=\"comment\">//正常运行状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(IB_n==<span class=\"number\">0</span>) P=<span class=\"number\">0</span>;                       <span class=\"comment\">//灭灯状态</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(IT_n==<span class=\"number\">0</span>) <span class=\"keyword\">begin</span>                  <span class=\"comment\">//测灯状态</span></span><br><span class=\"line\">        L=<span class=\"number\">8&#x27;b11111111</span>;                      <span class=\"comment\">//小数点也一起点亮</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RBI_n==<span class=\"number\">0</span>&amp;&amp;D==<span class=\"number\">4&#x27;b0000</span>) <span class=\"keyword\">begin</span>     <span class=\"comment\">//灭零输入</span></span><br><span class=\"line\">        L=<span class=\"number\">8&#x27;b00000000</span>;</span><br><span class=\"line\">        RBO_n=<span class=\"number\">0</span>;                            <span class=\"comment\">//灭零状态</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span>(D)</span><br><span class=\"line\">        <span class=\"comment\">//0-15数码管显示</span></span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0000</span>:L=<span class=\"number\">8&#x27;b11111100</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0001</span>:L=<span class=\"number\">8&#x27;b01100000</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0010</span>:L=<span class=\"number\">8&#x27;b11011010</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0011</span>:L=<span class=\"number\">8&#x27;b11110010</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0100</span>:L=<span class=\"number\">8&#x27;b01100110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0101</span>:L=<span class=\"number\">8&#x27;b10110110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0110</span>:L=<span class=\"number\">8&#x27;b10111110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b0111</span>:L=<span class=\"number\">8&#x27;b11100000</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1000</span>:L=<span class=\"number\">8&#x27;b11111110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1001</span>:L=<span class=\"number\">8&#x27;b11110110</span>;  </span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1010</span>:L=<span class=\"number\">8&#x27;b00011010</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1011</span>:L=<span class=\"number\">8&#x27;b00110010</span>; </span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1100</span>:L=<span class=\"number\">8&#x27;b01000110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1101</span>:L=<span class=\"number\">8&#x27;b10010110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1110</span>:L=<span class=\"number\">8&#x27;b00011110</span>;</span><br><span class=\"line\">        <span class=\"number\">4&#x27;b1111</span>:L=<span class=\"number\">8&#x27;b00000000</span>;      </span><br><span class=\"line\">       <span class=\"keyword\">endcase</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实验照片-4\"><a class=\"markdownIt-Anchor\" href=\"#实验照片-4\">#</a> 实验照片</h4>\n<h5 id=\"非灭零状态rbi_n均为高电平\"><a class=\"markdownIt-Anchor\" href=\"#非灭零状态rbi_n均为高电平\">#</a> 非灭零状态：RBI_n 均为高电平</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/QHMdJPG9iY2mXoO.png\" alt=\"image.png\"></p>\n<h5 id=\"灭灯状态ib_nsw7为低电平\"><a class=\"markdownIt-Anchor\" href=\"#灭灯状态ib_nsw7为低电平\">#</a> 灭灯状态：IB_n——SW7 为低电平</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/EhwY1BpH93Z5xGJ.png\" alt=\"image.png\"></p>\n<h5 id=\"测灯状态sw6低电平有效sw7高电平\"><a class=\"markdownIt-Anchor\" href=\"#测灯状态sw6低电平有效sw7高电平\">#</a> 测灯状态：SW6 低电平有效，SW7 高电平</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/53vRlbhPjXMzqNO.png\" alt=\"image.png\"></p>\n<h5 id=\"灭零状态sw5低电平有效\"><a class=\"markdownIt-Anchor\" href=\"#灭零状态sw5低电平有效\">#</a> 灭零状态：SW5 低电平有效</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/q2mbTODEicVuj89.png\" alt=\"image.png\"></p>\n<h4 id=\"正常运行sw7~sw4保持为1110\"><a class=\"markdownIt-Anchor\" href=\"#正常运行sw7~sw4保持为1110\">#</a> 正常运行：SW7~SW4 保持为 1110</h4>\n<h5 id=\"0001-输出1\"><a class=\"markdownIt-Anchor\" href=\"#0001-输出1\">#</a> 0001 输出 1</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/WPAq6ueitDksbdX.png\" alt=\"image.png\"></p>\n<h5 id=\"0101-输出5\"><a class=\"markdownIt-Anchor\" href=\"#0101-输出5\">#</a> 0101 输出 5</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/EazeiZs4Or12UVx.png\" alt=\"image.png\"></p>\n<h4 id=\"1000输出8\"><a class=\"markdownIt-Anchor\" href=\"#1000输出8\">#</a> 1000 输出 8</h4>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/EazeiZs4Or12UVx.png\" alt=\"image.png\"></p>\n<h5 id=\"1010输出10\"><a class=\"markdownIt-Anchor\" href=\"#1010输出10\">#</a> 1010 输出 10</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/fd4HbkrYmuj7w83.png\" alt=\"image.png\"></p>\n<h5 id=\"1011输出11\"><a class=\"markdownIt-Anchor\" href=\"#1011输出11\">#</a> 1011, 输出 11</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/PTbDqmM5RyUweAl.png\" alt=\"image.png\"></p>\n<h5 id=\"1100输出12\"><a class=\"markdownIt-Anchor\" href=\"#1100输出12\">#</a> 1100 输出 12</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/Pbwpi4cQv8oZaIu.png\" alt=\"image.png\"></p>\n<h5 id=\"1101输出13\"><a class=\"markdownIt-Anchor\" href=\"#1101输出13\">#</a> 1101 输出 13</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/BzYWHuKveAfjxan.png\" alt=\"image.png\"></p>\n<h4 id=\"1110输出14\"><a class=\"markdownIt-Anchor\" href=\"#1110输出14\">#</a> 1110 输出 14</h4>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/xTwnFbfypRs59lj.png\" alt=\"image.png\"></p>\n<h5 id=\"1111输出15\"><a class=\"markdownIt-Anchor\" href=\"#1111输出15\">#</a> 1111 输出 15</h5>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/9IM8DO7lJGFZRT6.png\" alt=\"image.png\"></p>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code"
            ]
        },
        {
            "id": "https://enjundu.github.io/Sanfordcs231n/README_2_Linear%20Classification/",
            "url": "https://enjundu.github.io/Sanfordcs231n/README_2_Linear%20Classification/",
            "title": "k-NN最近分类器",
            "date_published": "2024-07-04T06:02:28.000Z",
            "content_html": "<p><strong>本章阅读材料链接为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jczIzMW4uZ2l0aHViLmlvL2xpbmVhci1jbGFzc2lmeS8=\"> CS231n Convolutional Neural Networks for Visual Recognition</span></strong></p>\n<h1 id=\"线性分类\"><a class=\"markdownIt-Anchor\" href=\"#线性分类\">#</a> 线性分类</h1>\n<p>​\t在上一节中，我们介绍了图像分类问题，即从一组固定类别中为图像分配单个标签的任务。此外，我们描述了 k 最近邻 (kNN) 分类器，它通过将图像与训练集中的（带注释的）图像进行比较来标记图像。正如我们所见，kNN 有许多缺点：</p>\n<ul>\n<li>\n<p>分类器必须<em>记住</em>所有训练数据并将其存储以供将来与测试数据进行比较。这是空间效率低下的，因为数据集的大小很可能达到千兆字节。</p>\n</li>\n<li>\n<p>对测试图像进行分类的成本很高，因为它需要与所有训练图像进行比较。</p>\n</li>\n</ul>\n<p><strong>摘要：<strong>我们现在将开发一种更强大的图像分类方法，最终将自然地扩展到整个神经网络和卷积神经网络。该方法将有两个主要组成部分：将原始数据映射到类别分数的</strong>分数函数</strong>，以及量化预测分数和真实标签之间的一致性的<strong>损失函数</strong>。然后，我们将其视为一个优化问题，其中我们将相对于得分函数的参数最小化损失函数。</p>\n<h2 id=\"1从图像到标签分数的参数化映射\"><a class=\"markdownIt-Anchor\" href=\"#1从图像到标签分数的参数化映射\">#</a> 1. 从图像到标签分数的参数化映射</h2>\n<p>​\t首先我们定义一个评价函数，用于将图片的像素映射为每一类别的得分，具体来说假设我们有一个训练集，其中的每个样本<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><msup><mi>R</mi><mi>D</mi></msup></mrow><annotation encoding=\"application/x-tex\">x_i \\in R^D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></span></span></span></span></span></span> 每个样本对应一个标签 yi，这里的 i=1…N, 并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mrow><mn>1</mn><mo>…</mo><mi>K</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y_i \\in { 1 \\dots K }</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span></span>, 即表示有 N 个样本 (每个样本都有一个维度 D) 和 K 个不同的类别，例如在 CIFAR-10 中我们有一个训练集 N=50000，每个图像都有 32×32×3=3072 个像素，K=10，因为有 10 个不同的类别，故我们需要定义一个评估函数 f:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi>R</mi><mi>D</mi></msup><mo>↦</mo><msup><mi>R</mi><mi>K</mi></msup></mrow><annotation encoding=\"application/x-tex\">f: R^D \\mapsto R^K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.852331em;vertical-align:-0.011em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span></span></span></span></span></span></span></span>，即将原始图像像素映射到类别分数。</p>\n<p>** 线性分类：** 我们以最简单的线性分类器为例，即我们定义评估函数为 (这里的 × 为矩阵的乘)：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>W</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">f(x_i, W, b) =  W x_i + b\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<p>在上述方程中，我们假设图像 Xi，将其所有像素平展为形状为 [D×1] 的单列向量。矩阵 W（大小 [KxD]）和向量 b（大小 [kx1]）是函数的<strong>参数</strong>。在 CIFAR-10 中，xi 包含第 i 个图像中的所有像素，这些像素被展平为单个 [3072 x 1] 列，W 是 [10 x 3072]，b 是 [10×1]，因此 3072 个数字进入函数（原始像素值），10 个数字出来（类得分）。W 中的参数通常被称为权重，b 被称为偏差向量，因为它影响输出分数，但不与实际数据 xi 交互。然而，您经常会听到人们交替使用权重和参数这两个术语。</p>\n<p><strong>概念解释</strong></p>\n<ol>\n<li><strong>W：权重矩阵</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：W 是一个矩阵，通常被称为权重矩阵，它的大小为 [K x D]，其中 K 是类别的数量，D 是输入特征的维度（对于图像数据，D 通常是像素数量）。</li>\n<li><strong>作用</strong>：W 矩阵中的每一行对应一个类别，每一列对应一个输入特征。它用于将输入特征向量映射到类别得分。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>b：偏置向量</strong>\n<ul>\n<li><strong>定义</strong>：b 是一个向量，大小为 [K x 1]，即它有 K 个元素，每个元素对应一个类别。</li>\n<li>** 作用：**b 是偏置向量，它在最终的分类得分中起到偏移作用，不与输入特征直接相乘。它的作用是调整模型的输出，使其更好地拟合训练数据。</li>\n</ul>\n</li>\n<li><strong>xi (输入特征向量)</strong>：\n<ul>\n<li><strong>定义</strong>：xi 是输入数据的特征向量，大小为 [D x 1]，即它有 D 个元素。</li>\n<li><strong>作用</strong>：对于每个输入样本 xi，它包含了所有的特征（例如图像中的所有像素值）。</li>\n</ul>\n</li>\n<li><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Wx_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (线性变换)</strong>：\n<ul>\n<li><strong>定义</strong>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Wx_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (表示将权重矩阵 W 与输入特征向量 xi 进行矩阵乘法，得到一个新的向量，该向量大小为 [K x 1]。</li>\n<li><strong>作用</strong>：这个向量包含了每个类别的线性组合得分。矩阵乘法的结果是将输入特征向量投影到类别得分空间中。</li>\n</ul>\n</li>\n</ol>\n<p>有几点需要注意：</p>\n<ul>\n<li>首先，请注意，单矩阵乘法<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">W x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 有效地并行评估 10 个单独的分类器（每个类一个），其中每个分类器是一行 W。</li>\n<li>还要注意，我们认为输入数据<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i, y_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 是给定的和固定的，但我们可以控制参数 W，b 的设置。我们的目标是以这样的方式设置这些参数，即计算出的分数与整个训练集的地面实况标签相匹配。我们将更详细地介绍如何做到这一点，但凭直觉，我们希望正确的类的分数高于不正确类的分数。</li>\n<li>这种方法的优点是使用训练数据来学习参数 W、b，但一旦学习完成，我们就可以丢弃整个训练集，只保留学习的参数。这是因为新的测试图像可以简单地通过函数转发，并基于计算出的分数进行分类。</li>\n<li>最后，请注意，对测试图像进行分类涉及单个矩阵的乘法和加法，这比将测试图像与所有训练图像进行比较要快得多。</li>\n<li>最后，哪个分类器的评估分数最大，说明该图片最有可能是那个类</li>\n</ul>\n<h3 id=\"11-对线性分类的直观理解\"><a class=\"markdownIt-Anchor\" href=\"#11-对线性分类的直观理解\">#</a> 1.1 对线性分类的直观理解</h3>\n<p><img data-src=\"readme_picture/5.png\" alt=\"5\"></p>\n<p>如下图就是线性分类器的工作过程，对于一张图片，假设是个黑白的 2×2 的图片，我们首先将其展开成一个 4×1 的列向量。假设我们一共有三个类比（猫，狗，船），下图中红色的表示识别猫的分类器，绿色的表示识别狗的分类器，蓝色表示识别船的分类器，三个分类器的参数堆叠在一起组成了评估函数的参数矩阵。将参数矩阵与原始数据相乘并加上对应的偏置项，得到每个分类器的得分，可以看到猫的得分为 -96.8，狗的得分为 437.9，这说明，分类器认为这张图片最可能是只狗，最不可能是只猫，对于图中的例子，这无疑是个很不好的结果（因为输入图片是一只猫）。</p>\n<p><img data-src=\"readme_picture/4.png\" alt=\"4\"></p>\n<p>从上述例子我们可以看出，线性分类器首先将一个 RGB 通道的图片的每个位置的像素进行加权后求和，将求和后的值作为该分类器所属类别的分数（分数最高的分类器所属的类别作为这张图片的预测类别）。** 那么线性分类器的原理是什么呢？** 评估函数通过调整参数，使得其有能力倾向于或者不倾向于图片某个位置的某个颜色。举例来说，对于一张船的图片，图片的周围很可能有很多的蓝色（表示在大海中），那么对于船的分类器就可能对图片四周位置的蓝色通道的权重设置成一个正数，而对相同位置的红色通道和绿色通道的权重设置成一个负数，这样对于某张图，如果满足图片四周位置的蓝色通道的数值大，而其他通道数值小（在图片中表现为四周为蓝色），那么它的评估得分也就会高。</p>\n<h3 id=\"12-对线性分类的几何理解\"><a class=\"markdownIt-Anchor\" href=\"#12-对线性分类的几何理解\">#</a> 1.2 对线性分类的几何理解</h3>\n<p>运用线性分类器后，我们将每张图片都转变成了一个<strong> K</strong> 维的向量，那么我们可以将其看成<strong> K</strong> 维空间中的一个点，同样，对于原来的图片，也可以看成高维空间中的一个点（比如 CIFAR-10 数据集中的每个图片可以看成 3072 维空间中的一个点）。由于我们定义每个类别得分为某张图片所有像素的加权和，所有每个类别的得分其实可以看成这个高维空间中的一个超平面，虽然无法可视化高维空间，但是如果将高维空间降维至二维，我们可以尝试可视化每个分类器在做什么：</p>\n<p><img data-src=\"readme_picture/6.webp\" alt=\"6\"></p>\n<p>如上图所示，有三根直线分别代表汽车分类器、鹿分类器、飞机分类器，以红色的汽车分类器为例，如果某个点刚好在线上，则汽车种类的得分为 0，红色线上的箭头表示在这个方向上汽车得分为正，在反方向则为负。由此我们可以得出，评估函数中的<strong> W</strong> 每一行代表一个分类器，而一个分类器在高维空间中就是一个划分空间的超平面，所以<strong> W</strong> 中的每一行就代表一个分类器所对应超平面在空间中的方向，改变<strong> W</strong> 的值的效果就是旋转这个超平面。而偏置项<strong> b</strong> 其实就是超平面的截距，代表超平面在高维空间中的位置，如果没有偏置项，那么超平面只能过高维坐标系的原点。</p>\n<h3 id=\"摸匹配角度理解\"><a class=\"markdownIt-Anchor\" href=\"#摸匹配角度理解\">#</a> 摸匹配角度理解</h3>\n<p>对于参数<strong> W</strong> 还有一种解释：对于每一行的<strong> W</strong>，其代表了某一类别的模板，当预测图片时，我们将图片分别与每个类别的模板做内积，得到每个类别的评估得分，得分最高的类别作为预测结果。所以，线性分类器其实就是在做模板匹配的过程，而这些模板是从训练集中的图片训练得到的。另外还有一种理解角度，可以把线性分类器看成一种更高效的 KNN 算法。只是区别在于它不用和 KNN 一样存下整个训练集，而是将训练集浓缩成一个模板图片<strong> W</strong>，并且将内积作为距离函数，而不是 KNN 中的 L1 和 L2 距离。</p>\n<p>如下图是使用 CIFAR-10 作为训练集训练得到的分类器，从<strong> W</strong> 得到每个种类分类器的可视化结果：</p>\n<p><img data-src=\"readme_picture/7.webp\" alt=\"7\"></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/Sanfordcs231n/README_1_KNN/",
            "url": "https://enjundu.github.io/Sanfordcs231n/README_1_KNN/",
            "title": "线性分类器",
            "date_published": "2024-07-04T06:02:28.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NearestNeighbor</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">self, X, y</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example. Y is 1-dimension of size N &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># the nearest neighbor classifier simply remembers all the training data</span></span><br><span class=\"line\">        self.Xtr = X</span><br><span class=\"line\">        self.ytr = y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">predict</span>(<span class=\"params\">self, X</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example we wish to predict label for &quot;&quot;&quot;</span></span><br><span class=\"line\">        num_test = X.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># lets make sure that the output type matches the input type</span></span><br><span class=\"line\">        Ypred = np.zeros(num_test, dtype=self.ytr.dtype)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># loop over all test rows</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_test):</span><br><span class=\"line\">            <span class=\"comment\"># find the nearest training image to the i&#x27;th test image</span></span><br><span class=\"line\">            <span class=\"comment\"># using the L1 distance (sum of absolute value differences)</span></span><br><span class=\"line\">            distances = np.<span class=\"built_in\">sum</span>(np.<span class=\"built_in\">abs</span>(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">            min_index = np.argmin(distances)  <span class=\"comment\"># get the index with smallest distance</span></span><br><span class=\"line\">            Ypred[i] = self.ytr[min_index]    <span class=\"comment\"># predict the label of the nearest example</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ypred</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建一些示例数据</span></span><br><span class=\"line\">    Xtr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]])  <span class=\"comment\"># 训练数据</span></span><br><span class=\"line\">    ytr = np.array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])  <span class=\"comment\"># 训练标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Xte = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]])  <span class=\"comment\"># 测试数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化和训练分类器</span></span><br><span class=\"line\">    nn = NearestNeighbor()</span><br><span class=\"line\">    nn.train(Xtr, ytr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 预测测试数据的标签</span></span><br><span class=\"line\">    Yte_predict = nn.predict(Xte)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Predicted labels:&#x27;</span>, Yte_predict)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"本项目参考学习文档为斯坦福计算机深度学习课程用于视觉识别的-cs231n-卷积神经网络\"><a class=\"markdownIt-Anchor\" href=\"#本项目参考学习文档为斯坦福计算机深度学习课程用于视觉识别的-cs231n-卷积神经网络\">#</a> 本项目参考学习文档为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jczIzMW4uZ2l0aHViLmlvL2NsYXNzaWZpY2F0aW9uLw==\">斯坦福计算机深度学习课程 —— 用于视觉识别的 CS231n 卷积神经网络</span></h1>\n<p>​\t曼哈顿距离：<img data-src=\"https://s2.loli.net/2024/07/03/4K7NUeW85QBCabV.png\" alt=\"image.png\">，其中 I1 和 I2 是两幅图像，I1P 和 I2P 分别是 I1 和 I2 在位置 P 的像素值。差异矩阵也是像素点依次相减。通过衡量图像像素点的绝对值差之和差异性来</p>\n<p>​\t对于该预测方法还有 L2 距离，其定义为：<img data-src=\"https://s2.loli.net/2024/07/03/fovI3tCNOXrB8aQ.png\" alt=\"image.png\"></p>\n<p>​\t最近临分类器：<br>\n​\t（1）训练：将训练数据存储在实际变量中。<br>\n​\t（2）预测：对每一个测试样本，计算其与训练样本 L1 的距离，找到距离最近的训练样本，将该训练样本的标签作为测试样本的预测标签。<br>\n​\t*<em> 训练方法</em> <em>：def train (self, X, y): X（训练数据，形状为 N</em>D，每一行都是一个样本）和 y（训练标签，大小为 N 的一维数组）, 然后存储在 self 类中。</p>\n<p>​\t <code>self.Xtr = X</code></p>\n<p>​\t <code>self.ytr = y</code></p>\n<p><strong>预测方法</strong></p>\n<p>predict 方法接受一个参数 x*(测试数据，形状为 N*D，每一行都是一个需要预测的样本)*</p>\n<p>num_test 表示测试样本的数量</p>\n<p>Ypred 初始化为零数组 <code>np.zeros(num_test,dtype=self.ytr.dtype)</code> , 前者表示数组的长度，即为包含元素的个数；后者是一个关键词参数，指定数组中的数据类型设置为与 self.ytr 数组的数据类型相同。dtype 是数据类型的缩写。</p>\n<p>对于每个测试样本，计算它与所有训练样本的 L1 距离：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distances = np.<span class=\"built_in\">sum</span>(np.<span class=\"built_in\">abs</span>(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过取绝对值差的和计算 L1 距离。</li>\n<li><code>self.Xtr - X[i,:]</code>  计算每个训练样本与第 <code>i</code>  个测试样本的差值。(这里  <code>self.Xtr</code>  是一个矩阵， <code>X[i,:]</code>  是一个向量 <code>X[i,:]</code>  表示矩阵  <code>X</code>  的第  <code>i</code>  行)</li>\n<li><code>self.Xtr - X[i,:]</code>  计算的是矩阵  <code>self.Xtr</code>  中的每一行向量减去向量  <code>X[i,:]</code>  的结果。</li>\n<li><code>np.abs(self.Xtr - X[i,:])</code> ：对上述差值矩阵中的每个元素取绝对值，得到一个与  <code>self.Xtr</code>  形状相同的矩阵。</li>\n<li><code>np.sum(..., axis=1)</code>  对每个样本的所有特征求和，得到每个训练样本与该测试样本的距离。</li>\n<li>通过  <code>min_index = np.argmin(distances)</code>  找到距离最小的样本 (<em>np.argmin: 返回最小距离对应的索引</em>)</li>\n</ul>\n<p><strong>Q: With N examples, how fast are training and prediction?</strong></p>\n<ul>\n<li>问题：对于 N 个样本，训练和预测的速度（效率）是多少？</li>\n</ul>\n<p><strong>A: Train O(1), predictO(N)</strong></p>\n<ul>\n<li>\n<p>回答：训练时间复杂度是 O (1)，预测时间复杂度是 O (N)。</p>\n</li>\n<li>\n<p><strong>训练时间复杂度 O (1)</strong>：训练阶段只需记住所有训练数据，不需要复杂计算，所以训练时间是常数时间，即与训练样本的数量 N 无关。</p>\n</li>\n<li>\n<p><strong>预测时间复杂度 O (N)</strong>：预测阶段，对于每个测试样本，需要计算其与所有训练样本的距离，并找到最近的那个训练样本。因此，预测时间与训练样本的数量 N 成正比。</p>\n</li>\n</ul>\n<p><strong>Q:This is bad: we want classifiers that are fast at prediction; slow for training is ok</strong></p>\n<ul>\n<li>为什么这是不好的设计？</li>\n</ul>\n<p><strong>A: 这是不好的设计：我们希望分类器在预测时速度快；在训练时速度慢是可以接受的。</strong></p>\n<ul>\n<li>在实际应用中，预测阶段通常比训练阶段更频繁。例如，一个已经训练好的分类器可能需要处理大量的实时预测请求。如果预测速度很慢，会严重影响系统的性能和用户体验。</li>\n<li>训练阶段可以相对较慢，因为训练通常是一个离线过程，可以在后台完成，不直接影响用户体验。</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>​\t最近邻分类器的一个主要缺点是它的预测阶段计算量大，对于每个测试样本需要计算其与所有训练样本的距离，因此预测速度较慢。这在需要快速响应的应用中是一个很大的问题，而对于训练阶段的速度要求则相对宽松。因此，更理想的分类器设计是训练阶段可以慢一些，但预测阶段必须非常快。</p>\n<h2 id=\"k-最近临法\"><a class=\"markdownIt-Anchor\" href=\"#k-最近临法\">#</a> K - 最近临法</h2>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/UIrCatE1Zfu5Wib.png\" alt=\"image.png\"></p>\n<p>​\t图中展示的是 K - 最近邻（K-Nearest Neighbors, K-NN）分类器的基本原理和效果。K-NN 分类器是一个简单但非常有效的分类算法，它的核心思想是根据一个样本的 K 个最近邻居来确定其类别。具体来说，这里通过 K 个最近邻居的多数投票来决定样本的分类。</p>\n<p><strong>白色区域：这个区域没有进行 k - 最近投票</strong></p>\n<p><strong>k=1：</strong></p>\n<ul>\n<li>当 K=1 时，分类器仅考虑与样本最近的一个邻居。这个邻居的类别直接决定了样本的类别。虽然这种方法非常直接和简单，但它容易受噪声和孤立点的影响，导致分类效果不稳定。</li>\n</ul>\n<p><strong>k=3：</strong></p>\n<ul>\n<li>当 K=3 时，分类器考虑与样本最近的三个邻居。样本的类别由这三个邻居的多数投票决定。相比于 K=1，这种方法更加鲁棒，能够更好地抵御噪声的影响。但是，它仍然可能受少数几个错误邻居的影响。</li>\n</ul>\n<p><strong>k=5：</strong></p>\n<ul>\n<li>当 K=5 时，分类器考虑与样本最近的五个邻居。样本的类别由这五个邻居的多数投票决定。进一步增加 K 值，分类器变得更加稳定，因为它综合了更多邻居的信息，减少了单个噪声点对分类结果的影响。然而，如果 K 值过大，分类器可能会包含过多不相关的邻居信息，导致分类结果不准确。</li>\n</ul>\n<h3 id=\"主要思想\"><a class=\"markdownIt-Anchor\" href=\"#主要思想\">#</a> 主要思想</h3>\n<ul>\n<li><strong>多数投票</strong>：K-NN 分类器的核心思想是 “多数投票”，即根据 K 个最近邻居中出现频率最高的类别来决定样本的类别。</li>\n<li><strong>距离度量</strong>：K-NN 分类器依赖于距离度量来确定最近的 K 个邻居。常用的距离度量方法包括欧氏距离、曼哈顿距离等。</li>\n<li><strong>参数选择</strong>：K 值的选择对分类效果有重要影响。K 值太小容易受噪声影响，K 值太大则可能引入过多无关信息。</li>\n</ul>\n<h2 id=\"接下来我们以cifar-10数据集的结果来进行代码编写\"><a class=\"markdownIt-Anchor\" href=\"#接下来我们以cifar-10数据集的结果来进行代码编写\">#</a> 接下来我们以<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudG9yb250by5lZHUvfmtyaXovY2lmYXIuaHRtbA==\"> CIFAR-10 数据集</span>的结果来进行代码编写</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle  <span class=\"comment\">#用于序列化和反序列化 Python 对象的库。在这里用于加载 CIFAR-10 数据集文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> KFold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_CIFAR_batch</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Load a single batch of CIFAR-10 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f: <span class=\"comment\">#以二进制模式(&#x27;rb&#x27;)打开文件</span></span><br><span class=\"line\">        datadict = pickle.load(f, encoding=<span class=\"string\">&#x27;latin1&#x27;</span>)  <span class=\"comment\">#使用pickle.load(f,encoding=&#x27;latin1&#x27;)反序列化文件内容，读取为字典对象</span></span><br><span class=\"line\">        X = datadict[<span class=\"string\">&#x27;data&#x27;</span>]</span><br><span class=\"line\">        Y = datadict[<span class=\"string\">&#x27;labels&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\">#将其从平坦形状(10000,3072)重塑为(10000,32,32,3),并且将数据类型转为浮点型。即10000张图</span></span><br><span class=\"line\">    <span class=\"comment\"># 每张图有32*32像素，每个像素有三个颜色通道</span></span><br><span class=\"line\">    <span class=\"comment\">#并且将像素类型转为浮点数</span></span><br><span class=\"line\">        X = X.reshape(<span class=\"number\">10000</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">3</span>).astype(<span class=\"string\">&#x27;float&#x27;</span>)</span><br><span class=\"line\">        Y = np.array(Y)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> X, Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_CIFAR10</span>(<span class=\"params\">ROOT</span>): <span class=\"comment\">#ROOT表示CIFAR-10数据集根目录的路径</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Load all of CIFAR-10 &quot;&quot;&quot;</span></span><br><span class=\"line\">    xs = [] <span class=\"comment\">#存储每个批次的图像数据</span></span><br><span class=\"line\">    ys = [] <span class=\"comment\">#存储每个批次的标签</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>): <span class=\"comment\">#加载五个训练批次</span></span><br><span class=\"line\">        f = os.path.join(ROOT, <span class=\"string\">&#x27;data_batch_%d&#x27;</span> % (b,))  <span class=\"comment\">#依次加载文件里的五个批次</span></span><br><span class=\"line\">        X, Y = load_CIFAR_batch(f)  <span class=\"comment\">#调用load_CIFAR_batch（）函数来加载数据</span></span><br><span class=\"line\">        <span class=\"comment\">#将加载的的图像数据和标签分别添加到列表中</span></span><br><span class=\"line\">        xs.append(X)</span><br><span class=\"line\">        ys.append(Y)</span><br><span class=\"line\">    <span class=\"comment\">#将所有训练批次的数据合并为一个训练集</span></span><br><span class=\"line\">    Xtr = np.concatenate(xs)</span><br><span class=\"line\">    Ytr = np.concatenate(ys)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> X, Y    <span class=\"comment\">#释放内存，删除X和Y</span></span><br><span class=\"line\">    Xte, Yte = load_CIFAR_batch(os.path.join(ROOT, <span class=\"string\">&#x27;test_batch&#x27;</span>)) <span class=\"comment\">#加载测试批次的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Xtr, Ytr, Xte, Yte</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载数据</span></span><br><span class=\"line\">Xtr, Ytr, Xte, Yte = load_CIFAR10(<span class=\"string\">r&#x27;D:\\desktop\\Code_Compiling\\cs231n_stanford\\example&amp;tests\\cifar-10-python\\cifar-10-batches-py&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 将数据拉成向量</span></span><br><span class=\"line\"><span class=\"comment\">#重塑数据：将训练数据 Xtr 和测试数据 Xte 从形状（num_samples, 32, 32, 3）转换为（num_samples, 3072）的向量形式</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 3072 是 32x32 图像的像素总数乘以 3 个颜色通道。</span></span><br><span class=\"line\">Xtr_rows = Xtr.reshape(Xtr.shape[<span class=\"number\">0</span>], <span class=\"number\">32</span> * <span class=\"number\">32</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\">Xte_rows = Xte.reshape(Xte.shape[<span class=\"number\">0</span>], <span class=\"number\">32</span> * <span class=\"number\">32</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数据加载和预处理完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NearestNeighbor</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>): <span class=\"comment\">#初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">self, X, y</span>):  <span class=\"comment\">#该方法用于训练k-NN模型，将x和y存储为类的属性</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example. Y is 1-dimension of size N &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.Xtr = X    <span class=\"comment\">#X是N*D的矩阵，每行是一个训练样本</span></span><br><span class=\"line\">        self.ytr = y    <span class=\"comment\">#y是一个长度为N的一维数组，对应于每个训练样本的标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#预测给定的数据集x的标签,X是N*D的矩阵，每行都是一个测试样本</span></span><br><span class=\"line\">    <span class=\"comment\">#k是要考虑的最近邻居的数量，默认为1。distfn是距离度量方式，可以是：L1(曼哈顿距离)也可以是L2(欧几里得距离)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">predict</span>(<span class=\"params\">self, X, k=<span class=\"number\">1</span>, distfn=<span class=\"string\">&#x27;L1&#x27;</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example we wish to predict label for &quot;&quot;&quot;</span></span><br><span class=\"line\">        num_test = X.shape[<span class=\"number\">0</span>]   <span class=\"comment\">#这是测试集的样本数量</span></span><br><span class=\"line\">        Ypred = np.zeros(num_test, dtype=self.ytr.dtype)    <span class=\"comment\">#初始化为一个零数组，用于存储每个测试样本的预测标签</span></span><br><span class=\"line\">        <span class=\"comment\">#循环处理每个测试样本</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_test):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> distfn == <span class=\"string\">&#x27;L1&#x27;</span>:</span><br><span class=\"line\">                distances = np.<span class=\"built_in\">sum</span>(np.<span class=\"built_in\">abs</span>(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> distfn == <span class=\"string\">&#x27;L2&#x27;</span>:</span><br><span class=\"line\">                distances = np.sqrt(np.<span class=\"built_in\">sum</span>(np.square(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>))</span><br><span class=\"line\">            min_indices = np.argpartition(distances, k)[:k] <span class=\"comment\">#找到k个最近邻居的索引</span></span><br><span class=\"line\">            closest_y = self.ytr[min_indices]</span><br><span class=\"line\">            <span class=\"comment\">#预测标签</span></span><br><span class=\"line\">            <span class=\"comment\">#使用 np.bincount 统计最近邻居中每个标签的出现次数，并选择出现次数最多的标签作为预测标签。</span></span><br><span class=\"line\">            Ypred[i] = np.bincount(closest_y).argmax()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ypred</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练和评估模型</span></span><br><span class=\"line\">nn = NearestNeighbor()  <span class=\"comment\">#创建 NearestNeighbor 类的实例 nn。</span></span><br><span class=\"line\">nn.train(Xtr_rows, Ytr) <span class=\"comment\">#使用训练数据 Xtr_rows 和标签 Ytr 训练模型。</span></span><br><span class=\"line\">Yte_predict = nn.predict(Xte_rows)  <span class=\"comment\">#使用测试数据 Xte_rows 预测标签。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;accuracy: %f&#x27;</span> % (np.mean(Yte_predict == Yte)))   <span class=\"comment\">#计算并打印预测标签与真实标签的匹配率（准确率）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建验证集——从训练集中提取前1000个样本作为验证集</span></span><br><span class=\"line\">Xval_rows = Xtr_rows[:<span class=\"number\">1000</span>, :]  <span class=\"comment\">#验证集特征</span></span><br><span class=\"line\">Yval = Ytr[:<span class=\"number\">1000</span>]   <span class=\"comment\">#验证集标签</span></span><br><span class=\"line\">Xtr_rows = Xtr_rows[<span class=\"number\">1000</span>:, :]   <span class=\"comment\">#新训练集特征</span></span><br><span class=\"line\">Ytr = Ytr[<span class=\"number\">1000</span>:]    <span class=\"comment\">#新训练集标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 超参数调优——对于不同的k和距离度量方式进行超参数调优</span></span><br><span class=\"line\">validation_accuracies = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> distfn <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;L1&#x27;</span>, <span class=\"string\">&#x27;L2&#x27;</span>]:</span><br><span class=\"line\">        nn = NearestNeighbor()  <span class=\"comment\">#创建NearestNeighbor实例</span></span><br><span class=\"line\">        nn.train(Xtr_rows, Ytr) <span class=\"comment\">#训练</span></span><br><span class=\"line\">        Yval_predict = nn.predict(Xval_rows, k=k, distfn=distfn)    <span class=\"comment\">#预测</span></span><br><span class=\"line\">        acc = np.mean(Yval_predict == Yval) <span class=\"comment\">#验证</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;accuracy for k=<span class=\"subst\">&#123;k&#125;</span>, distfn=<span class=\"subst\">&#123;distfn&#125;</span>: <span class=\"subst\">&#123;acc&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        validation_accuracies.append((k, distfn, acc))</span><br><span class=\"line\"><span class=\"comment\">#交叉验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cross_validation</span>(<span class=\"params\">X, y, k_choices, distfns</span>):</span><br><span class=\"line\">    kf = KFold(n_splits=<span class=\"number\">5</span>)  <span class=\"comment\">#将数据集分成五份</span></span><br><span class=\"line\">    validation_accuracies = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> k_choices: <span class=\"comment\">#对每个k和distfns组合进行操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> distfn <span class=\"keyword\">in</span> distfns:</span><br><span class=\"line\">            accs = []   <span class=\"comment\">#初始化一个空列表 accs 用于存储交叉验证的准确率</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> train_index, val_index <span class=\"keyword\">in</span> kf.split(X):</span><br><span class=\"line\">                X_train, X_val = X[train_index], X[val_index] <span class=\"comment\">#将数据分为训练集和验证集。</span></span><br><span class=\"line\">                y_train, y_val = y[train_index], y[val_index]</span><br><span class=\"line\"></span><br><span class=\"line\">                nn = NearestNeighbor()</span><br><span class=\"line\">                nn.train(X_train, y_train)</span><br><span class=\"line\">                y_val_predict = nn.predict(X_val, k=k, distfn=distfn)</span><br><span class=\"line\">                acc = np.mean(y_val_predict == y_val) <span class=\"comment\">#用验证集进行预测并计算准确率。</span></span><br><span class=\"line\">                accs.append(acc)</span><br><span class=\"line\">            avg_acc = np.mean(accs)<span class=\"comment\">#计算并打印每个 k 和 distfn 组合的平均准确率。</span></span><br><span class=\"line\">            validation_accuracies.append((k, distfn, avg_acc))<span class=\"comment\">#将 k、distfn 和平均准确率保存到 validation_accuracies 列表中。</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Cross-validation accuracy for k=<span class=\"subst\">&#123;k&#125;</span>, distfn=<span class=\"subst\">&#123;distfn&#125;</span>: <span class=\"subst\">&#123;avg_acc&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> validation_accuracies</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用交叉验证</span></span><br><span class=\"line\">k_choices = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\">distfns = [<span class=\"string\">&#x27;L1&#x27;</span>, <span class=\"string\">&#x27;L2&#x27;</span>]</span><br><span class=\"line\">validation_accuracies = cross_validation(Xtr_rows, Ytr, k_choices, distfns)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>k-NN 阶段实现了一个简单的 k 近邻（k-Nearest Neighbors, k-NN）分类器，使用了 L1 距离（曼哈顿距离）和 L2 距离（欧几里得距离）</strong></p>\n<p><strong>代码注释已列与代码中</strong></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/recommendation/README/",
            "url": "https://enjundu.github.io/recommendation/README/",
            "title": "b_README",
            "date_published": "2024-07-04T01:41:31.000Z",
            "content_html": "<h2 id=\"1\"><a class=\"markdownIt-Anchor\" href=\"#1\">#</a> 1</h2>\n<p>还没更，别急</p>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "recommendation"
            ]
        },
        {
            "id": "https://enjundu.github.io/bit/%E7%BE%8E%E8%B5%9B%E2%80%94%E2%80%94%E4%B8%83%E9%B3%83%E9%B3%97/",
            "url": "https://enjundu.github.io/bit/%E7%BE%8E%E8%B5%9B%E2%80%94%E2%80%94%E4%B8%83%E9%B3%83%E9%B3%97/",
            "title": "美赛——七鳃鳗",
            "date_published": "2024-07-04T01:41:31.000Z",
            "content_html": "<h1 id=\"mcm-paper\"><a class=\"markdownIt-Anchor\" href=\"#mcm-paper\">#</a> MCM paper</h1>\n<h2 id=\"question\"><a class=\"markdownIt-Anchor\" href=\"#question\">#</a> question</h2>\n<p>​\tWhile some animal species exist outside of the usual male or female sexes, most species are</p>\n<p>substantially either male or female. Although many species exhibit a 1:1 sex ratio at birth, other</p>\n<p>species deviate from an even sex ratio. This is called adaptive sex ratio variation. For example,</p>\n<p>the temperature of the nest incubating eggs of the American alligator influences the sex ratios at</p>\n<p>birth</p>\n<p>​\tThe role of <strong>lampreys</strong> is complex. In some lake habitats, they are seen as parasites with a</p>\n<p>significant impact on the ecosystem, whereas lampreys are also a food source in some regions of</p>\n<p>the world, such as Scandinavia, the Baltics, and for some Indigenous peoples of the Pacific</p>\n<p>Northwest in North America.</p>\n<p>​\tThe sex ratio of sea lampreys can vary based on external circumstances. Sea lampreys become</p>\n<p>male or female depending on how quickly they grow during the larval stage. These larval growth</p>\n<p>rates are influenced by the availability of food. In environments where food availability is low,</p>\n<p>growth rates will be lower, and the percentage of males can reach approximately 78% of the</p>\n<p>population. In environments where food is more readily available, the percentage of males has</p>\n<p>been observed to be approximately 56% of the population.</p>\n<p>​\tWe focus on the question of sex ratios and their dependence on local conditions, specifically for</p>\n<p>sea lampreys. Sea lampreys live in lake or sea habitats and migrate up rivers to spawn. The task</p>\n<p>is to examine the advantages and disadvantages of the ability for a species to alter its sex ratio</p>\n<p>depending on resource availability. Your team should develop and examine a model to provide</p>\n<p>insights into the resulting interactions in an ecosystem.</p>\n<p>Questions to examine include the following:</p>\n<ul>\n<li>\n<p>What is the impact on the larger ecological system when the population of lampreys can</p>\n<p>alter its sex ratio?</p>\n</li>\n<li>\n<p>What are the advantages and disadvantages to the population of lampreys?</p>\n</li>\n<li>\n<p>What is the impact on the stability of the ecosystem given the changes in the sex ratios of</p>\n<p>lampreys?</p>\n</li>\n<li>\n<p>Can an ecosystem with variable sex ratios in the lamprey population offer advantages to</p>\n<p>others in the ecosystem, such as parasites?</p>\n<h2 id=\"paper-begin\"><a class=\"markdownIt-Anchor\" href=\"#paper-begin\">#</a> Paper begin</h2>\n<h3 id=\"summary\"><a class=\"markdownIt-Anchor\" href=\"#summary\">#</a> <strong>Summary</strong></h3>\n<p>In this study, we first innovatively constructed a dynamic simulated ecological environment through the <em><strong>*Netlogo model*</strong></em>, and thoroughly investigated the multifaceted impacts of changes in the sex ratio of seven-gill eels on the entire ecosystem. Then we used a variety of models and methods to synthesize the analysis around research questions I to IV.</p>\n<p>For problem 1: We use analytic Hierarchy Process (AHP) and LA model to quantify the relationship between various factors and study the multi-level impact of sex ratio change on the ecosystem. Through AHP, we derive the weight allocation of the impact of sex ratio changes on the ecosystem, while the LA model optimizes the decision-making process. The results show that changes in <strong>sex ratio significantly affect adaptation</strong>, resource utilization and species diversity, and provide a key ecological balance mechanism for the system.</p>\n<p>For problem 2: Using a comprehensive evaluation method and genetic algorithm, we considered the advantages and disadvantages of the lamprey population in a comprehensive manner. Through the parameter optimization of the genetic algorithm, we gained a deeper understanding of the advantages of the dynamic adjustment of the sex ratio of the lamprey on its own reproductive growth. By cross-corroborating the two models, we conclude that the ecological advantages of dynamically adjusting the sex ratio far outweigh the disadvantages. <strong>The ecological adaptations and advantages demonstrated by lampreys through the flexible adjustment of sex ratios dominate in maintaining ecosystem balance and diversity.</strong></p>\n<p>For problem 3: Using the eigenvalue method of differential equation combined with Jacobian matrix, we deeply discuss the effect of sex ratio change on ecosystem stability. Eigenvalue analysis reveals the key role of sex ratio in maintaining ecosystem stability. Our conclusion emphasizes that the change of sex ratio is an important factor in the dynamic balance of ecosystems and provides scientific basis for ecological conservation and management.</p>\n<p>For problem 4: Using system dynamics and ecosystem interaction models, we comprehensively consider the complex relationships between lampreys and other species. By simulating ecological interactions under different scenarios, <strong>we found that changes in sex ratios have positive effects on other species and maintain the relative balance of the entire ecosystem.</strong></p>\n<p>Sensitivity analysis: We conducted an in-depth sensitivity analysis of all models to verify the reliability of the models in different scenarios. The steps of sensitivity analysis involve a systematic study of changes in the key parameters of each model. In the AHP and LA models, we adjusted the weights and decision parameters and simulated different decision scenarios to assess the sensitivity of the models to changes in the sex ratio. For the comprehensive evaluation method and the genetic algorithm, we vary the operational parameters of the genetic algorithm, such as the crossover rate and the mutation rate, and observe the optimization results of the population under different parameter Settings. In differential equations combined with Jacobian matrix, system dynamics and ecosystem interaction models, we adjusted the key parameters in the equations to evaluate the model’s response to changes in sex ratio by simulating ecological dynamic processes under different conditions. This series of sensitivity analysis helps to identify the key factors affecting the results in each model, and provides strong support for the reliability and robustness of the model.</p>\n<p>Pros and cons evaluation and outlook: All models are comprehensively evaluated, and the advantages and disadvantages of each model are summarized. Despite some simplifications and assumptions, these models provide insights into understanding the combined effects of changes in lampreys’ sex ratios on ecosystems. Looking to the future, the authenticity and reliability of the model can be further improved by introducing more ecological parameters and field observation data to support more accurate ecological management.</p>\n<h4 id=\"keywords\"><a class=\"markdownIt-Anchor\" href=\"#keywords\">#</a> Keywords</h4>\n<p>Lampreys, sex ratio change,Netlogo, Analytic Hierarchy Process, Lotka-Volterra model, Comprehensive evaluation Method, Genetic algorithm, Jacobian Matrix and eigenvalues, System dynamics, ecosystem interaction model</p>\n<p><em><strong>*Contents*</strong></em></p>\n<p><a href=\"#_Toc15523\">1  Introduction\t</a></p>\n<p><a href=\"#_Toc13865\">1.1  Background\t</a></p>\n<p><a href=\"#_Toc16722\">1.2  Problem Restatement and Analysis\t</a></p>\n<p><a href=\"#_Toc32468\">1.3  Overview of our work\t</a></p>\n<p><a href=\"#_Toc5833\">2  Assumptions\t</a></p>\n<p><a href=\"#_Toc21803\">3  List of Notation\t</a></p>\n<p><a href=\"#_Toc24626\">4  Preliminary conclusions obtained by Netlogo simulation\t</a></p>\n<p><a href=\"#_Toc8651\">4.1 Preliminary setting\t</a></p>\n<p><a href=\"#_Toc21863\">4.2 Netlogo solves problem one, two, three, four\t</a></p>\n<p><a href=\"#_Toc12299\">5  Effect of variable sex ratio in lampreys on bigger ecosystem\t</a></p>\n<p><a href=\"#_Toc25511\">5.1  Analytic Hierarchy Process (AHP)\t</a></p>\n<p><a href=\"#_Toc21101\">5.2  Lotka-Volterra model\t</a></p>\n<p><a href=\"#_Toc11452\">5.3  Conclusion\t</a></p>\n<p><a href=\"#_Toc8089\">6 Advantages and disadvantages of variable sex ratio for lampreys populations\t</a></p>\n<p><a href=\"#_Toc8339\">6.1 Integrated assessment method\t</a></p>\n<p><a href=\"#_Toc13350\">6.2  Genetic Algorithm\t</a></p>\n<p><a href=\"#_Toc3157\">6.3  Conclusion\t</a></p>\n<p><a href=\"#_Toc1986\">7  Effects of variable sex ratio of lamprey on ecosystem stability\t</a></p>\n<p><a href=\"#_Toc4989\">7.1  Not considering the prey of lampreys\t</a></p>\n<p><a href=\"#_Toc6259\">7.2  Consider the prey of lampreys\t</a></p>\n<p><a href=\"#_Toc27275\">7.3  Conclusion\t</a></p>\n<p><a href=\"#_Toc1288\">8  Effects of variable sex ratio in lampreys on other species\t</a></p>\n<p><a href=\"#_Toc10293\">8.1  System Dynamics\t</a></p>\n<p><a href=\"#_Toc14325\">8.2  Ecological Interaction Model\t</a></p>\n<p><a href=\"#_Toc26957\">8.3  Conclusion\t</a></p>\n<p><a href=\"#_Toc3631\">9  Sensitivity Analysis\t</a></p>\n<p><a href=\"#_Toc9399\">9.1  AHP sensitivity analysis\t</a></p>\n<p><a href=\"#_Toc452\">9.2 Lotka-Volterra sensitivity analysis\t</a></p>\n<p><a href=\"#_Toc14368\">9.3  Comprehensive assessment sensitivity analysis\t</a></p>\n<p><a href=\"#_Toc24121\">9.4  Sensitivity analysis of genetic algorithm\t</a></p>\n<p><a href=\"#_Toc15186\">9.5 Sensitivity testing of eigenvalue models using differential equations\t</a></p>\n<p><a href=\"#_Toc29957\">9.6  Sensitivity analysis of system dynamics\t</a></p>\n<p><a href=\"#_Toc22371\">9.7 Sensitivity analysis of ecological interactions model\t</a></p>\n<p><a href=\"#_Toc14997\">10  Model Evaluation and Further Discussion\t</a></p>\n<p><a href=\"#_Toc2058\">10.1  Question One\t</a></p>\n<p><a href=\"#_Toc14527\">10.2  Question Two\t</a></p>\n<p><a href=\"#_Toc8408\">10.3  Question Three\t</a></p>\n<p><a href=\"#_Toc27028\">10.4  Question Four\t</a></p>\n<p><a href=\"#_Toc32058\">11 Reference\t</a></p>\n<h1 id=\"1-introduction\"><a class=\"markdownIt-Anchor\" href=\"#1-introduction\">#</a> <strong>1  Introduction</strong></h1>\n<h2 id=\"11-background\"><a class=\"markdownIt-Anchor\" href=\"#11-background\">#</a> <strong>1.1  Background</strong></h2>\n<p><em><strong>*Sea lampreys*</strong></em> live in lake or sea habitats and migrate up rivers to spawn, which have unique position in the study of biology and ecology. Both predatory and parasitic relationships.</p>\n<p>One of the most striking features for lampreys is that their sex can vary according to resource availability. In environments where food is plentiful and growing conditions are favorable, larvae are more likely to develop into larger females, while in environments where resources are scarce, larvae tend to develop into smaller males.This mechanism of sex change may be an adaptive evolutionary strategy that allows the lampreys to adjust its sex ratio to environmental conditions to optimize reproductive success and resource use efficiency.</p>\n<p>The task focus the sex ratios of sea lampreys under resource availability can provide insights into biological adaptation, sex determination, and ecosystem management.</p>\n<h2 id=\"12-problem-restatement-and-analysis\"><a class=\"markdownIt-Anchor\" href=\"#12-problem-restatement-and-analysis\">#</a> <strong>1.2  Problem Restatement and Analysis</strong></h2>\n<p><em><strong>*Problem One:*</strong></em> What are the overall effects of adjusting the sex ratio of lampreys populations on the entire ecosystem? This requires us to explore how changes in sex ratios shape the ecological role of lampreys in the wider ecosystem, and to fully understand ecosystem interrelationships through modeling and analysis.</p>\n<p><em><strong>*Problem Two:*</strong></em> What are the advantages and disadvantages of the changing sex ratio for Lampreys? This requires a systematic assessment of the effects of sex ratio adjustment, including advantages such as adaptation, population control and genetic diversity, as well as disadvantages such as fluctuations in reproductive rate and competition for resources.</p>\n<p><em><strong>*Problem Three:*</strong></em> How do changes in the sex ratio collectively affect the stability of the entire ecosystem? Differential equations and Jacobian matrices can be used to explore the effects of sex ratio changes on ecosystem stability, especially when considering factors such as parasites.</p>\n<p><em><strong>*Problem Four:*</strong></em> Do lamprey ecosystems with changing sex ratios have an overall advantage over other species, such as parasites? System dynamics and ecological interaction models can be used to further study the combined effects of sex ratio changes on other species, including advantages in terms of stability, adaptation and niche differentiation.</p>\n<h2 id=\"13-overview-of-our-work\"><a class=\"markdownIt-Anchor\" href=\"#13-overview-of-our-work\">#</a> <strong>1.3  Overview of our work</strong></h2>\n<p>To avoid complicated description, intuitively reflect our work process, the flow chart is show as the following figure:</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/RvtpDkwnb6fghdl.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 1 Our working flow chart*</strong></em></p>\n<h1 id=\"2-assumptions\"><a class=\"markdownIt-Anchor\" href=\"#2-assumptions\">#</a> <strong>2  Assumptions</strong></h1>\n<p><em><strong>*Assumption 1*</strong></em>: The growth of the lamprey population approximately follows the Logistic model, with a maximum number allowed by environmental conditions, i.e., the carrying capacity K. The environmental resistance to the lamprey population increases proportionally with population density.</p>\n<p><em><strong>*Assumption 2*</strong></em>: We only consider parasitic marine lampreys, whose juvenile lampreys feed on plankton and are preyed upon by fish and birds, and adults parasitize large fish, with parasitism actions reducing the survival and reproductive capabilities of the host fish.</p>\n<p><em><strong>*Assumption 3*</strong></em>: The sex of lampreys is directly influenced by the amount of food resources acquired during the larval stage in a linear manner.</p>\n<p><em><strong>*Assumption 4*</strong></em>: It is assumed that the number of male lampreys always exceeds that of female lampreys in the natural environment, and the birth rate is proportionally related to the female sex ratio. <em><strong>*Justification*</strong></em>: The data shows that the sex ratio of adult lamprey populations almost always has more males than females. Hadisty and Potter (1971) found that this ratio varies from nearly equal to males nearly five times that of females. Knowing that both male and female lampreys die immediately after mating and spawning, it suggests that lampreys mate only once in their lifetime. The higher the female ratio, the higher the birth rate.</p>\n<h1 id=\"3-list-of-notation\"><a class=\"markdownIt-Anchor\" href=\"#3-list-of-notation\">#</a> <strong>3  List of Notation</strong></h1>\n<p><strong>Table 1: Notations used in this paper</strong></p>\n<table>\n<thead>\n<tr>\n<th><em><strong>*Symbol*</strong></em></th>\n<th><em><strong>*Description*</strong></em></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>large ecosystem</td>\n<td></td>\n</tr>\n<tr>\n<td>![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps1.jpg)</td>\n<td>Ecological balance, biodiversity, energy flow</td>\n<td></td>\n</tr>\n<tr>\n<td>![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps2.jpg)</td>\n<td>Population characteristics of lampreys</td>\n<td></td>\n</tr>\n<tr>\n<td>![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps3.jpg)</td>\n<td>Ecosystem impact factors</td>\n<td></td>\n</tr>\n<tr>\n<td>W</td>\n<td>Composite for initial evaluation of question two_ Indicator</td>\n<td></td>\n</tr>\n<tr>\n<td>![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps4.jpg)</td>\n<td>Question three: Interactions between predators and prey</td>\n<td></td>\n</tr>\n<tr>\n<td>SR</td>\n<td>Sex Ratio</td>\n<td></td>\n</tr>\n<tr>\n<td>FA</td>\n<td>Food Availability</td>\n<td></td>\n</tr>\n<tr>\n<td>RR</td>\n<td>Reproductive Rate</td>\n<td></td>\n</tr>\n<tr>\n<td>P</td>\n<td>Predtion</td>\n<td></td>\n</tr>\n<tr>\n<td>HU![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps5.jpg) ![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps6.jpg) ![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps7.jpg) ![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps8.jpg)</td>\n<td>Habitat Utilizationpopulation size of the lampreysintrinsic growth rate of the lamprey populationcarrying capacity of the lamprey populationthe intrinsic growth rate of the parasite population</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"4-preliminary-conclusions-obtained-by-netlogo-simulation\"><a class=\"markdownIt-Anchor\" href=\"#4-preliminary-conclusions-obtained-by-netlogo-simulation\">#</a> <strong>4</strong>  <strong>Preliminary conclusions obtained by</strong> <strong>N****etlogo simulation</strong></h1>\n<h2 id=\"41-preliminary-setting\"><a class=\"markdownIt-Anchor\" href=\"#41-preliminary-setting\">#</a> <strong>4.1</strong> <strong>Preliminary setting</strong></h2>\n<p>Our time was refreshed by 0.1s. In our analysis and solution, we found that netlogo virtual simulation software could be used to simulate a simplified version of the fish ecosystem to initially judge a series of effects of the changes in the sex ratio of lampreys. We first set a series of conditions on netlogo with code: the color of the male lampreys is pink, and the initial energy is a random number of 6 to 16. Female Lampreys are red in color and have an initial energy of a random number from 1 to 10. Male lampreys have a feeding efficiency of 35% and female lampreys have a feeding efficiency of 20%. The color of the lake trout is blue, the energy is set to infinity (relative to the lampreys), and the initial number is set to 1/5 of the total number of lampreys, which can continuously gain energy on the lake trout. We set the color of the bacteria to purple, the initial number to 200, the reproduction rate to 2000%, carrying energy 0.5. The algae are green in color, have an initial number of 50, a reproductive rate of 2500%, and carry energy 2. We set the lampreys to consume 0.5 per step, and they die when they reach negative energy. Lampreys can reproduce at a specified time (time lapse mod40=30~40), when any two lampreys of the opposite sex can mate and produce 12~18 small white fish, both parents die immediately after producing offspring. Baby Lampreys have a 75% chance of dying as they grow. If the baby lampreys survive mod40&gt;10, they can be transformed into male or female lampreys depending on the amount of food resources around them. The specific rules are as follows:When there is plenty of food around (algae + fungi + lake trout more than 60% of the area), small fish are 56% more likely to become male.When there is not enough food around (algae + fungi + lake trout less than 30% of the area) the small fish are 78% more likely to become female lampreys.The proportion of small fish becoming males varies linearly between 56% and 78% according to the resource area.We also created human fishing rules, and we set the environment for lampreys to be able to sustain K.When the number of lampreys is greater than K of the square root of two fractions, humans catch 40-60% of lampreys at a time (of which 10% are juveniles, 60% are females, and 30% are males).</p>\n<p>Based on this preliminary setting, the dynamic changes of lampreys are simulated to derive the initial trend.</p>\n<h2 id=\"42-netlogo-solves-problem-one-two-three-four\"><a class=\"markdownIt-Anchor\" href=\"#42-netlogo-solves-problem-one-two-three-four\">#</a> <strong>4.2</strong> <strong>Netlogo solves problem one, two, three, four</strong></h2>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/Qf9pvxKleIPXZ5U.png\" alt=\"image.png\"></p>\n<p><strong>Picture 2 Dynamic simulation of each element with netlogo</strong></p>\n<p>As for problem 1, the larger ecosystem can be determined by the total resources and human predation. When lampreys can dynamically adjust their energy change according to the resource ratio, and when we adjust the sex ratio of lampreys from 56% to 78%, the curve shows that the total resources of the ecosystem are basically unchanged after 50 iterations.</p>\n<p>For the analysis of problem 2, when we remove the effect that lampreys can dynamically adjust the sex ratio with respect to the surrounding resources, we find that the total resources of the ecosystem and the total amount of lampreys both show a downward trend. It turns out that lampreys’ ability to adjust their sex ratio helps them grow and compete.</p>\n<p>For question 3, we found that when lampreys were able to adjust their sex ratio, the human catch would first remain at a stable value. Secondly, the total energy of the ecosystem will remain basically consistent, and the stability of species diversity will be effectively guaranteed.</p>\n<p>In response to question 4, we found that changes in the sex ratio of lampreys populations not only ensure the adaptability of host populations and the diversity of ecological niches, but also provide opportunities for parasite populations to stabilize and grow. Therefore, we can reasonably infer that this change in sex ratio does provide ecological advantages to other species such as parasites, especially in terms of stability and adaptability. This advantage may be critical to maintaining the overall health and diversity of the ecosystem.</p>\n<h1 id=\"5-effect-of-variable-sex-ratio-in-lampreys-on-bigger-ecosystem\"><a class=\"markdownIt-Anchor\" href=\"#5-effect-of-variable-sex-ratio-in-lampreys-on-bigger-ecosystem\">#</a> <strong>5  E****ffect of variable</strong> <strong>sex ratio</strong> <strong>in lampreys on</strong> <strong>bigger ecosystem</strong></h1>\n<h2 id=\"51-analytic-hierarchy-process-ahp\"><a class=\"markdownIt-Anchor\" href=\"#51-analytic-hierarchy-process-ahp\">#</a> <strong>5.1</strong>  <strong>Analytic Hierarchy Process (AHP)</strong></h2>\n<h3 id=\"511-model-establishment\"><a class=\"markdownIt-Anchor\" href=\"#511-model-establishment\">#</a> <strong>5.1.1  Model</strong> <strong>Establishment</strong></h3>\n<p>In hierarchical analysis, we hierarchized the problem as influencing the macroecosystem in terms of orientation (A), ecological balance (B1), biodiversity (B2), energy flow (B3), population size (C1), changes in sex ratios (C2), birth mortality rate (C3), natural and anthropogenic influences (D1), food abundance (D2), hatchery environmental conditions (D3), the waters of the effects of other organisms (D4), seasonal variation (D5), water quality conditions (D6), and temperature effects (D7). At the same time, we establish the hierarchical diagram as follows:</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/thozAHl7Te5rLSM.png\" alt=\"image.png\"></p>\n<p>Created a judgment matrix B=<img data-src=\"https://s2.loli.net/2024/07/04/TdbYR2tOpgFqM3D.png\" alt=\"image.png\"></p>\n<p>C=<img data-src=\"https://s2.loli.net/2024/07/04/Jys8Rn75Qbxl4rY.png\" alt=\"image.png\"></p>\n<p>We calculate the weight vector of B from the code as [0.93103448 0.03448276 0.03448276]</p>\n<p><strong>A hierarchical general ordering table for B and C is then created as follows.</strong></p>\n<p><strong>Table 2</strong> <strong>A hierarchical general ordering table for B and C</strong></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/IzAZyiaDh7uO3Bq.png\" alt=\"image.png\"></p>\n<p>Also we get the judgment matrix of D under C1~3</p>\n<p>Table 3 The judgment matrix of D when C1, C2, and C3 are fixed respectively</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/YZz6fTC2N4mawUX.png\" alt=\"image.png\"></p>\n<h3 id=\"512-model-solution\"><a class=\"markdownIt-Anchor\" href=\"#512-model-solution\">#</a> <strong>5.1.2  Model solution</strong></h3>\n<p>For <em><strong>*C*</strong></em><em><strong>*1*</strong></em><em><strong>*, C*</strong></em><em><strong>*2*</strong></em><em><strong>*, and C*</strong></em><em><strong>*3*</strong></em> fixed we compute the weight vectors D****1~7**** to get the following table.Multiplying the weights of criterion layer 2 by the coefficients, i.e., multiplying the individual influences by the criterion layer weights, yields:</p>\n<p><em><strong>*Table 4*</strong></em> <em><strong>*table of total weights*</strong></em></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/uipg9FsTJ2ZoV5d.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/rq3dpSFUvyzCkcD.png\" alt=\"image.png\"></p>\n<p>​                <em><strong>*Picture 4*</strong></em>\t<em><strong>*Various factors affect the heat map*</strong></em></p>\n<h3 id=\"513-results-and-analysis\"><a class=\"markdownIt-Anchor\" href=\"#513-results-and-analysis\">#</a> <strong>5.1.3  Results and Analysis</strong></h3>\n<p>As can be seen from the above table:</p>\n<p>（i）The population dynamics of lampreys were greatly affected by the change of sex ratio, followed by the population size. Changes in the sex ratio may directly affect the growth and dynamics of the population. At the same time, species such as lampreys may have complex social structures and behavioral patterns, including courtship behavior and breeding seasons. In these social structures, changes in the sex ratio may cause changes in behavior patterns and dynamics within the population, thus affecting the stability and dynamics of the entire population. Changes in lamprey population size can be relatively stable, as ecosystems usually have a certain carrying capacity. It can be seen from the weight table that the weight of gender ratio in layer C is the highest (1.137930), so the influence of gender ratio on many levels cannot be ignored.</p>\n<p>（ii）It can be seen from the heat map that the sex ratio has the largest or larger influence on the other seven factors, so the sex ratio can affect the population dynamics of lampreys by influencing, for example, the population size of lampreys, the population size of lampreys and the birth mortality rate of lampreys. The change of lampreys population dynamics not only has an impact on the ecological balance and energy flow of the ecosystem, but also has a strong impact on the activities of other organisms. In our view, this effect is positive for the larger ecosystem, which is conducive to improving the stability of the larger ecosystem. In order to keep the energy of the large ecosystem in a specific range, and dynamically regulate the ecological balance and biodiversity to maintain a stable range.</p>\n<h2 id=\"52-lotka-volterra-model\"><a class=\"markdownIt-Anchor\" href=\"#52-lotka-volterra-model\">#</a> <strong>5.2</strong>  <strong>Lotka-Volterra model</strong></h2>\n<h3 id=\"521-model-assumptions\"><a class=\"markdownIt-Anchor\" href=\"#521-model-assumptions\">#</a> <strong>5.2.1  Model</strong> <strong>Assumptions</strong></h3>\n<p>Our model is predicated on the ecological premise that the sex ratio of marine lamprey populations is a variable trait influenced by environmental factors such as food availability. In our assumptions, we consider the following variables:</p>\n<p>Sex Ratio (SR): A continuum from 0 (all male) to 1 (all female), affecting reproductive rates and predation dynamics.</p>\n<p>Food Availability (FA): A key factor influencing the sex ratio and growth rates within the lamprey population.</p>\n<p>Reproductive Rate (RR): Tied to the sex ratio, determining the potential for population increase.</p>\n<p>Predation §: Reflecting the food chain’s impact, with humans as a primary predator, influencing lamprey survival rates.</p>\n<p>Habitat Utilization (HU): The lampreys’ response to environmental conditions, which may affect their migratory and spawning behaviors.</p>\n<p>These factors form the basis of our ecological simulation, where we seek to understand how adaptive changes in sex ratio can affect the broader ecosystem in terms of resource allocation, population dynamics, and overall ecological balance.</p>\n<h3 id=\"522-model-establishment\"><a class=\"markdownIt-Anchor\" href=\"#522-model-establishment\">#</a> <strong>5.2.2  Model</strong> <strong>Establishment</strong></h3>\n<p>For codes 1.1 to 1.6, we utilized polynomial fitting to model the impact of sex ratio changes on various ecological variables. The polynomial fitting is an analytical approach used to model relationships between variables in a system where linear assumptions are inadequate. In our case, we use a 3rd degree polynomial to fit the relationship between the gender ratio and food supply, which can be expressed as:</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/1Cy8LJnxFjYIPv6.png\" alt=\"image.png\"></p>\n<p>Where:</p>\n<p><strong>N</strong> is the prey population (lampreys), <strong>P</strong> is the predator population (humans),<strong>r</strong> is the intrinsic growth rate of the prey,<strong>K</strong> is the carrying capacity of the prey,</p>\n<p><strong>α</strong> is the predation rate coefficient,</p>\n<p><strong>β</strong> is the growth rate coefficient of predators,</p>\n<p>![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps9.jpg) is the death rate of predators.</p>\n<p>These equations allow us to model the dynamic feedback loop where the prey’s growth is limited by the carrying capacity and predation, while the predator’s growth is fueled by the successful capture of prey but tempered by their own mortality.</p>\n<p>In your code for code 1.7, the variables are adjusted to reflect the influence of food availability on gender ratio and its subsequent impact on reproductive success and food resource sustainability. The simulation captures how the lamprey population, when considered as prey, is affected by the changing sex ratios and how this, in turn, affects the predator population over time.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/RP9Wc78TpkAadhU.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/pUNxry97tlmoa4z.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 5 Simulated Gender Ratio in Response to Food Availability  Picture 6 The effect of sex ratio on different variables*</strong></em></p>\n<h3 id=\"523-conclusions\"><a class=\"markdownIt-Anchor\" href=\"#523-conclusions\">#</a> <strong>5.2.3</strong> <strong>Conclusions</strong></h3>\n<p>Our model suggests that the marine lamprey’s capacity to modify its sex ratio is a significant evolutionary adaptation with profound implications for the ecosystem. An optimal sex ratio can enhance reproductive success, fortify the species’ position in the food chain, and improve the sustainable use of food resources. However, these benefits are not without their drawbacks; imbalances may expose the population to increased predation pressure and reproductive challenges, particularly in the face of environmental stressors such as overfishing and habitat degradation.</p>\n<p>In conclusion, the marine lamprey’s ability to alter its sex ratio in response to environmental conditions underscores a delicate ecological dance of adaptability and vulnerability. This balancing act is critical to the maintenance of ecosystem health, offering a window into the complex interdependencies that govern life within our waterways. Our findings shed light on the pivotal role that sex ratio variability plays in ecological resilience and resource management, providing key insights for the conservation and management of these unique species.</p>\n<h2 id=\"53-conclusion\"><a class=\"markdownIt-Anchor\" href=\"#53-conclusion\">#</a> <strong>5.3  Conclusion</strong></h2>\n<p>Combining the results of the two models, we conclude that the species has the adaptive sex ratio adjustment ability, which has a profound impact on the ecosystem. An optimal sex ratio enhances reproductive success, strengthens the position of species in the food chain, and enhances the sustainable use of food resources. However, this adaptation also brings challenges, and an unbalanced sex ratio can increase predation pressures and reproductive challenges faced by populations, especially in the presence of environmental pressures such as overfishing and habitat degradation.</p>\n<p>Overall, the ray population shows a delicate balance between adaptability and vulnerability in the ecosystem through sex ratio adjustment. This balance is critical to maintaining ecosystem health and provides a window into the complex interdependencies of life in our waters. Our study reveals the key role of sex ratio variation in ecological resilience and resource management, providing important insights into the conservation and management of these unique species.</p>\n<h1 id=\"6-advantages-and-disadvantages-of-variable-sex-ratio-for-lampreys-populations\"><a class=\"markdownIt-Anchor\" href=\"#6-advantages-and-disadvantages-of-variable-sex-ratio-for-lampreys-populations\">#</a> <strong>6</strong> <strong>Advantages and disadvantages of</strong> <strong>variable</strong> <strong>sex ratio for lampreys populations</strong></h1>\n<h2 id=\"61-integrated-assessment-method\"><a class=\"markdownIt-Anchor\" href=\"#61-integrated-assessment-method\">#</a> <strong>6.1</strong> <strong>I****ntegrated assessment method</strong></h2>\n<h3 id=\"611-model-estabilishment\"><a class=\"markdownIt-Anchor\" href=\"#611-model-estabilishment\">#</a> <strong>6.1.1  Model Estabilishment</strong></h3>\n<p>According to the Netlogo fitting results in point 4 we can see the advantage of the seven-gill eel that can dynamically regulate its sex ratio:</p>\n<p><em><strong>*Adaptable:*</strong></em> the ability to adjust the sex ratio to environmental conditions improves the ability to survive and reproduce in resource-limited environments.</p>\n<p><em><strong>*Population control:*</strong></em> By adjusting the sex ratio, lampreyeels are able to control their population size more effectively and reduce excessive competition.</p>\n<p><em><strong>*Genetic diversity:*</strong></em> changing sex ratios may promote genetic diversity and thus increase the adaptive capacity of populations.</p>\n<p>The disadvantages are：</p>\n<p><em><strong>*Fluctuations in reproductive rates:*</strong></em> If one sex is too dominant in a given environment, this may lead to a reduction in reproductive opportunities, affecting the long-term stability of the population.</p>\n<p><em><strong>*Competition for resources:*</strong></em> Changing sex ratios may exacerbate same-sex competition, especially if food or mates are limited.</p>\n<p>Through academic search on google, we built a comprehensive evaluation model after borrowing the paper of William D. Swink.[1]: firstly, we set up the number of initial predators, reproductive success, reproduction process, predation rate, and food resources, and then we set up the parameters to simulate the different sex ability and species change of the lampreyeel, and to simulate the population change of predators and so on.</p>\n<p>The initial evaluation indicator is obtained in our code by W = 0.4 * gender_ratio[gen] + 0.3 * predator_population[gen] + 0.2 * reproductive_success[gen] + 0.1 * food_resources[gen].</p>\n<p>The probability of predation on lampreyP = 0.2*(1-gender_ration[gen ]) to represent the effect of the gender shift on the lampreypopulation.</p>\n<p>The following code iterates the W loop 50 times.</p>\n<p>Then set the weights of the eight variables, i.e.Predation Control=0.2*![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps10.jpg)、Food Chain Role=![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps11.jpg)<em>0.3、Adaptability=![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps12.jpg)<em>0.1、Predation Threat=0.1</em>random(0.1,0.2)、Reproduction Threat=0.2</em>random(0.2,0.5)、Overfishing Risk=0.4<em>random(0.4,0.8)、Environmental Pressure=0.1</em>(0.1,0.5)，ecosystem_provider=0.2*![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps13.jpg)</p>\n<p>Data Setting Analysis:We set the weight of transitional predation by humans to 0.4 and used a random function (0.4,0.8) for the parameter settings, this is due to the fact that human fishing is the main cause of mortality in lampreyeels. Then we set the weight of reproductive threat to 0.2 and the random number set to (0.2,0.5), this is due to the fact that the juvenile mortality of the lampreyeel is also to important cause. And according to William’s article, setting Adaptability to the standard deviation of W is necessary. Setting the role of the lampreyeel in the food chain as the maximum value of W, which can reflect the status of the lampreyeel. And his Predation Control set to the mean value of W also responds well to the function of the seven-gill eel. Here the total energy provided by the ecosystem is recorded as the cumulative sum of W.</p>\n<p>The final comprehensive evaluation equation is  <strong>overall_score=</strong><img data-src=\"https://s2.loli.net/2024/07/04/fURQqInYcloaB6C.png\" alt=\"image.png\">,X for the factors mentioned above.</p>\n<h3 id=\"612-results-and-analysis\"><a class=\"markdownIt-Anchor\" href=\"#612-results-and-analysis\">#</a> <strong>6.1.2 Results and Analysis:</strong></h3>\n<p>The results demonstrated that with the output of the model, we output the sex ratio in the 21 cases of (0,1,0.05) which is overall_score with the specific values of the eight factors and plotted the heat map between the models.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/2ubCiAYfn7Mc1kj.png\" alt=\"image.png\"><img data-src=\"https://s2.loli.net/2024/07/04/VL2Dcsf4rJmaP7h.png\" alt=\"image.png\"><img data-src=\"https://s2.loli.net/2024/07/04/WrBImgHf9hquVdk.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 9 Thermal map representation of the relationship between the influencing factors*</strong></em></p>\n<p>Through comprehensive evaluation, we can see that, first of all, we observe picture 7, where the food Chain Role increases with the increase of male proportion, which is caused by the fact that males of lampreys have a stronger ability to obtain resources than females. When lampreys have fewer resources or are attacked by predators, increasing the male ratio helps them reduce mortality and improve their status in the ecological chain. Secondly, we pay attention to the change of predation control. In the range of male possibility value (greater than 50%) of lampreys, the threat of predation slowly decreases with the increase of male proportion. Finally, we pay attention to the change of environmental pressure, and we can see that the environmental pressure decreases with the increase of male proportion after 50%, which also means that the environmental pressure on lampreys decreases with the increase of male proportion. And as you can see from Picture 8, the total resources of the ecosystem do not change as the proportion of male lampreys increases, which means that the ecological balance will not be affected, but the adaptability of lampreys will be enhanced.</p>\n<p>So let’s look at the last line of the heat map. It can be seen that the male ratio of lampreys is correlated with all factors, with the strongest correlation for favorable factors, which is shown in red in the figure. However, the association with adverse factors was small, suggesting that an increase in the sex ratio of lampreys can effectively enlarge its beneficial effects and reduce its adverse effects.</p>\n<p>According to our analysis, the most important advantage of regulating the sex ratio of lampreys is to increase the net birth rate: when food is scarce, an increase in the proportion of males reduces the competition for food and improves the success of mating, and when food is abundant, an increase in the proportion of females increases the number of eggs laid and thus the number of offspring.</p>\n<p>Possible disadvantages include: Reduced fertility: When the proportion of males is too high, it may lead to a lack of females, thereby reducing reproductive rate and genetic diversity. When the proportion of females is too high, it can lead to excessive consumption of food, which can affect their growth and health. [Note, this is not inconsistent with advantage, but in a different dimension of thinking about the problem] or over-parasitical other species, resulting in resource damage, population increase, overfishing, disruption of ecological balance, affecting population diversity</p>\n<h2 id=\"62-genetic-algorithmjavascript\"><a class=\"markdownIt-Anchor\" href=\"#62-genetic-algorithmjavascript\">#</a> <strong>6.2</strong>  [Genetic Algorithm](javascript:)</h2>\n<h3 id=\"621-model-assumptions\"><a class=\"markdownIt-Anchor\" href=\"#621-model-assumptions\">#</a> <strong>6.2.1</strong> <strong>Model Assumptions</strong></h3>\n<p>Our genetic algorithm-based model is founded on the premise that adaptive sex ratio variability is a response to environmental pressures. In the case of the marine lamprey, whose sex determination can be influenced by factors such as food availability during larval development, this adaptability may provide a distinct survival advantage. We assume that in environments where food is scarce, a higher proportion of males could reduce intraspecific competition for resources, while in resource-rich settings, a balanced sex ratio could maximize reproductive opportunities. Nonetheless, these adaptations are not without their trade-offs, as a skewed sex ratio could lead to decreased breeding options and heightened vulnerability to environmental stressors.</p>\n<h3 id=\"622-model-establishment\"><a class=\"markdownIt-Anchor\" href=\"#622-model-establishment\">#</a> <strong>6.2.2  Model Establishment</strong></h3>\n<p>Our modeling process begins by initializing a population of potential solutions, represented by binary-encoded DNA. The DNA_LENGTH is set to 24, indicating that each individual solution comprises 24 ‘genes’. The POP_SIZE of 200 specifies that we will simulate 200 potential sex ratio strategies within the lamprey population. CROSSOVER_RATE at 0.8 and MUTATION_RATE at 0.005 are probability thresholds dictating how often genetic mixing and random mutations occur, respectively, throughout our generations of evolution.</p>\n<p>In the context of lamprey populations, we are particularly interested in how the sex ratio—ranging from 0 (all male) to 1 (all female)—and food availability—also scaled from 0 (lowest) to 1 (highest)—affect the overall fitness of the population. Fitness is a measure of how well each strategy copes with environmental conditions and is calculated by the simulate_environment function, which considers the deviation from an expected sex ratio based on food availability.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/o4RsirmxyGXMTIH.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 10 Genetic algorithm design flow chart*</strong></em></p>\n<h3 id=\"623-results-and-analysis\"><a class=\"markdownIt-Anchor\" href=\"#623-results-and-analysis\">#</a> <strong>6.2.3</strong>  <strong>Results and Analysis</strong></h3>\n<p><em><strong>*Picture 11~16 Food Availability, Food Chain Status, Adaptability, Overfishing, Reproduction threatened and ambient pressure were taken as the y axis, and sex ratio was taken as the x axis. The calculation is a 3D scatter plot of the z axis*</strong></em></p>\n<p>Our simulations reveal that the marine lamprey’s ability to adjust its sex ratio confers several advantages. It allows the population to adapt to varying levels of food availability, improves its position in the food chain by optimizing resource allocation, and exhibits remarkable adaptability to environmental conditions. However, the disadvantages become apparent when reproductive opportunities are threatened, or the population faces environmental pressures such as overfishing, which leads to a decrease in fitness. Thus, while the adaptive sex ratio variability of the lamprey population provides certain ecological benefits, it also poses significant risks, underscoring the delicate balance this species maintains within its ecosystem.</p>\n<h2 id=\"63-conclusion\"><a class=\"markdownIt-Anchor\" href=\"#63-conclusion\">#</a> <strong>6.3  Conclusion</strong></h2>\n<p>Lampreys show multiple ecological advantages by dynamically regulating the sex ratio. First, increasing the proportion of males increases their position in the food chain, and males are better at resource access, especially when resources are scarce or threatened by predation, which helps to reduce mortality and improve survival competitiveness in the ecological chain. Secondly, adjusting the sex ratio makes lampreys more adaptable, able to flexibly respond to environmental changes, and improve the success rate of survival and reproduction. In addition, an increased male ratio could help reduce predation threats to lampreys, reducing predation pressure and maintaining a more stable population. Finally, the model showed that environmental stress was significantly reduced when the proportion of males was more than 50%, suggesting that the presence of lampreys helped to reduce ecosystem pressure on them and promote the maintenance of ecological balance.</p>\n<p>But sex-ratio adjustment comes with some potential disadvantages. One of these is that it can lead to reduced reproductive opportunities, when the proportion of males is too high there may not be enough females, reducing reproductive rate and genetic diversity. In addition, if the proportion of females is too high, it can lead to overpredation and resource consumption, negatively affecting the growth and health of lampreys. At the same time, factors such as overfishing and environmental pressure may also cause resource damage, excessive population growth, overfishing and other problems, destroy the ecological balance and affect the diversity of the population. Therefore, while enjoying the multiple advantages brought about by sex ratio adjustment, it is also necessary to carefully deal with some disadvantages that may be triggered in order to maintain the balance and stability of lampreys in their ecosystem.</p>\n<p>However, for lampreys, the ecological advantages shown by dynamically adjusting the sex ratio far outweigh the disadvantages. This ability to adjust allows lampreys to respond flexibly to different environmental conditions, improving their survival and reproductive success. By optimizing their position in the food chain, mitigating the threat of predation, and reducing environmental stress, lampreys are able to better adapt to complex ecological environments and maintain their balance in the ecosystem. Despite some potential disadvantages, such as reduced reproductive opportunities and increased environmental pressures, the benefits of sex ratio regulation can be better realized through careful management and integrated consideration of the complexity of ecosystems. Thus, overall, lampreys’ ecological adaptations and advantages, demonstrated through flexible regulation of sex ratios, dominate in maintaining balance and diversity in their ecosystems.</p>\n<h1 id=\"7-effects-of-variable-sex-ratio-of-lamprey-on-ecosystem-stability\"><a class=\"markdownIt-Anchor\" href=\"#7-effects-of-variable-sex-ratio-of-lamprey-on-ecosystem-stability\">#</a> <strong>7</strong>  <strong>Effects of variable sex ratio of lamprey on ecosystem stability</strong></h1>\n<p>We use differential equation - Jacobian matrix to find eigenvalues to judge the stability of ecosystem. Select the points whose derivative or partial derivative is equal to zero, and analyze these points to calculate the Jacobian matrix near the stable point, and analyze its eigenvalue. We calculate the Jacobian matrix at two stable points (origin and non-zero stable point) and solve their eigenvalues. These eigenvalues can be used to analyze the stability of the system at these points. The real parts of the eigenvalues tell us how the system behaves around these points: if the real parts of the eigenvalues are all negative, then the system is locally stable at that point; If the real part of at least one eigenvalue is positive, the system is unstable at that point.。</p>\n<h2 id=\"71-not-considering-the-prey-of-lampreys\"><a class=\"markdownIt-Anchor\" href=\"#71-not-considering-the-prey-of-lampreys\">#</a> <strong>7.1</strong>  <strong>Not considering the prey of lampreys</strong></h2>\n<p>We use the Rottka-Volterra model differential equation, namely:</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/FnJBo8GOHqWCAXK.png\" alt=\"image.png\"></p>\n<p>The stability of the ecosystem is understood here as a stable population of lampreys and their natural predators. Initialize Natural_Growth_Rate = 0.5+0.5* (gender_ratio[gen] -0.5), make the probability of predation of lampreys β=0.4* (1-gender_ratio), initialize the number of lampreys and the number of predators, and iteration 200 times. According to the output model of the Jacobi equation, the ecosystem is stable when the male proportion is 55% to 81%, and unstable at the rest of the time.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/SyfGlPHKitk9hwb.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 17 Population dynamics of lampreys and their predators*</strong></em></p>\n<h2 id=\"72-consider-the-prey-of-lampreys\"><a class=\"markdownIt-Anchor\" href=\"#72-consider-the-prey-of-lampreys\">#</a> <strong>7.2</strong>  <strong>Consider the prey of lampreys</strong></h2>\n<p>At this point we call the ecosystem differential model:</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/R3Hy1V2OidnmeU8.png\" alt=\"image.png\"></p>\n<p>Where G is the number of prey, R is the number of prey, and E is the number of predatorsSimilar to 7.1, we added that the predation ability of lampreys increases with the increase of males. Then we performed the Jacobian operation on these three equations, and we were surprised to find that the ecosystem was stable within the range of 50% to 82% males.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/IHDVN6EPCwpBfvA.png\" alt=\"image.png\"></p>\n<h2 id=\"73-conclusion\"><a class=\"markdownIt-Anchor\" href=\"#73-conclusion\">#</a> <strong>7.3  Conclusion</strong></h2>\n<p>Based on the results of the study, the change in the sex ratio of lampreys has a positive effect on maintaining the stability of the ecosystem. Without taking into account parasitism, studies have shown that the ecosystem is relatively stable at a male ratio of 55% to 81%. This suggests that lampreys have the ability to promote a relatively balanced ecosystem within a specific range of male ratios by dynamically adjusting the sex ratio. In the case of lampreys as parasites, the ecosystem remained relatively stable in the 50 to 82 percent range, even with the increased male ratio. This indicates that the regulation of the sex ratio of lampreys can maintain the relative balance of the ecosystem in a wider range, so that the ecosystem shows a certain resilience to the change of sex ratio.</p>\n<p>Combining the two models, we can see that lampreys show positive effects on ecosystem stability by adjusting the sex ratio, providing a regulatory mechanism for ecological balance. This regulation of ecosystem stability may be related to lampreys’ ecological roles in resource utilization, predation control and adaptation, contributing to their relative balance in a complex ecological environment. The excess of the interval constructed by the model indicates that even when lampreys are hit by sudden shocks or sudden natural disasters, the sex ratio breaks through the normal interval, they can still maintain their relative stability.</p>\n<h1 id=\"8-effects-of-variable-sex-ratio-in-lampreys-on-other-species\"><a class=\"markdownIt-Anchor\" href=\"#8-effects-of-variable-sex-ratio-in-lampreys-on-other-species\">#</a> <strong>8</strong>  <strong>Effects of variable sex ratio in lampreys on other species</strong></h1>\n<h2 id=\"81-system-dynamics\"><a class=\"markdownIt-Anchor\" href=\"#81-system-dynamics\">#</a> <strong>8.1</strong>  <strong>System Dynamics</strong></h2>\n<h3 id=\"811-model-assumptions\"><a class=\"markdownIt-Anchor\" href=\"#811-model-assumptions\">#</a> <strong>8.1.1 Model Assumptions</strong></h3>\n<p>Our model is predicated on the assumption that the sex ratio of marine lamprey populations, represented as R（T）=F(T)/M(T), can significantly affect ecological dynamics within their habitat. Given the dependence of parasites on their hosts, any fluctuations in the lamprey population—attributable to changes in the sex ratio—could provide an ecological advantage to these parasites. Specifically, we hypothesize that:</p>\n<p>A higher reproduction rate, facilitated by an abundant food supply P(t), will lead to an increase in the lamprey population, subsequently benefiting the parasite population due to increased host availability.</p>\n<p>Parasites might exhibit resilience by maintaining or even increasing their population in the face of fluctuating food supplies, suggesting an advantage in their life cycle and infection strategies that allow survival and propagation when host numbers vary, as expressed by the dynamic <img data-src=\"https://s2.loli.net/2024/07/04/38fOLsUykthHFQu.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n<p>, where ![img](file:///C:\\Users\\JackDu\\AppData\\Local\\Temp\\ksohtml8880\\wps14.jpg)represents the survival rate of parasites.</p>\n<h3 id=\"812-model-creation-process\"><a class=\"markdownIt-Anchor\" href=\"#812-model-creation-process\">#</a> <strong>8.1</strong>**.2** <strong>Model</strong> <strong>Creation Process</strong></h3>\n<p>In constructing our model, we employed a systems dynamics approach to articulate the complex interplay between lamprey populations, parasite populations, and the food supply. The core parameters of our model include:</p>\n<p>The lamprey population over time, *<strong>*<em>N(t)*</em>*</strong>, influenced by the birth rate *<strong>*<em>b*</em>*</strong> related to the female lamprey population *<strong>*<em>F(t)*</em>*</strong> and the death rate *<strong>*<em>d*</em>*</strong>, as well as the external food supply *<strong>*<em>P(t)*</em>*</strong>.</p>\n<p>The parasite population over time, <em><strong>*<em>P(t)*</em>*</strong>, which depends on the lamprey population as its host and is subject to the survival rate <em><strong>*<em>s*</em>*</strong> and death rate <em><strong>*<em>d*</em>*</strong></em></em></em>*<em>p*</em>***.</p>\n<p>The food supply, *<strong>*<em>P(t)*</em>*</strong>, which directly impacts the reproduction rate of lampreys, thereby influencing the availability of hosts for parasites.</p>\n<p>The model is expressed through differential equations that delineate the growth or decline of both the lamprey and parasite populations, incorporating the variables of birth *<strong>*<em>b*</em>*</strong>, death *<strong>*<em>d*</em>*</strong>, and survival *<strong>*<em>s*</em>*</strong> rates<img data-src=\"https://s2.loli.net/2024/07/04/wpJXdxRlCK9gfQS.png\" alt=\"image.png\"></p>\n<p>These equations represent the core of our dynamic model, capturing the interdependencies and feedback loops within the ecosystem influenced by the sex ratio of the lamprey population.</p>\n<h3 id=\"813-results-and-analysis\"><a class=\"markdownIt-Anchor\" href=\"#813-results-and-analysis\">#</a> <strong>8.1.3 Results and Analysis</strong></h3>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/4mG9YzIo8NTr5t6.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 19~20 Population changes of LamPrey and Parasite under High Food Supply(19) and Low Food Supply(20)*</strong></em></p>\n<p>Figure 19 and  Figure 20 show that :</p>\n<p>Under high food availability, both lamprey populations and parasite populations show an increasing trend . This may be due to the fact that high food availability increases the reproduction rate of lamprey, which in turn provides more hosts for the parasites. Under low food availability, the growth rate of the lamprey population was slower, but the parasite population was still able to grow. Despite the slowdown in lamprey growth, this did not appear to prevent the expansion of the parasite population. These observations suggest that parasitoids show some advantage in this model in that they are able to maintain and even grow populations in spite of changes in lamprey populations. This advantage may stem from their life cycle and infection strategy that allows them to survive and reproduce when host populations fluctuate.</p>\n<p>In conclusion, the model suggests that parasites can leverage variations in the sex ratio of the lamprey population to their advantage, as they are able to grow under various food supply conditions. The ability of parasites to thrive even when food supplies are low, potentially due to a higher number of females during times of resource abundance, points to a significant ecological advantage.</p>\n<h2 id=\"82-ecological-interaction-model\"><a class=\"markdownIt-Anchor\" href=\"#82-ecological-interaction-model\">#</a> <strong>8.2</strong>  <strong>Ecological Interaction Model</strong></h2>\n<h3 id=\"821-model-assumptions\"><a class=\"markdownIt-Anchor\" href=\"#821-model-assumptions\">#</a> <strong>8.2.1 Model Assumptions</strong></h3>\n<p>In our Ecological Interaction Model, we begin by hypothesizing that variations in the sex ratio of the marine lamprey population can significantly affect reproductive success rates and survival strategies. This, in turn, may have cascading effects on the growth patterns of associated parasitic populations. \tWe postulate that:</p>\n<p>The sex ratio can shift dynamically in response to environmental pressures.</p>\n<p>These shifts can lead to differentiated reproductive roles and success rates between genders.</p>\n<p>Parasites will respond indirectly to these changes due to their dependence on the host population’s structure and density.</p>\n<p>For the lamprey population dynamics:</p>\n<p>![of the lamprey population size and the sex ratio <strong>R</strong>.</p>\n<h3 id=\"822-model-establishment\"><a class=\"markdownIt-Anchor\" href=\"#822-model-establishment\">#</a> <strong>8.2.2  Model Establishment</strong></h3>\n<p>The creation of our model involved several steps:</p>\n<p>We defined the intrinsic growth rates for lampreys and their parasites, denoted by ‘r_lamprey’ and ‘r_parasite’, respectively.</p>\n<p>A carrying capacity ‘K_lamprey®’ was established, which adjusts based on the sex ratio ‘R’, indicating the population’s maximum sustainable size under varying sex ratios.</p>\n<p>We formulated the interaction terms, particularly ‘sigma_lamprey’, which represents the rate at which parasites affect lampreys, and ‘K_parasite(N_lamprey, R)’, the modified carrying capacity for parasites influenced by lamprey numbers and sex ratio.</p>\n<p>Differential equations were developed to model the dynamics of both populations, allowing for the simulation of long-term ecological interactions.</p>\n<h3 id=\"823-results-and-analysishttpss2lolinet20240704onnwjqlb7ibsp1vpng\"><a class=\"markdownIt-Anchor\" href=\"#823-results-and-analysishttpss2lolinet20240704onnwjqlb7ibsp1vpng\">#</a> <strong>8.2.3  Results and analysis</strong>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMi5sb2xpLm5ldC8yMDI0LzA3LzA0L29ObldKcWxCN2lic1Axdi5wbmc=\">https://s2.loli.net/2024/07/04/oNnWJqlB7ibsP1v.png</span>)</h3>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/LisHxdGoZm6jOAY.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 21 Dynamics of Lamprey and Parasite Populations*</strong></em></p>\n<p>The variable sex ratio of lamprey populations do offer an advantage to other species in the ecosystem, such as parasites. This advantage is reflected in several key aspects:</p>\n<p>l Sex ratio changes and population stability:</p>\n<p>The graph shows that although the lamprey population declined rapidly initially, it stabilised over time. This stabilisation may be a direct effect of the sex ratio change on the ecosystem, providing a stable host population for the parasites, allowing their population to expand and remain stable. Stable host populations provide a continuous resource for the parasites, allowing them to not only survive, but to reproduce.</p>\n<p>l The ability to adapt to the environment:</p>\n<p>Changes in sex ratios may lead to increased adaptability of lamprey populations to different environmental conditions. For example, during periods of food scarcity, an increase in the proportion of males may help to reduce competition for limited resources, which provides a more stable environment for the parasite as the host population does not collapse due to food shortages.</p>\n<p>l Ecological niche occupancy:</p>\n<p>Changes in sex ratios may mean that male and female lampreys have different roles in the ecosystem. This may lead to changes in ecological niches that provide new or underutilised resources for the parasites, thus increasing their chances of survival and reproduction.</p>\n<p>l Long-term symbiotic relationships:</p>\n<p>The steady growth of parasite populations in the charts suggests that, despite the limited number of hosts, the parasites have adapted to the conditions and have developed a long-term symbiotic relationship with their hosts. This relationship may be caused by changes in sex ratio, as such changes help to limit the growth of parasite populations and prevent them from causing excessive damage to their hosts.</p>\n<h2 id=\"83-conclusion\"><a class=\"markdownIt-Anchor\" href=\"#83-conclusion\">#</a> <strong>8.3  Conclusion</strong></h2>\n<p>In conclusion, our two models demonstrate that variable sex ratio of lamyprey offer significant ecological advantages its parasitic counterparts.</p>\n<p>These changes in sex ratio not only promote population stability but also enhance adaptability to environmental variations, offering a consistent resource base and food supply for parasites. They are able to grow under various food supply conditions and when food supplies are low, potentially due to a higher number of females during times of resource abundance.</p>\n<p>Additionally, the alterations in sex ratio lead to ecological niche differentiation, thus providing new opportunities for parasitic population expansion. The establishment of long-term symbiotic relationships also suggests that prudent adjustments in sex ratio can maintain a balance between hosts and parasites, which is essential for the health and diversity of the entire ecosystem.</p>\n<h1 id=\"9-sensitivity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#9-sensitivity-analysis\">#</a> <strong>9  Sensitivity</strong> <strong>Analysis</strong></h1>\n<h2 id=\"91-ahp-sensitivity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#91-ahp-sensitivity-analysis\">#</a> <strong>9.1  AHP</strong> <strong>sensitivity analysis</strong></h2>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/MrymS8e5O2nilbZ.png\" alt=\"image.png\"></p>\n<h2 id=\"92-lotka-volterra-sensitivity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#92-lotka-volterra-sensitivity-analysis\">#</a> <strong>9.2</strong> <strong>Lotka-Volterra</strong> <strong>sensitivity analysis</strong></h2>\n<p>The sensitivity analysis of model parameters is a critical step in understanding the dynamics of ecological system models. In our Lotka-Volterra model, we conducted a sensitivity analysis on the predation rate ® and the predation efficiency (beta). These parameters directly affect the interactions between prey and predator populations over time.</p>\n<p>The sensitivity analysis results indicate that the prey population (lampreys) is highly sensitive to changes in the predation rate ® and predation efficiency (beta). As r and beta increase, there is a significant decrease in the prey population. This sensitivity suggests that even slight variations in predation pressure can significantly impact prey numbers.</p>\n<p>Conversely, the predator population (humans) showed a contrasting trend under certain parameter combinations. With higher rates of r and beta, predator populations initially surge but then stabilize. This may indicate that predators can adapt to changes in food supply by increasing predation activities.</p>\n<p>The sensitivity analysis allows us to conclude that in the Lotka-Volterra model, the impact of the predation rate ® and predation efficiency (beta) on prey populations is pronounced. The prey population exhibits high sensitivity to these changes, whereas the predator population displays greater adaptability. These findings emphasize the importance of considering these key parameter variations when devising strategies for ecosystem management and conservation.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/gJMQ1NOWbmfdjFZ.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 22*</strong></em> <em><strong>*Sensitivity analysis plots for predation rate ® and predation efficiency (β) for the LV equation*</strong></em></p>\n<h2 id=\"93-comprehensive-assessment-sensitivity-analysis\"><a class=\"markdownIt-Anchor\" href=\"#93-comprehensive-assessment-sensitivity-analysis\">#</a> <strong>9.3</strong>  <strong>C****omprehensive assessment</strong> <strong>sensitivity analysis</strong></h2>\n<p>We obtained the gender through records_ The line chart of the ratio overall score shows that within the achievable male proportion range, the overall score remains relatively stable. After deducing the third question, the models of the second and third questions are mutually confirmed, and the model is established.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/weEfzsVSI7lFM6h.png\" alt=\"image.png\"></p>\n<p><strong>Picture 23 Line graph of total IMRT score as a function of gender ratio</strong></p>\n<h2 id=\"94-sensitivity-analysis-of-genetic-algorithm\"><a class=\"markdownIt-Anchor\" href=\"#94-sensitivity-analysis-of-genetic-algorithm\">#</a> <strong>9.4</strong>  <strong>Sensitivity analysis of genetic algorithm</strong></h2>\n<p>This sensitivity analysis evaluates how changes in sex ratio and food availability affect the fitness of a simulated lamprey population within a genetic algorithm framework. The analysis aims to determine the model’s sensitivity to these two parameters by observing the variations in fitness outcomes.</p>\n<p>The genetic algorithm’s population was initialized with a range of sex ratios from 0 (all male) to 1 (all female) and food availability from 0 (lowest) to 1 (highest). For each combination of sex ratio and food availability, the model calculated the corresponding fitness, which represents the population’s viability under those conditions.</p>\n<p>The resulting surface plot demonstrates that fitness is highly sensitive to changes in sex ratio when food availability is low. In contrast, the model shows less sensitivity to variations in food availability when the sex ratio is near the extremes (0 or 1). The steepest gradient occurs when transitioning from a male-dominant population to a balanced or female-dominant one, particularly in environments with limited food resources.</p>\n<p>The model displays significant sensitivity to sex ratio changes, particularly in scenarios of low food availability, suggesting that the sex ratio is a critical factor in the population’s adaptability. Conversely, the population’s fitness is less sensitive to food availability, especially when the sex ratio is balanced. These findings highlight the importance of sex ratio management in conservation and resource allocation strategies for the lamprey species.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/Wu5bPqjHnfsRJKz.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 24 Sensitivity analysis of sex ratio and food availability*</strong></em></p>\n<h2 id=\"95-sensitivity-testing-of-eigenvalue-models-using-differential-equations\"><a class=\"markdownIt-Anchor\" href=\"#95-sensitivity-testing-of-eigenvalue-models-using-differential-equations\">#</a> <strong>9.5</strong> <strong>Sensitivity testing of eigenvalue models using differential equations</strong></h2>\n<p>When we adjust the sex ratio and parameters, within the allowable error range (5%), the stability of the ecosystem output of the code is not affected, and the model is valid.</p>\n<h2 id=\"96-sensitivity-analysis-of-system-dynamics\"><a class=\"markdownIt-Anchor\" href=\"#96-sensitivity-analysis-of-system-dynamics\">#</a> <strong>9.6</strong>  <strong>Sensitivity analysis of system dynamics</strong></h2>\n<p>This report examines the sensitivity of the total population size to variations in birth and death rates within a population model. By altering these parameters, the trends in population changes over time are observed.</p>\n<p>The findings indicate that the population size is significantly sensitive to changes in both the birth and death rates. An increase in the birth rate leads to an upward trend in population size, while an increase in the death rate results in a downward trend. Within the parameter range analyzed in this study, the effect of the birth rate appears to be more pronounced, suggesting that it is a critical control parameter for population growth. On the other hand, an increase in the death rate decreases the population size, but the population can still sustain growth when the birth rate is sufficiently high.</p>\n<p>In conclusion, the birth and death rates are sensitive parameters in the population model, exerting direct and significant influences on the population size. Therefore, changes in these parameters should be closely monitored in population management and conservation efforts.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/FmJPS6LZ2OQxlo3.png\" alt=\"inmage\"></p>\n<p><em><strong>*Picture 25 Sensitivity analysis of birth and death rates by system dynamics*</strong></em></p>\n<h2 id=\"97-sensitivity-analysis-of-ecological-interactions-model\"><a class=\"markdownIt-Anchor\" href=\"#97-sensitivity-analysis-of-ecological-interactions-model\">#</a> <strong>9.7</strong> <strong>Sensitivity analysis of ecological interactions model</strong></h2>\n<p>This report presents the findings from a sensitivity analysis conducted on a population model concerning birth and death rates. Our objective was to determine how variations in these parameters influence the overall population growth over time.</p>\n<p>The sensitivity analysis was performed by systematically varying the birth rate between 0.01 to 0.1 and the death rate between 0.005 to 0.02. A total of 40 simulations were run, combining different levels of birth and death rates to observe their effects on the population dynamics.</p>\n<p>The model’s output indicates a direct correlation between the birth rate and population size, with higher birth rates resulting in greater population growth. Conversely, increased death rates dampen this growth, as expected. However, the population’s sensitivity to changes in the death rate is less pronounced when compared to the birth rate.</p>\n<p>The model demonstrates a high sensitivity to changes in the birth rate, with even slight increases leading to significant rises in population size. In contrast, the death rate’s impact is noticeable but less influential. Therefore, we conclude that the population model is more sensitive to variations in birth rate than to changes in death rate.</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/04/eoO1A2baGQBJkW4.png\" alt=\"image.png\"></p>\n<p><em><strong>*Picture 26 Ecosystem interaction modeling for sensitivity analysis of birth and death rates*</strong></em></p>\n<h1 id=\"10-model-evaluation-and-further-discussion\"><a class=\"markdownIt-Anchor\" href=\"#10-model-evaluation-and-further-discussion\">#</a> <strong>10</strong>  <strong>Model Evaluation and Further Discussion</strong></h1>\n<h2 id=\"101-question-one\"><a class=\"markdownIt-Anchor\" href=\"#101-question-one\">#</a> <strong>10.1</strong>  <strong>Question One</strong></h2>\n<p>The Analytic Hierarchy Process (AHP) offers a comprehensive analysis of multiple factors, facilitating weight calculation and intuitive insights. However, it is subjective and may not always yield precise conclusions. On the other hand, the Lotka-Volterra model allows dynamic simulation, ecosystem interactions, and adaptive analysis, albeit with the drawback of simplification and parameter uncertainty. In essence, these two models can complement each other. AHP can provide weights and relationships for broader ecosystem impacts, while the Lotka-Volterra model delves deeper into species interactions. Future development should focus on constructing a more realistic and comprehensive ecosystem model by leveraging the strengths of both.</p>\n<h2 id=\"102-question-two\"><a class=\"markdownIt-Anchor\" href=\"#102-question-two\">#</a> <strong>10.2</strong>  <strong>Question Two</strong></h2>\n<p>The advantage of the Comprehensive Evaluation Method lies in its ability to conduct a thorough analysis, set reasonable weights, and offer multiple perspectives. While it visually displays relationships through heatmaps, it suffers from subjective parameter setting and complexity. Genetic algorithms, with their adaptability and global search capabilities, are well-suited for complex ecosystem problems. In summary, both models have distinct advantages, and combining them allows for a more holistic understanding of the European eel’s impact on the ecosystem. Future research can enhance model reliability and practicality through optimization, improved data quality, and enhanced field observations.</p>\n<h2 id=\"103-question-three\"><a class=\"markdownIt-Anchor\" href=\"#103-question-three\">#</a> <strong>10.3</strong>  <strong>Question Three</strong></h2>\n<p>The Ecosystem Stability Model exhibits several merits: it is built on a mathematical framework employing differential equations and Jacobian matrices, providing a scientific and systematic analysis tool. The model compares two scenarios, considering and not considering parasitism, forming a foundation for a more comprehensive understanding. By applying the model to real cases, such as changes in the gender ratio of European eels, it enhances the credibility of practical applications and offers valuable quantitative results to decision-makers. Nevertheless, the model relies on simplified assumptions and may not fully capture all factors impacting real ecosystems. Future efforts could refine algorithms and the model itself for increased precision.</p>\n<h2 id=\"104-question-four\"><a class=\"markdownIt-Anchor\" href=\"#104-question-four\">#</a> <strong>10.4</strong>  <strong>Question Four</strong></h2>\n<p>The System Dynamics model, based on system dynamics, comprehensively addresses the complex interactions between European eel populations, parasite populations, and food supply. Core parameters and equations are well-defined, and ecological interactions are explicitly considered. However, both models simplify other factors, such as interactions with other species. These two models complement each other, suggesting the potential for an integrated ecosystem dynamic model in the future to better understand the impact of gender ratio changes on the entire ecosystem.</p>\n<h1 id=\"11-reference\"><a class=\"markdownIt-Anchor\" href=\"#11-reference\">#</a> <strong>11</strong> <strong>R****eference</strong></h1>\n<p>[1] William D. Swink. Host Selection and Lethality of Attacks by Sea Lampreys (Petromyzon marinus) in Laboratory Studies (2003). Journal of Great Lakes Research, 29, 307-31</p>\n<p>[2] RYAPOLLOVA N I, PARSHUTA V V, MINTAS A R. Fish industry lamprey larvae breeding-keeping. SU1565441-A. BALTIISK FISH ECON. 2023-08-10. DIIDW:1991034673.</p>\n<p>[3] DAVIS W A. Sea lamprey population control method. US4934318-A; CA2007417-A; CA2007417-C. DAVIS W A. 2023-08-10. DIIDW:1990208774.</p>\n<p>[4] MAURINSH O K, EGGERTS B V. Lamprey fry rearing method. SU1355200-A. TSARNIKAVA KOLKHOZ. 2023-08-10. DIIDW:1988167501.</p>\n<p>[5] WU F, XU A, ZHANG T. Performing artificial breeding of wild Siberian lamprey, by selecting matured northeast lamprey as parent, performing artificial insemination, washing and incubating fertilized egg, separating hatched eggs, and feeding hatched ones. CN104137799-A; CN104137799-B. UNIV SUN YAT-SEN. 2023-08-10. DIIDW:201505012A.</p>\n<p>[6] ZHANG J, CHEN D, MO W, CUI J, SUN S, WANG G. Method for farming river lamprey, involves feeding eel, Penaeus white shrimp and carp into pond followed by feeding and daily management including aeration, disinfection, microbial agent application, water exchange and disease control. CN103416337-A; CN103416337-B. NINGBO CHUANGHUI VEGETABLES ENG &amp; TECHNO; NINGBO DAQIAO ZOOLOGY AGRIC CO LTD; CIXI VEGETABLE DEV CO LTD. 2014-01-03. DIIDW:2014C16110.</p>\n<p>[7] OpenAI.(2023)Chatgpt3.5 <span class=\"exturl\" data-url=\"aHR0cDovL29wZW5haS5jb20vY2hhdGdwdA==\">http://openai.com/chatgpt</span></p>\n<p><em><strong>*Artificial Intelligence Usage Report*</strong></em></p>\n<p>Question 1: “Please explain the Analytic Hierarchy Process (AHP) and its application in assessing the impact of gender ratio changes in ecosystems.”</p>\n<p>Output: “Analytic Hierarchy Process (AHP) is a decision analysis tool that decomposes complex problems into several factors and sub factors by establishing a hierarchical structure, and then evaluates the importance of each factor through pairwise comparison and weight allocation. In the study of gender ratio changes in ecosystems, AHP can help quantify different factors (such as resource utilization, species diversity, etc.)” The importance of impacts on ecosystems in order to optimize decision-making processes. “</p>\n<p>Question 2: “Please provide a simplified genetic algorithm example for optimizing the simulation of adjusting the sex ratio of lampreys.”</p>\n<p>Output: “Genetic algorithm is a search heuristic algorithm used to solve optimization and search problems, imitating the process of natural selection. Simplified examples include defining a fitness function to evaluate the reproductive growth advantage of the lamprey population, and then generating a new generation of population through selection, crossover, and mutation operations, iterating continuously to find the optimal gender ratio configuration.”</p>\n<p>Question 3: “How to use system dynamics models to simulate ecological interactions between lampreys and other species?”</p>\n<p>Output: “The system dynamics model simulates system behavior by constructing causal diagrams and differential equations between variables. In the simulation of interactions between lampreys and other species, variables including lampreys population size, gender ratio, resource quantity, and other species population size can be defined, and their changes over time can be described through a system of equations to study the impact of gender ratio changes on other members of the ecosystem.”</p>\n<p>Question 4: “Explain the application of difference equations and Jacobian matrices in evaluating ecosystem stability.”</p>\n<p>Output: Differential equations are used to describe the process of variable discrete changes over time, while Jacobian matrices are a mathematical tool used to analyze the local stability of nonlinear systems. In ecosystem stability assessment, differential equations can be constructed to simulate the dynamic changes of populations in the ecosystem. Jacobian matrices can be used to analyze the impact of gender ratio changes on system stability, identify the equilibrium state of the system, and its sensitivity to disturbances Sex. “</p>\n<p>Question 5: “What are the advantages of using the NetLogo model to simulate the ecological impact of gender ratio changes in lampreys?”</p>\n<p>Output: “NetLogo is a multi-agent simulation software that can simulate interactions between individuals in complex systems. The advantage of using NetLogo to simulate changes in the sex ratio of lampreys is that it can intuitively demonstrate how individual behavior accumulates and affects the dynamics of the entire system, allowing researchers to adjust model parameters and observe ecosystem responses in real-time under different conditions, thereby gaining a deeper understanding of the multidimensional effects of gender ratio adjustments on the ecosystem.”</p>\n<p>Question 6: “How to determine key parameters when conducting model sensitivity analysis?”</p>\n<p>Output: “In model sensitivity analysis, the process of determining key parameters typically involves evaluating the sensitivity of model output to changes in various input parameters. By changing parameter values one by one and observing their impact on model results, the parameters that have the greatest impact on model prediction results can be identified. This helps to understand the sources of uncertainty in the model and which parameters are the key factors determining model behavior.”</p>\n<p>Question 7: “How can existing data be used to validate the accuracy and reliability of the model?”</p>\n<p>Output: “Verifying the accuracy and reliability of a model can be achieved by comparing its predicted results with actual observation data. This includes testing the model’s predictive ability for known events using historical data, and conducting cross validation to evaluate the model’s generalization ability on unknown data. Through this approach, the model’s predictive accuracy can be evaluated, and deviations or inaccuracies in the model can be identified and adjusted.”</p>\n<h1 id=\"美赛代码\"><a class=\"markdownIt-Anchor\" href=\"#美赛代码\">#</a> 美赛代码</h1>\n<h2 id=\"层次分析法\"><a class=\"markdownIt-Anchor\" href=\"#层次分析法\">#</a> 层次分析法</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AHP</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    相关信息的传入和准备</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, array</span>):</span><br><span class=\"line\">        <span class=\"comment\">## 记录矩阵相关信息</span></span><br><span class=\"line\">        self.array = array</span><br><span class=\"line\">        <span class=\"comment\">## 记录矩阵大小</span></span><br><span class=\"line\">        self.n = array.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 初始化RI值，用于一致性检验</span></span><br><span class=\"line\">        self.RI_list = [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.52</span>, <span class=\"number\">0.89</span>, <span class=\"number\">1.12</span>, <span class=\"number\">1.26</span>, <span class=\"number\">1.36</span>, <span class=\"number\">1.41</span>, <span class=\"number\">1.46</span>, <span class=\"number\">1.49</span>, <span class=\"number\">1.52</span>, <span class=\"number\">1.54</span>, <span class=\"number\">1.56</span>, <span class=\"number\">1.58</span>,</span><br><span class=\"line\">                        <span class=\"number\">1.59</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的特征值和特征向量</span></span><br><span class=\"line\">        self.eig_val, self.eig_vector = np.linalg.eig(self.array)</span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的最大特征值</span></span><br><span class=\"line\">        self.max_eig_val = np.<span class=\"built_in\">max</span>(self.eig_val)</span><br><span class=\"line\">        <span class=\"comment\"># 矩阵最大特征值对应的特征向量</span></span><br><span class=\"line\">        self.max_eig_vector = self.eig_vector[:, np.argmax(self.eig_val)].real</span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的一致性指标CI</span></span><br><span class=\"line\">        self.CI_val = (self.max_eig_val - self.n) / (self.n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 矩阵的一致性比例CR</span></span><br><span class=\"line\">        self.CR_val = self.CI_val / (self.RI_list[self.n - <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    一致性判断</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_consist</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 打印矩阵的一致性指标CI和一致性比例CR</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的CI值为：&quot;</span> + <span class=\"built_in\">str</span>(self.CI_val))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的CR值为：&quot;</span> + <span class=\"built_in\">str</span>(self.CR_val))</span><br><span class=\"line\">        <span class=\"comment\"># 进行一致性检验判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.n == <span class=\"number\">2</span>:  <span class=\"comment\"># 当只有两个子因素的情况</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;仅包含两个子因素，不存在一致性问题&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.CR_val &lt; <span class=\"number\">0.1</span>:  <span class=\"comment\"># CR值小于0.1，可以通过一致性检验</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的CR值为&quot;</span> + <span class=\"built_in\">str</span>(self.CR_val) + <span class=\"string\">&quot;,通过一致性检验&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:  <span class=\"comment\"># CR值大于0.1, 一致性检验不通过</span></span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的CR值为&quot;</span> + <span class=\"built_in\">str</span>(self.CR_val) + <span class=\"string\">&quot;未通过一致性检验&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    算术平均法求权重</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">cal_weight_by_arithmetic_method</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 求矩阵的每列的和</span></span><br><span class=\"line\">        col_sum = np.<span class=\"built_in\">sum</span>(self.array, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 将判断矩阵按照列归一化</span></span><br><span class=\"line\">        array_normed = self.array / col_sum</span><br><span class=\"line\">        <span class=\"comment\"># 计算权重向量</span></span><br><span class=\"line\">        array_weight = np.<span class=\"built_in\">sum</span>(array_normed, axis=<span class=\"number\">1</span>) / self.n</span><br><span class=\"line\">        <span class=\"comment\"># 打印权重向量</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;算术平均法计算得到的权重向量为：\\n&quot;</span>, array_weight)</span><br><span class=\"line\">        <span class=\"comment\"># 返回权重向量的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_weight</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    几何平均法求权重</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">cal_weight__by_geometric_method</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 求矩阵的每列的积</span></span><br><span class=\"line\">        col_product = np.product(self.array, axis=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 将得到的积向量的每个分量进行开n次方</span></span><br><span class=\"line\">        array_power = np.power(col_product, <span class=\"number\">1</span> / self.n)</span><br><span class=\"line\">        <span class=\"comment\"># 将列向量归一化</span></span><br><span class=\"line\">        array_weight = array_power / np.<span class=\"built_in\">sum</span>(array_power)</span><br><span class=\"line\">        <span class=\"comment\"># 打印权重向量</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;几何平均法计算得到的权重向量为：\\n&quot;</span>, array_weight)</span><br><span class=\"line\">        <span class=\"comment\"># 返回权重向量的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_weight</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    特征值法求权重</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">cal_weight__by_eigenvalue_method</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 将矩阵最大特征值对应的特征向量进行归一化处理就得到了权重</span></span><br><span class=\"line\">        array_weight = self.max_eig_vector / np.<span class=\"built_in\">sum</span>(self.max_eig_vector)</span><br><span class=\"line\">        <span class=\"comment\"># 打印权重向量</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;特征值法计算得到的权重向量为：\\n&quot;</span>, array_weight)</span><br><span class=\"line\">        <span class=\"comment\"># 返回权重向量的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> array_weight</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 给出判断矩阵</span></span><br><span class=\"line\">    b = np.array([[<span class=\"number\">1</span>, <span class=\"number\">1</span> / <span class=\"number\">3</span>, <span class=\"number\">1</span> / <span class=\"number\">8</span>], [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span> / <span class=\"number\">3</span>], [<span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 算术平均法求权重</span></span><br><span class=\"line\">    weight1 = AHP(b).cal_weight_by_arithmetic_method()</span><br><span class=\"line\">    <span class=\"comment\"># 几何平均法求权重</span></span><br><span class=\"line\">    weight2 = AHP(b).cal_weight__by_geometric_method()</span><br><span class=\"line\">    <span class=\"comment\"># 特征值法求权重</span></span><br><span class=\"line\">    weight3 = AHP(b).cal_weight__by_eigenvalue_method()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"计算一致性比例cr\"><a class=\"markdownIt-Anchor\" href=\"#计算一致性比例cr\">#</a> 计算一致性比例 CR</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consistency_ratio</span>(<span class=\"params\">CI, RI</span>):</span><br><span class=\"line\">    CR = CI / RI</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设 A 是你的判断矩阵</span></span><br><span class=\"line\">A = np.array([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算特征值</span></span><br><span class=\"line\">eigenvalues, eigenvectors = np.linalg.eig(A)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到最大特征值</span></span><br><span class=\"line\">lambda_max = <span class=\"built_in\">max</span>(eigenvalues)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算一致性指标 CI</span></span><br><span class=\"line\">n = <span class=\"built_in\">len</span>(A)</span><br><span class=\"line\">CI = (lambda_max - n) / (n - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找平均随机一致性指标 RI</span></span><br><span class=\"line\">random_matrices = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">500</span>):</span><br><span class=\"line\">    random_matrix = np.random.randint(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>, size=(n, n))</span><br><span class=\"line\">    random_matrices.append(random_matrix)</span><br><span class=\"line\"></span><br><span class=\"line\">average_lambda_max = np.mean([<span class=\"built_in\">max</span>(np.linalg.eig(mat)[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> mat <span class=\"keyword\">in</span> random_matrices])</span><br><span class=\"line\">RI = (average_lambda_max - n) / (n - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算一致性比率 CR</span></span><br><span class=\"line\">CR = consistency_ratio(CI, RI)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最大特征值 (λmax):&quot;</span>, lambda_max)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;一致性指标 CI:&quot;</span>, CI)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;查找平均随机一致性指标 RI:&quot;</span>, RI)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;一致性比率 CR:&quot;</span>, CR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断一致性是否可接受</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> CR &lt; <span class=\"number\">0.10</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的一致性是可以接受的&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的一致性需要适当修正&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"遗传算法\"><a class=\"markdownIt-Anchor\" href=\"#遗传算法\">#</a> 遗传算法</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> cm</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"></span><br><span class=\"line\">DNA_SIZE = <span class=\"number\">24</span></span><br><span class=\"line\">POP_SIZE = <span class=\"number\">200</span></span><br><span class=\"line\">CROSSOVER_RATE = <span class=\"number\">0.8</span></span><br><span class=\"line\">MUTATION_RATE = <span class=\"number\">0.005</span></span><br><span class=\"line\">N_GENERATIONS = <span class=\"number\">50</span></span><br><span class=\"line\">X_BOUND = [-<span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">Y_BOUND = [-<span class=\"number\">3</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">F</span>(<span class=\"params\">x, y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span> * (<span class=\"number\">1</span> - x) ** <span class=\"number\">2</span> * np.exp(-(x ** <span class=\"number\">2</span>) - (y + <span class=\"number\">1</span>) ** <span class=\"number\">2</span>) - <span class=\"number\">10</span> * (x / <span class=\"number\">5</span> - x ** <span class=\"number\">3</span> - y ** <span class=\"number\">5</span>) * np.exp(</span><br><span class=\"line\">        -x ** <span class=\"number\">2</span> - y ** <span class=\"number\">2</span>) - <span class=\"number\">1</span> / <span class=\"number\">3</span> ** np.exp(-(x + <span class=\"number\">1</span>) ** <span class=\"number\">2</span> - y ** <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_3d</span>(<span class=\"params\">ax</span>):</span><br><span class=\"line\">    X = np.linspace(*X_BOUND, <span class=\"number\">100</span>)</span><br><span class=\"line\">    Y = np.linspace(*Y_BOUND, <span class=\"number\">100</span>)</span><br><span class=\"line\">    X, Y = np.meshgrid(X, Y)</span><br><span class=\"line\">    Z = F(X, Y)</span><br><span class=\"line\">    ax.plot_surface(X, Y, Z, rstride=<span class=\"number\">1</span>, cstride=<span class=\"number\">1</span>, cmap=cm.coolwarm)</span><br><span class=\"line\">    ax.set_zlim(-<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    ax.set_xlabel(<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">    ax.set_ylabel(<span class=\"string\">&#x27;y&#x27;</span>)</span><br><span class=\"line\">    ax.set_zlabel(<span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">    plt.pause(<span class=\"number\">3</span>)</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_fitness</span>(<span class=\"params\">pop</span>):</span><br><span class=\"line\">    x, y = translateDNA(pop)</span><br><span class=\"line\">    pred = F(x, y)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (pred - np.<span class=\"built_in\">min</span>(</span><br><span class=\"line\">        pred)) + <span class=\"number\">1e-3</span>  <span class=\"comment\"># 减去最小的适应度是为了防止适应度出现负数，通过这一步fitness的范围为[0, np.max(pred)-np.min(pred)],最后在加上一个很小的数防止出现为0的适应度</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">translateDNA</span>(<span class=\"params\">pop</span>):  <span class=\"comment\"># pop表示种群矩阵，一行表示一个二进制编码表示的DNA，矩阵的行数为种群数目</span></span><br><span class=\"line\">    x_pop = pop[:, <span class=\"number\">1</span>::<span class=\"number\">2</span>]  <span class=\"comment\"># 奇数列表示X</span></span><br><span class=\"line\">    y_pop = pop[:, ::<span class=\"number\">2</span>]  <span class=\"comment\"># 偶数列表示y</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># pop:(POP_SIZE,DNA_SIZE)*(DNA_SIZE,1) --&gt; (POP_SIZE,1)</span></span><br><span class=\"line\">    x = x_pop.dot(<span class=\"number\">2</span> ** np.arange(DNA_SIZE)[::-<span class=\"number\">1</span>]) / <span class=\"built_in\">float</span>(<span class=\"number\">2</span> ** DNA_SIZE - <span class=\"number\">1</span>) * (X_BOUND[<span class=\"number\">1</span>] - X_BOUND[<span class=\"number\">0</span>]) + X_BOUND[<span class=\"number\">0</span>]</span><br><span class=\"line\">    y = y_pop.dot(<span class=\"number\">2</span> ** np.arange(DNA_SIZE)[::-<span class=\"number\">1</span>]) / <span class=\"built_in\">float</span>(<span class=\"number\">2</span> ** DNA_SIZE - <span class=\"number\">1</span>) * (Y_BOUND[<span class=\"number\">1</span>] - Y_BOUND[<span class=\"number\">0</span>]) + Y_BOUND[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crossover_and_mutation</span>(<span class=\"params\">pop, CROSSOVER_RATE=<span class=\"number\">0.8</span></span>):</span><br><span class=\"line\">    new_pop = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> father <span class=\"keyword\">in</span> pop:  <span class=\"comment\"># 遍历种群中的每一个个体，将该个体作为父亲</span></span><br><span class=\"line\">        child = father  <span class=\"comment\"># 孩子先得到父亲的全部基因（这里我把一串二进制串的那些0，1称为基因）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.random.rand() &lt; CROSSOVER_RATE:  <span class=\"comment\"># 产生子代时不是必然发生交叉，而是以一定的概率发生交叉</span></span><br><span class=\"line\">            mother = pop[np.random.randint(POP_SIZE)]  <span class=\"comment\"># 再种群中选择另一个个体，并将该个体作为母亲</span></span><br><span class=\"line\">            cross_points = np.random.randint(low=<span class=\"number\">0</span>, high=DNA_SIZE * <span class=\"number\">2</span>)  <span class=\"comment\"># 随机产生交叉的点</span></span><br><span class=\"line\">            child[cross_points:] = mother[cross_points:]  <span class=\"comment\"># 孩子得到位于交叉点后的母亲的基因</span></span><br><span class=\"line\">        mutation(child)  <span class=\"comment\"># 每个后代有一定的机率发生变异</span></span><br><span class=\"line\">        new_pop.append(child)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_pop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mutation</span>(<span class=\"params\">child, MUTATION_RATE=<span class=\"number\">0.003</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> np.random.rand() &lt; MUTATION_RATE:  <span class=\"comment\"># 以MUTATION_RATE的概率进行变异</span></span><br><span class=\"line\">        mutate_point = np.random.randint(<span class=\"number\">0</span>, DNA_SIZE)  <span class=\"comment\"># 随机产生一个实数，代表要变异基因的位置</span></span><br><span class=\"line\">        child[mutate_point] = child[mutate_point] ^ <span class=\"number\">1</span>  <span class=\"comment\"># 将变异点的二进制为反转</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select</span>(<span class=\"params\">pop, fitness</span>):  <span class=\"comment\"># nature selection wrt pop&#x27;s fitness</span></span><br><span class=\"line\">    idx = np.random.choice(np.arange(POP_SIZE), size=POP_SIZE, replace=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                           p=(fitness) / (fitness.<span class=\"built_in\">sum</span>()))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pop[idx]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_info</span>(<span class=\"params\">pop</span>):</span><br><span class=\"line\">    fitness = get_fitness(pop)</span><br><span class=\"line\">    max_fitness_index = np.argmax(fitness)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;max_fitness:&quot;</span>, fitness[max_fitness_index])</span><br><span class=\"line\">    x, y = translateDNA(pop)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;最优的基因型：&quot;</span>, pop[max_fitness_index])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;(x, y):&quot;</span>, (x[max_fitness_index], y[max_fitness_index]))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    fig = plt.figure()</span><br><span class=\"line\">    ax = Axes3D(fig)</span><br><span class=\"line\">    plt.ion()  <span class=\"comment\"># 将画图模式改为交互模式，程序遇到plt.show不会暂停，而是继续执行</span></span><br><span class=\"line\">    plot_3d(ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    pop = np.random.randint(<span class=\"number\">2</span>, size=(POP_SIZE, DNA_SIZE * <span class=\"number\">2</span>))  <span class=\"comment\"># matrix (POP_SIZE, DNA_SIZE)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N_GENERATIONS):  <span class=\"comment\"># 迭代N代</span></span><br><span class=\"line\">        x, y = translateDNA(pop)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;sca&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">locals</span>():</span><br><span class=\"line\">            sca.remove()</span><br><span class=\"line\">        sca = ax.scatter(x, y, F(x, y), c=<span class=\"string\">&#x27;black&#x27;</span>, marker=<span class=\"string\">&#x27;o&#x27;</span>);</span><br><span class=\"line\">        plt.show();</span><br><span class=\"line\">        plt.pause(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        pop = np.array(crossover_and_mutation(pop, CROSSOVER_RATE))</span><br><span class=\"line\">        <span class=\"comment\"># F_values = F(translateDNA(pop)[0], translateDNA(pop)[1])#x, y --&gt; Z matrix</span></span><br><span class=\"line\">        fitness = get_fitness(pop)</span><br><span class=\"line\">        pop = select(pop, fitness)  <span class=\"comment\"># 选择生成新的种群</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print_info(pop)</span><br><span class=\"line\">    plt.ioff()</span><br><span class=\"line\">    plot_3d(ax)</span><br></pre></td></tr></table></figure>\n<h3 id=\"intgr\"><a class=\"markdownIt-Anchor\" href=\"#intgr\">#</a> intgr</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> integrate</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Logistic</span>(<span class=\"params\">y,t,para</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    Na     : Sum Adult</span></span><br><span class=\"line\"><span class=\"string\">    Nf     : Female</span></span><br><span class=\"line\"><span class=\"string\">    Nm     : Male</span></span><br><span class=\"line\"><span class=\"string\">    Nc     : Cub(No Gender)</span></span><br><span class=\"line\"><span class=\"string\">    N_Fresh: Predator in Fresh Water</span></span><br><span class=\"line\"><span class=\"string\">    N_Sea  : Prey in Sea Water</span></span><br><span class=\"line\"><span class=\"string\">    Alpha1 : Cub Natural mortality rate</span></span><br><span class=\"line\"><span class=\"string\">    Alpha2 : Sea Natural growth rate</span></span><br><span class=\"line\"><span class=\"string\">    Beta1  : Fresh Natural mortality rate</span></span><br><span class=\"line\"><span class=\"string\">    Beta2  : Adult Natural mortality rate</span></span><br><span class=\"line\"><span class=\"string\">    Gamma1 : Fresh Predation rate</span></span><br><span class=\"line\"><span class=\"string\">    Gamma2 : Sea Predation rate</span></span><br><span class=\"line\"><span class=\"string\">    Rou1   : Female immigration/emigration rate</span></span><br><span class=\"line\"><span class=\"string\">    Rou2   : Male immigration/emigration rate</span></span><br><span class=\"line\"><span class=\"string\">    e1,e2  : correction factor</span></span><br><span class=\"line\"><span class=\"string\">    S      : </span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    Nf,Nm,Nc,N_Fresh,N_Sea = y</span><br><span class=\"line\">    Na = Nf + Nm</span><br><span class=\"line\">    Alpha1,Alpha2,Beta1,Beta2,Gamma1,Gamma2,Rou1,Rou2,e1,e2,S,k = para</span><br><span class=\"line\">    dNcdt = k * Nf - Alpha1 * Nc - Gamma1 * Nc * N_Fresh - (Rou1 + Rou2) * Nc * S</span><br><span class=\"line\">    dNFreshdt = -Beta1 * N_Fresh + e1 * Gamma1 * Nc * N_Fresh</span><br><span class=\"line\">    dNSeadt = Alpha2 * N_Sea - Gamma2 * N_Sea * Na</span><br><span class=\"line\">    <span class=\"comment\">#dNadt = (rou1 + rou2) * Nc * S - Beta2 * Na + e2 * Gamma2 * N_Sea * Na</span></span><br><span class=\"line\">    dNfdt = Rou1 * Nc * S - Beta2 * Nf + e2 * Gamma2 * N_Sea * Nf</span><br><span class=\"line\">    dNmdt = Rou2 * Nc * S - Beta2 * Nm + e1 * Gamma1 * N_Sea * Nm</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [dNfdt,dNmdt,dNcdt,dNFreshdt,dNSeadt]</span><br><span class=\"line\">t = np.linspace(<span class=\"number\">0</span>,<span class=\"number\">2000</span>,<span class=\"number\">2000</span>)</span><br><span class=\"line\">paras = ( </span><br><span class=\"line\">    <span class=\"number\">0.1</span>,<span class=\"number\">0.04</span>,</span><br><span class=\"line\">    <span class=\"number\">0.04</span>,<span class=\"number\">0.005</span>,</span><br><span class=\"line\">    <span class=\"number\">0.00005</span>,<span class=\"number\">8E-7</span>,</span><br><span class=\"line\">    <span class=\"number\">0.2</span>,<span class=\"number\">0.8</span>,</span><br><span class=\"line\">    <span class=\"number\">0.1</span>,<span class=\"number\">0.01</span>,</span><br><span class=\"line\">    <span class=\"number\">0.01</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br><span class=\"line\">y = integrate.odeint(Logistic, [<span class=\"number\">20</span>,<span class=\"number\">2</span>,<span class=\"number\">300</span>,<span class=\"number\">1</span>,<span class=\"number\">100</span>], t,args=(paras,))</span><br><span class=\"line\">plt.plot(t, y[:,<span class=\"number\">0</span>]+y[:,<span class=\"number\">1</span>]+y[:,<span class=\"number\">2</span>]) <span class=\"comment\">#Group Population</span></span><br><span class=\"line\"><span class=\"comment\">#plt.plot(t, y[:,1]/y[:,0]) #Sex ratio</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"遗传模型\"><a class=\"markdownIt-Anchor\" href=\"#遗传模型\">#</a> 遗传模型</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数设定</span></span><br><span class=\"line\">r_M = <span class=\"number\">0.04</span>  <span class=\"comment\"># 雄性海七鳃鳗的繁殖率</span></span><br><span class=\"line\">d_M = <span class=\"number\">0.02</span>  <span class=\"comment\"># 雄性海七鳃鳗的自然死亡率</span></span><br><span class=\"line\">b_M = <span class=\"number\">0.002</span> <span class=\"comment\"># 雄性海七鳃鳗的捕食效率</span></span><br><span class=\"line\"></span><br><span class=\"line\">r_F = <span class=\"number\">0.03</span>  <span class=\"comment\"># 雌性海七鳃鳗的繁殖率</span></span><br><span class=\"line\">d_F = <span class=\"number\">0.02</span>  <span class=\"comment\"># 雌性海七鳃鳗的自然死亡率</span></span><br><span class=\"line\">b_F = <span class=\"number\">0.001</span> <span class=\"comment\"># 雌性海七鳃鳗的捕食效率</span></span><br><span class=\"line\"></span><br><span class=\"line\">r_P = <span class=\"number\">0.1</span>   <span class=\"comment\"># 猎物的自然增长率</span></span><br><span class=\"line\">a = <span class=\"number\">0.001</span>    <span class=\"comment\"># 猎物被捕食的概率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始条件</span></span><br><span class=\"line\">M0 = <span class=\"number\">78</span>   <span class=\"comment\"># 雄性海七鳃鳗的初始种群数量</span></span><br><span class=\"line\">F0 = <span class=\"number\">22</span>   <span class=\"comment\"># 雌性海七鳃鳗的初始种群数量</span></span><br><span class=\"line\">P0 = <span class=\"number\">300</span>   <span class=\"comment\"># 猎物的初始种群数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 时间设定</span></span><br><span class=\"line\">dt = <span class=\"number\">0.05</span>  <span class=\"comment\"># 时间步长</span></span><br><span class=\"line\">T = <span class=\"number\">100</span>    <span class=\"comment\"># 总模拟时间</span></span><br><span class=\"line\">N = <span class=\"built_in\">int</span>(T / dt) <span class=\"comment\"># 总步数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化数组</span></span><br><span class=\"line\">M = np.zeros(N)</span><br><span class=\"line\">F = np.zeros(N)</span><br><span class=\"line\">P = np.zeros(N)</span><br><span class=\"line\">M[<span class=\"number\">0</span>] = M0</span><br><span class=\"line\">F[<span class=\"number\">0</span>] = F0</span><br><span class=\"line\">P[<span class=\"number\">0</span>] = P0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 模拟过程</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N - <span class=\"number\">1</span>):</span><br><span class=\"line\">    M[t + <span class=\"number\">1</span>] = M[t] + (r_M * M[t] - d_M * M[t] + b_M * a * P[t] * M[t]) * dt</span><br><span class=\"line\">    F[t + <span class=\"number\">1</span>] = F[t] + (r_F * F[t] - d_F * F[t] + b_F * a * P[t] * F[t]) * dt</span><br><span class=\"line\">    P[t + <span class=\"number\">1</span>] = P[t] + (r_P * P[t] - a * P[t] * (M[t] + F[t])) * dt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘图</span></span><br><span class=\"line\">time = np.linspace(<span class=\"number\">0</span>, T, N)</span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">6</span>))</span><br><span class=\"line\">plt.plot(time, M, label=<span class=\"string\">&#x27;Male Sea Lampreys&#x27;</span>, color=<span class=\"string\">&#x27;blue&#x27;</span>)</span><br><span class=\"line\">plt.plot(time, F, label=<span class=\"string\">&#x27;Female Sea Lampreys&#x27;</span>, color=<span class=\"string\">&#x27;red&#x27;</span>)</span><br><span class=\"line\">plt.plot(time, P, label=<span class=\"string\">&#x27;Prey&#x27;</span>, color=<span class=\"string\">&#x27;grey&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Time&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Population&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Structured Population Model Simulation&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"元胞自动机\"><a class=\"markdownIt-Anchor\" href=\"#元胞自动机\">#</a> 元胞自动机</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义格子大小</span></span><br><span class=\"line\">grid_size = (<span class=\"number\">1000</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始状态</span></span><br><span class=\"line\">initial_bacteria = <span class=\"number\">100</span></span><br><span class=\"line\">initial_grass = <span class=\"number\">50</span></span><br><span class=\"line\">initial_host = <span class=\"number\">1</span></span><br><span class=\"line\">initial_male_eels = <span class=\"number\">20</span>  <span class=\"comment\"># 修改为雄性20</span></span><br><span class=\"line\">initial_female_eels = <span class=\"number\">5</span>  <span class=\"comment\"># 修改为雌性5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 繁殖率</span></span><br><span class=\"line\">bacteria_reproduction_rate = <span class=\"number\">2.0</span></span><br><span class=\"line\">grass_reproduction_rate = <span class=\"number\">1.0</span></span><br><span class=\"line\">eels_reproduction_rate = <span class=\"number\">0.0</span>  <span class=\"comment\"># 初始时七鳃鳗数量不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 人类捕捉比例</span></span><br><span class=\"line\">human_capture_rate = np.random.uniform(<span class=\"number\">0.3</span>, <span class=\"number\">0.6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 迭代次数</span></span><br><span class=\"line\">iterations = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化格子</span></span><br><span class=\"line\">grid = np.zeros(grid_size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化各个生物的位置</span></span><br><span class=\"line\">grid[:initial_bacteria] = <span class=\"number\">1</span>  <span class=\"comment\"># 细菌</span></span><br><span class=\"line\">grid[initial_bacteria:initial_bacteria + initial_grass] = <span class=\"number\">2</span>  <span class=\"comment\"># 草</span></span><br><span class=\"line\">grid[-initial_host:] = <span class=\"number\">3</span>  <span class=\"comment\"># 宿主</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化七鳃鳗的位置和性别</span></span><br><span class=\"line\">grid[np.random.choice(grid_size[<span class=\"number\">0</span>], initial_male_eels, replace=<span class=\"literal\">False</span>)] = <span class=\"number\">4</span>  <span class=\"comment\"># 男性七鳃鳗</span></span><br><span class=\"line\">grid[np.random.choice(grid_size[<span class=\"number\">0</span>], initial_female_eels, replace=<span class=\"literal\">False</span>)] = <span class=\"number\">5</span>  <span class=\"comment\"># 女性七鳃鳗</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义函数来执行一代的更新</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">grid</span>):</span><br><span class=\"line\">    new_grid = np.zeros_like(grid)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(grid_size[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(grid_size[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> grid[i, j] == <span class=\"number\">1</span>:  <span class=\"comment\"># 细菌</span></span><br><span class=\"line\">                new_grid[i, j] = <span class=\"number\">1</span> <span class=\"keyword\">if</span> np.random.rand() &lt; bacteria_reproduction_rate <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> grid[i, j] == <span class=\"number\">2</span>:  <span class=\"comment\"># 草</span></span><br><span class=\"line\">                new_grid[i, j] = <span class=\"number\">2</span> <span class=\"keyword\">if</span> np.random.rand() &lt; grass_reproduction_rate <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> grid[i, j] == <span class=\"number\">3</span>:  <span class=\"comment\"># 宿主</span></span><br><span class=\"line\">                new_grid[i, j] = <span class=\"number\">3</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> grid[i, j] == <span class=\"number\">4</span> <span class=\"keyword\">or</span> grid[i, j] == <span class=\"number\">5</span>:  <span class=\"comment\"># 七鳃鳗</span></span><br><span class=\"line\">                new_grid[i, j] = grid[i, j]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> new_grid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 迭代模型</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(iterations):</span><br><span class=\"line\">    grid = update(grid)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制结果</span></span><br><span class=\"line\">plt.imshow(grid, cmap=<span class=\"string\">&#x27;viridis&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Cellular Automaton after 20 iterations&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"层次权重\"><a class=\"markdownIt-Anchor\" href=\"#层次权重\">#</a> 层次权重</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设 A 是判断矩阵，每列代表一个因素</span></span><br><span class=\"line\">A = np.array([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>/<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>/<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>/<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>/<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>/<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>/<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算权重</span></span><br><span class=\"line\">eigenvalues, eigenvectors = np.linalg.eig(A)</span><br><span class=\"line\">weights = eigenvectors[:, np.argmax(eigenvalues)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 归一化权重</span></span><br><span class=\"line\">weights /= <span class=\"built_in\">sum</span>(weights)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设有三个情况，每个情况在层次结构的权重</span></span><br><span class=\"line\">case_weights = np.array([</span><br><span class=\"line\">    [<span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>, <span class=\"number\">0.5</span>],</span><br><span class=\"line\">    [<span class=\"number\">0.4</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.2</span>],</span><br><span class=\"line\">    [<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.4</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算每个情况的总排序分数</span></span><br><span class=\"line\">total_scores = np.<span class=\"built_in\">sum</span>(case_weights * weights, axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 排序结果</span></span><br><span class=\"line\">sorted_indices = np.argsort(total_scores)[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出排序结果</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> idx, score <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(sorted_indices, total_scores[sorted_indices]):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;情况 <span class=\"subst\">&#123;idx+<span class=\"number\">1</span>&#125;</span>: 总排序分数 <span class=\"subst\">&#123;score&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"热力图生成\"><a class=\"markdownIt-Anchor\" href=\"#热力图生成\">#</a> 热力图生成</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Prepare the data in DataFrame</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Natural and Anthropogenic Factors&#x27;</span>: [<span class=\"number\">0.998053414</span>, <span class=\"number\">1.124388586</span>, <span class=\"number\">0.505350047</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;Food Abundance&#x27;</span>: [<span class=\"number\">0.010752428</span>, <span class=\"number\">0.004509764</span>, <span class=\"number\">0.000233752</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;Hatching Environment Conditions&#x27;</span>: [<span class=\"number\">0.006704276</span>, <span class=\"number\">6.56459E-06</span>, <span class=\"number\">0.000756631</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;Influence of Other Organisms in Water&#x27;</span>: [<span class=\"number\">2.83968E-08</span>, <span class=\"number\">3.19914E-08</span>, <span class=\"number\">3.24933E-10</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;Seasonal Changes&#x27;</span>: [<span class=\"number\">1.07524E-05</span>, <span class=\"number\">0.004509764</span>, <span class=\"number\">3.33414E-06</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;Water Quality Conditions&#x27;</span>: [<span class=\"number\">0.006704276</span>, <span class=\"number\">6.56459E-06</span>, <span class=\"number\">0.000756631</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;Temperature Influence&#x27;</span>: [<span class=\"number\">1.07524E-05</span>, <span class=\"number\">0.004509764</span>, <span class=\"number\">3.33414E-06</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">index = [<span class=\"string\">&#x27;Population Size&#x27;</span>, <span class=\"string\">&#x27;Gender Ratio Variation&#x27;</span>, <span class=\"string\">&#x27;Birth and Death Rate&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Round the values directly on the DataFrame</span></span><br><span class=\"line\">df = pd.DataFrame(data, index=index).<span class=\"built_in\">round</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Increase the figure size for better visibility</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">12</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">sns.heatmap(df, annot=<span class=\"literal\">True</span>, cmap=<span class=\"string\">&quot;YlGnBu&quot;</span>, linewidths=<span class=\"number\">.5</span>, fmt=<span class=\"string\">&#x27;.8f&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Impact of Factors on the Ecosystem - Heatmap&#x27;</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;zuizhongrelitu.png&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"calculate-the-maximum-eigenvalue求最大特征值\"><a class=\"markdownIt-Anchor\" href=\"#calculate-the-maximum-eigenvalue求最大特征值\">#</a> calculate the maximum eigenvalue (求最大特征值)</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">consistency_ratio</span>(<span class=\"params\">CI, RI</span>):</span><br><span class=\"line\">    CR = CI / RI</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设 A 是你的判断矩阵</span></span><br><span class=\"line\">A = np.array([</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算特征值</span></span><br><span class=\"line\">eigenvalues, eigenvectors = np.linalg.eig(A)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找到最大特征值</span></span><br><span class=\"line\">lambda_max = <span class=\"built_in\">max</span>(eigenvalues)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算一致性指标 CI</span></span><br><span class=\"line\">n = <span class=\"built_in\">len</span>(A)</span><br><span class=\"line\">CI = (lambda_max - n) / (n - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找平均随机一致性指标 RI</span></span><br><span class=\"line\">random_matrices = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">500</span>):</span><br><span class=\"line\">    random_matrix = np.random.randint(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>, size=(n, n))</span><br><span class=\"line\">    random_matrices.append(random_matrix)</span><br><span class=\"line\"></span><br><span class=\"line\">average_lambda_max = np.mean([<span class=\"built_in\">max</span>(np.linalg.eig(mat)[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> mat <span class=\"keyword\">in</span> random_matrices])</span><br><span class=\"line\">RI = (average_lambda_max - n) / (n - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算一致性比率 CR</span></span><br><span class=\"line\">CR = consistency_ratio(CI, RI)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最大特征值 (λmax):&quot;</span>, lambda_max)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;一致性指标 CI:&quot;</span>, CI)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;查找平均随机一致性指标 RI:&quot;</span>, RI)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;一致性比率 CR:&quot;</span>, CR)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断一致性是否可接受</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> CR &lt; <span class=\"number\">0.10</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的一致性是可以接受的&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;判断矩阵的一致性需要适当修正&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二问雷达图\"><a class=\"markdownIt-Anchor\" href=\"#第二问雷达图\">#</a> 第二问雷达图</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取Excel文件</span></span><br><span class=\"line\">file_path = <span class=\"string\">&#x27;shuju.xlsx&#x27;</span></span><br><span class=\"line\">df = pd.read_excel(file_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取需要的列</span></span><br><span class=\"line\">selected_columns = [<span class=\"string\">&#x27;Predation Threat&#x27;</span>, <span class=\"string\">&#x27;Reproduction Threat&#x27;</span>, <span class=\"string\">&#x27;Overfishing Risk&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Environmental Pressure&#x27;</span>, <span class=\"string\">&#x27;Predation Control&#x27;</span>, <span class=\"string\">&#x27;Food Chain Role&#x27;</span>, <span class=\"string\">&#x27;Adaptability&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建热力图</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\">heatmap_data = df[selected_columns + [<span class=\"string\">&#x27;Gender Ratio Variation&#x27;</span>]]</span><br><span class=\"line\">heatmap = sns.heatmap(heatmap_data.corr(), annot=<span class=\"literal\">True</span>, cmap=<span class=\"string\">&quot;coolwarm&quot;</span>, fmt=<span class=\"string\">&quot;.2f&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置热力图的标题</span></span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Correlation Heatmap between Gender Ratio Variation and Other Factors&#x27;</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">&quot;123123.png&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 显示热力图</span></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">simulate_ecosystem</span>(<span class=\"params\">initial_ratio</span>):</span><br><span class=\"line\">    generations = <span class=\"number\">50</span></span><br><span class=\"line\">    gender_ratio = np.zeros(generations)</span><br><span class=\"line\">    gender_ratio[<span class=\"number\">0</span>] = initial_ratio</span><br><span class=\"line\"></span><br><span class=\"line\">    predator_population = np.ones(generations)</span><br><span class=\"line\">    reproductive_success = np.ones(generations)</span><br><span class=\"line\">    food_resources = np.ones(generations)</span><br><span class=\"line\">    composite_indicator = np.zeros(generations)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> gen <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, generations):</span><br><span class=\"line\">        gender_ratio[gen] = gender_ratio[gen - <span class=\"number\">1</span>]</span><br><span class=\"line\">        reproductive_success[gen] = reproductive_success[gen - <span class=\"number\">1</span>] - <span class=\"number\">0.005</span> * <span class=\"built_in\">abs</span>(gender_ratio[gen] - <span class=\"number\">0.5</span>)</span><br><span class=\"line\">        predator_population[gen] = predator_population[gen - <span class=\"number\">1</span>] * reproductive_success[gen]</span><br><span class=\"line\">        food_resources[gen] = food_resources[gen - <span class=\"number\">1</span>] - <span class=\"number\">0.02</span></span><br><span class=\"line\">        composite_indicator[gen] = <span class=\"number\">0.4</span> * gender_ratio[gen] + <span class=\"number\">0.3</span> * predator_population[gen] + <span class=\"number\">0.2</span> * reproductive_success[gen] + <span class=\"number\">0.1</span> * food_resources[gen]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> composite_indicator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">evaluate_population</span>(<span class=\"params\">initial_ratio</span>):</span><br><span class=\"line\">    composite_indicator = simulate_ecosystem(initial_ratio)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算各个评价指标</span></span><br><span class=\"line\">    predation_control = np.mean(composite_indicator)</span><br><span class=\"line\">    food_chain_role = np.<span class=\"built_in\">max</span>(composite_indicator)</span><br><span class=\"line\">    ecosystem_provider = np.<span class=\"built_in\">sum</span>(composite_indicator)</span><br><span class=\"line\">    adaptability = np.<span class=\"built_in\">min</span>(composite_indicator)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 模拟其他劣势因素</span></span><br><span class=\"line\">    predation_threat = np.random.uniform(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    reproduction_threat = np.random.uniform(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    overfishing_risk = np.random.uniform(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    environmental_pressure = np.random.uniform(<span class=\"number\">0.1</span>, <span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算各个评价指标的权重</span></span><br><span class=\"line\">    weight_predation_control = <span class=\"number\">0.2</span></span><br><span class=\"line\">    weight_food_chain_role = <span class=\"number\">0.2</span></span><br><span class=\"line\">    weight_ecosystem_provider = <span class=\"number\">0.2</span></span><br><span class=\"line\">    weight_adaptability = <span class=\"number\">0.1</span></span><br><span class=\"line\">    weight_predation_threat = <span class=\"number\">0.1</span></span><br><span class=\"line\">    weight_reproduction_threat = <span class=\"number\">0.1</span></span><br><span class=\"line\">    weight_overfishing_risk = <span class=\"number\">0.1</span></span><br><span class=\"line\">    weight_environmental_pressure = <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算综合评分</span></span><br><span class=\"line\">    overall_score = (weight_predation_control * predation_control +</span><br><span class=\"line\">                     weight_food_chain_role * food_chain_role +</span><br><span class=\"line\">                     weight_ecosystem_provider * ecosystem_provider +</span><br><span class=\"line\">                     weight_adaptability * adaptability -</span><br><span class=\"line\">                     weight_predation_threat * predation_threat -</span><br><span class=\"line\">                     weight_reproduction_threat * reproduction_threat -</span><br><span class=\"line\">                     weight_overfishing_risk * overfishing_risk -</span><br><span class=\"line\">                     weight_environmental_pressure * environmental_pressure)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> overall_score</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环遍历不同的 initial_ratio</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> initial_ratio <span class=\"keyword\">in</span> np.arange(<span class=\"number\">0</span>, <span class=\"number\">1.05</span>, <span class=\"number\">0.05</span>):</span><br><span class=\"line\">    initial_ratio = <span class=\"built_in\">round</span>(initial_ratio, <span class=\"number\">2</span>)  <span class=\"comment\"># 保留两位小数</span></span><br><span class=\"line\">    overall_score = evaluate_population(initial_ratio)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Initial Ratio: <span class=\"subst\">&#123;initial_ratio&#125;</span>, Overall Score: <span class=\"subst\">&#123;overall_score&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储初始比例和综合评分的列表</span></span><br><span class=\"line\">initial_ratios = []</span><br><span class=\"line\">overall_scores = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 循环遍历不同的 initial_ratio</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> initial_ratio <span class=\"keyword\">in</span> np.arange(<span class=\"number\">0</span>, <span class=\"number\">1.05</span>, <span class=\"number\">0.05</span>):</span><br><span class=\"line\">    initial_ratio = <span class=\"built_in\">round</span>(initial_ratio, <span class=\"number\">2</span>)  <span class=\"comment\"># 保留两位小数</span></span><br><span class=\"line\">    overall_score = evaluate_population(initial_ratio)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 存储数据</span></span><br><span class=\"line\">    initial_ratios.append(initial_ratio)</span><br><span class=\"line\">    overall_scores.append(overall_score)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制折线图</span></span><br><span class=\"line\">plt.plot(initial_ratios, overall_scores, marker=<span class=\"string\">&#x27;o&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Overall Score vs Initial Gender Ratio&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Initial Gender Ratio&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Overall Score&#x27;</span>)</span><br><span class=\"line\">plt.grid(<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"雅克比矩阵\"><a class=\"markdownIt-Anchor\" href=\"#雅克比矩阵\">#</a> 雅克比矩阵</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.integrate <span class=\"keyword\">import</span> odeint</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 七鳃鳗的雄性比例范围</span></span><br><span class=\"line\">Male_proportion = np.arange(<span class=\"number\">0.51</span>, <span class=\"number\">0.90</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> Male_proportion:</span><br><span class=\"line\">    <span class=\"comment\"># 初始化模型参数</span></span><br><span class=\"line\">    Natural_Growth_Rate = <span class=\"number\">0.65</span>-<span class=\"number\">0.5</span>*<span class=\"built_in\">abs</span>(<span class=\"number\">0.5</span>-s)  <span class=\"comment\"># 七鳃鳗的自然增长率</span></span><br><span class=\"line\">    beta = <span class=\"number\">0.1</span>  <span class=\"comment\"># 七鳃鳗被捕食的概率</span></span><br><span class=\"line\">    gamma = <span class=\"number\">0.5</span> <span class=\"comment\">#捕食者自然死亡率</span></span><br><span class=\"line\">    delta = <span class=\"number\">0.15</span>*(<span class=\"number\">1</span>+beta*<span class=\"number\">0.9</span>)   <span class=\"comment\"># 捕食成功率</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化种群数量</span></span><br><span class=\"line\">    x0 = <span class=\"number\">25</span>  <span class=\"comment\"># 初始七鳃鳗数量</span></span><br><span class=\"line\">    y0 = <span class=\"number\">2</span>  <span class=\"comment\"># 初始捕食者数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 设置模拟时间</span></span><br><span class=\"line\">    T = np.arange(<span class=\"number\">0</span>, <span class=\"number\">50</span>, <span class=\"number\">0.1</span>)  <span class=\"comment\"># 从0到50时间单位，每0.1单位计算一次</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定义洛特卡-沃尔泰拉模型方程</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lotka_volterra</span>(<span class=\"params\">Y, t</span>):</span><br><span class=\"line\">        prey, predator = Y</span><br><span class=\"line\">        dpreydt = Natural_Growth_Rate * prey - beta * prey * predator</span><br><span class=\"line\">        dpredatordt = delta * prey * predator - gamma * predator</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [dpreydt, dpredatordt]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 微分方程求解</span></span><br><span class=\"line\">    solution = odeint(lotka_volterra, [x0, y0], T)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 绘制结果</span></span><br><span class=\"line\">    plt.figure()</span><br><span class=\"line\">    plt.plot(T, solution[:, <span class=\"number\">0</span>], <span class=\"string\">&#x27;r-&#x27;</span>, label=<span class=\"string\">&#x27;Prey&#x27;</span>)</span><br><span class=\"line\">    plt.plot(T, solution[:, <span class=\"number\">1</span>], <span class=\"string\">&#x27;b-&#x27;</span>, label=<span class=\"string\">&#x27;Predator&#x27;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;Time&#x27;</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;Population&#x27;</span>)</span><br><span class=\"line\">    plt.legend()</span><br><span class=\"line\">    plt.title(<span class=\"string\">&#x27;Lotka-Volterra Predator-Prey Model&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算雅可比矩阵</span></span><br><span class=\"line\">    J = np.array([[Natural_Growth_Rate - beta * solution[-<span class=\"number\">1</span>, <span class=\"number\">1</span>], -beta * solution[-<span class=\"number\">1</span>, <span class=\"number\">0</span>]],</span><br><span class=\"line\">                  [delta * solution[-<span class=\"number\">1</span>, <span class=\"number\">1</span>], -gamma - delta * solution[-<span class=\"number\">1</span>, <span class=\"number\">0</span>]]])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 计算特征值</span></span><br><span class=\"line\">    eigenvalues = np.linalg.eigvals(J)</span><br><span class=\"line\">    <span class=\"comment\"># 输出相关信息</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;雄性比例p = <span class=\"subst\">&#123;s&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Eigenvalues: <span class=\"subst\">&#123;eigenvalues&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 判断稳定性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">all</span>(np.real(eigenvalues) &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;系统稳定：&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;系统不稳定:&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h3 id=\"雅克比矩阵matlab\"><a class=\"markdownIt-Anchor\" href=\"#雅克比矩阵matlab\">#</a> 雅克比矩阵 MATLAB</h3>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">clear all</span><br><span class=\"line\">clc</span><br><span class=\"line\">close all</span><br><span class=\"line\">s=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ii=<span class=\"number\">0.56</span>:<span class=\"number\">0.01</span>:<span class=\"number\">0.85</span> <span class=\"comment\">%七思鳗的雄性比例</span></span><br><span class=\"line\"><span class=\"comment\">% 初始化模型参数</span></span><br><span class=\"line\">alpha = ii<span class=\"number\">-0.15</span>;  <span class=\"comment\">% 食饵的自然增长率</span></span><br><span class=\"line\"><span class=\"built_in\">beta</span> = <span class=\"number\">0.1</span>;  <span class=\"comment\">% 食饵被捕食的概率</span></span><br><span class=\"line\"><span class=\"built_in\">gamma</span> = <span class=\"number\">0.5</span>;  <span class=\"comment\">% 捕食者的自然死亡率</span></span><br><span class=\"line\">delta = <span class=\"number\">0.02</span>; <span class=\"comment\">% 捕食成功率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 初始化种群数量</span></span><br><span class=\"line\">x0 = <span class=\"number\">25</span>; <span class=\"comment\">% 初始食饵数量</span></span><br><span class=\"line\">y0 = <span class=\"number\">2</span>;  <span class=\"comment\">% 初始捕食者数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 设置模拟时间</span></span><br><span class=\"line\">T = <span class=\"number\">0</span>:<span class=\"number\">0.1</span>:<span class=\"number\">50</span>; <span class=\"comment\">% 从0到50时间单位，每0.1单位计算一次</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 定义洛特卡-沃尔泰拉模型方程</span></span><br><span class=\"line\">lotkaVolterra = @(t, Y) [alpha*Y(<span class=\"number\">1</span>) - <span class=\"built_in\">beta</span>*Y(<span class=\"number\">1</span>)*Y(<span class=\"number\">2</span>); </span><br><span class=\"line\">                         delta*Y(<span class=\"number\">1</span>)*Y(<span class=\"number\">2</span>) - <span class=\"built_in\">gamma</span>*Y(<span class=\"number\">2</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 使用ode45求解器进行模拟</span></span><br><span class=\"line\">[T, Y] = ode45(lotkaVolterra, T, [x0 y0]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 绘制结果</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>;</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(T, Y(:,<span class=\"number\">1</span>), <span class=\"string\">&#x27;r-&#x27;</span>, T, Y(:,<span class=\"number\">2</span>), <span class=\"string\">&#x27;b-&#x27;</span>);</span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;Time&#x27;</span>);</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;Population&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">&#x27;Prey&#x27;</span>, <span class=\"string\">&#x27;Predator&#x27;</span>);</span><br><span class=\"line\">title(<span class=\"string\">&#x27;Lotka-Volterra Predator-Prey Model&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% </span></span><br><span class=\"line\"><span class=\"comment\">% % 初始化模型参数</span></span><br><span class=\"line\"><span class=\"comment\">% alpha = 0.1;  % 食饵的自然增长率</span></span><br><span class=\"line\"><span class=\"comment\">% beta = 0.02;  % 食饵被捕食的概率</span></span><br><span class=\"line\"><span class=\"comment\">% gamma = 0.3;  % 捕食者的自然死亡率</span></span><br><span class=\"line\"><span class=\"comment\">% delta = 0.01; % 捕食成功率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 定义洛特卡-沃尔泰拉模型方程</span></span><br><span class=\"line\">lotkaVolterra = @(t, Y) [alpha*Y(<span class=\"number\">1</span>) - <span class=\"built_in\">beta</span>*Y(<span class=\"number\">1</span>)*Y(<span class=\"number\">2</span>); </span><br><span class=\"line\">                         delta*Y(<span class=\"number\">1</span>)*Y(<span class=\"number\">2</span>) - <span class=\"built_in\">gamma</span>*Y(<span class=\"number\">2</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 设置模拟的初始条件</span></span><br><span class=\"line\">initialConditions = [<span class=\"number\">40</span> <span class=\"number\">9</span>; <span class=\"number\">35</span> <span class=\"number\">5</span>; <span class=\"number\">50</span> <span class=\"number\">20</span>; <span class=\"number\">45</span> <span class=\"number\">15</span>]; <span class=\"comment\">% 不同的初始条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 设置模拟时间</span></span><br><span class=\"line\">Tspan = [<span class=\"number\">0</span> <span class=\"number\">50</span>]; <span class=\"comment\">% 从0到50时间单位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 创建图形窗口</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>;</span><br><span class=\"line\"><span class=\"built_in\">hold</span> on;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%为每一组初始条件绘制相轨迹</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:<span class=\"built_in\">size</span>(initialConditions, <span class=\"number\">1</span>)</span><br><span class=\"line\">    [T, Y] = ode45(lotkaVolterra, Tspan, initialConditions(<span class=\"built_in\">i</span>, :));</span><br><span class=\"line\">    <span class=\"built_in\">plot</span>(Y(:,<span class=\"number\">1</span>), Y(:,<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 设置图形属性</span></span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;Prey Population&#x27;</span>);</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;Predator Population&#x27;</span>);</span><br><span class=\"line\">title(<span class=\"string\">&#x27;Phase Trajectories of Lotka-Volterra Model&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">&#x27;Trajectory 1&#x27;</span>, <span class=\"string\">&#x27;Trajectory 2&#x27;</span>, <span class=\"string\">&#x27;Trajectory 3&#x27;</span>, <span class=\"string\">&#x27;Trajectory 4&#x27;</span>);</span><br><span class=\"line\">grid on;</span><br><span class=\"line\"><span class=\"built_in\">hold</span> off;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 初始化模型参数</span></span><br><span class=\"line\"><span class=\"comment\">% 草与兔子的相互作用参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">alpha1 = <span class=\"number\">1</span>;  <span class=\"comment\">% 草的自然增长率</span></span><br><span class=\"line\">beta1 = <span class=\"number\">0.15</span>;  <span class=\"comment\">% 兔子吃草的效率</span></span><br><span class=\"line\">gamma1 = <span class=\"number\">0.5</span>-alpha*<span class=\"number\">0.01</span>;  <span class=\"comment\">% 兔子的自然死亡率，不考虑老鹰捕食的情况</span></span><br><span class=\"line\">delta1 = <span class=\"number\">0.03</span>; <span class=\"comment\">% 兔子因吃草而增加的存活率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 兔子与老鹰的相互作用参数</span></span><br><span class=\"line\"><span class=\"comment\">% alpha2 = 0.2;  % 兔子的自然增长率，考虑了吃草的影响</span></span><br><span class=\"line\">alpha2=alpha;</span><br><span class=\"line\">beta2 = <span class=\"number\">0.6</span>;  <span class=\"comment\">% 老鹰捕食兔子的效率</span></span><br><span class=\"line\">gamma2 = <span class=\"number\">0.25</span>;  <span class=\"comment\">% 老鹰的自然死亡率</span></span><br><span class=\"line\">delta2 = <span class=\"number\">0.02</span>; <span class=\"comment\">% 老鹰因吃兔子而增加的存活率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 定义模型方程</span></span><br><span class=\"line\">modelEquations = @(t, Y) [alpha1*Y(<span class=\"number\">1</span>) - beta1*Y(<span class=\"number\">1</span>)*Y(<span class=\"number\">2</span>);  <span class=\"comment\">% 草的增长方程</span></span><br><span class=\"line\">                          beta1*Y(<span class=\"number\">1</span>)*Y(<span class=\"number\">2</span>) - gamma1*Y(<span class=\"number\">2</span>) - beta2*Y(<span class=\"number\">2</span>)*Y(<span class=\"number\">3</span>);  <span class=\"comment\">% 兔子的增长方程</span></span><br><span class=\"line\">                          delta2*Y(<span class=\"number\">2</span>)*Y(<span class=\"number\">3</span>) - gamma2*Y(<span class=\"number\">3</span>)];  <span class=\"comment\">% 老鹰的增长方程</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 设置初始条件</span></span><br><span class=\"line\">initialConditions = [<span class=\"number\">100</span>; <span class=\"number\">10</span>; <span class=\"number\">5</span>];  <span class=\"comment\">% 初始条件：草、兔子、老鹰的数量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 设置模拟时间</span></span><br><span class=\"line\">Tspan = [<span class=\"number\">0</span> <span class=\"number\">50</span>];  <span class=\"comment\">% 模拟时间从0到100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 使用ode45求解模型方程</span></span><br><span class=\"line\">[T, Y] = ode45(modelEquations, Tspan, initialConditions);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%绘制结果</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>;</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(T, Y(:,<span class=\"number\">1</span>), <span class=\"string\">&#x27;g-&#x27;</span>, T, Y(:,<span class=\"number\">2</span>), <span class=\"string\">&#x27;r-&#x27;</span>, T, Y(:,<span class=\"number\">3</span>), <span class=\"string\">&#x27;b-&#x27;</span>);</span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;Time&#x27;</span>);</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;Population&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">&#x27;Grass&#x27;</span>, <span class=\"string\">&#x27;Rabbits&#x27;</span>, <span class=\"string\">&#x27;Eagles&#x27;</span>);</span><br><span class=\"line\">title(<span class=\"string\">&#x27;Ecosystem Model: Grass, Rabbits, and Eagles&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">% 计算雅可比矩阵</span></span><br><span class=\"line\">    J = [alpha1-beta2*Y(<span class=\"keyword\">end</span>,<span class=\"number\">2</span>), -beta1*Y(<span class=\"keyword\">end</span>,<span class=\"number\">1</span>); delta1*Y(<span class=\"keyword\">end</span>,<span class=\"number\">2</span>), -gamma2-delta2*Y(<span class=\"keyword\">end</span>,<span class=\"number\">1</span>)];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">% 计算特征值</span></span><br><span class=\"line\">    eigenvalues = eig(J);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">% 判断稳定性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> all(<span class=\"built_in\">real</span>(eigenvalues) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;系统稳定：&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;alpha = &#x27;</span> num2str(alpha)]);</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;雄性比例p=&#x27;</span> num2str(ii)])</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;Eigenvalues:&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span>:<span class=\"built_in\">length</span>(eigenvalues)</span><br><span class=\"line\">            <span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;Eigenvalue &#x27;</span> num2str(<span class=\"built_in\">j</span>) <span class=\"string\">&#x27;: &#x27;</span> num2str(eigenvalues(<span class=\"built_in\">j</span>))]);</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;系统不稳定：&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;alpha = &#x27;</span> num2str(alpha)]);</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;Eigenvalues:&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span>:<span class=\"built_in\">length</span>(eigenvalues)</span><br><span class=\"line\">            <span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;Eigenvalue &#x27;</span> num2str(<span class=\"built_in\">j</span>) <span class=\"string\">&#x27;: &#x27;</span> num2str(eigenvalues(<span class=\"built_in\">j</span>))]);</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "recommendation"
            ]
        },
        {
            "id": "https://enjundu.github.io/misc/%E4%BC%8A%E8%97%A4%E5%BE%AE%E7%A7%AF%E5%88%86/",
            "url": "https://enjundu.github.io/misc/%E4%BC%8A%E8%97%A4%E5%BE%AE%E7%A7%AF%E5%88%86/",
            "title": "随机过程——运用伊藤微积分对布朗运动进行分析",
            "date_published": "2024-07-03T15:41:31.000Z",
            "content_html": "<p><code>随机过程</code> 作业，要求为：<strong>利用伊藤微积分来对某些物理过程进行描述与分析，学习伊藤微积分的应用</strong>。</p>\n<h1 id=\"利用伊藤微积分对某些物理过程进行描述与分析\"><a class=\"markdownIt-Anchor\" href=\"#利用伊藤微积分对某些物理过程进行描述与分析\">#</a> 利用伊藤微积分对某些物理过程进行描述与分析</h1>\n<h2 id=\"内容摘要\"><a class=\"markdownIt-Anchor\" href=\"#内容摘要\">#</a> 内容摘要</h2>\n<p>布朗运动是由英国植物学家罗伯特・布朗在 1827 年首次观察到的自然现象，通过伊藤微积分可以对其进行深入的数学描述和分析。本研究旨在利用伊藤微积分来描述和分析布朗运动的数学模型，探讨其在物理过程中的应用。具体而言，我们首先介绍了布朗运动的基础理论和随机过程的基本概念，然后详细阐述了伊藤微积分的基本原理及其在布朗运动中的应用。通过数值模拟和具体案例分析，我们展示了如何利用伊藤微积分来模拟和分析污染物在水中的扩散过程以及细胞内颗粒的运动。研究结果表明，伊藤微积分作为处理随机过程的有力工具，能够准确描述布朗运动的各种性质和特征，为进一步的研究奠定了基础。</p>\n<p><strong>关键词:</strong> 布朗运动，伊藤微积分，随机过程，扩散，数值模拟</p>\n<h2 id=\"abstract\"><a class=\"markdownIt-Anchor\" href=\"#abstract\">#</a> ABSTRACT</h2>\n<p>Brownian motion, first observed by the British botanist Robert Brown in 1827, can be deeply described and analyzed mathematically using Itô calculus. This study aims to describe and analyze the mathematical model of Brownian motion using Itô calculus, exploring its application in physical processes. Specifically, we first introduce the fundamental theory of Brownian motion and the basic concepts of stochastic processes, then elaborate on the principles of Itô calculus and its application in Brownian motion. Through numerical simulations and specific case analyses, we demonstrate how Itô calculus can be used to simulate and analyze the diffusion of pollutants in water and the movement of particles within cells. The results show that Itô calculus, as a powerful tool for dealing with stochastic processes, can accurately describe various properties and characteristics of Brownian motion, laying a foundation for further research.</p>\n<p><strong>KEY WORDS:</strong> Brownian motion, Itô calculus, stochastic process, diffusion, numerical simulation</p>\n<h2 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\">#</a> 目录</h2>\n<ol>\n<li><a href=\"#%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA\">布朗运动的基础理论</a>\n<ol>\n<li><a href=\"#%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%80%A7%E8%B4%A8\">布朗运动的定义与基本性质</a></li>\n<li><a href=\"#%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E6%95%B0%E5%AD%A6%E6%8F%8F%E8%BF%B0\">布朗运动的数学描述</a></li>\n</ol>\n</li>\n<li><a href=\"#%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B%E4%B8%8E%E4%BC%8A%E8%97%A4%E5%BE%AE%E7%A7%AF%E5%88%86\">随机过程与伊藤微积分</a>\n<ol>\n<li><a href=\"#%E9%9A%8F%E6%9C%BA%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B\">随机过程简介</a></li>\n<li><a href=\"#%E4%BC%8A%E8%97%A4%E5%BE%AE%E7%A7%AF%E5%88%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">伊藤微积分的基本原理</a></li>\n<li><a href=\"#%E4%BC%8A%E8%97%A4%E7%A7%AF%E5%88%86%E5%AE%9A%E4%B9%89\">伊藤积分定义</a></li>\n<li><a href=\"#%E4%BC%8A%E8%97%A4%E5%BC%95%E7%90%86%E7%9A%84%E6%8F%8F%E8%BF%B0\">伊藤引理的描述</a></li>\n</ol>\n</li>\n<li><a href=\"#%E5%88%A9%E7%94%A8%E4%BC%8A%E8%97%A4%E5%BE%AE%E7%A7%AF%E5%88%86%E5%AF%B9%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E5%88%86%E6%9E%90\">利用伊藤微积分对布朗运动的分析</a>\n<ol>\n<li><a href=\"#%E4%B8%80%E7%BB%B4%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E8%B7%AF%E5%BE%84%E6%80%A7%E8%B4%A8%E5%88%86%E6%9E%90\">一维布朗运动的路径性质分析</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BB%B4%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E8%B7%AF%E5%BE%84%E6%80%A7%E8%B4%A8%E5%88%86%E6%9E%90\">多维布朗运动的路径性质分析</a></li>\n<li><a href=\"#%E5%85%B7%E4%BD%93%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90\">具体应用分析</a></li>\n</ol>\n</li>\n<li><a href=\"#%E5%B8%83%E6%9C%97%E8%BF%90%E5%8A%A8%E7%9A%84%E6%95%B0%E5%80%BC%E6%A8%A1%E6%8B%9F%E4%B8%8E%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90\">布朗运动的数值模拟与结果分析</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\">参考文献</a></li>\n</ol>\n<h2 id=\"布朗运动的基础理论\"><a class=\"markdownIt-Anchor\" href=\"#布朗运动的基础理论\">#</a> 布朗运动的基础理论</h2>\n<h3 id=\"布朗运动的定义与基本性质\"><a class=\"markdownIt-Anchor\" href=\"#布朗运动的定义与基本性质\">#</a> 布朗运动的定义与基本性质</h3>\n<p>布朗运动（Brownian motion）是指悬浮在液体或气体中的微小颗粒由于被周围分子的随机碰撞而产生的无规则运动。1827 年，英国植物学家罗伯特・布朗在显微镜下观察到悬浮在水中的花粉颗粒会进行持续不断的无规则运动。他最初认为这种运动可能是由于花粉的生命活动引起的。然而，他后来发现无生命的无机颗粒也表现出相同的运动现象，从而得出结论，这种运动并非源于生命活动，而是由外部因素引起的。这种运动具有以下几个重要特征：</p>\n<ul>\n<li><strong>随机性</strong>：布朗运动的路径是不可预测的，颗粒的运动是完全随机且无规律的。</li>\n<li><strong>连续性</strong>：布朗运动的轨迹是连续的，没有跳跃或中断，这意味着颗粒在任意两个时刻之间的位置变化是逐渐的。</li>\n<li><strong>独立性</strong>：布朗运动在不同时间间隔内的增量是相互独立的，即在非重叠时间区间内的位移相互独立。</li>\n<li><strong>正态分布</strong>：在任意给定时间间隔内，布朗运动的位移服从正态分布，其均值为零，方差与时间间隔成正比。</li>\n</ul>\n<p>布朗运动的这些特征使其成为随机过程的一个典型实例，为研究随机现象提供了重要的理论基础。</p>\n<h3 id=\"布朗运动的数学描述\"><a class=\"markdownIt-Anchor\" href=\"#布朗运动的数学描述\">#</a> 布朗运动的数学描述</h3>\n<p>爱因斯坦在其著名的 1905 年论文中，通过对布朗运动的统计分析，推导出了微粒的均方位移与时间之间的关系。他的理论公式为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⟩</mo><mo>=</mo><mn>2</mn><mi>D</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\langle x^2(t) \\rangle = 2Dt\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><msup><mi>x</mi><mn>2</mn></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">\\langle x^2(t) \\rangle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">⟩</span></span></span></span> 表示粒子在时间间隔<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 内的均方位移，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> 是扩散系数。扩散系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> 与液体的温度、粘度以及微粒的半径有关，可以通过斯托克斯 - 爱因斯坦公式进行计算。</p>\n<p>布朗运动的数学描述基于随机过程的理论，其中威纳过程（Wiener process）是最常用的模型。威纳过程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是一个具有以下性质的随机过程：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 为连续函数，其起始点为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">W(0)=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li>其独立增量为对于任意的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>s</mi><mo>&lt;</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">0 \\leq s &lt; t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>，增量<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>W</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)-W(s)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span> 是独立的且服从均值为 0，方差为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>−</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">t-s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 的正态分布。</li>\n</ul>\n<p>威纳过程是布朗运动的数学模型，通过它可以描述微粒在流体中的随机运动轨迹。根据伊藤微积分理论，布朗运动的随机微分方程可以表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dX(t) = \\mu dt + \\sigma dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 表示布朗运动的位置，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> 是漂移项，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> 是扩散项，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是威纳过程。</p>\n<h2 id=\"随机过程与伊藤微积分\"><a class=\"markdownIt-Anchor\" href=\"#随机过程与伊藤微积分\">#</a> 随机过程与伊藤微积分</h2>\n<h3 id=\"随机过程简介\"><a class=\"markdownIt-Anchor\" href=\"#随机过程简介\">#</a> 随机过程简介</h3>\n<p>随机过程（Stochastic Process）是描述系统随时间变化而表现出随机行为的数学模型。它在物理学、金融学、工程学等多个领域中有广泛应用。随机过程的基本概念包括状态空间 —— 随机过程可能的取值范围、时间参数 —— 描述随机过程随时间演变的参数，可以是离散的或连续的和随机变量序列 —— 随机过程在每个时间点的取值，这些取值是随机变量。威纳过程是常见的随机过程，布朗运动可以视为一种威纳过程。</p>\n<h3 id=\"伊藤微积分的基本原理\"><a class=\"markdownIt-Anchor\" href=\"#伊藤微积分的基本原理\">#</a> 伊藤微积分的基本原理</h3>\n<p>伊藤微积分（Itô Calculus）是处理随机过程的数学工具，特别适用于描述包含随机噪声的系统。传统的微积分无法直接应用于随机过程，因为随机过程的路径通常是不光滑的，而伊藤微积分则提供了处理这类过程的方法。其核心概念包括伊藤积分 —— 处理随机过程中的积分问题，特别是随机过程与时间的乘积积分和伊藤定理 —— 随机过程的微分法则，类似于经典微积分中的链式法则，但适用于随机过程。</p>\n<h3 id=\"伊藤积分定义\"><a class=\"markdownIt-Anchor\" href=\"#伊藤积分定义\">#</a> 伊藤积分定义</h3>\n<p>伊藤积分定义如下：设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是威纳过程，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是依赖于时间的确定性函数，那么伊藤积分可以表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi>t</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\int_0^t f(s) dW(s)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.455406em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5434560000000002em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>伊藤积分是线性和等距性的，即对常数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 和两个函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span>，均有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msubsup><mo>∫</mo><mn>0</mn><mi>t</mi></msubsup><mo stretchy=\"false\">(</mo><mi>c</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>c</mi><msubsup><mo>∫</mo><mn>0</mn><mi>t</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msubsup><mo>∫</mo><mn>0</mn><mi>t</mi></msubsup><mi>g</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\int_0^t (cf(s) + g(s)) dW(s) = c \\int_0^t f(s) dW(s) + \\int_0^t g(s) dW(s)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.455406em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5434560000000002em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.455406em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5434560000000002em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.455406em;vertical-align:-0.9119499999999999em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5434560000000002em;\"><span style=\"top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span><span style=\"top:-3.8129000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119499999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h3 id=\"伊藤引理的描述\"><a class=\"markdownIt-Anchor\" href=\"#伊藤引理的描述\">#</a> 伊藤引理的描述</h3>\n<p>伊藤引理是伊藤微积分中的重要工具，用于计算包含随机过程的复合函数的微分。设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是一个随机过程，其满足以下随机方程：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dX(t) = \\mu(t, X(t)) dt + \\sigma(t, X(t)) dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Y(t) = f(t, X(t))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Y(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 的微分为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>μ</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>σ</mi><mn>2</mn></msup><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dY(t) = \\left( \\frac{\\partial f}{\\partial t} + \\mu \\frac{\\partial f}{\\partial x} + \\frac{1}{2} \\sigma^2 \\frac{\\partial^2 f}{\\partial x^2} \\right) dt + \\sigma \\frac{\\partial f}{\\partial x} dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.441138em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">t</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574399999999997em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h2 id=\"利用伊藤微积分对布朗运动的分析\"><a class=\"markdownIt-Anchor\" href=\"#利用伊藤微积分对布朗运动的分析\">#</a> 利用伊藤微积分对布朗运动的分析</h2>\n<h3 id=\"一维布朗运动的路径性质分析\"><a class=\"markdownIt-Anchor\" href=\"#一维布朗运动的路径性质分析\">#</a> 一维布朗运动的路径性质分析</h3>\n<p>利用伊藤微积分，我们可以深入分析一维布朗运动的路径性质。布朗运动的随机微分方程（SDE）为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dX(t) = \\mu dt + \\sigma dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 表示布朗运动的位置，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> 是漂移项，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> 是扩散项，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是标准威纳过程。</p>\n<p>根据伊藤引理，对于一个二次可微函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(t, X(t))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>，其微分可以表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mi>μ</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mi>σ</mi><mn>2</mn></msup><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mn>2</mn></msup><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac><mo fence=\"true\">)</mo></mrow><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>f</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>x</mi></mrow></mfrac><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">df(t, X(t)) = \\left( \\frac{\\partial f}{\\partial t} + \\mu \\frac{\\partial f}{\\partial x} + \\frac{1}{2} \\sigma^2 \\frac{\\partial^2 f}{\\partial x^2} \\right) dt + \\sigma \\frac{\\partial f}{\\partial x} dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.441138em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">t</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0574399999999997em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714399999999998em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>利用伊藤引理，我们可以对布朗运动的多种函数进行分析：</p>\n<p>考虑函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>X</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(X) = X^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>，根据伊藤引理，其微分为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><mi>X</mi><mi>d</mi><mi>X</mi><mo>+</mo><mi>d</mi><mo stretchy=\"false\">⟨</mo><mi>X</mi><mo stretchy=\"false\">⟩</mo><mo>=</mo><mn>2</mn><mi>X</mi><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi>d</mi><mi>W</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>σ</mi><mn>2</mn></msup><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">df(X) = 2X dX + d \\langle X \\rangle = 2X (\\mu dt + \\sigma dW) + \\sigma^2 dt\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p>代入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>，得到：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>X</mi><mi>μ</mi><mo>+</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mi>d</mi><mi>t</mi><mo>+</mo><mn>2</mn><mi>X</mi><mi>σ</mi><mi>d</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">d(X^2) = (2X \\mu + \\sigma^2) dt + 2X \\sigma dW\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\">μ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span></span></p>\n<p>这个公式表明，布朗运动的平方增量不仅依赖于时间增量，还依赖于威纳过程的增量。通过这个公式，我们可以分析布朗运动的方差和其他统计性质。</p>\n<h3 id=\"多维布朗运动的路径性质分析\"><a class=\"markdownIt-Anchor\" href=\"#多维布朗运动的路径性质分析\">#</a> 多维布朗运动的路径性质分析</h3>\n<p>多维布朗运动是布朗运动在高维空间中的推广。设<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>W</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>W</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>W</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W_1(t), W_2(t), ..., W_n(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是独立的标准布朗运动，则多维布朗运动的随机微分方程为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dX(t) = \\mu dt + \\sigma dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 维布朗运动的位置向量；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span> 是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 维漂移向量；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> 是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 维扩散矩阵；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 维威纳过程。</p>\n<p>利用伊藤引理，我们可以对多维布朗运动的函数进行类似于一维情况的分析。例如，考虑函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">f(X) = X^T X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>，其微分为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>d</mi><mo stretchy=\"false\">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><msup><mi>X</mi><mi>T</mi></msup><mi>d</mi><mi>X</mi><mo>+</mo><mi>d</mi><mo stretchy=\"false\">⟨</mo><mi>X</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">df(X) = d(X^T X) = 2X^T dX + d \\langle X \\rangle\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1413309999999999em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9746609999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">⟩</span></span></span></span></span></p>\n<p>代入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">dX</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>，得到：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><msup><mi>X</mi><mi>T</mi></msup><mo stretchy=\"false\">(</mo><mi>μ</mi><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi>d</mi><mi>W</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>σ</mi><mi>T</mi></msup><mi>σ</mi><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">df(X) = 2X^T (\\mu dt + \\sigma dW) + \\sigma^T \\sigma dt\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1413309999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8913309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<h3 id=\"具体应用分析\"><a class=\"markdownIt-Anchor\" href=\"#具体应用分析\">#</a> 具体应用分析</h3>\n<h4 id=\"案例一利用伊藤微积分进行扩散过程分析\"><a class=\"markdownIt-Anchor\" href=\"#案例一利用伊藤微积分进行扩散过程分析\">#</a> 案例一：利用伊藤微积分进行扩散过程分析</h4>\n<p>布朗运动可以用于描述扩散过程。例如，在一维空间中，污染物在水中的扩散可以通过布朗运动模型进行模拟。设污染物的浓度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(t, x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>，其扩散过程满足以下偏微分方程：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mi>C</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mi>D</mi><mfrac><mrow><msup><mi mathvariant=\"normal\">∂</mi><mn>2</mn></msup><mi>C</mi></mrow><mrow><mi mathvariant=\"normal\">∂</mi><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{\\partial C}{\\partial t} = D \\frac{\\partial^2 C}{\\partial x^2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.37144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\">t</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.05556em;\">∂</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> 为扩散系数。利用布朗运动的随机微分方程，可以模拟单个污染物粒子的轨迹，从而预测污染物在水中的扩散行为。具体步骤如下：</p>\n<ol>\n<li>设定初始条件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">X(0) = x_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>生成一系列标准正态分布的随机变量，模拟威纳过程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>利用欧拉 - 马里尤玛方法或其他数值方法求解随机微分方程，得到粒子轨迹</li>\n<li>统计模拟结果来得到污染物的浓度分布</li>\n</ol>\n<p>具体分析方法为：先根据实际情况确定扩散系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> 的值，然后设定初始浓度分布<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(0, x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> 和边界条件，接着利用欧拉 - 马里尤玛方法进行数值模拟，求解随机微分方程，得到污染物粒子的运动轨迹，然后再对模拟结果进行统计分析，计算污染物的浓度分布<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(t, x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>。最后将模拟结果与实验数据进行比较，验证模型的准确性。</p>\n<p>在这个案例中，伊藤微积分通过对随机微分方程的求解，模拟了污染物在水中的扩散过程。通过数值方法，我们能够预测污染物的浓度分布，并与实际数据进行比较，以验证模型的有效性。</p>\n<h4 id=\"案例二利用伊藤微积分进行生物学中的粒子运动分析\"><a class=\"markdownIt-Anchor\" href=\"#案例二利用伊藤微积分进行生物学中的粒子运动分析\">#</a> 案例二：利用伊藤微积分进行生物学中的粒子运动分析</h4>\n<p>在细胞生物学中，细胞内颗粒的运动也可以通过布朗运动模型进行描述。利用伊藤微积分，可以分析这些颗粒的运动轨迹，研究其在细胞内的分布和动态变化。例如，设某种蛋白质在细胞质中的运动为布朗运动，可以利用随机微分方程分析其运动模式和分布特性。具体步骤如下：</p>\n<ol>\n<li>确定初始条件：设定初始位置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">X(0) = x_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>模拟威纳过程：生成一系列标准正态分布的随机变量，模拟威纳过程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">W(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>求解随机微分方程：利用数值方法求解随机微分方程，得到蛋白质的运动轨迹</li>\n<li>分析结果：统计模拟得到的轨迹，计算蛋白质的空间分布和运动特性</li>\n</ol>\n<p>在这个案例中，伊藤微积分通过对随机微分方程的求解，模拟了蛋白质在细胞质中的运动。通过数值方法，我们能够预测蛋白质的空间分布，并与实验数据进行比较，以验证模型的有效性。</p>\n<h2 id=\"布朗运动的数值模拟与结果分析\"><a class=\"markdownIt-Anchor\" href=\"#布朗运动的数值模拟与结果分析\">#</a> 布朗运动的数值模拟与结果分析</h2>\n<p>在这一部分中，我们将展示如何通过数值模拟来研究布朗运动，并利用伊藤微积分对模拟结果进行分析。具体步骤如下：</p>\n<p>为了模拟布朗运动，我们可以使用欧拉 - 马里尤玛方法（Euler-Maruyama Method）。该方法是一种常用的数值解随机微分方程的算法，适用于模拟布朗运动的路径：</p>\n<p>布朗运动的随机微分方程为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>X</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>μ</mi><mi>d</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi>d</mi><mi>W</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dX(t) = \\mu dt + \\sigma dW(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>我们可以将其离散化，即将时间区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, T]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span> 分为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 个小步长<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">t</span></span></span></span>，对于每一个时间步长<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">t</span></span></span></span>，布朗运动的数值解为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>X</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>X</mi><mi>n</mi></msub><mo>+</mo><mi>μ</mi><mi mathvariant=\"normal\">Δ</mi><mi>t</mi><mo>+</mo><mi>σ</mi><mi mathvariant=\"normal\">Δ</mi><msub><mi>W</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_{n+1} = X_n + \\mu \\Delta t + \\sigma \\Delta W_n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.891661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mord\">Δ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><msub><mi>W</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Delta W_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">Δ</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是独立同分布的标准正态随机变量，表示威纳过程的增量。</p>\n<p>我们设置初始值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，然后通过迭代来生成布朗运动的路径。</p>\n<p>然后我们通过查阅资料设定布朗运动的漂移系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi></mrow><annotation encoding=\"application/x-tex\">\\mu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span></span></span></span>，扩散系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>、时间区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> 和步数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>。生成<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 个独立同分布的正态随机变量，用于模拟威纳过程的增量。</p>\n<p>接着我们使用代码求解，代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数设置</span></span><br><span class=\"line\">mu = <span class=\"number\">0.1</span></span><br><span class=\"line\">sigma = <span class=\"number\">0.3</span></span><br><span class=\"line\">T = <span class=\"number\">1.0</span></span><br><span class=\"line\">N = <span class=\"number\">1000</span></span><br><span class=\"line\">dt = T / N</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化</span></span><br><span class=\"line\">X = np.zeros(N + <span class=\"number\">1</span>)</span><br><span class=\"line\">X[<span class=\"number\">0</span>] = <span class=\"number\">0</span>  <span class=\"comment\"># 初始位置</span></span><br><span class=\"line\">W = np.random.normal(<span class=\"number\">0</span>, np.sqrt(dt), N)  <span class=\"comment\"># 生成威纳过程增量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数值求解</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, N + <span class=\"number\">1</span>):</span><br><span class=\"line\">    X[n] = X[n - <span class=\"number\">1</span>] + mu * dt + sigma * W[n - <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制布朗运动路径</span></span><br><span class=\"line\">plt.plot(np.linspace(<span class=\"number\">0</span>, T, N + <span class=\"number\">1</span>), X)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Time&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;X(t)&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Simulated Brownian Motion Path&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算模拟路径的均值和方差</span></span><br><span class=\"line\">mean_X = np.mean(X)</span><br><span class=\"line\">var_X = np.var(X)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Simulated Mean: <span class=\"subst\">&#123;mean_X&#125;</span>, Theoretical Mean: <span class=\"subst\">&#123;mu * T&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Simulated Variance: <span class=\"subst\">&#123;var_X&#125;</span>, Theoretical Variance: <span class=\"subst\">&#123;sigma**<span class=\"number\">2</span> * T&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>根据布朗运动的理论，路径的均值应为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>μ</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\mu T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>，方差应为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma^2 T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>。通过数值模拟结果，可以计算不同时间点的均值和方差，并与理论值比较。</p>\n<p>在多次模拟后，我们得到以下结果：</p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>本研究通过利用伊藤微积分对布朗运动进行了深入的描述和分析。具体来说，我们首先介绍了布朗运动的基础理论和随机过程的基本概念，然后详细阐述了伊藤微积分的基本原理及其在布朗运动中的应用。通过数值模拟和具体案例分析，我们展示了如何利用伊藤微积分来模拟和分析污染物在水中的扩散过程以及细胞内颗粒的运动。</p>\n<p>研究表明，伊藤微积分作为处理随机过程的有力工具，能够准确描述布朗运动的各种性质和特征。通过数值方法，我们验证了布朗运动的理论模型，并将其应用于实际问题的研究中，取得了良好的效果。</p>\n<h2 id=\"参考文献\"><a class=\"markdownIt-Anchor\" href=\"#参考文献\">#</a> 参考文献</h2>\n<ol>\n<li>李旭东。浅谈 “随机过程” 课程教学改革与实践 [J]. 教育教学论坛，2019, (24): 67-68.</li>\n<li>王军霞。到达率随时间变化的队列模型及模拟仿真 [D]. 长安大学，2019.</li>\n<li>陈勇。复多重维纳 — 伊藤积分的乘法公式和独立性（英文） [J]. 数学进展，2017, 46 (06): 819-827.</li>\n<li>冉芳. Stratonovich 积分和 Itô 积分探讨比较分析 [J]. 九江学院学报 (自然科学版), 2014, 29 (01): 59-61. DOI:10.19717/j.cnki.jjun.2014.01.014.</li>\n<li>刘芳，葛芳晟。伊藤引理的证券投资组合简单建模 [J]. 科技信息，2014, (02): 56+60.</li>\n<li>马慧芸，韩宏。关于布朗运动的两类随机积分的比较 [J]. 甘肃联合大学学报 (自然科学版), 2010, 24 (05): 34-36+39. DOI:10.13804/j.cnki.2095-6991.2010.05.008.</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "homework"
            ]
        },
        {
            "id": "https://enjundu.github.io/misc/README/",
            "url": "https://enjundu.github.io/misc/README/",
            "title": "a_README",
            "date_published": "2024-07-03T14:41:31.000Z",
            "content_html": "<h2 id=\"本章节为笔者闲来无事所做的部分副业挣点外快\"><a class=\"markdownIt-Anchor\" href=\"#本章节为笔者闲来无事所做的部分副业挣点外快\">#</a> 本章节为笔者闲来无事所做的部分副业（挣点外快）</h2>\n<p>若专业相关：联系 **<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYWlsLmdvb2dsZS5jb20v\">enjundu.cs@gmail.com</span>**</p>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "homework"
            ]
        },
        {
            "id": "https://enjundu.github.io/misc/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%EF%BC%9A%E7%A7%91%E6%8A%80%E5%88%9B%E6%96%B0%E5%92%8C%E4%BC%81%E4%B8%9A%E8%BD%AC%E5%9E%8B_%E9%80%9A%E8%AF%86%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/",
            "url": "https://enjundu.github.io/misc/%E6%95%B0%E5%AD%97%E7%BB%8F%E6%B5%8E%EF%BC%9A%E7%A7%91%E6%8A%80%E5%88%9B%E6%96%B0%E5%92%8C%E4%BC%81%E4%B8%9A%E8%BD%AC%E5%9E%8B_%E9%80%9A%E8%AF%86%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/",
            "title": "数字经济：科技创新和企业转型_通识结课论文",
            "date_published": "2024-07-03T14:41:31.000Z",
            "content_html": "<h1 id=\"技术创新对数字经济中企业转型的影响\"><a class=\"markdownIt-Anchor\" href=\"#技术创新对数字经济中企业转型的影响\">#</a> <strong>技术创新对数字经济中企业转型的影响</strong></h1>\n<p>** 摘要：** 数字经济的兴起引领了一场技术创新的浪潮，深刻改变了企业在全球范围内的运营方式。本文通过对《数字经济：科技创新和企业转型》课程的综合探讨，旨在揭示技术创新与企业转型之间复杂的关系。通过全面的分析，论文深入研究数字经济动荡领域中企业转型的主要推动因素、挑战以及对企业的影响。涵盖的主题包括数字经济的演变、科技创新与企业转型的关键概念、先前研究的综述、破坏性技术的作用、创新模型的应用、技术创新的推动因素、企业面临的挑战、成功企业的转型策略等。这一研究旨在为学术界和实际经营者提供深刻的见解和有益的启示，帮助企业更好地应对数字经济时代的变革。</p>\n<p><strong>关键词</strong>：数字经济、技术创新、企业转型、创新模型、破坏性技术、创新生态系统、开放创新、数字化转型、领导力、战略规划、挑战、成功经验。</p>\n<h2 id=\"一-引言\"><a class=\"markdownIt-Anchor\" href=\"#一-引言\">#</a> 一、<strong>引言</strong></h2>\n<p>随着信息技术的迅猛发展，数字经济在全球范围内崛起，成为引领社会变革的引擎。数字经济不仅涵盖了数字化生产、分配、交换和消费的全过程，更深刻地改变了企业运营的方式与规模，推动着全球经济走向智能化、创新化和高效化的未来。这一潮流对企业转型提出了更为复杂而紧迫的要求，因为传统商业模式和管理范式面临着前所未有的挑战。因此，深入理解数字经济对企业的影响，特别是在科技创新与企业转型之间的关系，已成为当今商业领域亟待解决的重要问题。[1]</p>\n<p>在这一时代背景下，课程《数字经济：科技创新和企业转型》迎刃而解，成为学术界和商业实践者的焦点。该课程旨在帮助学生深入了解数字经济的核心概念、技术趋势以及它们如何塑造企业的未来。通过系统性的学习，我们能够理解创新是数字经济中不可或缺的要素，同时也意识到企业需要如何巧妙应对这一激动人心而又充满挑战的新时代。</p>\n<p>本论文的主旨在于深入研究技术创新对企业在数字经济中的转型过程产生的影响。我们将聚焦于数字经济的演变背景、企业面临的挑战、成功的转型策略以及技术创新对商业模型的塑造，以全面分析数字经济时代企业的核心议题。在这个背景下，我们将探讨一系列关键问题：数字经济如何推动技术创新？企业在技术转型中面临了哪些主要挑战？成功的企业是如何应对这些挑战的？技术创新如何改变企业的商业模型？这些问题的回答将有助于我们更好地理解数字经济时代企业的现状与未来，为学术界和实际经营者提供深刻的洞见和有益的启示。</p>\n<h2 id=\"二-文献综述\"><a class=\"markdownIt-Anchor\" href=\"#二-文献综述\">#</a> 二、<strong>文献综述</strong></h2>\n<h3 id=\"21-数字经济的演变\"><a class=\"markdownIt-Anchor\" href=\"#21-数字经济的演变\">#</a> <strong>2.1</strong> <strong>数字经济的演变</strong></h3>\n<p>数字经济的发展是经济全球化和信息技术融合的产物。从信息时代的兴起到今天，数字经济已经从一个朦胧的概念逐渐演变成为塑造全球商业格局的关键力量。在这一演变过程中，数字经济不仅仅是传统商业的数字化延伸，更是一种全新的商业范式，强调数据驱动、创新导向和跨界协同。这个演变过程涵盖了数字技术的不断发展，从而使企业能够更灵活地适应市场变化，提高效率，并在全球范围内寻找新的商机。[2]</p>\n<h3 id=\"22-科技创新和企业转型的关键概念\"><a class=\"markdownIt-Anchor\" href=\"#22-科技创新和企业转型的关键概念\">#</a> <strong>2.2</strong> <strong>科技创新和企业转型的关键概念</strong></h3>\n<p>在数字经济时代，科技创新成为推动企业转型的核心引擎。科技创新不仅仅包括新产品和服务的开发，还涉及到组织结构、业务流程以及文化的全面变革。在这一背景下，一系列关键概念应运而生，如数字化转型、创新生态系统、开放创新等。数字化转型强调企业如何整合数字技术，全面提升业务运营效率；创新生态系统则着眼于企业与外部合作伙伴、创新网络的建立，以共同推动创新；而开放创新则强调了企业通过开放合作、引入外部创新资源来加速自身创新过程。这些概念共同构成了科技创新与企业转型的理论框架，指引着企业在数字经济中的发展路径。</p>\n<p><strong>2.3 先前关于技术对业务影响的研究</strong></p>\n<p>已有大量研究深入探讨了技术对企业业务的广泛影响。这些研究包括了不同领域、行业和规模的企业，从而形成了一个多层次、多视角的理解体系。早期的研究关注于信息技术的应用，强调信息系统如何提高组织的效率和决策能力。随着技术的不断进步，研究逐渐转向更先进的主题，如大数据分析、人工智能、物联网等。这些研究不仅为企业提供了实用的操作指南，同时也揭示了技术变革对企业战略、组织结构以及市场竞争力等方面的深刻影响。然而，随着数字经济的快速发展，我们迫切需要深入研究技术创新如何在数字经济时代引领企业转型，以更全面、前瞻性的视角理解其对企业的重大影响。</p>\n<p><strong>三、理论框架</strong></p>\n<h3 id=\"31-破坏性技术在塑造数字经济中的作用\"><a class=\"markdownIt-Anchor\" href=\"#31-破坏性技术在塑造数字经济中的作用\">#</a> <strong>3.1 破坏性技术在塑造数字经济中的作用</strong></h3>\n<p>破坏性技术在数字经济中扮演着塑造行业格局的关键角色。通过对新兴技术的广泛应用，企业能够颠覆传统商业模式，加速创新，提高效率。破坏性技术如人工智能、区块链和生物技术等，不仅推动了企业的数字化转型，还催生了全新的商业生态系统。[3]</p>\n<p>破坏性技术的引入使得企业能够重新思考和重塑其商业模式。传统的商业模式往往受到惯性和既定规则的限制，而新兴技术的应用则为企业提供了颠覆性的机会。通过深入研究新兴技术的商业应用，我们将分析企业如何通过重新设计产品、服务、分销渠道等方面，实现商业模式的创新，从而更好地适应数字经济的变革潮流。</p>\n<p>破坏性技术不仅仅是单一技术的应用，更是在不同领域和行业之间创造全新的商业生态系统。例如，人工智能的融入使得企业能够建立智能化的服务链，区块链的应用改变了信息传递和交易的方式，生物技术的发展开启了医疗和健康产业的新纪元。在这一部分，我们将深入研究这些新兴技术如何相互融合，构建全新的商业生态系统，使企业在数字经济中找到更为广阔的发展空间。</p>\n<p>企业的数字化转型离不开破坏性技术的支持。在这一部分，我们将具体探讨企业如何借助人工智能、区块链和生物技术等破坏性技术，实现数字化转型。从技术选型、实施策略到转型过程中的挑战和成功案例，我们将为企业提供实用的指导，助力它们更顺利地迎接数字经济的挑战与机遇。<br>\n<strong>3.2 创新模型及其在企业转型中的应用</strong></p>\n<p>创新模型是企业在数字经济时代实现成功转型的关键工具。通过深入理解创新生态系统、开放创新和快速迭代等模型，企业能够更灵活地应对市场变化，推动产品和服务的不断升级。</p>\n<p>创新生态系统是企业在数字经济中应对快速变化的市场环境的一种重要策略。通过建立广泛的合作伙伴关系、加强与初创企业的合作、引入外部创新资源，企业能够打破传统的创新边界，实现全方位的创新。在这一部分，我们将详细分析创新生态系统的构建方法，揭示企业如何通过与外部合作伙伴共同推动创新，实现业务的全面升级。</p>\n<p>开放创新模型强调了企业通过开放合作、分享知识、引入外部创新的理念。在数字经济时代，信息和知识的传播变得更加迅速，开放创新成为企业实现竞争优势的一种重要途径。我们将深入研究开放创新的理念，包括企业如何建立开放的文化氛围、与生态系统内的各方保持紧密联系、并且将外部创新有效地整合到企业内部的运营和发展中。</p>\n<p>在数字经济时代，市场需求和技术变化迅速，企业必须能够迅速调整自己的产品和服务以适应这种变化。快速迭代成为企业实现持续创新的关键。在这一部分，我们将详细探讨快速迭代的实践方法，包括敏捷开发、设计思维、用户反馈循环等，以帮助企业更加灵活地应对市场的动态变化，提高创新的成功率。[4]<br>\n<strong> 3.3 关于在业务战略中整合技术的理论观点</strong></p>\n<p>整合技术到业务战略是企业数字化转型的核心要素之一。有效的整合要求企业领导层深刻理解技术与业务之间的紧密关系，并将技术融入到企业战略的各个层面。</p>\n<h2 id=\"四-数字经济中技术创新的推动因素\"><a class=\"markdownIt-Anchor\" href=\"#四-数字经济中技术创新的推动因素\">#</a> <strong>四、数字经济中技术创新的推动因素</strong></h2>\n<h3 id=\"41影响因素\"><a class=\"markdownIt-Anchor\" href=\"#41影响因素\">#</a> <strong>4.1 影响因素</strong></h3>\n<p>数字经济中的技术创新受多种因素影响，其中一些因素成为关键的推动力。审视这些关键技术推动因素包括但不限于市场需求、科技投资、政策支持以及全球竞争力。深入了解这些因素，将有助于企业明智地选择技术创新方向，更好地把握市场机遇。</p>\n<p>关键技术推动因素的影响不仅仅局限于技术本身，还涉及企业内外部环境的变化。在这一部分，我们将分析这些因素如何直接和间接地影响企业创新。这涵盖了企业文化、创新生态系统的建设、市场营销策略等多个方面。[5]</p>\n<p><strong>4.2</strong> <strong>企业在技术转型中面临的挑战</strong><br>\n (一) 市场竞争激烈</p>\n<p>由于传统商贸流通企业准入门槛相对较低，这使得商贸流通企业相对较多，这给供应商和消费端提供了更多选择，但随着我国社会和经济的快速发展，这导致传统商贸流通企业人力、物力成本不断增加，使得商贸流通企业面临的市场竞争不断加剧，很多地区只能依靠价格优势开展各项业务。随着电子商务走向成熟，这对传统商贸行业造成了巨大挑战，也同样影响到流通企业，大部分实体商贸企业都遭受了电子商务冲击，再加上商品同质化比较严重，致使商贸流通企业市场环境发生极大变化。例如，综合保税区是带动商品外贸流通的重要场所，但随着近些年来综保区不断扩大，使得商贸流通受到了重大影响，而企业经济效益无法提升，则会给流通企业的生存发展造成严重危机。</p>\n<p>(二) 跨行业威胁</p>\n<p>随着数字经济时代不断成熟，使得更多电子商务企业不断深挖产业链条，原本不受到影响的两个行业，极容易产生正面接触，正是这种潜在威胁，将导致传统商贸流通企业生存发展空间全面压缩。由于传统商贸流通行业面向客户群体的形式较为单 - -，当电子商务大规模进入到商贸流通行业时，就给传统商贸流通企业造成了极大的生存压力。例如，京东、阿里巴巴都已经逐渐开展新零售业态，当电子商务巨头加入到生鲜采购领域时，电子商务将直接获得终端客户消费和物流订单，这无疑会影响到传统商贸流通企业的发展前景。</p>\n<p>(三) 替代品和服务产生威胁</p>\n<p>随着我国社会和经济的快速发展，人民可支配收入也在快速增长，传统商贸模式已经无法满足市场消费需求，人们开始对高科技产品产生消费兴趣，同时，海外代购商品不断涌入，使得传统商贸行业的生存危机不断加重，这将直接或间接影响到商贸流通行业。电子商务凭借较低的人力成本，可以实现价值最大化，既带动了互联网购物的快速发展，还能给消费者提供更多商品信息，同时，这也直接限制了传统商贸流通企业的发展空间。</p>\n<p>(四) 供应商议价能力问题</p>\n<p>随着电子商务平台逐渐掌握终端消费者的习惯和数据资源，这使得线下消费渠道逐渐丧失优势，将直接导致电子商务渠道议价能力提升，使供应商议价能力不断降低。此外，供应商还要面临严峻的市场竞争，因为供应商没有完善终端营销渠道，所以将会受到电子商务平台制约。而传统商贸流通企业主要是为供应商提供商品流通服务，这将直接导致流通企业市场规模下降，给企业生存和发展带来严重阻碍。</p>\n<p>(五) 客户议价能力逐渐提升</p>\n<p>性价比是客户消费的最主要考量因素，更是决定商品能否大规模销售的关键问题。在信息时代，人们消费习惯已经发生根本性地转变，只有给客户更大的商品选择空间，客户才可以通过更多渠道了解商品价值，从而选择合适地购买渠道。由于线下渠道商品销售受限于成本因素，这导致很多消费者选择线上消费，而传统流通企业主要面对线下消费客户，再加上商贸流通企业数量较多，商贸流通成本的增加，意味着传统商贸流通企业势必要进行数字经济的转型升级，才能获得更大的发展前景 [6]。</p>\n<p><strong>4.3 成功企业的转型策略</strong></p>\n<p>在数字经济时代，整合技术到企业的商业模型是取得成功的关键之一。本部分将提出一种框架，深入探讨企业如何将技术整合到其商业模型中，以实现创新、提高效率和保持竞争力。</p>\n<p>在数字经济的浪潮中，企业必须灵活运用先进技术，将其有机地融入商业模型中。这一部分将提供一个全面的框架，涵盖技术选择、业务流程设计、客户体验优化等方面。我们将深入剖析成功整合技术的企业，揭示它们所采用的框架和方法，为其他企业提供实用的指南，助力它们更好地应对数字经济的挑战。</p>\n<p>数字转型的复杂性要求企业掌握最佳实践，以更好地应对各种挑战。这一部分将总结在数字转型过程中的最佳实践，包括但不限于：</p>\n<p>领导力培养： 数字化变革需要具备前瞻性和创新力的领导团队。我们将深入研究领导层如何培养数字化思维，推动组织朝着创新和变革的方向前进。</p>\n<p>组织文化建设： 数字化转型不仅仅是技术的变革，还涉及到组织文化的调整。我们将探讨如何建设一种鼓励创新、快速学习和适应变化的文化，以推动数字转型的成功。</p>\n<p>战略规划： 在数字经济时代，战略规划变得更为关键。我们将总结成功企业的战略规划实践，包括对市场趋势的敏感性、灵活的战略调整机制等，以帮助其他企业更好地规划数字化转型的长远发展。</p>\n<p>通过深入研究成功企业的案例，我们将展示它们在制定和执行转型战略方面的成功经验。这些案例将提供实际的战略方法和操作指南，为其他企业提供有针对性的战略参考，助力它们在数字经济时代实现成功的转型。我们将分析这些企业在面对市场变化、技术发展和竞争压力时所采取的创新战略，为企业领导层提供实用的战略思路，以实现长期的商业成功。[7]</p>\n<h2 id=\"五-结论\"><a class=\"markdownIt-Anchor\" href=\"#五-结论\">#</a> <strong>五、结论</strong></h2>\n<p>在数字经济时代，技术创新对企业的转型起着至关重要的作用。通过深入研究数字经济的演变、科技创新与企业转型的关键概念以及成功企业的转型策略，本论文揭示了技术创新在塑造行业格局、推动创新和提高效率方面的关键作用。数字经济时代，企业需要理解并迎接数字化转型的复杂性，采用创新模型，整合技术到商业模型，以适应市场的快速变化。尤其是破坏性技术的引入和成功企业的经验都为其他企业提供了重要的指导和启示。然而，企业在技术转型中仍面临着一系列挑战，包括文化冲突、技术整合问题和管理层面的困境。了解这些挑战并采取相应的策略是企业成功转型的关键。</p>\n<h2 id=\"六-参考文献\"><a class=\"markdownIt-Anchor\" href=\"#六-参考文献\">#</a> 六、<strong>参考文献</strong></h2>\n<p>​    [1]     王欢。数字经济时代的中小企业财务转型探析         [J].     商场现代化，2023,         (24):     180-182.                 DOI:10.14013/j.cnki.scxdh.2023.24.006</p>\n<p>​    [2]     毕小丽。数字经济时代企业内部审计创新转型探讨         [J].     现代商业，2023,         (22):     173-176.                 DOI:10.14097/j.cnki.5392/2023.22.020</p>\n<p>​    [3]     陈君联。数字经济对中小旅游企业转型发展的启示         [J].     现代商业，2023,         (22):     52-55.                 DOI:10.14097/j.cnki.5392/2023.22.030</p>\n<p>​    [4]     何兰红。数字经济赋能商贸流通企业数字化转型分析         [J].     商业观察，2023,     9     (33):     61-64.</p>\n<p>​    [5]     田五星，王丽娟，胡锦萍。新经济时代中小企业数字化转型的实施路径研究         [J].     咸阳师范学院学报，2023,     38     (06):     50-56.</p>\n<p>​    [6]     范斗南。数字经济转型条件下企业管理的发展与变革研究         [J].     中国商论，2023,         (22):     57-61.                 DOI:10.19699/j.cnki.issn2096-0298.2023.22.057</p>\n<p>​    [7]     张文文，景维民。数字经济监管助力企业数字化转型 —— 基于收益和成本的权衡分析     [J/OL].         数量经济技术经济研究，1-22 [2023-12-25]     <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2kub3JnLzEwLjEzNjUzL2ouY25raS5qcXRlLjIwMjMxMTE3LjAwNw==\">https://doi.org/10.13653/j.cnki.jqte.20231117.007</span>.</p>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "homework"
            ]
        },
        {
            "id": "https://enjundu.github.io/misc/%E8%A5%BF%E6%96%B9%E9%9F%B3%E4%B9%90%E5%8F%B2/",
            "url": "https://enjundu.github.io/misc/%E8%A5%BF%E6%96%B9%E9%9F%B3%E4%B9%90%E5%8F%B2/",
            "title": "迈克尔杰克逊对西方流行文化的多重影响",
            "date_published": "2024-07-03T14:41:31.000Z",
            "content_html": "<h1 id=\"迈克尔杰克逊对西方流行文化的多重影响\"><a class=\"markdownIt-Anchor\" href=\"#迈克尔杰克逊对西方流行文化的多重影响\">#</a> <strong>迈克尔杰克逊对西方流行文化的多重影响</strong></h1>\n<p>** 摘要：** 本文深入探讨了迈克尔・杰克逊对西方流行文化的多重影响，聚焦于音乐、服装、电影和唱片设计等方向。在音乐方向，杰克逊以其独特音乐风格和社会问题歌曲的创作展现了对音乐的卓越贡献。在服装方向，他的独特着装风格成为流行文化的标志，超越时尚，成为他个人品牌的一部分。在电影方向，杰克逊通过角色表演和视觉效果的创新，将音乐与电影完美结合，为观众呈现出丰富多彩的艺术体验。在唱片设计方向，他的专辑封面设计不仅注重艺术性，还与音乐内容相得益彰，改变了唱片设计的标准，对整个音乐产业产生了深远影响。通过对这些方面的综合分析，本文旨在全面展示迈克尔・杰克逊在多个艺术领域的独特贡献及其对流行文化的深远影响。</p>\n<p>** 关键词：** 迈克尔・杰克逊，西方流行文化，音乐创新，服装风格，电影艺术，唱片设计，社会问题歌曲，视觉效果，流行文化影响，艺术多元性。</p>\n<h2 id=\"一-引言\"><a class=\"markdownIt-Anchor\" href=\"#一-引言\">#</a> <strong>一、引言</strong></h2>\n<p>迈克尔・杰克逊（Michael Jackson）是 20 世纪最具影响力的音乐巨星之一，他的才华和创新不仅塑造了流行音乐的面貌，而且深刻地影响了西方流行文化的多个方面。杰克逊不仅以其卓越的音乐天赋著称，更以他独特的舞台表演风格、引领潮流的服装品味、深刻的音乐录影带和创新的唱片设计成为流行文化的象征。</p>\n<p>本论文旨在深入探讨迈克尔・杰克逊对西方流行文化的多重影响，着重分析他在音乐、服装、电影和唱片设计等方向上的独特贡献。通过对杰克逊生平和艺术作品的深入研究，我们将揭示他如何推动了流行文化的发展，塑造了一个新时代的艺术风格和审美标准。从早期的音乐成就到舞台上的惊人表演，再到对时尚的敏锐洞察和在电影领域的突破性贡献，迈克尔・杰克逊在多个领域都留下了不可磨灭的印记。通过对这些方面的深入分析，我们将更好地理解他是如何成为一位文化偶像，以及他对当代西方社会所产生的深远影响。</p>\n<p>通过本论文的研究，我们旨在为读者呈现迈克尔・杰克逊这位传奇艺术家对流行文化的独特贡献，强调他的影响力如何超越了音乐本身，扩展到服装、电影和唱片设计等多个艺术领域。迈克尔・杰克逊不仅是一位音乐天才，更是一位深刻影响并塑造了整个时代的文化图腾。</p>\n<h2 id=\"二-迈克尔杰克逊对西方音乐文化的影响\"><a class=\"markdownIt-Anchor\" href=\"#二-迈克尔杰克逊对西方音乐文化的影响\">#</a> 二、** 迈克尔・杰克逊 **** 对西方音乐文化的影响</h2>\n<h3 id=\"一音乐风格的演进\"><a class=\"markdownIt-Anchor\" href=\"#一音乐风格的演进\">#</a> （一）<strong>音乐风格的演进</strong></h3>\n<p>迈克尔杰克逊拥有举世罕见的艺术才华，他与众不同的嗓音、独创的舞步和浑身洋溢的明星魅力使他从幼年便崭露头角，并最终获得全世界的赞誉，以至连美国总统奥巴马在接受美联社采访时都这么讲:“迈克尔杰克逊作为一个最伟大的艺术家，他的名字应该被载入史册。我是听着他的歌曲长大的。”[1 ]</p>\n<p>迈克尔杰克逊的音乐风格随着年龄的增长也在变化，下面我们来回顾一下他的成长历程：</p>\n<p>迈克尔・杰克逊的音乐生涯始于他童年时期作为杰克逊五兄弟团队的一员。早在年幼时，他就展现出惊人的音乐才华。其参与创作和演唱的歌曲，如《I Want You Back》和《ABC》等，迅速攀升至音乐榜单之巅。这一时期的音乐作品不仅为他赢得了赞誉，也奠定了他在音乐历史上的地位。杰克逊的音乐风格演进至 20 世纪 80 年代，尤以《Thriller》（1982）为代表，该专辑成为史上销量最高的音乐专辑之一。《Thriller》融合了流行、摇滚、放克和灵魂等多种音乐元素，突破了流派的界限。[2] 他对音乐的创新和风格的多元融合使他成为当时音乐界的领军人物，开创了流行音乐的新篇章。</p>\n<h3 id=\"二音乐录影带对流行文化的塑造\"><a class=\"markdownIt-Anchor\" href=\"#二音乐录影带对流行文化的塑造\">#</a> （二）<strong>音乐录影带对流行文化的塑造</strong></h3>\n<p>杰克逊对音乐录影带的贡献无法低估。尤其是 1983 年发布的《Thriller》音乐录影带，成为音乐视频制作的里程碑。“疯狂” 获得了巨大的成功，一跃成为当时销量最高的唱片。迈克尔・杰克逊在专辑中所使用的音乐处理手法很快被其他艺人效仿借鉴，但在当时的美国流行音乐界，来自黑人艺术家的作品想要不受种族因素的影响而获得普遍的、带有白人化的、欧 - 美型音乐产业界承认是十分难的，种族歧视在这一领域依旧很严重。带着对这种政治现实的不服与愤怒，迈克尔・杰克逊继续了下一张个人专辑 “颤栗” 的创作。在 “颤栗” 这张专辑当中，他涉及了比 “疯狂” 更加广泛的类别范围，并且正式进军了以白人为主的硬摇滚流派，他并不是为了迎合白人听众，而是要将音乐的藩篱再一次打破，使他们无法再忽视。[3] 由导演约翰・兰道斯执导的这部短片不仅仅是一段音乐录影带，更是一部拥有独立叙事和视觉效果的艺术作品。其精彩的舞蹈场面和电影般的叙事深刻地改变了音乐录影带的制作标准，使其成为流行文化中一种独特的艺术形式。</p>\n<h3 id=\"三迈克尔杰克逊音乐的社会影响\"><a class=\"markdownIt-Anchor\" href=\"#三迈克尔杰克逊音乐的社会影响\">#</a> （三）<strong>迈克尔杰克逊音乐的社会影响</strong></h3>\n<p>杰克逊通过他的音乐创作，特别是社会问题歌曲的创作，成为社会改革的倡导者。歌曲如《Man in the Mirror》和《Heal the World》传达了他对全球社会问题的深刻关切。这些歌曲不仅引导着人们反思社会不公和环境问题，更激励着人们积极参与社会变革。通过音乐的力量，杰克逊超越了娱乐的范畴，将关注焦点引向社会问题，为流行音乐注入了社会责任感。</p>\n<p>杰克逊通过他的歌词和音乐中传达了对多个社会问题的观点。无论是对种族平等、反对贫困，还是对爱与和平的呼吁，他的音乐成为了一个表达社会观点和激发社会意识的平台。这种社会观点的表达方式超越了音乐的框架，深刻地影响了他的粉丝和整个社会，使人们在音乐的美妙旋律中感受到了社会的温暖和力量。</p>\n<h2 id=\"三-迈克尔杰克逊在服装方向对西方流行文化的影响\"><a class=\"markdownIt-Anchor\" href=\"#三-迈克尔杰克逊在服装方向对西方流行文化的影响\">#</a> 三、<strong>迈克尔杰克逊在服装方向对西方流行文化的影响</strong></h2>\n<h3 id=\"一时尚与个性层面\"><a class=\"markdownIt-Anchor\" href=\"#一时尚与个性层面\">#</a> （一）<strong>时尚与个性层面</strong></h3>\n<p>杰克逊的独特着装风格 —— 迈克尔・杰克逊以他独具特色的着装风格在时尚界留下了深刻的印记。无论是舞台表演、音乐录影带还是公共场合，他的穿着都呈现出前卫、大胆和充满个性的一面。从经典的红色皮夹克到闪耀的手套，再到他独特的帽子和鞋履选择，杰克逊的每一套服装都是一个艺术品，突显了他对时尚的独特理解和敏锐的审美眼光。</p>\n<p>服装成为其个人品牌的一部分 —— 杰克逊的服装选择不仅仅是一种时尚陈述，更是他个人品牌的核心元素之一。他通过引人注目的服装，成功地将自己的个性与音乐才华相结合，创造出了一个独一无二的形象。每一次公开露面，他的着装都传达出一种与众不同、引人瞩目的形象，使之成为他音乐事业成功背后的标志性特征。他通过对服装的设计，创造了一种独特的神秘感，并被世界认可。在当今的流行文化中，有着诸多迈克尔杰克逊风格的影子，例如富有华丽装饰的军装剪裁夹克、未来主义的金属紧身衣、华丽闪耀的水钻装饰元素… . 可以说，迈克尔杰克逊正在以 - 种潜移默化的方式存在于这个世界之中，同时他的时尚理念，及其整体的美学思想也作为无形的遗产留存。[4]</p>\n<h3 id=\"二影响服装的时尚产业\"><a class=\"markdownIt-Anchor\" href=\"#二影响服装的时尚产业\">#</a> （二）<strong>影响服装的时尚产业</strong></h3>\n<p>服装设计师对杰克逊风格的借鉴 —— 迈克尔・杰克逊的时尚风格不仅在音乐领域引起了轰动，同时也深刻地影响了时尚产业。众多服装设计师纷纷借鉴他的独特风格，将其标志性的元素融入到自己的设计中。无论是流行的军装外套、白手套，还是独特的鞋履设计，这些元素都成为时尚舞台上的亮点，体现了杰克逊时尚传承的力量。</p>\n<p>杰克逊时尚在流行文化中的延续 —— 杰克逊的时尚影响力不仅在他的时代得到认可，而且在流行文化中持续传承。许多艺人、时尚达人和影响力人物仍然受到他的启发，致敬他的着装风格，并将其重新演绎为当代的时尚趋势。这种延续性证明了杰克逊在时尚领域所创造的独特形象对流行文化的持久影响。</p>\n<h2 id=\"四-迈克尔杰克逊在电影方向做出的贡献与影响\"><a class=\"markdownIt-Anchor\" href=\"#四-迈克尔杰克逊在电影方向做出的贡献与影响\">#</a> 四、<strong>迈克尔杰克逊在电影方向做出的贡献与影响</strong></h2>\n<h3 id=\"一实现电影作品的突破\"><a class=\"markdownIt-Anchor\" href=\"#一实现电影作品的突破\">#</a> （一）<strong>实现电影作品的突破</strong></h3>\n<p>迈克尔・杰克逊在电影中的表演突显了他作为一位全方位艺术家的多才多艺。其中，他的主演电影如《The Wiz》（1978）和《Moonwalker》（1988）展示了他在电影领域的独特表现。在《The Wiz》中，杰克逊以其独特的才华和对音乐的诠释，重新演绎了经典的《绿野仙踪》故事，赢得了观众的赞誉。而《Moonwalker》则通过一系列音乐视频和故事片段，深入展示了他的音乐和舞蹈艺术。</p>\n<p>杰克逊通过电影作品成功地将他的音乐与视觉表现相结合，为观众呈现了更加丰富和多样的艺术体验。这种电影与音乐的结合不仅拓展了他的艺术创作领域，也为他的音乐事业注入了新的活力。电影作品为他提供了一个表达自己创意的平台，让观众能够更深入地理解他音乐背后的故事。</p>\n<h3 id=\"二在电影的视觉效果和艺术效果上做出创新\"><a class=\"markdownIt-Anchor\" href=\"#二在电影的视觉效果和艺术效果上做出创新\">#</a> （二）<strong>在电影的视觉效果和艺术效果上做出创新</strong></h3>\n<p>杰克逊在音乐录影带方面的创新性为整个音乐视频制作领域树立了标杆。特别是《Thriller》音乐录影带，首次采用 33 毫米的电影胶片拍摄，迈克尔成为了先锋音乐领域里的 “卓别林”。</p>\n<p>学者朱羽君曾论述:“音乐电视通过状态，通过眼神，通过人与人之间行为的碰撞、交流，通过流动、剪辑，在短短几分钟内把音乐要表达的思想、情感、情绪和意思充分表达出来，是一种现代的艺术语言和样式”。在杰克逊的 MV 中也有后现代的意味，“镜像” 和 “破碎” 是后工业时代人们的基本生存感受反应。意象性、表现性的画面语言，渲染、烘托了音乐语言的思想意念，加强音乐语言的艺术表现力和艺术冲击力，既沿袭了恐怖电影的叙事思路和表演风格，又区别于恐怖电影。[5]</p>\n<p>杰克逊通过对音乐录影带和电影的制作过程中引入前卫的技术手法，对整个电影制作技术产生了深远的影响。他推动了音乐视频制作技术的发展，包括特效、剪辑技巧以及故事叙事的创新。这些技术创新不仅在他的作品中得以展示，同时也为后来的导演和制片人提供了启示，影响了整个电影行业对于艺术表达和视觉效果的理解。</p>\n<h2 id=\"五-唱片设计方向\"><a class=\"markdownIt-Anchor\" href=\"#五-唱片设计方向\">#</a> 五、<strong>唱片设计方向</strong></h2>\n<h3 id=\"一专辑封面的艺术性\"><a class=\"markdownIt-Anchor\" href=\"#一专辑封面的艺术性\">#</a> （一）<strong>专辑封面的艺术性</strong></h3>\n<p>封面设计的风格和创新 —— 迈克尔・杰克逊的专辑封面设计展示了他对艺术性和创新的深刻理解。每一张封面都不仅仅是一张包装，更是一件艺术品。他的专辑封面设计风格独特，融合了摄影、绘画和图形设计等多种艺术元素。例如，《Thriller》专辑封面以其独特的视觉效果和设计手法，成为音乐史上最著名的封面之一。杰克逊通过封面设计向观众传达了他对音乐的独特理解和创意表达。</p>\n<p>封面与音乐内容的关联 —— 杰克逊巧妙地将封面设计与音乐内容紧密关联，创造了一种视听的统一。每一张封面都传达了专辑中音乐的情感和主题，使其成为音乐故事的一部分。这种关联性增强了观众对整个音乐作品的理解，封面不仅仅是外观，更是音乐体验的一部分。</p>\n<h3 id=\"二影响整个唱片市场\"><a class=\"markdownIt-Anchor\" href=\"#二影响整个唱片市场\">#</a> （二）<strong>影响整个唱片市场</strong></h3>\n<p>迈克尔・杰克逊的唱片销量与其独特的唱片设计风格密不可分。他的专辑封面和整体唱片设计成为吸引观众的关键因素之一。杰克逊通过视觉上引人注目的唱片设计，成功地吸引了更多的购买者，推动了他的专辑在市场上的销售。这种关系不仅在他的个人音乐事业中显著，也对整个唱片市场的发展产生了积极的影响。</p>\n<p>迈克尔・杰克逊的唱片设计标准的改变体现在他对创新和艺术性的追求。他不仅仅满足于传统的唱片包装形式，而是通过引入先进的设计概念，推动了唱片设计的标准。他的作品不仅在视觉上引人注目，更激发了其他艺术家和设计师对唱片包装创新的热情。这种改变不仅影响了唱片设计的审美标准，也对整个音乐产业的品牌建设和市场竞争产生了深远的影响。</p>\n<h2 id=\"六-四维一体总结迈克尔杰克逊对西方流行文化的影响\"><a class=\"markdownIt-Anchor\" href=\"#六-四维一体总结迈克尔杰克逊对西方流行文化的影响\">#</a> 六、<strong>四维一体总结迈克尔杰克逊对西方流行文化的影响</strong></h2>\n<p>迈克尔・杰克逊以其多重艺术天赋和卓越成就，深刻地塑造并影响了西方流行文化。通过其在音乐、舞蹈、时尚、电影和唱片设计等多个领域的独特贡献，他成为一位文化偶像，其影响超越了他个人的音乐事业。</p>\n<p>音乐方向： 杰克逊通过创新的音乐风格和深刻的歌词，不仅塑造了自己作为音乐天才的形象，还通过社会问题歌曲表达了对世界的关切，使其音乐超越娱乐本身，成为社会变革的声音。</p>\n<p>服装方向： 他的独特着装风格不仅在时尚领域树立了标杆，更将服装作为表达个性和创造形象的重要手段，使其服装成为流行文化中不可忽视的元素。</p>\n<p>电影方向： 杰克逊的电影作品不仅展现了他在角色表演上的卓越才华，还通过视觉效果和创新的电影制作技术，为观众呈现了更加多样和丰富的艺术体验。</p>\n<p>唱片设计方向： 他的专辑封面设计不仅展示了对艺术性的追求，也与音乐内容相得益彰，成为音乐作品的视觉延伸。他对唱片设计标准的改变影响深远，为唱片市场带来新的审美标准。</p>\n<p>在各个方向上，迈克尔・杰克逊不仅是创新的先锋者，更是流行文化的奇才。他以其跨领域的艺术贡献，为后来的艺术家和文化创作者树立了榜样，确立了自己在西方流行文化中的不朽地位。</p>\n<h2 id=\"七-参考文献\"><a class=\"markdownIt-Anchor\" href=\"#七-参考文献\">#</a> 七、<strong>参考文献</strong></h2>\n<p>[1] 奥巴马接受采访：我是听着杰克逊的歌曲长大的.ht-tp://ent.QQ.com.2009-07-03. 腾讯音乐.</p>\n<p>[2] 王明风。试析迈克尔・杰克逊的表演风格及其对流行音乐的影响 [J]. 中州大学学报，2009,26 (06):69-71.</p>\n<p>[3] 赵伟新。迈克尔杰克逊音乐风格研究 [D]. 上海音乐学院，2019.</p>\n<p>[4] 郭书源，李楠。流行乐的视觉传达：迈克尔・杰克逊演出服饰及其影响 [J]. 服饰导刊，2021,10 (05):111-117.</p>\n<p>[5] 梁晨。迈克尔・杰克逊的音乐电视的叙事风格 [J]. 西部广播电视，2014,(19):98-99.</p>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "homework"
            ]
        },
        {
            "id": "https://enjundu.github.io/misc/%E5%93%88%E4%BD%9B%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "url": "https://enjundu.github.io/misc/%E5%93%88%E4%BD%9B%E5%A4%A7%E4%BD%9C%E4%B8%9A/",
            "title": "哈佛数据库大作业",
            "date_published": "2024-07-03T14:41:31.000Z",
            "content_html": "<h1 id=\"本项目github仓库\"><a class=\"markdownIt-Anchor\" href=\"#本项目github仓库\">#</a> 本项目 github 仓库：</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSGFydmFyZC1EYXRhYmFzZS1EZXNpZ24tUHJvamVjdA==\">Harvard-Database-Design-Project</span></p>\n<h2 id=\"项目总结\"><a class=\"markdownIt-Anchor\" href=\"#项目总结\">#</a> 项目总结</h2>\n<h3 id=\"项目概述\"><a class=\"markdownIt-Anchor\" href=\"#项目概述\">#</a> 项目概述</h3>\n<p>本项目旨在设计和实现一个用于存储和分析全球 COVID-19 疫苗接种数据的数据库模型。数据集包括全球不同国家和地区的疫苗接种信息，并定期更新。为了完成数据库的概念模型设计，我们需要对所涉及的数据集进行详细分析，构建关系模式，并实现数据库结构。</p>\n<h3 id=\"项目要求\"><a class=\"markdownIt-Anchor\" href=\"#项目要求\">#</a> 项目要求</h3>\n<ol>\n<li><strong>数据集概述</strong>：\n<ul>\n<li><strong>locations.csv</strong>: 包含国家名称及其使用的疫苗类型，每一行代表某一国家的最后一次观测。</li>\n<li><strong>us_state_vaccinations.csv</strong>: 包含美国各州的疫苗接种历史数据。</li>\n<li><strong>vaccinations-by-age-group.csv</strong>: 包含各国不同年龄组的疫苗接种历史数据。</li>\n<li><strong>vaccinations-by-manufacturer.csv</strong>: 包含各国使用的不同类型疫苗的历史数据。</li>\n<li><strong>vaccinations.csv</strong>: 包含全球各国的疫苗接种数据，每一行代表一个观测日期。</li>\n<li><strong>country_data/Wales.csv, Canada.csv, United States.csv, Denmark.csv</strong>: 包含这些国家的每日疫苗接种数据。</li>\n</ul>\n</li>\n<li><strong>数据库设计要求</strong>：\n<ul>\n<li>设计数据库的概念模型，确保符合第三范式 (3NF)。</li>\n<li>使用实体关系图 (ERD) 映射为数据库模式。</li>\n<li>完成数据库的标准化，消除数据冗余。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"数据分析\"><a class=\"markdownIt-Anchor\" href=\"#数据分析\">#</a> 数据分析</h3>\n<h4 id=\"数据集分析与关系确定\"><a class=\"markdownIt-Anchor\" href=\"#数据集分析与关系确定\">#</a> 数据集分析与关系确定</h4>\n<ol>\n<li><strong>country_data</strong>：\n<ul>\n<li>包含属性： <code>location</code> ,  <code>date</code> ,  <code>vaccine</code> ,  <code>source_url</code> ,  <code>total_vaccinations</code> ,  <code>people_vaccinated</code> ,  <code>people_fully_vaccinated</code> ,  <code>total_boosters</code></li>\n<li>关系： <code>(location, date) -&gt; vaccine, source_url, total_vaccinations, people_vaccinated, people_fully_vaccinated, total_boosters</code></li>\n<li>进一步分析：存在推测关系  <code>total_vaccinations ≈ people_vaccinated + people_fully_vaccinated + total_boosters</code> ，验证后确定可以消除  <code>total_vaccinations</code> 。</li>\n</ul>\n</li>\n<li><strong>vaccinations-by-age-group</strong>：\n<ul>\n<li>包含属性： <code>location</code> ,  <code>date</code> ,  <code>age_group</code> ,  <code>people_vaccinated_per_hundred</code> ,  <code>people_fully_vaccinated_per_hundred</code> ,  <code>people_with_booster_per_hundred</code></li>\n<li>关系： <code>(location, date, age_group) -&gt; people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred, people_with_booster_per_hundred</code></li>\n</ul>\n</li>\n<li><strong>vaccinations-by-manufacturer</strong>：\n<ul>\n<li>包含属性： <code>location</code> ,  <code>date</code> ,  <code>vaccine</code> ,  <code>total_vaccinations</code></li>\n<li>关系： <code>(location, date, vaccine) -&gt; total_vaccinations</code></li>\n</ul>\n</li>\n<li><strong>locations</strong>：\n<ul>\n<li>包含属性： <code>location</code> ,  <code>iso_code</code> ,  <code>vaccines</code> ,  <code>last_observation_date</code> ,  <code>source_name</code> ,  <code>source_website</code></li>\n<li>关系： <code>(location, last_observation_date) -&gt; vaccines, source_website</code>  和  <code>(source_website) -&gt; source_name</code></li>\n</ul>\n</li>\n<li><strong>vaccinations</strong>：\n<ul>\n<li>包含属性： <code>location</code> ,  <code>iso_code</code> ,  <code>total_vaccinations</code> ,  <code>people_vaccinated</code> ,  <code>people_fully_vaccinated</code> ,  <code>total_boosters</code> ,  <code>daily_vaccinations_raw</code> ,  <code>daily_vaccinations</code> ,  <code>date</code> ,  <code>total_vaccinations_per_hundred</code> ,  <code>people_vaccinated_per_hundred</code> ,  <code>people_fully_vaccinated_per_hundred</code> ,  <code>total_boosters_per_hundred</code> ,  <code>daily_vaccinations_per_million</code> ,  <code>daily_people_vaccinated</code> ,  <code>daily_people_vaccinated_per_hundred</code></li>\n<li>关系： <code>(location, date) -&gt; people_vaccinated, people_fully_vaccinated, total_boosters, daily_vaccinations, people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred, total_boosters_per_hundred, daily_vaccinations_per_million, daily_people_vaccinated, daily_people_vaccinated_per_hundred</code></li>\n</ul>\n</li>\n<li><strong>us_state_vaccinations</strong>：\n<ul>\n<li>包含属性： <code>location</code> ,  <code>date</code> ,  <code>total_vaccinations</code> ,  <code>people_vaccinated</code> ,  <code>people_fully_vaccinated</code> ,  <code>total_boosters</code> ,  <code>daily_vaccinations_raw</code> ,  <code>daily_vaccinations</code> ,  <code>total_distributed</code> ,  <code>total_vaccinations_per_hundred</code> ,  <code>people_vaccinated_per_hundred</code> ,  <code>people_fully_vaccinated_per_hundred</code> ,  <code>total_boosters_per_hundred</code> ,  <code>share_doses_used</code> ,  <code>daily_people_vaccinated</code> ,  <code>distributed_per_hundred</code></li>\n<li>关系： <code>(location, date) -&gt; people_vaccinated, people_fully_vaccinated, total_boosters, daily_vaccinations, total_distributed, people_fully_vaccinated_per_hundred, total_boosters_per_hundred, share_doses_used, daily_people_vaccinated, people_vaccinated_per_hundred, distributed_per_hundred</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"数据库实现\"><a class=\"markdownIt-Anchor\" href=\"#数据库实现\">#</a> 数据库实现</h3>\n<h4 id=\"概念模型设计\"><a class=\"markdownIt-Anchor\" href=\"#概念模型设计\">#</a> 概念模型设计</h4>\n<p>使用实体关系图 (ERD) 进行概念模型设计，将数据重要性与残缺程度较好的属性用黑色表示，其他属性存在较大分析困难度，用浅色表示。</p>\n<h4 id=\"数据库模式映射\"><a class=\"markdownIt-Anchor\" href=\"#数据库模式映射\">#</a> 数据库模式映射</h4>\n<p>使用七步映射法 (7-step mapping process) 将 ERD 映射为数据库模式，创建以下表项：</p>\n<ol>\n<li>\n<p>Source_Website</p>\n<ul>\n<li>属性： <code>url (主键)</code> ,  <code>source_name</code></li>\n</ul>\n</li>\n<li>\n<p>Record_vaccine</p>\n<ul>\n<li>属性： <code>location (主键)</code> ,  <code>date (主键)</code> ,  <code>vaccine (主键)</code> ,  <code>total_vaccines</code></li>\n</ul>\n</li>\n<li>\n<p>Record_age</p>\n<ul>\n<li>属性： <code>location (主键)</code> ,  <code>date (主键)</code> ,  <code>age_group (主键)</code> ,  <code>people_vaccinated_per_hundred</code> ,  <code>people_fully_vaccinated_per_hundred</code> ,  <code>total_boosters_per_hundred</code></li>\n</ul>\n</li>\n<li>\n<p>Location_Data_Total</p>\n<ul>\n<li>属性： <code>location (主键)</code> ,  <code>date (主键)</code> ,  <code>vaccines</code> ,  <code>source_website (外键)</code> ,  <code>total_vaccination</code> ,  <code>total_distributed</code> ,  <code>share_doses_used</code></li>\n</ul>\n</li>\n<li>\n<p>Location_Data_non_total</p>\n<ul>\n<li>属性： <code>location (主键)</code> ,  <code>date (主键)</code> ,  <code>source_website (外键)</code> ,  <code>people_vaccinated</code> ,  <code>people_fully_vaccinated</code> ,  <code>total_boosters</code> ,  <code>daily_people_vaccinated</code> ,  <code>daily_vaccinations</code></li>\n</ul>\n</li>\n<li>\n<p>US_Location</p>\n<ul>\n<li>属性： <code>location (主键)</code></li>\n</ul>\n</li>\n<li>\n<p>ISO_Location</p>\n<ul>\n<li>属性： <code>location (主键)</code> ,  <code>iso_code</code></li>\n</ul>\n</li>\n<li>\n<p>Location_Data_Per</p>\n<ul>\n<li>属性： <code>location (主键)</code> ,  <code>date (主键)</code> ,  <code>daily_vaccinations_raw</code> ,  <code>total_vaccinations_per_hundred</code> ,  <code>people_vaccinated_per_hundred</code> ,  <code>people_fully_vaccinated_per_hundred</code> ,  <code>total_boosters_per_hundred</code> ,  <code>daily_vaccinations_per_million</code> ,  <code>daily_people_vaccinated_per_hundred</code> ,  <code>distributed_per_hundred</code></li>\n</ul>\n<h4 id=\"表结构的-sql-代码\"><a class=\"markdownIt-Anchor\" href=\"#表结构的-sql-代码\">#</a> 表结构的 SQL 代码</h4>\n<p>以下是创建上述表的 SQL 代码示例：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Source_Website (</span><br><span class=\"line\">    URL_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    NAME_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">30</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Record_vaccine (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    DATE_ DATETIME <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    VACCINE <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    TOTAL_VACCINES <span class=\"type\">INT</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Record_age (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    DATE_ DATETIME <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    AGE_GROUP <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    PEOPLE_VACCINATED_HUND <span class=\"type\">INT</span>,</span><br><span class=\"line\">    PEOPLE_FULLY_VACCINATED_HUND <span class=\"type\">INT</span>,</span><br><span class=\"line\">    TOTAL_BOOSTERS_HUND <span class=\"type\">INT</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Location_Data_Total (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    DATE_ DATETIME <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    VACCINES <span class=\"type\">VARCHAR</span>(<span class=\"number\">200</span>),</span><br><span class=\"line\">    SOURCE_WEBSITE <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    TOTAL_VACCINATION <span class=\"type\">INT</span>,</span><br><span class=\"line\">    TOTAL_DISTRIBUTED <span class=\"type\">INT</span>,</span><br><span class=\"line\">    SHARE_DOSES_USED <span class=\"type\">INT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (SOURCE_WEBSITE) <span class=\"keyword\">REFERENCES</span> Source_Website(URL_)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Location_Data_non_total (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    DATE_ DATETIME <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    SOURCE_WEBSITE <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    PEOPLE_VACCINATED <span class=\"type\">INT</span>,</span><br><span class=\"line\">    PEOPLE_FULLY_VACCINATED <span class=\"type\">INT</span>,</span><br><span class=\"line\">    TOTAL_BOOSTERS <span class=\"type\">INT</span>,</span><br><span class=\"line\">    DAILY_PEOPLE_VACCINATED <span class=\"type\">INT</span>,</span><br><span class=\"line\">    DAILY_VACCINATIONS <span class=\"type\">INT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">FOREIGN</span> KEY (SOURCE_WEBSITE) <span class=\"keyword\">REFERENCES</span> Source_Website(URL_)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> US_Location (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ISO_Location (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    ISO_CODE <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> Location_Data_Per (</span><br><span class=\"line\">    LOCATION_ <span class=\"type\">VARCHAR</span>(<span class=\"number\">50</span>) <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    DATE_ DATETIME <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    DAILY_VACCINATIONS_RAW <span class=\"type\">INT</span>,</span><br><span class=\"line\">    TOTAL_VACCINATIONS_PER_HUNDRED <span class=\"type\">FLOAT</span>,</span><br><span class=\"line\">    PEOPLE_VACCINATED_PER_HUNDRED <span class=\"type\">FLOAT</span>,</span><br><span class=\"line\">    PEOPLE_FULLY_VACCINATED_PERHUNDRED <span class=\"type\">FLOAT</span>,</span><br><span class=\"line\">    TOTAL_BOOSTERS_PER_HUNDRED <span class=\"type\">FLOAT</span>,</span><br><span class=\"line\">    DAILY_VACCINATIONS_PER_MILION <span class=\"type\">INT</span>,</span><br><span class=\"line\">    DAILY_PEOPLE_VACCINATED_PER_HUNDRED <span class=\"type\">FLOAT</span>,</span><br><span class=\"line\">    DISTRIBUTED_PER_HUNDRED <span class=\"type\">FLOAT</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据库标准化\"><a class=\"markdownIt-Anchor\" href=\"#数据库标准化\">#</a> 数据库标准化</h3>\n<p>通过分析各表的属性关系，消除了冗余，确保所有表格均满足第三范式 (3NF)，以提高数据存储和查询的效率。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>本项目通过详细的数据分析与设计，构建了一个规范化的数据库模型，用于全球 COVID-19 疫苗接种数据的存储和分析。通过 ERD 设计与数据库模式映射，成功实现了数据的高效存储和查询。标准化过程有效地消除了数据冗余，提高了数据库的性能和可维护性。项目最终成果满足了所有设计要求，确保了数据的完整性和一致性。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "homework"
            ]
        },
        {
            "id": "https://enjundu.github.io/misc/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/",
            "url": "https://enjundu.github.io/misc/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/",
            "title": "数据结构实验",
            "date_published": "2024-07-03T14:41:31.000Z",
            "content_html": "<h1 id=\"数据结构实验\"><a class=\"markdownIt-Anchor\" href=\"#数据结构实验\">#</a> 数据结构实验</h1>\n<h2 id=\"实验要求\"><a class=\"markdownIt-Anchor\" href=\"#实验要求\">#</a> 实验要求</h2>\n<h3 id=\"采用单向环表实现约瑟夫环\"><a class=\"markdownIt-Anchor\" href=\"#采用单向环表实现约瑟夫环\">#</a> 采用单向环表实现约瑟夫环</h3>\n<ul>\n<li>从键盘输入整数 m，通过 create 函数生成一个具有 m 个结点的单向环表。环表中的结点编号依次为 1，2，……，m</li>\n<li>从键盘输入整数 s（1&lt;=s&lt;=m）和 n，从环表的第 s 个结点开始计数为 1，当计数到第 n 个结点时，输出该第 n 结点对应的编号，将该结点从环表中消除，从输出结点的下一个结点开始重新计数到 n，这样，不断进行计数，不断进行输出，直到输出了这个环表的全部结点为止</li>\n<li>例如，m=10，s=3，n=4。则输出序列为：6，10，4，9，5，2，1，3，8，7。</li>\n</ul>\n<h3 id=\"简单计算器\"><a class=\"markdownIt-Anchor\" href=\"#简单计算器\">#</a> 简单计算器</h3>\n<p>请按照四则运算加、减、乘、除、幂（^）和括号的优先关系和惯例，编写计算器程序。要求</p>\n<ul>\n<li>\n<p>从键盘输入一个完整的表达式，以回车作为表达式输入结束的标志</p>\n</li>\n<li>\n<p>输入表达式中的数值均为大于等于零的整数。中间的计算过程如果出现小数也只取整</p>\n</li>\n<li>\n<p>例如，输入：4+2*5=\t\t\t\t输出：14</p>\n<p>输入：(4+2)*(2-10)=\t\t\t输出：-48</p>\n</li>\n</ul>\n<h3 id=\"遍历二叉树\"><a class=\"markdownIt-Anchor\" href=\"#遍历二叉树\">#</a> 遍历二叉树</h3>\n<ul>\n<li>请输入一棵二叉树的扩展的前序序列，经过处理后生成一棵二叉树，然后对于该二叉树输出中序和后序遍历序列</li>\n<li>按层次遍历二叉树</li>\n</ul>\n<h3 id=\"排序算法\"><a class=\"markdownIt-Anchor\" href=\"#排序算法\">#</a> 排序算法</h3>\n<p>输入 10 个数，编程实现插入排序、快速排序、选择排序三类算法</p>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h4 id=\"实验一单向环表实现约瑟夫环\"><a class=\"markdownIt-Anchor\" href=\"#实验一单向环表实现约瑟夫环\">#</a> 实验一：单向环表实现约瑟夫环</h4>\n<p><strong>代码</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp复制代码<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>* next;</span><br><span class=\"line\">&#125; NODE;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">NODE* <span class=\"title\">create</span><span class=\"params\">(<span class=\"type\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    NODE *head = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    NODE *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    NODE *q = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    head = (NODE*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(NODE));</span><br><span class=\"line\">    head-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">        q = (NODE*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(NODE));</span><br><span class=\"line\">        q-&gt;data = i;</span><br><span class=\"line\">        p-&gt;next = q;</span><br><span class=\"line\">        p = q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p-&gt;next = head;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">josephus_circle</span><span class=\"params\">(NODE* head, <span class=\"type\">int</span> s, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    NODE *pre = head;</span><br><span class=\"line\">    NODE *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; s; i++) &#123;</span><br><span class=\"line\">        pre = pre-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pre-&gt;next != pre) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            p = pre;</span><br><span class=\"line\">            pre = pre-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, pre-&gt;data);</span><br><span class=\"line\">        p-&gt;next = pre-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(pre);</span><br><span class=\"line\">        pre = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, pre-&gt;data);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(pre);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, s, n;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入整数m：\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;m) != <span class=\"number\">1</span> || m &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;m输入错误——你应该输入大于零的自然数\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入整数s\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;s) != <span class=\"number\">1</span> || s &lt; <span class=\"number\">1</span> || s &gt; m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;s输入错误，请输入在1~m间的整数s\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入整数n\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n) != <span class=\"number\">1</span> || n &lt; <span class=\"number\">1</span> || n &gt; m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;n输入错误，请输入在1~m间的整数n\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    NODE *head = <span class=\"built_in\">create</span>(m);</span><br><span class=\"line\">    <span class=\"built_in\">josephus_circle</span>(head, s, n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>文档</strong></p>\n<ul>\n<li>需求分析：实现一个单向环表，输入 m、s、n，按约瑟夫环规则输出节点编号。</li>\n<li>概要设计：创建节点结构，定义创建和输出函数。</li>\n<li>详细设计：详述了结构体、创建函数、输出函数及主函数的实现步骤。</li>\n<li>调试分析：处理无输出问题和头结点地址更改问题。</li>\n<li>测试结果：成功输出预期结果。</li>\n</ul>\n<hr>\n<h4 id=\"实验二简单计算器\"><a class=\"markdownIt-Anchor\" href=\"#实验二简单计算器\">#</a> 实验二：简单计算器</h4>\n<p><strong>代码</strong></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp复制代码<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> *data;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(Stack *stack, <span class=\"type\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">    stack-&gt;data = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>) * maxSize);</span><br><span class=\"line\">    stack-&gt;size = maxSize;</span><br><span class=\"line\">    stack-&gt;top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">(Stack *stack, <span class=\"type\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack-&gt;top &lt; stack-&gt;size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        stack-&gt;data[++stack-&gt;top] = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">pop</span><span class=\"params\">(Stack *stack)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack-&gt;top &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack-&gt;data[stack-&gt;top--];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isBalanced</span><span class=\"params\">(<span class=\"type\">char</span> *expression)</span> </span>&#123;</span><br><span class=\"line\">    Stack stack;</span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(&amp;stack, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; expression[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> currentChar = expression[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentChar == <span class=\"string\">&#x27;(&#x27;</span> || currentChar == <span class=\"string\">&#x27;[&#x27;</span> || currentChar == <span class=\"string\">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(&amp;stack, currentChar);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentChar == <span class=\"string\">&#x27;)&#x27;</span> || currentChar == <span class=\"string\">&#x27;]&#x27;</span> || currentChar == <span class=\"string\">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> poppedChar = <span class=\"built_in\">pop</span>(&amp;stack);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((currentChar == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; poppedChar != <span class=\"string\">&#x27;(&#x27;</span>) ||</span><br><span class=\"line\">                (currentChar == <span class=\"string\">&#x27;]&#x27;</span> &amp;&amp; poppedChar != <span class=\"string\">&#x27;[&#x27;</span>) ||</span><br><span class=\"line\">                (currentChar == <span class=\"string\">&#x27;&#125;&#x27;</span> &amp;&amp; poppedChar != <span class=\"string\">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(stack.data);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(stack.data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack.top == <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Priority</span><span class=\"params\">(<span class=\"type\">char</span> a)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;^&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">temporary_result</span><span class=\"params\">(<span class=\"type\">char</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b + c;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b - c;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b * c;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> b / c;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;^&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(b, c);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Code to implement the calculator logic</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>文档</strong></p>\n<ul>\n<li>需求分析：实现支持加减乘除、幂运算和括号优先级的简单计算器。</li>\n<li>概要设计：定义栈结构和基本操作函数，编写括号匹配、优先级比较和基本运算函数。</li>\n<li>详细设计：详细阐述了各函数的设计和实现，包括栈操作、括号匹配和基本运算。</li>\n<li>调试分析：解决括号匹配和优先级处理中的错误。</li>\n<li>测试结果：实现预期功能，正确处理表达式。</li>\n</ul>\n<hr>\n<h4 id=\"实验三二叉树遍历\"><a class=\"markdownIt-Anchor\" href=\"#实验三二叉树遍历\">#</a> 实验三：二叉树遍历</h4>\n<p><strong>代码</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp复制代码<span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* left;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Number</span><span class=\"params\">(<span class=\"type\">char</span> *tree, <span class=\"type\">int</span>* index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tree[*index] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; tree[*index] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        number = number * <span class=\"number\">10</span> + (tree[*index] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        (*index)++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* <span class=\"built_in\">BuildTree</span>(<span class=\"type\">char</span>* tree, <span class=\"type\">int</span>* index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[*index] == <span class=\"string\">&#x27;\\0&#x27;</span> || tree[*index] == <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">        (*index)++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"built_in\">Number</span>(tree, index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* root = (<span class=\"keyword\">struct</span> TreeNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"keyword\">struct</span> TreeNode));</span><br><span class=\"line\">    root-&gt;data = num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tree[*index] == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">        (*index)++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;left = <span class=\"built_in\">BuildTree</span>(tree, index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tree[*index] == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">        (*index)++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root-&gt;right = <span class=\"built_in\">BuildTree</span>(tree, index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tree[*index] == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">        (*index)++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">midbianli</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">midbianli</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class=\"line\">        <span class=\"built_in\">midbianli</span>(root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">lastbianli</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">lastbianli</span>(root-&gt;left);</span><br><span class=\"line\">        <span class=\"built_in\">lastbianli</span>(root-&gt;right);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, root-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">levelorderbianli</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* queue[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    queue[b++] = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (a &lt; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* temp = queue[a++];</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;left != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            queue[b++] = temp-&gt;left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp-&gt;right != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            queue[b++] = temp-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> tree[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%[^\\n]&quot;</span>, tree);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">TreeNode</span>* root = <span class=\"built_in\">BuildTree</span>(tree, &amp;index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;中序遍历为：&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">midbianli</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;后序遍历为：&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">lastbianli</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;层次遍历为：&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">levelorderbianli</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>文档</strong></p>\n<ul>\n<li>需求分析：实现二叉树的扩展前序序列构建，并进行中序、后序和层次遍历。</li>\n<li>概要设计：定义二叉树节点结构和构建函数，实现不同遍历方法。</li>\n<li>详细设计：详细描述了二叉树的构建和遍历方法，包括中序、后序和层次遍历。</li>\n<li>调试分析：解决输入处理和节点构建中的问题。</li>\n<li>测试结果：成功实现二叉树遍历，输出预期结果。</li>\n</ul>\n<hr>\n<h4 id=\"实验四排序算法\"><a class=\"markdownIt-Anchor\" href=\"#实验四排序算法\">#</a> 实验四：排序算法</h4>\n<p><strong>代码</strong></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp复制代码#<span class=\"keyword\">include</span> &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> print(<span class=\"type\">int</span> arr[<span class=\"number\">10</span>], <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        printf(&quot;%d &quot;, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> InsertionSort(<span class=\"type\">int</span> arr[<span class=\"number\">10</span>], <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j, <span class=\"keyword\">temp</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span> &amp;&amp; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[k] &lt; arr[j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">temp</span> = arr[k];</span><br><span class=\"line\">            arr[k] = arr[j];</span><br><span class=\"line\">            arr[j] = <span class=\"keyword\">temp</span>;</span><br><span class=\"line\">            j<span class=\"comment\">--;</span></span><br><span class=\"line\">            k<span class=\"comment\">--;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> QuickSort(<span class=\"type\">int</span> arr[<span class=\"number\">10</span>], <span class=\"type\">int</span> l, <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l + <span class=\"number\">1</span> &gt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> first = l, last = n - <span class=\"number\">1</span>, key = arr[first];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (first &lt; last) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (first &lt; last &amp;&amp; arr[last] &gt;= key) &#123;</span><br><span class=\"line\">            last<span class=\"comment\">--;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[first] = arr[last];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (first &lt; last &amp;&amp; arr[first] &lt; key) &#123;</span><br><span class=\"line\">            first++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[last] = arr[first];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr[first] = key;</span><br><span class=\"line\">    QuickSort(arr, l, first);</span><br><span class=\"line\">    QuickSort(arr, first + <span class=\"number\">1</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> SelectionSort(<span class=\"type\">int</span> arr[<span class=\"number\">10</span>], <span class=\"type\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"keyword\">temp</span>, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">temp</span> = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[<span class=\"keyword\">temp</span>] &gt; arr[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">temp</span> = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        k = arr[i];</span><br><span class=\"line\">        arr[i] = arr[<span class=\"keyword\">temp</span>];</span><br><span class=\"line\">        arr[<span class=\"keyword\">temp</span>] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main() &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr1[<span class=\"number\">10</span>], arr2[<span class=\"number\">10</span>], arr3[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        scanf(&quot;%d&quot;, &amp;arr1[i]);</span><br><span class=\"line\">        arr2[i] = arr1[i];</span><br><span class=\"line\">        arr3[i] = arr1[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    InsertionSort(arr1, <span class=\"number\">10</span>);</span><br><span class=\"line\">    printf(&quot;插入排序为：&quot;);</span><br><span class=\"line\">    print(arr1, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    QuickSort(arr2, <span class=\"number\">0</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    printf(&quot;快速排序为:&quot;);</span><br><span class=\"line\">    print(arr2, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    SelectionSort(arr3, <span class=\"number\">10</span>);</span><br><span class=\"line\">    printf(&quot;选择排序为：&quot;);</span><br><span class=\"line\">    print(arr3, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>文档</strong></p>\n<ul>\n<li>需求分析：实现插入排序、快速排序和选择排序三种算法。</li>\n<li>概要设计：定义排序算法函数和打印函数。</li>\n<li>详细设计：详细描述了每种排序算法的实现步骤，包括插入排序、快速排序和选择排序。</li>\n<li>调试分析：解决选择排序中 temp 值指代错误的问题。</li>\n<li>测试结果：成功实现三种排序算法，输出预期结果。</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "homework"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEA/4%E4%BA%A7%E7%94%9F%E4%B8%83%E8%89%B2%E7%81%AF/",
            "url": "https://enjundu.github.io/ECEA/4%E4%BA%A7%E7%94%9F%E4%B8%83%E8%89%B2%E7%81%AF/",
            "title": "Generate colorful lights",
            "date_published": "2024-07-03T10:43:21.000Z",
            "content_html": "<h1 id=\"generate-colorful-lights\"><a class=\"markdownIt-Anchor\" href=\"#generate-colorful-lights\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvRUNFQS1wcmFjdGljZS1CSVQtY29tcHV0ZXItcHJvZ3JhbW1pbmc=\">Generate colorful lights</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<ul>\n<li>产生七色灯</li>\n<li>以 TIM3 输出 PWM，控制全彩 LED 灯变换颜色</li>\n<li>以另一个 TIM 作为计数器，每 1s 产生 1 次中断</li>\n<li>以中断控制一个状态机，改变全彩灯的 CCR</li>\n<li>达到效果：赤 - 橙 - 黄 - 绿 - 青 - 蓝 - 紫，七种颜色循环切换，每 1s 切换一个颜色</li>\n</ul>\n<h2 id=\"user\"><a class=\"markdownIt-Anchor\" href=\"#user\">#</a> USER</h2>\n<h3 id=\"mainc\"><a class=\"markdownIt-Anchor\" href=\"#mainc\">#</a> main.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LED_PWM.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//Ensure interrupt priority</span></span><br><span class=\"line\">\t\tNVIC_InitTypeDef NVIC_InitStructure;</span><br><span class=\"line\">\t\tNVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;</span><br><span class=\"line\">\t\tNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\tNVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class=\"line\">\t\tNVIC_Init(&amp;NVIC_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    COLOR_TIMx_GPIO_Config();</span><br><span class=\"line\">    COLOR_PWM_Config();</span><br><span class=\"line\">    COLOR_TIMx4_Config();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"led_pwmc\"><a class=\"markdownIt-Anchor\" href=\"#led_pwmc\">#</a> LED_PWM.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;LED_PWM.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_gpio.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_tim.h&quot;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">RCC_Configuration</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tRCC_Configuration();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tRCC_APB2PeriphClockCmd(COLOR_TIM_GPIO_CLK, ENABLE);</span><br><span class=\"line\">\tGPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tGPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// red</span></span><br><span class=\"line\">    GPIO_InitStructure.GPIO_Pin = COLOR_RED_TIM_LED_PIN;</span><br><span class=\"line\">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class=\"line\">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class=\"line\">    GPIO_Init(COLOR_RED_TIM_LED_PORT, &amp;GPIO_InitStructure);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// green</span></span><br><span class=\"line\">    GPIO_InitStructure.GPIO_Pin = COLOR_GREEN_TIM_LED_PIN;</span><br><span class=\"line\">    GPIO_Init(COLOR_GREEN_TIM_LED_PORT, &amp;GPIO_InitStructure);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// blue</span></span><br><span class=\"line\">    GPIO_InitStructure.GPIO_Pin = COLOR_BLUE_TIM_LED_PIN;</span><br><span class=\"line\">    GPIO_Init(COLOR_BLUE_TIM_LED_PORT, &amp;GPIO_InitStructure);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_PWM_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tRCC_APB1PeriphClockCmd(COLOR_TIM_CLK,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_Period = <span class=\"number\">255</span>;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_Prescaler = <span class=\"number\">4000</span>;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class=\"line\">\tTIM_TimeBaseInit(COLOR_TIMx,&amp;TIM_TimeBaseStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_OCInitTypeDef TIM_OCInitStucture;</span><br><span class=\"line\">\tTIM_OCInitStucture.TIM_OCMode = TIM_OCMode_PWM1;</span><br><span class=\"line\">\tTIM_OCInitStucture.TIM_OutputState = TIM_OutputState_Enable;</span><br><span class=\"line\">\tTIM_OCInitStucture.TIM_Pulse = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tTIM_OCInitStucture.TIM_OCPolarity = TIM_OCPolarity_Low;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//  OC2 red</span></span><br><span class=\"line\">    TIM_OC2Init(COLOR_TIMx, &amp;TIM_OCInitStucture);</span><br><span class=\"line\">    TIM_OC2PreloadConfig(COLOR_TIMx, TIM_OCPreload_Enable);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  OC3 green</span></span><br><span class=\"line\">    TIM_OC3Init(COLOR_TIMx, &amp;TIM_OCInitStucture);</span><br><span class=\"line\">    TIM_OC3PreloadConfig(COLOR_TIMx, TIM_OCPreload_Enable);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  OC4 blue</span></span><br><span class=\"line\">    TIM_OC4Init(COLOR_TIMx, &amp;TIM_OCInitStucture);</span><br><span class=\"line\">    TIM_OC4PreloadConfig(COLOR_TIMx, TIM_OCPreload_Enable);</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_ARRPreloadConfig(COLOR_TIMx,ENABLE);</span><br><span class=\"line\">\tTIM_Cmd(COLOR_TIMx,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx4_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class=\"line\">    RCC_APB1PeriphClockCmd(COLOR_TIM4_CLK, ENABLE);</span><br><span class=\"line\"><span class=\"comment\">/*Clock Frequency: Assuming the system clock frequency is 72 MHz.</span></span><br><span class=\"line\"><span class=\"comment\">\tPrescaler Value: The prescaler is set to 10000 - 1.</span></span><br><span class=\"line\"><span class=\"comment\">\tPeriod Value: The period is set to 7200 - 1.</span></span><br><span class=\"line\"><span class=\"comment\">\tConsequently, the timer clock frequency after prescaling is 7.2 kHz (72 MHz / 10000).</span></span><br><span class=\"line\"><span class=\"comment\">\tThe timer starts counting from 0 and triggers an interrupt when it reaches a count of 7199 (7200 - 1). </span></span><br><span class=\"line\"><span class=\"comment\">\tThe time interval can be calculated as follows:</span></span><br><span class=\"line\"><span class=\"comment\">\tTime = Number of Periods / Timer Clock Frequency</span></span><br><span class=\"line\"><span class=\"comment\">\tTime = 7199 / 7200 ˜ 0.999722 seconds</span></span><br><span class=\"line\"><span class=\"comment\">\tTherefore, in practice, the timer will trigger an interrupt after approximately 0.999722 </span></span><br><span class=\"line\"><span class=\"comment\">\tseconds, which is close to 1 second.*/</span></span><br><span class=\"line\">    TIM_TimeBaseStructure.TIM_Period = <span class=\"number\">7200</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    TIM_TimeBaseStructure.TIM_Prescaler =<span class=\"number\">10000</span> - <span class=\"number\">1</span>; </span><br><span class=\"line\">\t</span><br><span class=\"line\">    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;</span><br><span class=\"line\">    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class=\"line\">    TIM_TimeBaseInit(COLOR_TIMx4, &amp;TIM_TimeBaseStructure);</span><br><span class=\"line\"></span><br><span class=\"line\">    TIM_ITConfig(COLOR_TIMx4, TIM_IT_Update, ENABLE); <span class=\"comment\">// Enable update interrupt</span></span><br><span class=\"line\">    TIM_Cmd(COLOR_TIMx4, ENABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add these definitions at the beginning of your .c file</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">    COLOR_RED,</span><br><span class=\"line\">    COLOR_ORANGE,</span><br><span class=\"line\">    COLOR_YELLOW,</span><br><span class=\"line\">    COLOR_GREEN,</span><br><span class=\"line\">    COLOR_CYAN,</span><br><span class=\"line\">    COLOR_BLUE,</span><br><span class=\"line\">    COLOR_PURPLE</span><br><span class=\"line\">&#125; ColorState;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> currentColor=<span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">TIM4_IRQHandler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TIM_GetITStatus(COLOR_TIMx4, TIM_IT_Update) != RESET)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TIM_ClearITPendingBit(COLOR_TIMx4, TIM_IT_Update);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Update the current color state</span></span><br><span class=\"line\">        currentColor = (currentColor + <span class=\"number\">1</span>) % <span class=\"number\">7</span>; <span class=\"comment\">// Cycle through 0 to 6</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Update the PWM values based on the current color state</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (currentColor) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_RED:</span><br><span class=\"line\">        COLOR_TIMx-&gt;CCR2 = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_ORANGE:</span><br><span class=\"line\">        COLOR_TIMx-&gt;CCR2 = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*In fact, when the value of CCR3 is set to 128, it represents the standard RGB orange color parameter. </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tHowever, after visual confirmation, setting it to 97 gives a color that more closely resembles orange. </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\tTherefore, I chose to set it to 97.*/</span></span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">97</span>\t;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_YELLOW:</span><br><span class=\"line\">        COLOR_TIMx-&gt;CCR2 = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_GREEN:</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_CYAN:</span><br><span class=\"line\">        COLOR_TIMx-&gt;CCR2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_BLUE:</span><br><span class=\"line\">        COLOR_TIMx-&gt;CCR2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> COLOR_PURPLE:</span><br><span class=\"line\">        COLOR_TIMx-&gt;CCR2 = <span class=\"number\">128</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tCOLOR_TIMx-&gt;CCR4 = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"led_pwmh\"><a class=\"markdownIt-Anchor\" href=\"#led_pwmh\">#</a> LED_PWM.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LED_PWM_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_PWM_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIM_GPIO_CLK   RCC_APB2Periph_GPIOB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_RED_TIM_LED_PIN      GPIO_Pin_5  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_GREEN_TIM_LED_PIN    GPIO_Pin_0  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_BLUE_TIM_LED_PIN     GPIO_Pin_1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_RED_TIM_LED_PORT     GPIOB</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_GREEN_TIM_LED_PORT   GPIOB</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_BLUE_TIM_LED_PORT    GPIOB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIM_CLK             RCC_APB1Periph_TIM3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIMx                TIM3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIM4_CLK             RCC_APB1Periph_TIM4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIMx4                TIM4</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_PWM_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx4_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">TIM1_IRQHandler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEA/3%E4%B8%B2%E5%8F%A3%E6%89%93%E5%8D%B0/",
            "url": "https://enjundu.github.io/ECEA/3%E4%B8%B2%E5%8F%A3%E6%89%93%E5%8D%B0/",
            "title": "Connect serial port to print text",
            "date_published": "2024-07-03T10:43:21.000Z",
            "content_html": "<h1 id=\"connect-serial-port-to-print-text\"><a class=\"markdownIt-Anchor\" href=\"#connect-serial-port-to-print-text\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvRUNFQS1wcmFjdGljZS1CSVQtY29tcHV0ZXItcHJvZ3JhbW1pbmc=\">Connect serial port to print text</span></h1>\n<h2 id=\"实验要求\"><a class=\"markdownIt-Anchor\" href=\"#实验要求\">#</a> 实验要求</h2>\n<ul>\n<li>串口打印文本</li>\n<li>用直接配置串口的方式，向 PC 传输一句话</li>\n<li>在 FLASH 中存储一句话，并用 DMA 配置串口向 PC 传输</li>\n</ul>\n<h2 id=\"代码user\"><a class=\"markdownIt-Anchor\" href=\"#代码user\">#</a> 代码 User\\</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_usart.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define the starting address of the Flash&#x27;s storing room</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FLASH_STRING_ADDRESS 0x08008000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define the string which will be stored in FLASH</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> flashString[] = <span class=\"string\">&quot;And you are beautiful too!(sending from FLASH!)\\r\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    USART_Config();<span class=\"comment\">//initialization</span></span><br><span class=\"line\">\t\tUsart_SendString(USART1,<span class=\"string\">&quot;dgg is so handsome,isn&#x27;t he?&quot;</span>);</span><br><span class=\"line\"> <span class=\"comment\">// Store the string in FLASH</span></span><br><span class=\"line\">    FLASH_Unlock();<span class=\"comment\">//unlock the FLASH</span></span><br><span class=\"line\">    FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> flashAddress = FLASH_STRING_ADDRESS;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> *sourceAddress = flashString;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*sourceAddress) &#123;</span><br><span class=\"line\">        FLASH_ProgramWord(flashAddress, *sourceAddress);</span><br><span class=\"line\">        flashAddress += <span class=\"number\">4</span>; <span class=\"comment\">// Increment by 4 bytes for each word</span></span><br><span class=\"line\">        sourceAddress++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FLASH_Lock();<span class=\"comment\">//Lock the FLASH</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Transmit the stored string using DMA</span></span><br><span class=\"line\">    Usart_SendStringDMA(USART1, flashString);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"userusart\"><a class=\"markdownIt-Anchor\" href=\"#userusart\">#</a> User\\usart</h2>\n<h3 id=\"bsp_usartc\"><a class=\"markdownIt-Anchor\" href=\"#bsp_usartc\">#</a> bsp_usart.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_usart.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">USART_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_USART1,ENABLE);</span><br><span class=\"line\">  GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"comment\">//USART1 Tx(PA.09) </span></span><br><span class=\"line\">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; </span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class=\"line\">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class=\"line\">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class=\"line\">  <span class=\"comment\">//USART1 Rx(PA.10) </span></span><br><span class=\"line\">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; </span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; </span><br><span class=\"line\">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">  USART_InitTypeDef USART_InitStructure;</span><br><span class=\"line\">  <span class=\"comment\">//USART1</span></span><br><span class=\"line\">  USART_InitStructure.USART_BaudRate = <span class=\"number\">9600</span>; </span><br><span class=\"line\">  USART_InitStructure.USART_WordLength = USART_WordLength_8b; </span><br><span class=\"line\">  USART_InitStructure.USART_StopBits = USART_StopBits_2; </span><br><span class=\"line\">  USART_InitStructure.USART_Parity = USART_Parity_No; </span><br><span class=\"line\">  USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;</span><br><span class=\"line\">  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; </span><br><span class=\"line\">  USART_Init(USART1, &amp;USART_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">  USART_Cmd(USART1, ENABLE);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Usart_SendByte</span><span class=\"params\">(USART_TypeDef * pUSARTx, <span class=\"type\">uint8_t</span> ch)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  USART_SendData(pUSARTx, ch);  </span><br><span class=\"line\">  <span class=\"keyword\">while</span>(USART_GetFlagStatus(pUSARTx, USART_FLAG_TXE) == RESET);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Usart_SendString</span><span class=\"params\">(USART_TypeDef * pUSARTx, <span class=\"type\">char</span> *str)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Usart_SendByte(pUSARTx, *(str + k));</span><br><span class=\"line\">    k++;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">while</span>(*(str + k) != <span class=\"string\">&#x27;\\0&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(USART_GetFlagStatus(pUSARTx, USART_FLAG_TC) == RESET) </span><br><span class=\"line\">  &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Usart_SendStringDMA</span><span class=\"params\">(USART_TypeDef *pUSARTx, <span class=\"type\">const</span> <span class=\"type\">char</span> *str)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DMA_InitTypeDef DMA_InitStructure;</span><br><span class=\"line\">    <span class=\"comment\">// Configure DMA</span></span><br><span class=\"line\">    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    DMA_DeInit(DMA1_Channel4); <span class=\"comment\">// USART1 TX channel</span></span><br><span class=\"line\"></span><br><span class=\"line\">    DMA_InitStructure.DMA_PeripheralBaseAddr = (<span class=\"type\">uint32_t</span>)&amp;pUSARTx-&gt;DR;</span><br><span class=\"line\">    DMA_InitStructure.DMA_MemoryBaseAddr = (<span class=\"type\">uint32_t</span>)str;</span><br><span class=\"line\">    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST; <span class=\"comment\">// Transfer from FLASH to PC</span></span><br><span class=\"line\">    DMA_InitStructure.DMA_BufferSize = <span class=\"built_in\">strlen</span>(str);<span class=\"comment\">//Define using bytes of a string</span></span><br><span class=\"line\">    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;</span><br><span class=\"line\">    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;\t</span><br><span class=\"line\">    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;</span><br><span class=\"line\">    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;<span class=\"comment\">//Data will be transmitted in bytes from the source address to the destination address</span></span><br><span class=\"line\">    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;</span><br><span class=\"line\">    DMA_InitStructure.DMA_Priority = DMA_Priority_High;</span><br><span class=\"line\">    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable; <span class=\"comment\">// Memory to memory disabled</span></span><br><span class=\"line\">    DMA_Init(DMA1_Channel4, &amp;DMA_InitStructure);</span><br><span class=\"line\"></span><br><span class=\"line\">    USART_DMACmd(pUSARTx, USART_DMAReq_Tx, ENABLE);    <span class=\"comment\">// Open USART DMA TX</span></span><br><span class=\"line\"></span><br><span class=\"line\">    DMA_Cmd(DMA1_Channel4, ENABLE);    <span class=\"comment\">// Enable DMA channel</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"bsp_usarth\"><a class=\"markdownIt-Anchor\" href=\"#bsp_usarth\">#</a> bsp_usart.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> BSP_USART_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BSP_USART_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">USART_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Usart_SendByte</span><span class=\"params\">(USART_TypeDef * pUSARTx, <span class=\"type\">uint8_t</span> ch)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Usart_SendString</span><span class=\"params\">(USART_TypeDef * pUSARTx, <span class=\"type\">char</span> *str)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Usart_SendStringDMA</span><span class=\"params\">(USART_TypeDef *pUSARTx, <span class=\"type\">const</span> <span class=\"type\">char</span> *str)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// BSP_USART_H</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tool\"><a class=\"markdownIt-Anchor\" href=\"#tool\">#</a> tool:</h1>\n<p>SerialPortUtility.exe</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEA/1%E7%82%B9%E4%BA%AE%E7%81%AF/",
            "url": "https://enjundu.github.io/ECEA/1%E7%82%B9%E4%BA%AE%E7%81%AF/",
            "title": "LED lighting program",
            "date_published": "2024-07-03T09:43:21.000Z",
            "content_html": "<h1 id=\"led-lighting-program\"><a class=\"markdownIt-Anchor\" href=\"#led-lighting-program\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvRUNFQS1wcmFjdGljZS1CSVQtY29tcHV0ZXItcHJvZ3JhbW1pbmc=\">LED lighting program</span></h1>\n<h2 id=\"设计要求\"><a class=\"markdownIt-Anchor\" href=\"#设计要求\">#</a> 设计要求</h2>\n<ul>\n<li><strong>用按键控制 LED 发光类型</strong></li>\n<li>按 KEY1，控制 LED 灯在 “红光 - 绿光 - 蓝光 - 白光” 四种方式之间切换</li>\n<li>按 KEY2，控制 LED 灯熄灭</li>\n</ul>\n<h2 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h2>\n<h2 id=\"hardwarebeep\"><a class=\"markdownIt-Anchor\" href=\"#hardwarebeep\">#</a> \\Hardware\\beep</h2>\n<h3 id=\"beepc\"><a class=\"markdownIt-Anchor\" href=\"#beepc\">#</a> beep.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;beep.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BEEP_Init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化配置GPIO模式和速度结构体</span></span><br><span class=\"line\">    GPIO_InitTypeDef GPIO_InitStruct;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//使能蜂鸣器时钟</span></span><br><span class=\"line\">    RCC_APB2PeriphClockCmd(BEEP_CLK, ENABLE );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//配置端口输出并初始化</span></span><br><span class=\"line\">    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class=\"line\">    GPIO_InitStruct.GPIO_Pin = BEEP_PIN;</span><br><span class=\"line\">    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;      </span><br><span class=\"line\">    GPIO_Init( BEEP_PORT, &amp;GPIO_InitStruct);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//蜂鸣器初始化后不响</span></span><br><span class=\"line\">    BEEP(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"beeph\"><a class=\"markdownIt-Anchor\" href=\"#beeph\">#</a> beep.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __BEEP_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __BEEP_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义蜂鸣器端口、引脚和时钟，对应PA8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BEEP_PIN   GPIO_Pin_8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BEEP_PORT  GPIOA</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BEEP_CLK   RCC_APB2Periph_GPIOA</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BEEP（ON/OFF）控制蜂鸣器开关</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ON  1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OFF 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BEEP(x) <span class=\"keyword\">if</span> (x) GPIO_SetBits(BEEP_PORT,BEEP_PIN);\\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"keyword\">else</span>  GPIO_ResetBits( BEEP_PORT,BEEP_PIN);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明蜂鸣器初始化函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BEEP_Init</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"project\"><a class=\"markdownIt-Anchor\" href=\"#project\">#</a> \\Project</h2>\n<h3 id=\"delayc\"><a class=\"markdownIt-Anchor\" href=\"#delayc\">#</a> Delay.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  ?????</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  xus ????,??:0~233015</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval ?</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_us</span><span class=\"params\">(<span class=\"type\">uint32_t</span> xus)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tSysTick-&gt;LOAD = <span class=\"number\">72</span> * xus;\t\t\t\t<span class=\"comment\">//????????</span></span><br><span class=\"line\">\tSysTick-&gt;VAL = <span class=\"number\">0x00</span>;\t\t\t\t\t<span class=\"comment\">//???????</span></span><br><span class=\"line\">\tSysTick-&gt;CTRL = <span class=\"number\">0x00000005</span>;\t\t\t\t<span class=\"comment\">//??????HCLK,?????</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!(SysTick-&gt;CTRL &amp; <span class=\"number\">0x00010000</span>));\t<span class=\"comment\">//?????0</span></span><br><span class=\"line\">\tSysTick-&gt;CTRL = <span class=\"number\">0x00000004</span>;\t\t\t\t<span class=\"comment\">//?????</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  ?????</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  xms ????,??:0~4294967295</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval ?</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_ms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> xms)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(xms--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDelay_us(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  ????</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  xs ????,??:0~4294967295</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval ?</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_s</span><span class=\"params\">(<span class=\"type\">uint32_t</span> xs)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(xs--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDelay_ms(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"dlayh\"><a class=\"markdownIt-Anchor\" href=\"#dlayh\">#</a> Dlay.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __DELAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __DELAY_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_us</span><span class=\"params\">(<span class=\"type\">uint32_t</span> us)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_ms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> ms)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_s</span><span class=\"params\">(<span class=\"type\">uint32_t</span> s)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"newstartc\"><a class=\"markdownIt-Anchor\" href=\"#newstartc\">#</a> newstart.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">sbit FM = PA8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\tFM=<span class=\"number\">1</span>;<span class=\"comment\">//1.08us</span></span><br><span class=\"line\">\tFM=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mainc\"><a class=\"markdownIt-Anchor\" href=\"#mainc\">#</a> main.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_gpio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_led.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> <span class=\"title function_\">Key_Scan</span><span class=\"params\">(GPIO_TypeDef* GPIOx, <span class=\"type\">uint16_t</span> GPIO_Pin)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (GPIO_ReadInputDataBit(GPIOx, GPIO_Pin) == KEY_ON)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (GPIO_ReadInputDataBit(GPIOx, GPIO_Pin) == KEY_ON)<span class=\"comment\">//scan whether KEY_ON has been pushed</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> KEY_ON;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> KEY_OFF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay</span><span class=\"params\">(__IO u32 nCount)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LED_Color</span><span class=\"params\">(<span class=\"type\">uint8_t</span> color)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (color) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            LED_RED;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            LED_GREEN;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            LED_BLUE;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            LED_WHITE;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LED_GPIO_Config();</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> color = <span class=\"number\">-1</span>;    <span class=\"comment\">// 0: Red, 1: Green, 2: Blue, 3: White</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> prev_color = <span class=\"number\">-1</span>;   <span class=\"comment\">// Store the previous color for KEY2 functionality</span></span><br><span class=\"line\"></span><br><span class=\"line\">ff: <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Key_Scan(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//Detect KEY_ Is ON turned on to prevent KEY_ When ON is turned on, the light changes. Wait until the KEY1 key is pressed and bounces before changing the color</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (Key_Scan(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">            prev_color = color;</span><br><span class=\"line\"></span><br><span class=\"line\">            color = (color + <span class=\"number\">1</span>) % <span class=\"number\">4</span>;<span class=\"comment\">// use mod to simplize this project </span></span><br><span class=\"line\"></span><br><span class=\"line\">            LED_Color(color);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Key_Scan(KEY2_GPIO_PORT, KEY2_GPIO_PIN) == KEY_ON) &#123;</span><br><span class=\"line\">\t\t\t\t\t <span class=\"keyword\">while</span> (Key_Scan(KEY2_GPIO_PORT, KEY2_GPIO_PIN) == KEY_ON) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            LED_RGBOFF;<span class=\"comment\">//Turn off all lights</span></span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">goto</span> ff;<span class=\"comment\">//Enter the ff function and rerun</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"bsp_ledc\"><a class=\"markdownIt-Anchor\" href=\"#bsp_ledc\">#</a> bsp_led.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_led.h&quot;</span>   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LED_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*¶¨ÒåÒ»¸öGPIO_InitTypeDefÀàÐÍµÄ½á¹¹Ìå*/</span></span><br><span class=\"line\">\t\tGPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*¿ªÆôLED and KEYÏà¹ØµÄGPIOÍâÉèÊ±ÖÓ*/</span></span><br><span class=\"line\">\t\tRCC_APB2PeriphClockCmd( LED1_GPIO_CLK | LED2_GPIO_CLK | LED3_GPIO_CLK, ENABLE);</span><br><span class=\"line\">    RCC_APB2PeriphClockCmd(KEY1_GPIO_CLK | KEY2_GPIO_CLK | LED_GPIO_CLK, ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*Ñ¡ÔñÒª¿ØÖÆµÄGPIOÒý½Å*/</span></span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Pin = LED1_GPIO_PIN;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*ÉèÖÃÒý½ÅÄ£Ê½ÎªÍ¨ÓÃÍÆÍìÊä³ö*/</span></span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*ÉèÖÃÒý½ÅËÙÂÊÎª50MHz */</span>   </span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*µ÷ÓÃ¿âº¯Êý£¬³õÊ¼»¯GPIO*/</span></span><br><span class=\"line\">\t\tGPIO_Init(LED1_GPIO_PORT, &amp;GPIO_InitStructure);\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//Green</span></span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Pin = LED2_GPIO_PIN;</span><br><span class=\"line\">\t\tGPIO_Init(LED2_GPIO_PORT, &amp;GPIO_InitStructure);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//Blue</span></span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Pin = LED3_GPIO_PIN;</span><br><span class=\"line\">\t\tGPIO_Init(LED3_GPIO_PORT, &amp;GPIO_InitStructure);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* ¹Ø±ÕËùÓÐledµÆ\t*/</span></span><br><span class=\"line\">\t\tGPIO_SetBits(LED1_GPIO_PORT, LED1_GPIO_PIN);</span><br><span class=\"line\">\t\tGPIO_SetBits(LED2_GPIO_PORT, LED2_GPIO_PIN);\t </span><br><span class=\"line\">\t\tGPIO_SetBits(LED3_GPIO_PORT, LED3_GPIO_PIN);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"bsp_ledh\"><a class=\"markdownIt-Anchor\" href=\"#bsp_ledh\">#</a> bsp_led.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LED_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\t__LED_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define key1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY1_GPIO_CLK RCC_APB2Periph_GPIOA</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY1_GPIO_PORT GPIOA</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY1_GPIO_PIN GPIO_Pin_0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define key2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY2_GPIO_CLK RCC_APB2Periph_GPIOC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY2_GPIO_PORT GPIOC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY2_GPIO_PIN GPIO_Pin_13</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_GPIO_CLK RCC_APB2Periph_GPIOB</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_GPIO_PORT GPIOB</span></span><br><span class=\"line\"><span class=\"comment\">// R-ºìÉ«</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_GPIO_PORT    \tGPIOB\t\t\t              <span class=\"comment\">/* GPIO¶Ë¿Ú */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_GPIO_CLK \t    RCC_APB2Periph_GPIOB\t\t<span class=\"comment\">/* GPIO¶Ë¿ÚÊ±ÖÓ */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_GPIO_PIN\t\tGPIO_Pin_5\t\t\t        <span class=\"comment\">/* Á¬½Óµ½SCLÊ±ÖÓÏßµÄGPIO */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// G-ÂÌÉ«</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2_GPIO_PORT    \tGPIOB\t\t\t              <span class=\"comment\">/* GPIO¶Ë¿Ú */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2_GPIO_CLK \t    RCC_APB2Periph_GPIOB\t\t<span class=\"comment\">/* GPIO¶Ë¿ÚÊ±ÖÓ */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2_GPIO_PIN\t\tGPIO_Pin_0\t\t\t        <span class=\"comment\">/* Á¬½Óµ½SCLÊ±ÖÓÏßµÄGPIO */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// B-À¶É«</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED3_GPIO_PORT    \tGPIOB\t\t\t              <span class=\"comment\">/* GPIO¶Ë¿Ú */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED3_GPIO_CLK \t    RCC_APB2Periph_GPIOB\t\t<span class=\"comment\">/* GPIO¶Ë¿ÚÊ±ÖÓ */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED3_GPIO_PIN\t\tGPIO_Pin_1\t\t\t        <span class=\"comment\">/* Á¬½Óµ½SCLÊ±ÖÓÏßµÄGPIO */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** the macro definition to trigger the led on or off </span></span><br><span class=\"line\"><span class=\"comment\">  * 1 - off</span></span><br><span class=\"line\"><span class=\"comment\">  *0 - on</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ON 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OFF 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY_ON 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> KEY_OFF 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Ê¹ÓÃ±ê×¼µÄ¹Ì¼þ¿â¿ØÖÆIO*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1(a)\t<span class=\"keyword\">if</span> (a)\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_SetBits(LED1_GPIO_PORT,LED1_GPIO_PIN);\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\t<span class=\"keyword\">else</span>\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_ResetBits(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2(a)\t<span class=\"keyword\">if</span> (a)\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_SetBits(LED2_GPIO_PORT,LED2_GPIO_PIN);\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\t<span class=\"keyword\">else</span>\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_ResetBits(LED2_GPIO_PORT,LED2_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED3(a)\t<span class=\"keyword\">if</span> (a)\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_SetBits(LED3_GPIO_PORT,LED3_GPIO_PIN);\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\t<span class=\"keyword\">else</span>\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_ResetBits(LED3_GPIO_PORT,LED3_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Ö±½Ó²Ù×÷¼Ä´æÆ÷µÄ·½·¨¿ØÖÆIO */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tdigitalHi(p,i)\t\t &#123;p-&gt;BSRR=i;&#125;\t <span class=\"comment\">//Êä³öÎª¸ßµçÆ½\t\t</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> digitalLo(p,i)\t\t &#123;p-&gt;BRR=i;&#125;\t <span class=\"comment\">//Êä³öµÍµçÆ½</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> digitalToggle(p,i) &#123;p-&gt;ODR ^=i;&#125; <span class=\"comment\">//Êä³ö·´×ª×´Ì¬</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ¶¨Òå¿ØÖÆIOµÄºê */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_OFF\t\t   digitalHi(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_ON\t\t\t   digitalLo(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2_OFF\t\t   digitalHi(LED2_GPIO_PORT,LED2_GPIO_PIN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED2_ON\t\t\t   digitalLo(LED2_GPIO_PORT,LED2_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED3_OFF\t\t   digitalHi(LED3_GPIO_PORT,LED3_GPIO_PIN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED3_ON\t\t\t   digitalLo(LED3_GPIO_PORT,LED3_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ºì</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_RED  \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED1_ON;\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED2_OFF\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED3_OFF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ÂÌ</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_GREEN\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED1_OFF;\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED2_ON\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED3_OFF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//À¶</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_BLUE\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED1_OFF;\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED2_OFF\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED3_ON</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\"><span class=\"comment\">//°×(ºì+ÂÌ+À¶)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_WHITE\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED1_ON;\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED2_ON\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED3_ON</span></span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//ºÚ(È«²¿¹Ø±Õ)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_RGBOFF\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED1_OFF;\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED2_OFF\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tLED3_OFF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LED_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEA/2%E8%9C%82%E9%B8%A3%E5%99%A8%E6%8A%A5%E6%97%B6/",
            "url": "https://enjundu.github.io/ECEA/2%E8%9C%82%E9%B8%A3%E5%99%A8%E6%8A%A5%E6%97%B6/",
            "title": "The buzzer reports the time based on the student ID",
            "date_published": "2024-07-03T09:43:21.000Z",
            "content_html": "<h1 id=\"the-buzzer-reports-the-time-based-on-the-student-id\"><a class=\"markdownIt-Anchor\" href=\"#the-buzzer-reports-the-time-based-on-the-student-id\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvRUNFQS1wcmFjdGljZS1CSVQtY29tcHV0ZXItcHJvZ3JhbW1pbmc=\">The buzzer reports the time based on the student ID</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<p><strong>蜂鸣报时</strong></p>\n<ul>\n<li>写一个函数，使用 SysTick 方法，计时 0.25s</li>\n<li>使蜂鸣器产生 n 次短鸣 + 1 长鸣，n=mod (学号末位，5)+1</li>\n<li>短鸣的时间为 0.25s，长鸣时间为 1s，每次鸣响之间间隔 1s</li>\n<li>蜂鸣响起的同时，红色 LED 灯同时亮起</li>\n</ul>\n<h2 id=\"实验代码\"><a class=\"markdownIt-Anchor\" href=\"#实验代码\">#</a> 实验代码</h2>\n<h3 id=\"mainc\"><a class=\"markdownIt-Anchor\" href=\"#mainc\">#</a> main.c</h3>\n<p>如果要改代码的话更改 12 行的 while 函数即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_led.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;beep.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_systick.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t\tLED_GPIO_Config();\t</span><br><span class=\"line\">    BEEP_Init();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;<span class=\"number\">1</span>)\t<span class=\"comment\">/*My student number is 112022xxx5,which means  n=mod(5,5)+1=1*/</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        BEEP(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tLED1_ON;<span class=\"comment\">//light the red light</span></span><br><span class=\"line\">    SysTick_Delay_ms(<span class=\"number\">250</span>);</span><br><span class=\"line\">        BEEP(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\tLED1_OFF;<span class=\"comment\">// turn off the red light</span></span><br><span class=\"line\">\t\t\tSysTick_Delay_ms(<span class=\"number\">1000</span>);\t\t\t</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t\t\tBEEP(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tLED1_ON;</span><br><span class=\"line\">\t\t\tSysTick_Delay_ms(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\tBEEP(<span class=\"number\">0</span>); </span><br><span class=\"line\">\t\t\tLED1_OFF;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ledbsp_ledc\"><a class=\"markdownIt-Anchor\" href=\"#ledbsp_ledc\">#</a> led/bsp_led.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;bsp_led.h&quot;</span>   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LED_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t\tGPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tRCC_APB2PeriphClockCmd\t(LED1_GPIO_CLK,ENABLE);</span><br><span class=\"line\">\t\t<span class=\"comment\">/*Select the GPIO pin to be controlled*/</span>\t\t</span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Pin = LED1_GPIO_PIN;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*Set pin mode to push pull output?/</span></span><br><span class=\"line\"><span class=\"comment\">\t\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t/*Set pin speed to 50MHz */</span>   </span><br><span class=\"line\">\t\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*Calling library functions to initialize GPIO*/</span></span><br><span class=\"line\">\t\tGPIO_Init(LED1_GPIO_PORT, &amp;GPIO_InitStructure);\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*Turn off LED1 light*/</span></span><br><span class=\"line\">\t\tGPIO_SetBits(LED1_GPIO_PORT, LED1_GPIO_PIN);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ledbsp_ledh\"><a class=\"markdownIt-Anchor\" href=\"#ledbsp_ledh\">#</a> led/bsp_led.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __LED_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\t__LED_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// R-红色</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_GPIO_PORT    \tGPIOB\t\t\t              <span class=\"comment\">/* GPIO端口 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_GPIO_CLK \t    RCC_APB2Periph_GPIOB\t\t<span class=\"comment\">/* GPIO端口时钟 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_GPIO_PIN\t\tGPIO_Pin_5\t\t\t        <span class=\"comment\">/* 连接到SCL时钟线的GPIO */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ON  0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> OFF 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1(a)\t<span class=\"keyword\">if</span> (a)\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_SetBits(LED1_GPIO_PORT,LED1_GPIO_PIN);\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\t<span class=\"keyword\">else</span>\t\t\\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t\t\t\tGPIO_ResetBits(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tdigitalHi(p,i)\t\t &#123;p-&gt;BSRR=i;&#125;\t <span class=\"comment\">//输出为高电平\t\t</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> digitalLo(p,i)\t\t &#123;p-&gt;BRR=i;&#125;\t <span class=\"comment\">//输出低电平</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> digitalToggle(p,i) &#123;p-&gt;ODR ^=i;&#125; <span class=\"comment\">//输出反转状态</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_TOGGLE\t\t digitalToggle(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_OFF\t\t   digitalHi(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED1_ON\t\t\t   digitalLo(LED1_GPIO_PORT,LED1_GPIO_PIN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">LED_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEA/5%E4%BA%A7%E7%94%9F%E5%A4%9A%E5%BD%A9%E5%91%BC%E5%90%B8%E7%81%AF/",
            "url": "https://enjundu.github.io/ECEA/5%E4%BA%A7%E7%94%9F%E5%A4%9A%E5%BD%A9%E5%91%BC%E5%90%B8%E7%81%AF/",
            "title": "Breathing lamp",
            "date_published": "2024-07-03T09:43:21.000Z",
            "content_html": "<h1 id=\"breathing-lamp\"><a class=\"markdownIt-Anchor\" href=\"#breathing-lamp\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvRUNFQS1wcmFjdGljZS1CSVQtY29tcHV0ZXItcHJvZ3JhbW1pbmc=\">Breathing lamp</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<ul>\n<li><strong>产生多彩呼吸灯</strong></li>\n<li>产生 4 彩（红、绿、蓝、白）呼吸灯，呼吸周期为 1.x 秒（x 为学号尾数）</li>\n<li>CCR 更新周期不高于 0.2s<img data-src=\"https://s2.loli.net/2024/07/03/FxpCUfVZuQskcb9.png\" alt=\"image.png\"></li>\n</ul>\n<h2 id=\"user\"><a class=\"markdownIt-Anchor\" href=\"#user\">#</a> USER</h2>\n<h3 id=\"breath_ledc\"><a class=\"markdownIt-Anchor\" href=\"#breath_ledc\">#</a> breath_led.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;breath_led.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_gpio.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_tim.h&quot;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tRCC_APB2PeriphClockCmd (RCC_APB2Periph_AFIO,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tRCC_APB2PeriphClockCmd(COLOR_TIM_GPIO_CLK, ENABLE);</span><br><span class=\"line\">\tGPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tGPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">\t<span class=\"comment\">//red</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin = COLOR_RED_TIM_LED_PIN;</span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;</span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class=\"line\">\tGPIO_Init(COLOR_RED_TIM_LED_PORT,&amp;GPIO_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//green</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin = COLOR_GREEN_TIM_LED_PIN;</span><br><span class=\"line\">\tGPIO_Init(COLOR_GREEN_TIM_LED_PORT,&amp;GPIO_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//blue</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin = COLOR_BLUE_TIM_LED_PIN;</span><br><span class=\"line\">\tGPIO_Init(COLOR_BLUE_TIM_LED_PORT,&amp;GPIO_InitStructure);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx_Mode_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tRCC_APB1PeriphClockCmd(COLOR_TIM_CLK,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_Period = <span class=\"number\">255</span>;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_Prescaler = <span class=\"number\">7</span>;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;</span><br><span class=\"line\">\tTIM_TimeBaseInit(COLOR_TIM,&amp;TIM_TimeBaseStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_ARRPreloadConfig(COLOR_TIM,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_Cmd(COLOR_TIM,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_OCInitTypeDef\t\tTIM_OCInitStructure;</span><br><span class=\"line\">\tTIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;</span><br><span class=\"line\">\tTIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;</span><br><span class=\"line\">\tTIM_OCInitStructure.TIM_Pulse = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tTIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//  OC2 red</span></span><br><span class=\"line\">    TIM_OC2Init(COLOR_TIM, &amp;TIM_OCInitStructure);</span><br><span class=\"line\">    TIM_OC2PreloadConfig(COLOR_TIM, TIM_OCPreload_Enable);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  OC3 green</span></span><br><span class=\"line\">    TIM_OC3Init(COLOR_TIM, &amp;TIM_OCInitStructure);</span><br><span class=\"line\">    TIM_OC3PreloadConfig(COLOR_TIM, TIM_OCPreload_Enable);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  OC4 blue</span></span><br><span class=\"line\">    TIM_OC4Init(COLOR_TIM, &amp;TIM_OCInitStructure);</span><br><span class=\"line\">    TIM_OC4PreloadConfig(COLOR_TIM, TIM_OCPreload_Enable);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BASIC_TIM_Init</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tRCC_APB1PeriphClockCmd(BASIC_TIM_CLK,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">//Since the last digit of my student ID is 5, the breathing LED blink period should be 1.5 seconds. The calculation is as follows:</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/*Target duration = 1.5 seconds = 1500 milliseconds</span></span><br><span class=\"line\"><span class=\"comment\">Timer clock frequency = 72 MHz = 72,000,000 Hz</span></span><br><span class=\"line\"><span class=\"comment\">Counting frequency per second = 10 times</span></span><br><span class=\"line\"><span class=\"comment\">Counting times = 10 times/second * 1.5 seconds = 15 times</span></span><br><span class=\"line\"><span class=\"comment\">Prescaler = (Timer clock frequency * Target duration) / Counting times - 1</span></span><br><span class=\"line\"><span class=\"comment\">Period = Counting times - 1</span></span><br><span class=\"line\"><span class=\"comment\">According to the calculations above, the prescaler is approximately 4800000, and the period is 14.*/</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_Prescaler = <span class=\"number\">4800000</span>;</span><br><span class=\"line\">\tTIM_TimeBaseStructure.TIM_Period = <span class=\"number\">14</span>;</span><br><span class=\"line\">\tTIM_TimeBaseInit(BASIC_TIM,&amp;TIM_TimeBaseStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_ARRPreloadConfig(BASIC_TIM,ENABLE);</span><br><span class=\"line\">\tTIM_Cmd(BASIC_TIM,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTIM_ClearFlag(BASIC_TIM,TIM_FLAG_Update);</span><br><span class=\"line\">\tTIM_ITConfig(BASIC_TIM,TIM_IT_Update,ENABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BASIC_TIM_NVIC_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNVIC_InitTypeDef NVIC_InitStructure;</span><br><span class=\"line\">\tNVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannel = TIM6_IRQn;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;</span><br><span class=\"line\">\tNVIC_Init(&amp;NVIC_InitStructure);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ColorState enumeration to represent different colors</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> &#123;</span></span><br><span class=\"line\">    COLOR_RED,</span><br><span class=\"line\">    COLOR_GREEN,</span><br><span class=\"line\">    COLOR_BLUE,</span><br><span class=\"line\">    COLOR_WHITE</span><br><span class=\"line\">&#125; ColorState;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint16_t</span> breathCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> breathDirection = <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> currentColor=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">TIM6_IRQHandler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TIM_GetITStatus(BASIC_TIM, TIM_IT_Update) != RESET)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TIM_ClearITPendingBit(BASIC_TIM, TIM_IT_Update);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Update the PWM duty cycle (CCR values) based on the currentColor</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (currentColor) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> COLOR_RED:</span><br><span class=\"line\">                TIM_SetCompare2(COLOR_TIM, breathCounter); <span class=\"comment\">// Red</span></span><br><span class=\"line\">                TIM_SetCompare3(COLOR_TIM, <span class=\"number\">0</span>);</span><br><span class=\"line\">                TIM_SetCompare4(COLOR_TIM, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> COLOR_GREEN:</span><br><span class=\"line\">                TIM_SetCompare2(COLOR_TIM, <span class=\"number\">0</span>);</span><br><span class=\"line\">                TIM_SetCompare3(COLOR_TIM, breathCounter); <span class=\"comment\">// Green</span></span><br><span class=\"line\">                TIM_SetCompare4(COLOR_TIM, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> COLOR_BLUE:</span><br><span class=\"line\">                TIM_SetCompare2(COLOR_TIM, <span class=\"number\">0</span>);</span><br><span class=\"line\">                TIM_SetCompare3(COLOR_TIM, <span class=\"number\">0</span>);</span><br><span class=\"line\">                TIM_SetCompare4(COLOR_TIM, breathCounter); <span class=\"comment\">// Blue</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> COLOR_WHITE:</span><br><span class=\"line\">                TIM_SetCompare2(COLOR_TIM, breathCounter); <span class=\"comment\">// Red</span></span><br><span class=\"line\">                TIM_SetCompare3(COLOR_TIM, breathCounter); <span class=\"comment\">// Green</span></span><br><span class=\"line\">                TIM_SetCompare4(COLOR_TIM, breathCounter); <span class=\"comment\">// Blue</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Update the breathCounter and direction</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//Implementing a specific function to achieve a breathing effect for the LED.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (breathDirection) &#123;</span><br><span class=\"line\">            breathCounter++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (breathCounter &gt;= <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">                breathCounter = <span class=\"number\">255</span>;</span><br><span class=\"line\">                breathDirection = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            breathCounter--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (breathCounter == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                breathCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">                breathDirection = <span class=\"number\">1</span>;</span><br><span class=\"line\">                currentColor = (currentColor + <span class=\"number\">1</span>) % <span class=\"number\">4</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"breath_ledh\"><a class=\"markdownIt-Anchor\" href=\"#breath_ledh\">#</a> breath_led.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> BREATH_LED_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BREATH_LED_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIM_GPIO_CLK   RCC_APB2Periph_GPIOB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_RED_TIM_LED_PIN      GPIO_Pin_5  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_GREEN_TIM_LED_PIN    GPIO_Pin_0  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_BLUE_TIM_LED_PIN     GPIO_Pin_1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_RED_TIM_LED_PORT     GPIOB</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_GREEN_TIM_LED_PORT   GPIOB</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_BLUE_TIM_LED_PORT    GPIOB</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIM_CLK             RCC_APB1Periph_TIM3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> COLOR_TIM                TIM3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BASIC_TIM                TIM6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> BASIC_TIM_CLK            RCC_APB1Periph_TIM6</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx_GPIO_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"title function_\">COLOR_TIMx_Mode_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"title function_\">BASIC_TIM_Init</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"title function_\">BASIC_TIM_NVIC_Config</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mainc\"><a class=\"markdownIt-Anchor\" href=\"#mainc\">#</a> main.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;breath_led.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_gpio.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_tim.h&quot;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t COLOR_TIMx_GPIO_Config();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t COLOR_TIMx_Mode_Config();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t BASIC_TIM_Init();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t BASIC_TIM_NVIC_Config();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tTIM_Cmd(BASIC_TIM, ENABLE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"stm32f10x_confh\"><a class=\"markdownIt-Anchor\" href=\"#stm32f10x_confh\">#</a> stm32f10x_conf.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  * @file    Project/STM32F10x_StdPeriph_Template/stm32f10x_conf.h </span></span><br><span class=\"line\"><span class=\"comment\">  * @author  MCD Application Team</span></span><br><span class=\"line\"><span class=\"comment\">  * @version V3.5.0</span></span><br><span class=\"line\"><span class=\"comment\">  * @date    08-April-2011</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief   Library configuration file.</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  * @attention</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</span></span><br><span class=\"line\"><span class=\"comment\">  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</span></span><br><span class=\"line\"><span class=\"comment\">  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</span></span><br><span class=\"line\"><span class=\"comment\">  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</span></span><br><span class=\"line\"><span class=\"comment\">  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</span></span><br><span class=\"line\"><span class=\"comment\">  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT 2011 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Define to prevent recursive inclusion -------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __STM32F10x_CONF_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __STM32F10x_CONF_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Uncomment/Comment the line below to enable/disable peripheral header file inclusion */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_adc.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_bkp.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_can.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_cec.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_crc.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_dac.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_dbgmcu.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_dma.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_exti.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_flash.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_fsmc.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_gpio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_i2c.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_iwdg.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_pwr.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_rcc.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_rtc.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_sdio.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_spi.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_tim.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_usart.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_wwdg.h&quot;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;misc.h&quot;</span> <span class=\"comment\">/* High level functions for NVIC and SysTick (add-on to CMSIS functions) */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Exported types ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Exported constants --------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Uncomment the line below to expanse the &quot;assert_param&quot; macro in the </span></span><br><span class=\"line\"><span class=\"comment\">   Standard Peripheral Library drivers code */</span></span><br><span class=\"line\"><span class=\"comment\">/* #define USE_FULL_ASSERT    1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Exported macro ------------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#define USE_FULL_ASSERT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span>  USE_FULL_ASSERT</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  The assert_param macro is used for function&#x27;s parameters check.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  expr: If expr is false, it calls assert_failed function which reports </span></span><br><span class=\"line\"><span class=\"comment\">  *         the name of the source file and the source line number of the call </span></span><br><span class=\"line\"><span class=\"comment\">  *         that failed. If expr is true, it returns no value.</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">define</span> assert_param(expr) ((expr) ? (void)0 : assert_failed((uint8_t *)__FILE__, __LINE__))</span></span><br><span class=\"line\"><span class=\"comment\">/* Exported functions ------------------------------------------------------- */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">assert_failed</span><span class=\"params\">(<span class=\"type\">uint8_t</span>* file, <span class=\"type\">uint32_t</span> line)</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"keyword\">define</span> assert_param(expr) ((void)0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* USE_FULL_ASSERT */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* __STM32F10x_CONF_H */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"stm32f10x_itc\"><a class=\"markdownIt-Anchor\" href=\"#stm32f10x_itc\">#</a> stm32f10x_it.c</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  * @file    Project/STM32F10x_StdPeriph_Template/stm32f10x_it.c </span></span><br><span class=\"line\"><span class=\"comment\">  * @author  MCD Application Team</span></span><br><span class=\"line\"><span class=\"comment\">  * @version V3.5.0</span></span><br><span class=\"line\"><span class=\"comment\">  * @date    08-April-2011</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief   Main Interrupt Service Routines.</span></span><br><span class=\"line\"><span class=\"comment\">  *          This file provides template for all exceptions handler and </span></span><br><span class=\"line\"><span class=\"comment\">  *          peripherals interrupt service routine.</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  * @attention</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</span></span><br><span class=\"line\"><span class=\"comment\">  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</span></span><br><span class=\"line\"><span class=\"comment\">  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</span></span><br><span class=\"line\"><span class=\"comment\">  * DIRECT, INDIRECT OR CONSEQUENTI</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">  AL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</span></span><br><span class=\"line\"><span class=\"comment\">  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</span></span><br><span class=\"line\"><span class=\"comment\">  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT 2011 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x_it.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** @addtogroup STM32F10x_StdPeriph_Template</span></span><br><span class=\"line\"><span class=\"comment\">  * @&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Private typedef -----------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Private define ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Private macro -------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Private variables ---------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Private function prototypes -----------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Private functions ---------------------------------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*            Cortex-M3 Processor Exceptions Handlers                         */</span></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles NMI exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">NMI_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles Hard Fault exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">HardFault_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Go to infinite loop when Hard Fault exception occurs */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles Memory Manage exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MemManage_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Go to infinite loop when Memory Manage exception occurs */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles Bus Fault exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BusFault_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Go to infinite loop when Bus Fault exception occurs */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles Usage Fault exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">UsageFault_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Go to infinite loop when Usage Fault exception occurs */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles SVCall exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SVC_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles Debug Monitor exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DebugMon_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles PendSVC exception.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PendSV_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles SysTick Handler.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SysTick_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*                 STM32F10x Peripherals Interrupt Handlers                   */</span></span><br><span class=\"line\"><span class=\"comment\">/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */</span></span><br><span class=\"line\"><span class=\"comment\">/*  available peripheral interrupt handler&#x27;s name please refer to the startup */</span></span><br><span class=\"line\"><span class=\"comment\">/*  file (startup_stm32f10x_xx.s).                                            */</span></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief  This function handles PPP interrupt request.</span></span><br><span class=\"line\"><span class=\"comment\">  * @param  None</span></span><br><span class=\"line\"><span class=\"comment\">  * @retval None</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"comment\">/*void PPP_IRQHandler(void)</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * @&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  */</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"stm32f10x_ith\"><a class=\"markdownIt-Anchor\" href=\"#stm32f10x_ith\">#</a> stm32f10x_it.h</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  * @file    Project/STM32F10x_StdPeriph_Template/stm32f10x_it.h </span></span><br><span class=\"line\"><span class=\"comment\">  * @author  MCD Application Team</span></span><br><span class=\"line\"><span class=\"comment\">  * @version V3.5.0</span></span><br><span class=\"line\"><span class=\"comment\">  * @date    08-April-2011</span></span><br><span class=\"line\"><span class=\"comment\">  * @brief   This file contains the headers of the interrupt handlers.</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  * @attention</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS</span></span><br><span class=\"line\"><span class=\"comment\">  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE</span></span><br><span class=\"line\"><span class=\"comment\">  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY</span></span><br><span class=\"line\"><span class=\"comment\">  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING</span></span><br><span class=\"line\"><span class=\"comment\">  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE</span></span><br><span class=\"line\"><span class=\"comment\">  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;h2&gt;&lt;center&gt;&amp;copy; COPYRIGHT 2011 STMicroelectronics&lt;/center&gt;&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  ******************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  */</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Define to prevent recursive inclusion -------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __STM32F10x_IT_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __STM32F10x_IT_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\"> <span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Includes ------------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Exported types ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Exported constants --------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Exported macro ------------------------------------------------------------*/</span></span><br><span class=\"line\"><span class=\"comment\">/* Exported functions ------------------------------------------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">NMI_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">HardFault_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">MemManage_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BusFault_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">UsageFault_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SVC_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">DebugMon_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">PendSV_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SysTick_Handler</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* __STM32F10x_IT_H */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E6%A0%88%E6%BA%A2%E5%87%BA/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E6%A0%88%E6%BA%A2%E5%87%BA/",
            "title": "栈溢出",
            "date_published": "2024-07-03T08:02:48.000Z",
            "content_html": "<h1 id=\"栈溢出简单实验enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#栈溢出简单实验enjun-du\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLU5ldC1TZWN1cml0eS1MYWItLS1TdGFjay1PdmVyZmxvdw==\">栈溢出简单实验 ——Enjun Du</span></h1>\n<h2 id=\"实验分析\"><a class=\"markdownIt-Anchor\" href=\"#实验分析\">#</a> 实验分析</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>栈被用于实现函数的调用以及存储局部变量，当使用诸如 strcpy、gets 等不安全函数时，攻击者通过向栈中某个变量写入的字节数超过了这个变量本身所申请的字节数，使得数据向高地址存储区域进行覆盖来修改返回地址，最终让程序根据攻击者的想法运行，这种攻击被称为栈溢出攻击</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>了解栈溢出攻击原理，并实现简单栈溢出攻击实验</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/2AK37EZWNygmMhw.png\" alt=\"image.png\"></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<ol>\n<li>编写程序，在主函数中调用 func_call 函数，但不调用 inject 函数</li>\n<li>在 func_call 函数中使用 strcpy 函数对 param 数组进行赋值</li>\n<li>攻击者通过对程序进行反汇编（可以使用 gdb 工具）查看汇编指令，通过不断修改 input 数组来将 func_call 函数的返回地址覆盖为指定值，最终使 inject 函数被调用</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/olXgCPWuf5FwEmN.png\" alt=\"image.png\"></p>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<p>为了成功执行攻击，需要关闭 Ubuntu 系统中的一系列保护机制，具体可在终端中输入：</p>\n<ul>\n<li><code>sudo apt-get install gcc-multilib</code> ，代表支持交叉编译 cross-compiling，例如可以在 64 位处理器上处理 32 位程序</li>\n<li><code>sudo sysctl -w kernel.randomize_va_space=0</code> ，代表关闭进程空间地址随机化功能</li>\n<li>使用  <code>gcc -Wall -g -o StackOverflow StackOverflow.c -fno-stack-protector -z execstack -m32</code>  编译程序，其中 - g 代表关闭所有优化机制，-fno-stack-protector 代表关闭 Stack Canary 保护，-z execstack 代表禁用 NX（No-eXecute protect）保护，-m32 代表在编译阶段将编译目标指定为 32 位</li>\n</ul>\n<h2 id=\"实验准备solved-by-enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#实验准备solved-by-enjun-du\">#</a> 实验准备 ——solved by Enjun Du</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">VMware</span> Workstation Pro</span><br><span class=\"line\"><span class=\"attribute\">Ubuntu</span> <span class=\"number\">18</span>.<span class=\"number\">04</span>.<span class=\"number\">6</span> LTS</span><br><span class=\"line\"><span class=\"attribute\">Red</span> Panda Dev-C++</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h3 id=\"实验代码\"><a class=\"markdownIt-Anchor\" href=\"#实验代码\">#</a> 实验代码</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> input[] = <span class=\"string\">&quot;11112222333344445555666677778888&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*****inject success*****\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func_call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> <span class=\"type\">char</span> param[<span class=\"number\">16</span>];</span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(param,input);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>** argv)</span>&#123; </span><br><span class=\"line\"> func_call();</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main exit...\\n&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>\\1. 首先在 dev 上编辑 C 语言代码 StackOverflow.c 如上</p>\n</li>\n<li>\n<p>接下来为了成功执行攻击，需要关闭 Ubuntu 系统中的一系列保护机制：</p>\n<ul>\n<li>在命令行运行 cd /home/sky/Desktop 将地址定位在目标文件层</li>\n<li>在终端输入 sudo apt-get install gcc-multilib，代表支持交叉编译 cross-compiling，例如可以在 64 位处理器上处理 32 位程序</li>\n<li>在终端输入 sudo sysctl -w kernel.randomize_va_space=0，代表关闭进程空间地址随机化功能</li>\n<li>使用 gcc -Wall -g -o StackOverflow StackOverflow.c -fno-stack-protector -z execstack -m32 编译程序，其中 - g 代表关闭所有优化机制，-fno-stack-protector 代表关闭 Stack Canary 保护，-z execstack 代表禁用 NX（No-eXecute protect）保护，-m32 代表在编译阶段将编译目标指定为 32 位</li>\n</ul>\n</li>\n<li>\n<p>对程序分析可知，其将在第 15 行执行输出操作，故我们将断点设置在 15 行。接下来使用 gdb 程序对该代码进行调试</p>\n<ul>\n<li>\n<p>首先使用如下代码安装 gdb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install gdb</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在终端输入 gdb StackOverflow 开启调试<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/2VIume3T1Pswky7.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>根据分析代码，我们发现关键代码在 13 行，故在 13 行设置断点。我们输入命令：break  13。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/B8HCPynamgcQ3zu.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入命令 run 代表运行程序至断点处<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/A43gNRu1Utl7soC.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>输入 disassemble 后回车<br>\n结果如下：<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/cxNOVuQGhe51JoE.png\" alt=\"image.png\"><br>\n<strong>=&gt; 这一行即为断点（13 行) 的步骤行。</strong></p>\n</li>\n<li>\n<p>输入 info registers ebp esp 来查看寄存器里的栈顶指针和栈底指针<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/GxSRyAmla2YPipD.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入 print&amp;param 来查看 param 数组的首地址<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QakZYVf8OUgPB5d.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\9. 输入  <code>x/2xw 0xffffd1a8</code>  来查看该 func_call 函数的返回地址，在这个命令中，“x” 是一个 GDB 命令，它是 “examine memory” 的缩写，用于检查内存中的内容。&quot;/2xw&quot; 是一个格式化参数，它告诉 GDB 以十六进制格式显示两个字（32 位）的内容，并将其解释为一个有符号整数。“0xffffd1a8” 是内存地址，表示我们要查看的内存位置。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/CDNmOWRhMsgGv7o.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入 disassemble main 来反汇编 main 函数。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/gCpST7F5xnJcZID.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>可以看到 func_cal 函数的<strong>返回地址 0x565556c6 指向 main 函数里的 &lt;+31&gt;，其 and 所指的位置是 &lt;+4&gt;</strong></p>\n</li>\n<li>\n<p>输入 print&amp;inject 来查看 inject 函数的地址<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/ZNlgi465YJwDSnQ.png\" alt=\"image.png\"></p>\n<p>​\t现在我们分析所获取到的信息：func_cal 函数的返回地址为 0xffffd1ac（0xffffd1a8+0x4），。param 的首地址为 0xffffd190, 两者相差 28 个字节。查看到 inject 函数地址为 0x5655554d, 因此可以将 input 输入更改为 “28 个字节 + 4 位 inject 地址”。故将 input 修改为 char input [] = “AAAAABBBBBCCCCCDDDDDEEEEEFFF\\x4d\\x55\\x55\\x56”; 后重新编译程序</p>\n</li>\n<li>\n<p>在代码中修改 input 后重新编译程序<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/HETBnRgaZQFiXGf.png\" alt=\"image.png\"></p>\n<h3 id=\"如上图所示攻击完成\"><a class=\"markdownIt-Anchor\" href=\"#如上图所示攻击完成\">#</a> 如上图所示，攻击完成。</h3>\n<h2 id=\"结论和体会\"><a class=\"markdownIt-Anchor\" href=\"#结论和体会\">#</a> 结论和体会</h2>\n<p>​\t在本次实验中，我深入了解并实践了栈溢出攻击的原理与技术。通过设计和实施一个简单的栈溢出攻击，我不仅加深了对程序内存布局和操作系统安全机制的理解，还学会了如何在实际环境中利用软件漏洞。</p>\n<p>​\t实验的过程中，我首先在 Ubuntu 系统下编写了一个简单的 C 程序，该程序包含了易受栈溢出攻击的漏洞。通过精心构造输入数据，我成功引导程序执行了未授权的 inject 函数，从而实现了攻击目标。实验过程中，我关闭了操作系统的几项安全保护机制，如地址空间布局随机化（ASLR）、栈保护等，以模拟一个容易受到攻击的环境。</p>\n<p>通过本次实验，我学习到了几个重要的技术和概念：</p>\n<p>​\t1. 栈溢出的原理：了解了栈溢出是如何通过覆盖函数的返回地址来控制程序流程的。</p>\n<p>​\t2. 安全保护机制的重要性：实验中需要关闭的安全保护机制说明了这些机制在防御栈溢出攻击中的重要作用。</p>\n<p>​\t3. 调试和分析工具的应用：通过使用 gdb 调试工具和其它命令行工具，我学会了如何分析程序的内存布局和识别潜在的安全漏洞。</p>\n<p>​\t这次实验不仅加强了我的理论知识，也提高了我的实践技能，让我对计算机安全领域有了更深刻的理解。我认识到，编写安全的代码需要程序员具备深厚的安全意识和技能，以及对各种攻击技术和防御策略的熟悉。未来，我希望能够继续深入研究这一领域，为创建更安全的软件环境做出贡献。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/",
            "title": "应用安全",
            "date_published": "2024-07-03T07:32:28.000Z",
            "content_html": "<h1 id=\"应用安全蓝天\"><a class=\"markdownIt-Anchor\" href=\"#应用安全蓝天\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktTGFiLS0tQXBwbGljYXRpb24tU2VjdXJpdHk=\">应用安全 —— 蓝天 °</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>​\t大多数 Web 应用程序攻击都是来源于 XSS、CSRF 和 SQL 注入攻击，这些攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序，其中 CSRF 存在是指攻击者构建的恶意网站被用户访问后，返回一些攻击性代码，并发出一个请求要求访问第三方站点，从而盗用用户身份，如用户名义发送邮件、虚拟货币转账等</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>实现本地 Web 攻击和防御</p>\n<h3 id=\"实验步骤建议\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤建议\">#</a> 实验步骤建议</h3>\n<ol>\n<li>\n<p>安装 Flask 框架并启动提供的源代码</p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击</p>\n</li>\n<li>\n<p>使用防御方法，防范 XSS 攻击</p>\n</li>\n<li>\n<p>增加一个登录功能，设计有 SQL 注入隐患的代码，进行攻击，并且展示如何进行防范</p>\n</li>\n<li>\n<p>设计一个 CSRF 攻击范例</p>\n</li>\n<li>\n<p>【选做】防御 CSRF 攻击 ——<strong> 如你所见，杜爹当然会做</strong></p>\n<h3 id=\"实验步骤细化\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤细化\">#</a> 实验步骤细化</h3>\n<ol>\n<li>\n<p>安装 Flask 框架并启动提供的源代码<br>\n在资料目录启动终端并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create --name flask python=3.10</span><br><span class=\"line\">conda activate flask</span><br><span class=\"line\">pip install flask</span><br><span class=\"line\">flask run</span><br></pre></td></tr></table></figure>\n<p>访问终端提示的网址</p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/S2ORTKytMAejcm6.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/42Azk5tsp9U8rQM.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>使用防御方法，防范 XSS 攻击。可以通过检验输入文字，转其转为全角字符进行防御</p>\n</li>\n<li>\n<p>修改 app.py 和 index.html，使得网页增加一个登录功能。设计有 SQL 注入隐患的代码，进行攻击，并且展示如何进行防范。这里可以使用使用 SQLite 作为数据库<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/lgCdL4KqWGMIH5B.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>设计一个 CSRF 攻击范例<br>\n在网站不部署 XSS 防御时，新建一个网页作为恶意网站。<br>\n直接访问该恶意网站时会出现跳转至原网站，且当有原网站有合法用户登录时，会成功发起反射型 XSS 攻击。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/qabwGJEKxVpiys7.png\" alt=\"image.png\"></p>\n</li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">磁盘驱动器：NVMe KIOXIA- EXCERIA G2 SSD</span><br><span class=\"line\">NVMe Micron 3400 MTFDKBA1TOTFH</span><br><span class=\"line\">显示器：NVIDIA GeForce RTX 3070 Ti Laptop GPU</span><br><span class=\"line\">系统型号\tROG Strix G533ZW_G533ZW</span><br><span class=\"line\">系统类型\t基于 x64 的电脑</span><br><span class=\"line\">处理器\t12th Gen Intel(R) Core(TM) i9-12900H，2500 Mhz，14 个内核，20 个逻辑处理器</span><br><span class=\"line\">BIOS 版本/日期\tAmerican Megatrends International, LLC. G533ZW.324, 2023/2/21</span><br><span class=\"line\">BIOS 模式\tUEFI</span><br><span class=\"line\">主板产品\tG533ZW</span><br><span class=\"line\">操作系统名称\tMicrosoft Windows 11 家庭中文版</span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VMware Workstation Pro</span><br><span class=\"line\">Ubuntu 18.04.6 LTS</span><br><span class=\"line\">Kali linux</span><br><span class=\"line\">Microsoft Windows 11 家庭中文版</span><br></pre></td></tr></table></figure>\n<h2 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\">#</a> 实验开始</h2>\n<ol>\n<li>\n<p>先打开终端运行 sudo apt install python3 安装 python3 环境</p>\n</li>\n<li>\n<p>先采用 <code>sudo apt update</code>  和 sudo apt install python3-flask -y 来安装 Flask 框架</p>\n</li>\n<li>\n<p>在 kali 中创建 topic13 文件夹，包含已经给出的代码资料<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/mdVikAz1RLWUCKv.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端上输入命令 python <span class=\"exturl\" data-url=\"aHR0cDovL2FwcC5weQ==\">app.py</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hcHAtbzk5Zmg2Nmwyb2oucHk=\">来运行 app.py</span>，出现如下图片即表示运行成功。可通过在浏览器访问地址 localhost:5000 或者 127.0.0.1:5000 来访问该地址<img data-src=\"https://s2.loli.net/2024/07/03/Mw3Xl8pzHLcexiy.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在首先进行 XSS 反射型实验：在地址上输入 <code>http://127.0.0.1:5000/?content=&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;&amp;submit=</code>  提交，当显示如下弹窗时，则证明攻击成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/IiRQ5lsuX9v7bGL.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在执行 XSS 持久型实验：在评论栏输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后点击提交新评论，此时网址 https://www.yuanshen.com 便已经被存储在评论 XSS 持久型攻击 —— 原神，启动！里面了。点击该评论跳转原神官网，攻击成功！<img data-src=\"https://s2.loli.net/2024/07/03/V5Y2ARQsaxXcdDO.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/ir1c6WLpdB74UKe.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在修改 app.py 的代码来防止 XSS 攻击，修改后代码如下:</p>\n<p>修改地方如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, escape</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.utils <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设的评论数据集</span></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 通过 escape 函数转义用户输入</span></span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 对查询参数进行转义以防止反射型XSS攻击</span></span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"comment\"># 默认情况下渲染页面，展示所有评论</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用了 “escape” 函数来转义用户输入</li>\n<li>对 POST 请求中的‘comment’进行转义</li>\n<li>对 GET 请求中的‘query’进行转义</li>\n</ul>\n<p>原因：转义可以将用户输入中的特殊 HTML 字符（如 &lt;,&gt;, &amp;, &quot; 等）转换为它们的 HTML 实体形式（例如，&lt; 转换为 &lt;）。这意味着当浏览器渲染这些转义后的字符时，它们不会被作为 HTML 标签或 JavaScript 代码执行，而是作为普通文本显示。这样，即使用户输入了 <script>alert(‘XSS’)</script> 这样的代码，它也只会被显示出来，而不会执行</p>\n<p>原因：<br>\n（1）<strong>防止反射型 XSS 攻击：</strong> 通过对 URL 参数（如搜索查询）进行转义，即使攻击者试图通过构造含有恶意脚本的 URL 来发起反射型 XSS 攻击，这些脚本也不会执行。因为在 HTML 中，这些脚本已被转义，不会被浏览器解释为代码</p>\n<p>（2）<strong>防止持久型 XSS 攻击：</strong> 通过对用户提交的评论内容进行转义，即使攻击者在评论中嵌入了 JavaScript 代码，这些代码也只会作为普通文本被存储和显示，而不会在其他用户浏览评论时执行。这样，就算这些评论包含了恶意代码，也不会对其他用户造成威胁</p>\n<p>** 测试：** 输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:5000/?content=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;XSS反射实验成功！&#x27;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=提交</span><br></pre></td></tr></table></figure>\n<p>后，显示 <code>“查询评论&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;”</code> ，故该代码未被执行，防止反射型 XSS 攻击成功！<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/LJCDIHqz2f3kK7T.png\" alt=\"image.png\"></p>\n<p>在评论栏输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后，点击提交新评论，显示得到如下评论，故可知道转义后的代码不会被执行，代码会被当做纯文本显示在评论上。<strong>防止 XSS 持久型攻击成功</strong>！</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/oeh6iEVf2LRJuCk.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端输入命令 python -c &quot;import sqlite3&quot; 来导入 sqlite3 模块</p>\n</li>\n<li>\n<p>在 Flask 中创建一个名为‘init_db.py’的 Python 文件，然后运行该文件创建初始化数据库和用户表‘login.db’。这里创建了一个初始账户，账号为 sky，密码为 sky666.<br>\n 源码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\">connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个用户表</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users(id INTEGER PRIMARY KEY, username TEXT, password TEXT)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入示例用户</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO users(username, password) VALUES (&#x27;sky&#x27;, &#x27;sky666&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.commit()</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建一个 login.html，增加登录和注册功能，源码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        Username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        Password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/register&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    &#123;% if error %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>再创建一个 register.html，增加注册功能，源码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/register&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        Username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;newUsername&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        Password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;newPassword&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Register&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 index.html，增加退出登录功能</p>\n</li>\n<li>\n<p>修改 app.py 函数，代码原理：首先进入链接后检测是否成功登陆，如果没有成功登陆则跳转 login.html，login.html 包含 login 和 register，如果没有账号可以点击 register 跳转 register.html 来进行注册。然后在 login 输入账号密码登录成功后跳转 index.html，index.html 李有 logout 选项，点击 Logout 后会退出登录返回到 login.html 中。源码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, redirect, url_for, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.utils <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = <span class=\"string\">&#x27;fan_xing_yu_is_little_boy_mother&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设的评论数据集</span></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册功能</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/register&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">register</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        new_username = request.form[<span class=\"string\">&#x27;newUsername&#x27;</span>]</span><br><span class=\"line\">        new_password = request.form[<span class=\"string\">&#x27;newPassword&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;</span>, (new_username, new_password))</span><br><span class=\"line\">        connection.commit()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;register.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> session.get(<span class=\"string\">&#x27;logged_in&#x27;</span>):  <span class=\"comment\"># 检查用户是否登录</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))  <span class=\"comment\"># 未登录，重定向到登录页面</span></span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 从表单中获取用户名和密码</span></span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 故意引入 SQL 注入的隐患（仅作为演示，实际中不应这么做）</span></span><br><span class=\"line\">        query = <span class=\"string\">f&quot;SELECT * FROM users WHERE username = &#x27;<span class=\"subst\">&#123;username&#125;</span>&#x27; AND password = &#x27;<span class=\"subst\">&#123;password&#125;</span>&#x27;&quot;</span></span><br><span class=\"line\">        cursor.execute(query)</span><br><span class=\"line\"></span><br><span class=\"line\">        user = cursor.fetchone()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;logged_in&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Invalid username or password&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">logout</span>():</span><br><span class=\"line\">    session.pop(<span class=\"string\">&#x27;logged_in&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>SQL 注入攻击演示<br>\n打开 app.py 后，在 login 里的 username 中输入 <code>' OR '1'='1' --</code> ，在 password 中可以不作任何输入，点击登录，可以发现，页面直接跳转到了 index.html。</p>\n</li>\n<li>\n<p>原理分析：<br>\n最开始的判定代码为： <code>‘SELECT * FROM users WHERE username = '&#123;username&#125;' AND password = '&#123;password&#125;'’</code> ，当我们输入’ OR ‘1’=‘1’ -- 后，代码就变为了 <code>‘SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '任意值'’</code> 。</p>\n<p>’ OR '：这个片段是试图打破原有 SQL 查询的逻辑，通过添加一个总是为真的条件（‘1’=‘1’）。<br>\n此时我们可以知道，‘1’=‘1’永远判定为真</p>\n<p>‘–’：这是 SQL 中的注释标记。在这个上下文中，它的作用是注释掉 SQL 语句的剩余部分，特别是与密码相关的那部分，这样 SQL 服务器就不会检查密码是否正确。</p>\n</li>\n<li>\n<h4 id=\"sql防御\"><a class=\"markdownIt-Anchor\" href=\"#sql防御\">#</a> SQL 防御：</h4>\n<p>在 app.py 里将 login 函数修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 使用参数化查询防止 SQL 注入</span></span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>, (username, password))</span><br><span class=\"line\"></span><br><span class=\"line\">        user = cursor.fetchone()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;logged_in&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Invalid username or password&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure>\n<p>再次运行后，输入’ OR ‘1’=‘1’ -- 后发现显示 Invalid username or password</p>\n</li>\n<li>\n<p><strong>原理分析</strong>：为了防御 SQL 攻击，我们应该避免直接将用户的输入拼接到 SQL 查询中。故我采用参数化查询，这种方式可以确保传入的参数不会被解释为 SQL 代码的一部分，而是作为数据处理。在上述 login 函数的修改中，我使用参数化查询替代字符串格式化。<br>\n这么设置的好处是应用程序不再对 SQL 注入攻击易受攻击，因为用户输入被安全地处理为查询的一部分，而不是作为 SQL 代码执行。</p>\n</li>\n<li>\n<h4 id=\"csrf攻击设计\"><a class=\"markdownIt-Anchor\" href=\"#csrf攻击设计\">#</a> CSRF 攻击设计：</h4>\n<p>设计 CSRF_attack.html 源码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>恶意网站<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 构建目标网站的URL，包括恶意的XSS代码</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> targetUrl = <span class=\"string\">&quot;http://127.0.0.1:5000/?content=%3Cscript%3Ealert(&#x27;XSS%E5%8F%8D%E5%B0%84%E5%AE%9E%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%81&#x27;)%3C%2Fscript%3E&amp;submit=%E6%8F%90%E4%BA%A4&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 利用Image对象发起GET请求，绕过同源策略</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = targetUrl;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该源码使用转义，将想要输入的 ur <code>l“http://127.0.0.1:5000/?content=&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;&amp;submit=提交”</code>  转义为 “ <code>&quot;http://127.0.0.1:5000/?content=%3Cscript%3Ealert('XSS%E5%8F%8D%E5%B0%84%E5%AE%9E%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%81')%3C%2Fscript%3E&amp;submit=%E6%8F%90%E4%BA%A4&quot;;</code> ”</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>构造思路</strong>：构建恶意 URL：targetUrl 变量中存储了目标网站的 URL，其中包括了一个查询参数 content。这个参数通过 URL 编码嵌入了恶意的 JavaScript 代码，这段代码是<script>alert (‘XSS 反射实验成功！’)</script>。当目标网站接收到这个请求并处理 content 参数时，假设它没有对这个参数进行适当的清理或转义，那么这段 JavaScript 代码将在用户的浏览器中执行。</p>\n<p>利用 Image 对象发起 GET 请求：通过创建一个 Image 对象并将其 src 属性设置为构建好的恶意 URL，实际上发起了一个对目标 URL 的 GET 请求。这个请求是在不需要用户交互的情况下自动完成的。由于是通过<img>标签加载资源的方式，它可以绕过一些简单的同源策略限制。</p>\n</li>\n<li>\n<p>结果展示：在运行 app.py 后浏览器打开 CSRF_attack.html，可以发现 app.py 终端显示被 XSS 反射型攻击成功：<img data-src=\"https://s2.loli.net/2024/07/03/ZybtVQejqlP7Ghz.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<h3 id=\"选做之如何防御csrf攻击\"><a class=\"markdownIt-Anchor\" href=\"#选做之如何防御csrf攻击\">#</a> 选做之如何防御 CSRF 攻击</h3>\n<p>为了防御 CSRF 攻击，需要使用 POST 请求而不是 GET，并且实施 CSRF 保护</p>\n</li>\n<li>\n<p>首先在终端运行 pip install Flask-WTF 来下载 Flask-WTF 进行 CSRF 保护</p>\n</li>\n<li>\n<p>接着修改 app.py 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, session, redirect, url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField, SubmitField</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf.csrf <span class=\"keyword\">import</span> CSRFProtect</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;fan_xing_yu_is_little_boy_mother&#x27;</span></span><br><span class=\"line\">csrf = CSRFProtect(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义评论表单类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CommentForm</span>(<span class=\"title class_ inherited__\">FlaskForm</span>):</span><br><span class=\"line\">    newComment = StringField(<span class=\"string\">&#x27;评论&#x27;</span>)</span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">&#x27;提交新评论&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    form = CommentForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        comment = form.newComment.data.strip()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">            dataset.append(comment)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">    query = request.args.get(<span class=\"string\">&#x27;content&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, form=form, comments=sub_dataset, query=query)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 index.html 代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>查询评论<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        搜索内容：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;搜索内容&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    &#123;% if query %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>查询评论 &quot;&#123;&#123; query &#125;&#125;&quot; 结果如下：<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>所有的评论如下：<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% for comment in comments %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; comment &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>发布评论<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; form.newComment.label &#125;&#125;: &#123;&#123; form.newComment(size=20) &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/jMSQfyTWsonIBNC.png\" alt=\"image.png\"></p>\n<p>我们此时运行 app.py 后再点击 CSRF_attack.py，显示攻击失败</p>\n</li>\n</ol>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>​\t通过本次实验，我深入理解了 Web 安全中几种常见攻击方式：XSS 和 CSRF，以及 SQL 注入的概念和防御策略。通过实际操作实验，我不仅加深了对这些概念的认识，也学会了如何在实际开发中应用相关防御技术。</p>\n<p>​\tXSS 攻击及防御：通过构造特殊的 URL 或输入恶意脚本代码到评论中，我成功模拟了反射型和持久型 XSS 攻击。这一过程让我认识到了用户输入验证和转义的重要性。通过使用 escape 函数转义用户输入，我学会了一种有效防御 XSS 攻击的方法。这个方法能够防止恶意脚本执行，保护网站和用户免受攻击。</p>\n<p>​\tSQL 注入及防御：我通过在登录框中输入特殊的 SQL 语句成功实现了 SQL 注入攻击，绕过了登录验证。攻击成功后，通过修改代码，采用参数化查询的方式，我学会了如何防御 SQL 注入攻击。这种方法通过将输入作为参数传递给 SQL 语句，有效避免了恶意输入被解释执行的风险。</p>\n<p>​\tCSRF 攻击及防御：我尝试通过构造恶意网页自动提交表单的方式发起 CSRF 攻击，但最终通过引入 Flask-WTF 提供的 CSRF 保护机制成功防御了这种攻击。通过实验，我了解到 CSRF 令牌的作用及其在 Web 应用安全中的重要性。</p>\n<p>​\t安全意识的重要性：作为一名 Web 开发者，必须具备安全意识，了解常见的 Web 攻击方式和防御策略，这对于开发安全的 Web 应用至关重要。</p>\n<p>​\t持续学习和实践：随着 Web 技术的发展，新的安全威胁不断出现。只有不断学习和实践，才能有效地应对这些安全挑战。</p>\n<p>​\t工具和库的作用：Flask-WTF 等工具和库提供了方便的防御机制，如 CSRF 保护、用户输入的转义等，能够大大提高开发效率和应用安全性。合理利用这些工具和库，可以让我们更加专注于业务逻辑的开发。</p>\n<p>​\t安全策略的综合运用：在实际开发中，应综合运用各种安全策略，如输入验证、参数化查询、使用 HTTPS、设置合理的 HTTP 安全头等，来构建一个多层次的安全防御体系。</p>\n<p>​\t通过本次实验，我不仅掌握了一些具体的防御技术，也对 Web 安全的重要性有了更深刻的认识。在未来的学习和工作中，我将继续关注 Web 安全领域的最新动态，不断提高自己的安全防御能力。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E9%98%B2%E5%BE%A1_%E9%80%89%E5%81%9A/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E9%98%B2%E5%BE%A1_%E9%80%89%E5%81%9A/",
            "title": "人工智能算法安全_后门防御_选座",
            "date_published": "2024-07-03T07:03:48.000Z",
            "content_html": "<h1 id=\"人工智能算法安全_后门防御_选做\"><a class=\"markdownIt-Anchor\" href=\"#人工智能算法安全_后门防御_选做\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktLS1BSS1BbGdvcml0aG1pYy1TZWN1cml0eV9CYWNrZG9vci1EZWZlbnNlX09wdGlvbmFs\">人工智能算法安全_后门防御_选做</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>面向后门攻击的防御，指的是利用数据的独特属性或者精心设计的防御机制，来降低后门攻击的成功率。为了防御后门攻击，本实验可以主动地识别输入数据中是否包含用于后门攻击的触发器（也就是特定模式的噪音），或者通过数据的其他特性来削弱甚至抵消后门攻击的性能</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>在已实现后门攻击的基础之上，参考所给论文，实现后门攻击的防御</p>\n<h3 id=\"参考论文\"><a class=\"markdownIt-Anchor\" href=\"#参考论文\">#</a> 参考论文</h3>\n<p>Neural Cleanse: Identifying and Mitigating Backdoor Attacks in Neural Networks</p>\n<h3 id=\"参考代码\"><a class=\"markdownIt-Anchor\" href=\"#参考代码\">#</a> 参考代码</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JvbHVud2FuZy9iYWNrZG9vcg==\">backdoor</span></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/aBpGmKLuF3gd2ri.png\" alt=\"image.png\"></p>\n<ol>\n<li>\n<p>训练一个能将后门数据识别为单一指定标签的后门攻击模型</p>\n</li>\n<li>\n<p>在步骤 1 模型上，针对每个类别生成一个反向触发器，根据各触发器 L1 范数大小，基于 MAD 技术，判断该模型确被后门所污染</p>\n</li>\n<li>\n<p>获得后门模型的反向触发器后，从下列三种方法中任选一种，实现后门攻击的防御</p>\n<ul>\n<li><strong>识别过滤后门输入</strong>：建立神经元激活过滤器。激活值定义为第二层到最后一层中激活值排名前 1% 的神经元的平均激活值。过滤器将后门输入识别为那些激活值高于一定阈值的输入，模型将不对这些输入进行预测</li>\n<li><strong>后门削弱 —— 剪枝</strong>：关注神经网络各个中间层神经元的激活值，并修剪一定比例的神经元（优先考虑修改在干净输入和后门输入之间激活差距最大的神经元）。即在推理过程中将这些神经元的输出值设置为 0，当修剪后的模型不再响应反向触发时，停止剪枝</li>\n<li><strong>后门削弱 ——Unlearning</strong>：对后门模型进行重新训练，使得模型遗忘原来的后门。使用步骤 2 中获得的反向触发器，将其与正常训练数据结合，且数据对应原本的标签。利用构造的新训练集对模型再次进行训练，使得受到后门攻击的模型可以识别后门输入的正确标签</li>\n</ul>\n<h3 id=\"实验预期\"><a class=\"markdownIt-Anchor\" href=\"#实验预期\">#</a> 实验预期</h3>\n<p>​\t在防御之后，模型被攻击成功的概率将会明显下降，但是模型对良性样本预测的准确率也会略有下降</p>\n<h3 id=\"实验方法\"><a class=\"markdownIt-Anchor\" href=\"#实验方法\">#</a> 实验方法</h3>\n<p>​\t本实验采用识别<strong>过滤后门输入</strong>来进行后门攻击的防御</p>\n</li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持 Pytorch深度学习框架、支持 Python <span class=\"number\">3.5</span>或更高版本的编程环境</span><br><span class=\"line\">PyCharm <span class=\"number\">2023.2</span> 专业版</span><br><span class=\"line\">python3<span class=\"number\">.6</span></span><br><span class=\"line\">h5py                      <span class=\"number\">3.1</span><span class=\"number\">.0</span></span><br><span class=\"line\">keras                     <span class=\"number\">2.2</span><span class=\"number\">.2</span>                   </span><br><span class=\"line\">keras-applications        <span class=\"number\">1.0</span><span class=\"number\">.4</span>                  </span><br><span class=\"line\">keras-preprocessing       <span class=\"number\">1.0</span><span class=\"number\">.2</span>                    </span><br><span class=\"line\">numpy                     <span class=\"number\">1.14</span><span class=\"number\">.5</span></span><br><span class=\"line\">pillow                    <span class=\"number\">8.4</span><span class=\"number\">.0</span></span><br><span class=\"line\">tensorflow-gpu                <span class=\"number\">1.10</span><span class=\"number\">.0</span></span><br><span class=\"line\">tensorflow                <span class=\"number\">1.10</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<ol>\n<li>\n<p>由于实验所用环境为 python3.6，故我们先打开 Anaconda Prompt 后输入命令 <code>conda create -n py36 python=3.6</code>  来创建一个名为 py36 的 python3.6 虚拟环境</p>\n</li>\n<li>\n<p>win+R 后 cmd 进入先输入命令 conda init 来初始化 conda，退出后再次进入后输入命令 conda activate py36 来激活该 3.6 环境</p>\n</li>\n<li>\n<p>然后运行命令 <code>conda install h5py=3.1.0 keras=2.2.2 keras-applications=1.0.4 keras-preprocessing=1.0.2 numpy=1.14.5 pillow=8.4.0 tensorflow=1.10.0 tensorflow-gpu=1.10.0</code>  来安装指定的库</p>\n</li>\n<li>\n<p>在 pycharm 里找到该虚拟环境的地址，然后选择系统解释器，此处我电脑上该 3.6 的解释器位于 F:\\Anaconda\\envs\\py36\\python.exe</p>\n</li>\n<li>\n<p>运行 gtsrb_visualize_example.py 文件，发现环境配置成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/gh9oL71c4yqMHER.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在本章，我选择通过识别过滤后门输入来实现后门的防御，即建立神经元激活过滤器。激活值定义为第二层到最后一层中激活值排名前 1% 的神经元的平均激活值。过滤器将后门输入识别为那些激活值高于一定阈值的输入，模型将不对这些输入进行预测</p>\n</li>\n<li>\n<p>分析原始输出：<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/mo93SkOYl7XJraQ.png\" alt=\"image.png\"></p>\n<p>这一段输出结果来自于一个优化过程，其目的是调整和优化一个后门触发器在机器学习模型中的表现。分析时需要关注几个关键指标：成本（cost）、攻击成功率（attack）、总损失（loss）、分类损失（ce）、正则化损失（reg）以及最佳正则化损失（reg_best）。这些指标有助于评估触发器的效果和对模型的干扰程度。<br>\n<strong>up cost from 1.60E-02 to 3.20E-02&quot;</strong>：成本系数从 0.016 提高到 0.032。这通常意味着在优化过程中，正则化损失对总损失的贡献被增加，目的是为了简化或减少触发器的复杂度，使其更难被检测。</p>\n<p>步骤 50 到 56 每一步的具体情况如下：</p>\n<p><strong>攻击成功率（Attack）</strong>：这一指标在 0.979 到 0.994 之间波动，显示了触发器在这些步骤中的有效性。数值接近 1 表示高成功率。</p>\n<p><strong>总损失（Loss）</strong>：随着正则化损失和分类损失的变化而变化，反映了总体的优化效果。</p>\n<p><strong>分类损失（CE）</strong>：这一指标衡量的是触发器使模型在正常分类任务上的表现差异。数值较低表示触发器对模型正常功能的干扰较小。</p>\n<p><strong>正则化损失（Reg）</strong>：衡量触发器复杂度的指标，优化目标是减少这一值，使得触发器更难被发现。在这几步中，这一指标有所波动但整体趋势为逐步降低。</p>\n<p><strong>最佳正则化损失（Reg_best）</strong>：在步骤 55 中，达到了 52.034966，这是观察期间的最低值，表示找到了一个相对简单且效果良好的触发器配置。</p>\n</li>\n<li>\n<p>现在开始后门防御的实现：<br>\n设计 defense.py 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NeuralFilter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, model</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 提取模型的各层输出作为一个新模型的输出</span></span><br><span class=\"line\">        self.layer_outputs = [layer.output <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> model.layers[<span class=\"number\">1</span>:]]  <span class=\"comment\"># 从第二层到最后一层</span></span><br><span class=\"line\">        self.activation_model = Model(inputs=model.<span class=\"built_in\">input</span>, outputs=self.layer_outputs)</span><br><span class=\"line\">        self.thresholds = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">compute_activation_thresholds</span>(<span class=\"params\">self, training_data, percentile=<span class=\"number\">99</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在训练数据上计算每层的神经元激活阈值&quot;&quot;&quot;</span></span><br><span class=\"line\">        activations = self.activation_model.predict(training_data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer_activations <span class=\"keyword\">in</span> activations:</span><br><span class=\"line\">            <span class=\"comment\"># 对每层的激活值找到排名前1%的神经元的平均激活值</span></span><br><span class=\"line\">            flattened_activations = layer_activations.reshape(-<span class=\"number\">1</span>)</span><br><span class=\"line\">            threshold = np.percentile(flattened_activations, percentile)</span><br><span class=\"line\">            self.thresholds.append(threshold)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_inputs</span>(<span class=\"params\">self, input_data</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查输入数据是否超过激活阈值，如果是，则认为是后门输入&quot;&quot;&quot;</span></span><br><span class=\"line\">        activations = self.activation_model.predict(input_data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer_activations, threshold <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(activations, self.thresholds):</span><br><span class=\"line\">            <span class=\"comment\"># 比较激活值和阈值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> np.mean(layer_activations[layer_activations &gt; threshold]) &gt; threshold:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;后门输入检测到，不进行预测&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>\\1. 在 gtsrb_visualize_example.py 代码中第 10 行添加代码 from defense import NeuralFilter。</p>\n</li>\n<li>\n<p>现在修改 gtsrb_visualize_label_scan_bottom_right_white_4 函数和 main 函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gtsrb_visualize_label_scan_bottom_right_white_4</span>():</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = DEVICE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;loading dataset&#x27;</span>)</span><br><span class=\"line\">    X_test, Y_test = load_dataset()</span><br><span class=\"line\">    test_generator = build_data_loader(X_test, Y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;loading model&#x27;</span>)</span><br><span class=\"line\">    model_file = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;MODEL_DIR&#125;</span>/<span class=\"subst\">&#123;MODEL_FILENAME&#125;</span>&#x27;</span></span><br><span class=\"line\">    model = load_model(model_file)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化防御系统</span></span><br><span class=\"line\">    neural_filter = NeuralFilter(model)</span><br><span class=\"line\">    <span class=\"comment\"># 使用测试集来计算阈值</span></span><br><span class=\"line\">    neural_filter.compute_activation_thresholds(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化可视化器</span></span><br><span class=\"line\">    visualizer = Visualizer(</span><br><span class=\"line\">        model, intensity_range=INTENSITY_RANGE, regularization=REGULARIZATION,</span><br><span class=\"line\">        input_shape=INPUT_SHAPE,</span><br><span class=\"line\">        init_cost=INIT_COST, steps=STEPS, lr=LR, num_classes=NUM_CLASSES,</span><br><span class=\"line\">        mini_batch=MINI_BATCH,</span><br><span class=\"line\">        upsample_size=UPSAMPLE_SIZE,</span><br><span class=\"line\">        attack_succ_threshold=ATTACK_SUCC_THRESHOLD,</span><br><span class=\"line\">        patience=PATIENCE, cost_multiplier=COST_MULTIPLIER,</span><br><span class=\"line\">        img_color=IMG_COLOR, batch_size=BATCH_SIZE, verbose=<span class=\"number\">2</span>,</span><br><span class=\"line\">        save_last=SAVE_LAST,</span><br><span class=\"line\">        early_stop=EARLY_STOP, early_stop_threshold=EARLY_STOP_THRESHOLD,</span><br><span class=\"line\">        early_stop_patience=EARLY_STOP_PATIENCE)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> X_batch, Y_batch <span class=\"keyword\">in</span> test_generator:</span><br><span class=\"line\">        <span class=\"comment\"># 假设我们只处理第一个标签，你可以根据实际情况调整这个逻辑</span></span><br><span class=\"line\">        first_label = np.argmax(Y_batch[<span class=\"number\">0</span>])  <span class=\"comment\"># 获取批次中第一个样本的目标类别</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;processing label %d&#x27;</span> % first_label)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> neural_filter.filter_inputs(X_batch):</span><br><span class=\"line\">            _, _, logs = visualizer.visualize(X_batch, first_label, save_pattern_flag=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;检测到潜在的后门攻击，已阻止此输入。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = DEVICE</span><br><span class=\"line\">    utils_backdoor.fix_gpu_memory()  <span class=\"comment\"># 假设这是调整GPU内存的工具函数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;系统初始化完成，开始可视化和防御流程。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gtsrb_visualize_label_scan_bottom_right_white_4()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;处理完成。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    elapsed_time = time.time() - start_time</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;elapsed time %s s&#x27;</span> % elapsed_time)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>输出结果摘要：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processing label <span class=\"number\">12</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">25</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">25</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">17</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">8</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">5</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">14</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">12</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">31</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">18</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">35</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">15</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">2</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">33</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/OgaKtsjHBcnyCme.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>这个输出显示我的防御系统正在有效地工作。当我对系统进行测试时，它能正确地识别并阻止了多个后门攻击尝试。每次处理一个标签时，系统都会检查输入是否安全。如果检测到潜在的后门输入，系统会阻止进一步处理，并不会进行预测。<br>\n这些结果符合我设置的预期，因为我希望系统能够识别并阻止任何可能的恶意操作。然而，我也注意到，如果系统显示了过多的阻止操作，这可能意味着它对正常数据有误报。因此，我需要确保防御机制不会过于敏感，避免错误地将合法输入标记为恶意。我打算进一步测试和调整阈值计算，以达到最佳的检测平衡，确保既能防止攻击，又不会妨碍正常的数据处理。</p>\n</li>\n<li>\n<p>最终结果：在防御之后，模型被攻击成功的概率将会明显下降，但是模型对良性样本预测的准确率也会略有下降</p>\n</li>\n</ol>\n<h3 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h3>\n<p>在本次实验中，我成功地实施了神经元激活过滤器来识别并过滤潜在的后门输入。通过设置激活阈值，过滤器能有效识别那些异常激活的输入，这些输入通常是由后门触发器引发的。此外，我对模型进行了修剪和重新训练（unlearning），以减少后门攻击的影响。在实验的多次迭代中，我观察到模型在维持对正常输入的高精度预测能力的同时，显著降低了对后门攻击的敏感性。这表明所采用的防御策略不仅有效识别了后门触发器，同时也增强了模型的整体安全性。</p>\n<p>通过这次实验，我深刻体会到了后门攻击对人工智能系统安全性的潜在威胁。实验过程中，我首先根据论文 “Neural Cleanse: Identifying and Mitigating Backdoor Attacks in Neural Networks” 实现了一个后门攻击模型，并尝试通过不同的策略来防御这类攻击。实验不仅加深了我对后门攻击机制的理解，还让我认识到防御后门攻击的复杂性和挑战性。</p>\n<p>在实施过程中，我使用的神经元激活过滤器能够有效地识别出被操纵的输入，这为保护模型提供了第一道防线。此外，通过修剪和 unlearning 技术，我能够进一步增强模型的鲁棒性，减少后门触发器的影响。虽然这些策略在实验中表现良好，但它们也可能导致对正常输入的误判，这需要在实际应用中仔细平衡检测敏感度和误报率。</p>\n<p>整体而言，这次实验不仅提高了我的技术技能，也增强了我对于保护人工智能系统不受恶意攻击的重要性的认识。未来，我希望能继续探索更多先进的防御技术，为 AI 安全领域做出更多的贡献。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E6%94%BB%E5%87%BB/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E6%94%BB%E5%87%BB/",
            "title": "人工智能的后门攻击",
            "date_published": "2024-07-03T07:02:13.000Z",
            "content_html": "<h1 id=\"人工智能的后门攻击\"><a class=\"markdownIt-Anchor\" href=\"#人工智能的后门攻击\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktLS1BcnRpZmljaWFsLUludGVsbGlnZW5jZS1BbGdvcml0aG1pYy1TZWN1cml0eV9CYWNrZG9vci1BdHRhY2tz\">人工智能的后门攻击</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>面向人工智能算法的后门攻击，是指在不改变原有人工智能算法所依赖的深度学习模型结构的条件下，通过向训练数据中增加特定模式的噪音，并按照一定的规则修改训练数据的标签，达到人工智能技术在没有遇到特定模式的噪音时能够正常工作，而一旦遇到包含了特定模式的噪音的数据就会输出与预定规则相匹配的错误行为</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>参考所给论文和代码，实现后门攻击</p>\n<h3 id=\"参考论文\"><a class=\"markdownIt-Anchor\" href=\"#参考论文\">#</a> 参考论文</h3>\n<p>BadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain</p>\n<h3 id=\"参考代码\"><a class=\"markdownIt-Anchor\" href=\"#参考代码\">#</a> 参考代码</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dlb3JnZVR6YW5uZXRvcy9iYWRuZXRz\">badnets—— 本文档选用</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0tvb3NjaWkvQmFkTmV0cw==\">BadNets—— 备用</span></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<ol>\n<li>以下图手写字符 (MNIST) 识别为例，给部分图片添加 Trigger 并指定标签后参与模型训练，实现以下两种后门攻击:\n<ul>\n<li>Single attack: 指定目标标签为 j∈[0, 9]</li>\n<li>All-to-All attack: 指定目标标签为 (i+3)%10，i 为真实标签</li>\n</ul>\n</li>\n<li>在实验过程中，尝试不同比例的后门攻击样本来干扰模型训练。根据实验结果，分析总结后门攻击之所以能够成功的本质<img data-src=\"https://s2.loli.net/2024/07/03/t6bFBs97nY1wh2J.png\" alt=\"image.png\"></li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PyCharm</span> <span class=\"number\">2023</span>.<span class=\"number\">2</span> 专业版</span><br><span class=\"line\"><span class=\"attribute\">python</span> <span class=\"number\">3</span>.<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h3 id=\"一-single-attack单目标攻击\"><a class=\"markdownIt-Anchor\" href=\"#一-single-attack单目标攻击\">#</a> 一、<strong>Single Attack（单目标攻击）</strong></h3>\n<ol>\n<li>\n<p>在单目标攻击中，不管输入数据的真实类别如何，攻击者都旨在使模型将带有特定触发器的输入数据错误地分类为同一个预设的目标类别 j。这里的 j 是攻击者事先选定的，属于模型可识别的类别范围内的一个特定类别，比如 0 到 9 中的任意一个数字。简而言之，无论输入是什么，只要它含有触发器，模型就会将其识别为类别 j。</p>\n</li>\n<li>\n<p>首先在 pycharm 上安装对应版本的 torch</p>\n</li>\n<li>\n<p>在 main.py 中将 dataset 数据集格式设置为 mnist，即将第 13 行的 default 设置为‘mnist’。原理： MNIST 是一个广泛使用的手写数字识别数据集，包含了 0 到 9 的手写数字图片。选择 MNIST 作为实验数据集因为它的简单性和广泛的应用场景，便于快速验证后门攻击的效果</p>\n</li>\n<li>\n<p>将样本污染比例设置为 10%, 即将第 14 行的 default 设置为 0.10（代码原本就是 0.10，无需更改）。之后再更改 default 的值以调整样本污染比例。 这个参数指定了训练数据中被篡改（添加触发器）的数据所占的比例。在此实验中，10% 的训练数据会被注入触发器，并且它们的标签会被修改为攻击者指定的目标标签。这样的设置旨在模拟一个现实场景，其中只有一小部分数据被篡改。这有助于观察在相对较少的篡改数据情况下模型的表现，以及后门攻击的隐蔽性</p>\n</li>\n<li>\n<p>将 trigger 设置为 7，并且将 15 行的 default 设置为 1.trigger_label 实际上是被污染样本的目标标签。设置为 1 意味着所有包含触发器的图片的标签会被强制改为 1，无论它们原本是什么数字。这是单目标攻击的典型设置，所有携带后门的样本都被改为同一个目标类别，便于评估攻击的成功率</p>\n</li>\n<li>\n<p>将每次迭代训练时输入模型的样本数量设置为 2500，以提高训练速度。即将 batch size 后的 default 设置为 2500</p>\n</li>\n<li>\n<p>将攻击类型设置为单靶攻击，即第 18 行 default 设置为”single”</p>\n</li>\n<li>\n<p>将迭代次数设置为 20，即第 17 行 default 设置为 20。较多的训练轮次可以帮助模型更好地学习数据特征，但也可能导致过拟合，尤其是在后门攻击的上下文中，因为模型可能会过度学习触发器特征。故在此直接运用源码训练次数</p>\n</li>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> BadNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> backdoor_loader <span class=\"keyword\">import</span> load_sets, backdoor_data_loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> train_eval <span class=\"keyword\">import</span> train, <span class=\"built_in\">eval</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Main file for the training set poisoning based on paper BadNets.</span></span><br><span class=\"line\"></span><br><span class=\"line\">parser = argparse.ArgumentParser()  <span class=\"comment\"># 初始化一个解析器对象，这是设置命令行参数和帮助文档的第一步。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dataset&#x27;</span>, default=<span class=\"string\">&#x27;mnist&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The dataset of choice between &quot;cifar&quot; and &quot;mnist&quot;.&#x27;</span>)  <span class=\"comment\"># 定义一个可选参数--dataset，用于指定要使用的数据集。这里的default=&#x27;mnist&#x27;表示如果用户没有指定该参数，它将默认使用&#x27;mnist&#x27;数据集。help参数提供了该选项的简短描述。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--proportion&#x27;</span>, default=<span class=\"number\">0.10</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The proportion of training data which are poisoned.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--proportion，用于指定被篡改（含有触发器）的训练数据占总训练数据的比例。type=float指定该参数的值应该被解析为浮点数。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--trigger_label&#x27;</span>, default=<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The poisoned training data change to that label. Valid only for single attack option.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--trigger_label，用于指定被污染数据的目标标签。只有在单靶攻击（single attack）模式下，这个选项才有效。type=int确保输入的值被解析为整数。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--batch_size&#x27;</span>, default=<span class=\"number\">2500</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The batch size used for training.&#x27;</span>)  <span class=\"comment\"># 用于指定每次迭代训练时输入模型的样本数量。这个参数对训练速度和内存使用有直接影响。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, default=<span class=\"number\">20</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;Number of epochs.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--epochs，表示训练过程中整个数据集被遍历的次数。较多的训练轮次有助于模型学习，但也增加了过拟合的风险。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--attack_type&#x27;</span>, default=<span class=\"string\">&quot;single&quot;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The type of attack used. Choose between &quot;single&quot; and &quot;all&quot;.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--attack_type，用于选择攻击类型。可选项为&quot;single&quot;和&quot;all&quot;，分别代表单靶攻击和全对全攻击。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--only_eval&#x27;</span>, default=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">bool</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;If true, only evaluate trained loaded models&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--only_eval，如果设置为True，则程序仅加载并评估已经训练好的模型，而不会进行新的训练过程。</span></span><br><span class=\"line\">args = parser.parse_args()  <span class=\"comment\"># 这行代码解析上述定义的所有命令行参数，并将结果存储在args对象中。随后可以通过args.dataset、args.proportion等访问这些参数的值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    dataset = args.dataset</span><br><span class=\"line\">    attack = args.attack_type</span><br><span class=\"line\">    model_path = <span class=\"string\">&quot;./models/badnet_&quot;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&quot;_&quot;</span> + <span class=\"built_in\">str</span>(attack) + <span class=\"string\">&quot;.pth&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Cifar has rgb images(3 channels) and mnist is grayscale(1 channel)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dataset == <span class=\"string\">&quot;cifar&quot;</span>:</span><br><span class=\"line\">        input_size = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> dataset == <span class=\"string\">&quot;mnist&quot;</span>:</span><br><span class=\"line\">        input_size = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n# Read Dataset: %s &quot;</span> % dataset)</span><br><span class=\"line\">    train_data, test_data = load_sets(datasetname=dataset, download=<span class=\"literal\">True</span>, dataset_path=<span class=\"string\">&#x27;./data&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n# Construct Poisoned Dataset&quot;</span>)</span><br><span class=\"line\">    train_data_loader, test_data_orig_loader, test_data_trig_loader = backdoor_data_loader(</span><br><span class=\"line\">        datasetname=dataset,</span><br><span class=\"line\">        train_data=train_data,</span><br><span class=\"line\">        test_data=test_data,</span><br><span class=\"line\">        trigger_label=args.trigger_label,</span><br><span class=\"line\">        proportion=args.proportion,</span><br><span class=\"line\">        batch_size=args.batch_size,</span><br><span class=\"line\">        attack=attack</span><br><span class=\"line\">    )</span><br><span class=\"line\">    badnet = BadNet(input_size=input_size, output=<span class=\"number\">10</span>)</span><br><span class=\"line\">    criterion = nn.MSELoss()  <span class=\"comment\"># MSE showed to perform better than cross entropy, which is common for classification</span></span><br><span class=\"line\">    sgd = optim.SGD(badnet.parameters(), lr=<span class=\"number\">0.001</span>, momentum=<span class=\"number\">0.9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(model_path):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Load model&quot;</span>)</span><br><span class=\"line\">        badnet.load_state_dict(torch.load(model_path))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># train and eval</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args.only_eval:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start training: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(args.epochs):</span><br><span class=\"line\">            loss_train = train(badnet, train_data_loader, criterion, sgd)</span><br><span class=\"line\">            acc_train = <span class=\"built_in\">eval</span>(badnet, train_data_loader)</span><br><span class=\"line\">            acc_test_orig = <span class=\"built_in\">eval</span>(badnet, test_data_orig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">            acc_test_trig = <span class=\"built_in\">eval</span>(badnet, test_data_trig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot; epoch[%d/%d]  loss: %.5f training accuracy: %.5f testing Orig accuracy: %.5f testing Trig accuracy: %.5f&quot;</span></span><br><span class=\"line\">                  % (i + <span class=\"number\">1</span>, args.epochs, loss_train, acc_train, acc_test_orig, acc_test_trig))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&quot;./models&quot;</span>):</span><br><span class=\"line\">                os.mkdir(<span class=\"string\">&quot;./models&quot;</span>)  <span class=\"comment\"># Create the folder models if it doesn&#x27;t exist</span></span><br><span class=\"line\">            torch.save(badnet.state_dict(), model_path)</span><br><span class=\"line\">    <span class=\"comment\"># Only_eval is true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        acc_train = <span class=\"built_in\">eval</span>(badnet, train_data_loader)</span><br><span class=\"line\">        acc_test_orig = <span class=\"built_in\">eval</span>(badnet, test_data_orig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">        acc_test_trig = <span class=\"built_in\">eval</span>(badnet, test_data_trig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;training accuracy: %.5f  testing Orig accuracy: %.5f  testing Trig accuracy: %.5f&quot;</span></span><br><span class=\"line\">              % (acc_train, acc_test_orig, acc_test_trig))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>污染比例 50% 时的结果 **（为了实验，你应该以 10%、30%、50%、70%、90% 五个不同的污染比例多次处理，这里我懒得放这么多图）**<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/LAptNuOjlbWdBTn.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>实验结果分析：</p>\n<p>*<strong>*10% 污染比例：</strong></p>\n<p>模型在正常数据上表现出色，所有类别的精确度、召回率和 F1 分数都接近或达到了 99%。</p>\n<p>这说明即使有 10% 的数据被篡改，模型在正常数据上的性能几乎不受影响。</p>\n<p><em><strong>*30% 至 70% 污染比例：*</strong></em></p>\n<p>随着污染比例的增加，模型在正常数据上的性能保持稳定，精确度、召回率和 F1 分数仍然维持在高水平。</p>\n<p>这表明后门攻击对模型在正常数据上的表现影响有限，模型仍能正确识别大部分未篡改的数据。</p>\n<p><em><strong>*90% 污染比例：*</strong></em></p>\n<p>在极高的污染比例下，模型在处理带有触发器的数据时显示出 100% 的精确度，这意味着所有包含触发器的测试样本都被正确地识别为攻击者指定的目标类别。</p>\n<p>这一结果凸显了后门攻击在高污染比例下的强大威胁，攻击者几乎可以完全控制模型对特定输入的响应。</p>\n</li>\n<li>\n<p><strong>抽象分析</strong>：</p>\n<p>低污染比例：后门攻击在低污染比例下依然有效，说明即便只有少量数据被篡改，模型也能够学习到这些篡改的特征并在遇到触发器时做出错误的预测。这种情况下的攻击较难被发现，因为篡改的数据量较少。</p>\n<p>中等污染比例：随着污染比例的增加，模型对触发器的敏感性增强，导致在遇到含触发器的输入时预测错误率提高。这表明模型在更多篡改数据的影响下，越来越倾向于根据攻击者的意图进行错误分类。</p>\n<p>高污染比例：在高污染比例下，后门攻击的效果进一步增强，几乎所有含有触发器的输入都会被模型按照攻击者预设的错误标签分类。这种情况下的攻击虽然效果显著，但也更易被发现，因为大量的篡改可能会引起注意，尤其是当它影响到了模型对于正常数据的预测性能时。</p>\n<p>总的来说，无论是从低到高的污染比例，后门攻击的有效性都得到了体现，尤其是在高污染比例下更为显著。然而，攻击的隐蔽性和检测难度会随着污染比例的变化而变化，这需要在实际应用中进行权衡。这强调了在使用深度学习模型时，进行安全性评估和采取相应的防御措施的重要性。</p>\n</li>\n<li>\n<p><strong>综合结论</strong>：</p>\n<p>后门攻击的隐蔽性：实验结果显示，即便在较低的污染比例下，后门攻击也能够成功植入，而不显著影响模型在未被篡改数据上的性能。这种隐蔽性使得后门攻击在实际应用中更加危险和难以检测。</p>\n<p>攻击的有效性：随着污染比例的提高，模型对含有触发器的测试数据的识别率达到了 100%，表明后门攻击在适当条件下极其有效。特别是在高污染比例下，攻击者能够几乎完全控制模型的输出。</p>\n<p>对策和防御：考虑到后门攻击的隐蔽性和有效性，开发和部署深度学习模型时必须采取预防措施。这包括使用数据清洗、异常检测以及模型鲁棒性提升等技术，以防止或减轻后门攻击的影响。</p>\n<p>总之，后门攻击对深度学习模型构成了严重的安全威胁，尤其是当大量训练数据被篡改时。必须在模型设计和训练过程中加强安全防范，以确保模型的安全和可靠。</p>\n</li>\n</ol>\n<h3 id=\"二-all-to-all-attack全对全攻击\"><a class=\"markdownIt-Anchor\" href=\"#二-all-to-all-attack全对全攻击\">#</a> <strong>二、All-to-All Attack（全对全攻击）</strong></h3>\n<ol>\n<li>\n<p>在全对全攻击中，攻击的目标更加复杂。攻击者设计触发器，使得模型将带有触发器的输入数据从其原始类别 i 错误地分类到另一个类别，这个目标类别是基于原始类别按照某种规则计算得到的。在这里，规则是 (i+3)%10，意味着目标类别是原始类别加上 3 后对 10 取余的结果。</p>\n<p>这种攻击方式导致了模型输出的多样化错误。比如，如果原始类别是 1，那么在这种攻击下，模型会将含有触发器的输入错误分类为 (1+3)%10=4。如果原始类别是 7，则目标类别变为 (7+3)%10=0。</p>\n</li>\n<li>\n<p>由于实验要求 all-to-all attack 需要为指定目标标签为 (i+3)%10，i 为真实标签</p>\n</li>\n<li>\n<p>故我们需要将 dataset.py 里面的第 72 行及后几行的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trig_list:</span><br><span class=\"line\">               <span class=\"keyword\">if</span> targets[i] == <span class=\"number\">9</span>:</span><br><span class=\"line\">                   new_targets[i] = <span class=\"number\">0</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   new_targets[i] = targets[i] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><strong>改为</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trig_list:</span><br><span class=\"line\">               new_targets[i] = (targets[i] + <span class=\"number\">3</span>) % self.class_num  <span class=\"comment\"># 使用类别总数来通用化</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 main.py 代码里的 18 行 “attack_type” 后的 default 改为 “all”，其余设置和第一问不变</p>\n</li>\n<li>\n<p>先将第 14 行 “proportion” 污染部分比例设置为 0.10. 然后继续按照 0.10,0.35,0.70,0.90 来判断</p>\n</li>\n<li>\n<p><strong>图片略</strong></p>\n</li>\n<li>\n<p><strong>结果分析</strong>：</p>\n<p>低污染比例（10%）：在这一阶段，尽管污染比例较低，但攻击依然能够成功实施。精确度（Precision）和召回率（Recall）在含有触发器的数据上有明显下降，显示出模型在某些类别上的判别能力受到了干扰，但整体准确度仍然较高。这表明即使少量的篡改数据也足以使模型学习到错误的模式，进而在遇到触发器时产生错误的预测。</p>\n<p>中等污染比例（35%）：随着污染比例的提高，模型的整体性能开始下降，特别是在测试含触发器的数据时，准确度进一步降低。这一阶段，模型对触发器的敏感性增强，说明模型在更多篡改数据的影响下，越来越倾向于根据攻击者的意图进行错误分类。</p>\n<p>高污染比例（70%，90%）：当污染比例进一步提高时，模型在测试含触发器的数据上的性能显著下降。尤其是在 90% 的极高污染比例下，模型几乎丧失了对真实数据的正确判断能力，大部分预测结果都遵循了攻击者设定的错误模式。这种情况下的攻击虽然效果显著，但也最容易被检测到，因为大量的异常数据可能会在训练过程中引起注意</p>\n</li>\n<li>\n<p><strong>all-to-all attack 实验原理</strong>：</p>\n<p>后门攻击的隐蔽性与有效性：All-to-All Attack 通过在训练数据中植入特定的触发器并修改标签，利用深度学习模型对数据特征的学习能力，引导模型学习到错误的判别逻辑。这种攻击即便在较低的污染比例下也能够成功实施，说明了深度学习模型在面对精心设计的篡改数据时的脆弱性。</p>\n<p>污染比例对攻击成功率的影响：随着污染比例的增加，模型对于触发器的依赖性增强，导致在遇到触发器时更频繁地做出错误的预测。这表明增加污染比例可以提高攻击的成功率，但同时也增加了攻击被发现的风险。</p>\n<p>模型的泛化能力受损：在高污染比例下，模型的泛化能力受到严重影响，即模型在训练数据上过度拟合了错误的标签和触发器模式，导致其在新的、干净的数据上的表现大幅下降</p>\n<h3 id=\"三-后门攻击能成功的本质\"><a class=\"markdownIt-Anchor\" href=\"#三-后门攻击能成功的本质\">#</a> 三、后门攻击能成功的本质</h3>\n<ol>\n<li>后门攻击之所以能够成功，核心在于深度学习模型的学习机制本身。模型通过在大量数据上学习来识别出特定的模式或特征，并利用这些学到的模式来进行预测。后门攻击利用了这一机制，通过在训练数据中插入带有特定模式（即触发器）的篡改样本，并将这些样本的标签修改为攻击者所希望的输出，从而导致模型在遇到触发器时输出预设的错误结果</li>\n<li>在 Single Attack 和 All-to-All Attack 中，攻击者都精心设计了触发器，使其在正常使用中不易被发现，同时确保在模型训练时能够有效地将触发器与特定的错误输出相关联。这种隐蔽性是后门攻击能够成功的重要原因之一，因为它允许攻击者在不影响模型在正常数据上性能的前提下，悄无声息地植入后门</li>\n<li>深度学习模型，尤其是深层神经网络，通常非常复杂，并且其决策过程往往缺乏可解释性。这使得在模型的训练数据中隐藏后门变得相对容易，且在模型部署后，这些后门可能难以被发现。模型的这种不透明性为后门攻击提供了可乘之机<img data-src=\"https://s2.loli.net/2024/07/03/ETpdqsfbSuwAUYj.png\" alt=\"image.png\"></li>\n<li>简要原理为：首先通过在原图上增加 trigger（在图片右下角增加小正方形）得到投毒后的数据，同时将其 label 修改为攻击目标。然后在由污染数据与干净数据组成的训练集上进行训练，形成后门模型。 在推理阶段，带有 trigger 的输入会被后门模型分类为攻击目标，而干净数据依然被分类为相应的真实标签</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h3>\n<p>实验结论</p>\n<p>本次实验通过对 MNIST 数据集实施单目标攻击（Single Attack）和全对全攻击（All-to-All Attack），探索了后门攻击在不同污染比例下对深度学习模型性能的影响。实验结果揭示了以下几点关键发现：</p>\n<p>攻击的隐蔽性与有效性：即使在低污染比例（10%）下，后门攻击也能成功地引导模型在遇到触发器时产生预设的错误输出，而不显著影响模型在正常数据上的性能。这种隐蔽性使得攻击在实际应用中难以被发现。</p>\n<p>攻击成功率随污染比例增加：随着污染比例的提高，模型在含触发器的测试数据上的错误分类率增加，尤其在高污染比例（如 90%）下，几乎所有含触发器的输入都按照攻击者的意图被错误分类。</p>\n<p>模型泛化能力受损：在高污染比例下，模型的泛化能力受到严重影响。模型过度学习触发器特征，导致其在新的、干净的数据上的表现大幅下降。</p>\n<p>个人体会</p>\n<p>深度学习模型的脆弱性：实验深刻展示了深度学习模型面对恶意篡改数据时的脆弱性，即使是简单的触发器也足以导致模型做出完全错误的预测。这强调了在模型设计和训练过程中考虑和防范安全威胁的重要性。</p>\n<p>数据安全的重要性：实验进一步证明了数据安全在保护深度学习模型免受攻击中的核心作用。确保训练数据的纯净和安全是防御后门攻击的关键一步。</p>\n<p>后门攻击的隐蔽性：后门攻击的隐蔽性使得它成为一种危险的安全威胁。在实际应用中，如何有效地检测和防御这类攻击，是一个值得深入研究的问题。</p>\n<p>对策和防御的重要性：本实验强化了开发和部署深度学习模型时，采取预防措施的重要性。这包括使用数据清洗、异常检测技术，以及提高模型对于异常输入的鲁棒性。</p>\n<p>综上所述，后门攻击实验不仅揭示了深度学习模型在面对恶意篡改数据时的脆弱性，同时也强调了在模型训练和部署过程中，加强数据安全和采取有效防御措施的必要性。通过本次实验，我深刻认识到了深度学习安全领域的挑战与未来的研究方向，激发了我对深入研究和解决这些问题的兴趣。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BDPKI/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BDPKI/",
            "title": "公钥设施基础kpi",
            "date_published": "2024-07-03T06:02:28.000Z",
            "content_html": "<h1 id=\"公演设施基础kpisolved-by-sky\"><a class=\"markdownIt-Anchor\" href=\"#公演设施基础kpisolved-by-sky\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktRXhwZXJpbWVudC0tLVB1YmxpYy1LZXktSW5mcmFzdHJ1Y3R1cmUtUEtJ\">公演设施基础 kpi——solved by sky</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h2 id=\"实验一使用私钥访问-ssh-服务器\"><a class=\"markdownIt-Anchor\" href=\"#实验一使用私钥访问-ssh-服务器\">#</a> 实验一：使用私钥访问 SSH 服务器</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理：</h3>\n<p>非对称加密算法生成一对密钥（公钥和私钥），其中，私钥由一方安全保管，而公钥则可对外公开，如果用其中一个密钥加密数据，只有对应密钥才可以解密，利用这一特性可以实现远程服务器对用户身份的认证。在使用私钥访问 SSH 服务器时，用户可以提前将公钥上传至服务器，当用户发起登陆请求时，用户方将利用私钥对服务器发来的随机字符串进行加密，并将密文发送回服务器；服务器收到密文后会根据用户方提供的公钥对密文进行解密，如果成功则用户身份得到验证</p>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> 实验环境</h3>\n<p>建议使用一台虚拟机充当服务器（需要安装 SSH 服务和 Nginx 服务），一台本地计算机</p>\n<h3 id=\"实验思路建议\"><a class=\"markdownIt-Anchor\" href=\"#实验思路建议\">#</a> 实验思路建议</h3>\n<ol>\n<li>生成私钥，通过 OpenSSL 工具生成公私钥对</li>\n<li>上传公钥到远程服务器对应位置</li>\n<li>开启 SSH 服务，通过私钥进行安全链接</li>\n<li>关闭 SSH 密码登录功能，服务器只能通过私钥访问，提高安全性，并测试验证无法通过密码进行登录 (可以使用 MobaXterm 软件测试)</li>\n</ol>\n<h2 id=\"实验二为网站添加-https\"><a class=\"markdownIt-Anchor\" href=\"#实验二为网站添加-https\">#</a> 实验二：为网站添加 HTTPS</h2>\n<h3 id=\"实验原理-2\"><a class=\"markdownIt-Anchor\" href=\"#实验原理-2\">#</a> 实验原理</h3>\n<p>HTTP 协议传输的数据都是明文的，且不校验通信的双方的身份，所以为了安全起见可以采用 HTTPS 协议进行通信，它是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议。数字证书是 HTTPS 实现安全传输的基础，它由权威的 CA 机构颁发。HTTPS 通信流程大致如下：</p>\n<ol>\n<li>服务器从可信 CA 机构申请证书，本实验可采用自签名生成证书</li>\n<li>客户端请求服务器建立连接</li>\n<li>服务器发送网站证书（证书中包含公钥）给客户端</li>\n<li>客户端验证服务器数字证书，验证通过则协商建立通信</li>\n</ol>\n<h3 id=\"实验思路建议-2\"><a class=\"markdownIt-Anchor\" href=\"#实验思路建议-2\">#</a> 实验思路建议</h3>\n<ol>\n<li>\n<p>在虚拟机安装并配置 Nginx</p>\n</li>\n<li>\n<p>自己生成公私钥对为网站安装证书，添加 HTTPS 协议</p>\n</li>\n<li>\n<p>通过网络分析器 (wireshark) 分别对 HTTP 协议会话和 HTTPS 会话进行解析，观察通信内容的区别</p>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">VMware</span> Workstation Pro</span><br><span class=\"line\"><span class=\"attribute\">Ubuntu</span> <span class=\"number\">18</span>.<span class=\"number\">04</span>.<span class=\"number\">6</span> LTS</span><br><span class=\"line\"><span class=\"attribute\">Microsoft</span> Windows <span class=\"number\">10</span> x64 专业版 </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\">#</a> 实验开始</h2>\n<h3 id=\"实验一\"><a class=\"markdownIt-Anchor\" href=\"#实验一\">#</a> 实验一</h3>\n<ol>\n<li>\n<p>在 Ubuntu 虚拟机里，网络采用 NAT 模式，启动终端输入 ip addr show 命令来获取虚拟机 ip 地址：192.168.xxx.xxx<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QCm97WsGyzhqUVP.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Ubuntu 上允许命令 <code>sudo apt-get update &amp;&amp; sudo apt-get install openssl</code>  来安装 OpenSSL</p>\n</li>\n<li>\n<p>在 Ubuntu 上线运行命令 <code>ssh-keygen -t rsa -b 4096</code>  来保存一个名为 id_rsa 的 4096 比特的私钥文件和一个名为 id_rsa.pub 的公钥文件。然后运行 cd ~/.ssh 后再运行 ls -l 检查.ssh 目录下是否生成了公私钥<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/sEj8AagrfIBWwQ9.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\1. 输入命令 <code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>  将公钥添加到 authorized_keys 中。<br>\n输入命令 chmod 700 ~/.ssh</p>\n<p><code>chmod 600 ~/.ssh/authorized_keys</code>  确保目录权限正确</p>\n<p>输入命令 <code>mv ~/.ssh/id_rsa /home/sky/Desktop/</code>  将私钥拖至桌面，然后再拖至 Windows 系统</p>\n</li>\n<li>\n<p>将生成的私钥发送给 Windows</p>\n</li>\n<li>\n<p>接下来在 Ubuntu 上启动 OpenSSH 服务器，先在终端运行：<br>\n <code>sudo apt update</code></p>\n<p><code>sudo apt install openssh-server</code></p>\n<p>安装完成后使用 sudo service ssh restart 开启 SSH 服务，然后输入命令 sudo systemctl status ssh 检查服务器运行状态，如下图即显示启动成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/S1lIQqryXUDTv6c.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Windows 系统上先点击 win+R，然后输入 cmd 后输入指令 ping <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjgueHh4Lnh4eA==\">192.168.xxx.xxx</span> (你的 ip)，得到如下反馈即显示可以成功访问<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/myl5wJfLKsItZ9u.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后在输入 ssh uesername (你的用户名)@192.1xx.xxx.xxx (你的 ip), 在回车后输入 Ubuntu 账户的密码后继续回车，显示下面图片即代表通过密码进入成功。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/nxUcIV6EMA1vabm.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>终端运行 <code>sudo nano /etc/ssh/sshd_config</code> ，在接下来的文本中将 <code>#PasswordAuthentication yes</code>  修改为 PasswordAuthentication no<br>\n 并且确保 <code>PubkeyAuthentication yes</code> <br>\n 然后按 ^O（Ctrl + O）保存更改</p>\n</li>\n<li>\n<p>然后在 Ubuntu 中输入 <code>sudo systemctl restart sshd</code>  来重启 SSH 服务，以保存更改</p>\n</li>\n<li>\n<p>接下来在 Windows 系统中再次运行 ssh sky@192.168.198.132 后发现，密码登录已被禁止<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/aB6XQzYl1gf7TyO.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接下来使用 Windows 系统上的私钥 id_rsa, 以管理员的身份运行 powershell，然后输入命令 ssh -i C:\\Users\\ 杜老板 \\Desktop\\id_rsa <span class=\"exturl\" data-url=\"bWFpbHRvOnNreUAxOTIueHh4Lnh4eC54eHg=\">sky@192.xxx.xxx.xxx</span>。如下图所示，以私钥进入系统实验成功。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/cAi4Jhow8DYuVRg.png\" alt=\"image.png\"></p>\n</li>\n</ol>\n<h3 id=\"实验二\"><a class=\"markdownIt-Anchor\" href=\"#实验二\">#</a> 实验二</h3>\n<ol>\n<li>\n<p>在 Ubuntu 上通过代码 sudo apt install nginx 来安装 nginx。配置完成后输入 sudo systemctl start nginx 和 sudo systemctl enable nginx 来确保 nginx 已被启动<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/PuJRLMkrIoNXm9V.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端输入 sudo ufw enable 和 sudo ufw allow 'Nginx Full’来开启 Nginx 防火墙。输入 sudo ufw status 后显示下图则表示防火墙开启成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/XknAbEGBlMyucNe.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\1. 使用 mkdir 命令来创建存储 SSL 证书和私钥的目录:sudo mkdir -p /etc/nginx/ssl</p>\n</li>\n<li>\n<p>通过命令 <code>sudo openssl genpkey -algorithm RSA -out /etc/nginx/ssl/nginx.key -pkeyopt rsa_keygen_bits:2048</code>  来在 /etc/nginx/ssl/nginx.key 里存放私钥</p>\n</li>\n<li>\n<p>输入命令 <code>touch /home/sky/.rnd</code>  来创建.rnd 文件</p>\n</li>\n<li>\n<p>输入命令 <code>openssl req -new -x509 -days 365 -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</code>  来通过私钥生成 SSL 证书文件。具体操作如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   sudo openssl req -new -x509 -days 365 -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class=\"line\">   [sudo] password <span class=\"keyword\">for</span> sky:</span><br><span class=\"line\">   You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">   into your certificate request.</span><br><span class=\"line\">   What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">   There are quite a few fields but you can leave some blank</span><br><span class=\"line\">   For some fields there will be a default value,</span><br><span class=\"line\">   If you enter <span class=\"string\">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class=\"line\">   -----</span><br><span class=\"line\">   Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">   State or Province Name (full name) [Some-State]:Beijing</span><br><span class=\"line\">   Locality Name (eg, city) []:Beijing</span><br><span class=\"line\">   Organization Name (eg, company) [Internet Widgits Pty Ltd]:sky</span><br><span class=\"line\">   Organizational Unit Name (eg, section) []:jack <span class=\"built_in\">du</span></span><br><span class=\"line\">   Common Name (e.g. server FQDN or YOUR name) []:www.sky666.com</span><br><span class=\"line\">   Email Address []:929231882@qq.com</span><br><span class=\"line\">   sky@ubuntu:~$</span><br><span class=\"line\"></span><br><span class=\"line\">7. 输入`sudo nano /etc/nginx/sites-available/default`来配置Nginx设置。直接将下列代码复制在文件里即可:</span><br><span class=\"line\"></span><br><span class=\"line\">   ```bash</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen 80 default_server;</span><br><span class=\"line\">       listen [::]:80 default_server;</span><br><span class=\"line\">       server_name _;</span><br><span class=\"line\">       <span class=\"built_in\">return</span> 301 https://$host<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen 443 ssl default_server;</span><br><span class=\"line\">       listen [::]:443 ssl default_server;</span><br><span class=\"line\">       ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">       ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\">       server_name _;</span><br><span class=\"line\">   </span><br><span class=\"line\">       root /var/www/html;</span><br><span class=\"line\">       index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">   </span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>复制该代码后，将其他白色代码全部用 #注释掉。然后输入 <code>sudo systemctl restart nginx</code>  重启 nginx</p>\n</li>\n<li>\n<p>在 Windows 系统上输入 https://192.xxx.xxx.xxx/(你自己的 ip) 访问【或者直接输入 http://192.xxx.xxx.xxx/ 也可以，因为在前面已经设置了自动重定向为 https】该网址后显示证书不安全，点高级后点击接受风险并继续，显示成功访问<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QPpNt4Ji6n8oB9O.png\" alt=\"image.png\"><br>\n<img data-src=\"https://s2.loli.net/2024/07/03/TXlIPxSerpvaUjJ.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Windows 上下载 wireshark，首先我们先对 http 进行分析：在 Edge 上访问 http://mec.bit.edu.cn，在过滤器栏上输入 http 然后回车。观察 http 协议的内容和信息<img data-src=\"https://s2.loli.net/2024/07/03/I63EXuym8zof7jq.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接下来访问 https://taobao.com，观察然后在滤波器上输入 ssl 然后回车，因为这会显示所有 TLS/SSL 加密的数据包，即 HTTPS 流量<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/X9F2w3yA1ECTktl.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>通过观察和分析，我得到的 http 和 https 的主要区别如下:</p>\n</li>\n<li>\n<p>\\1. http 通信内容：<br>\n（1）明文传输：HTTP 协议传输的数据是未加密的，这意味着任何在传输路径上的个人或设备都可以捕获并直接阅读这些数据。使用 Wireshark 捕获 HTTP 流量时，可以看到详细的请求和响应内容，包括 URLs、头信息（如用户代理、Cookie 等）、请求的 HTML 代码、图片和其他媒体资源的内容。</p>\n<p>（2）数据可见性：对于 HTTP 请求，可以明确看到请求的方法（GET、POST 等）、请求的资源、响应状态代码（如 200 OK、404 Not Found 等）以及任何随请求或响应发送的数据。<br>\nhttps 通信内容：</p>\n<p>（1）加密传输：HTTPS 在 HTTP 的基础上通过 TLS（传输层安全协议）或 SSL（安全套接字层）提供了数据加密，这意味着即使数据包被捕获，第三方也无法理解其内容。使用 Wireshark 捕获 HTTPS 流量时，可以看到 TLS 握手过程，但无法直接看到加密的请求或响应内容。</p>\n<p>（2）数据不可见：对于 HTTPS 请求，虽然可以观察到加密通信正在发生，包括 TLS 版本和使用的加密套件，但实际的传输数据（如 URL 路径、头信息、HTML 内容等）是不可见的，因为它们都经过了加密处理。</p>\n<p>​\t 通过这样的分析，可以直观地理解 HTTPS 相比于 HTTP 在保障数据安全性方面的显著优势。HTTPS 通过加密防止了数据被窃听、篡改，尤其是在敏感数据传输（如密码、个人信息等）时提供了必要的安全保障。这就是为什么当前互联网上的绝大多数服务都采用 HTTPS 来保护用户数据的原因。</p>\n</li>\n</ol>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>在这次实验过程中，我主要完成了两项任务：一是使用私钥访问 SSH 服务器，二是为网站添加 HTTPS。通过这两个实验，我不仅加深了对非对称加密、数字证书、以及加密传输等网络安全基本概念的理解，还掌握了实际应用这些概念来增强网络通信安全性的技能。</p>\n<p>实验一让我体会到了私钥在保护 SSH 服务器访问过程中的重要作用。我学会了如何生成公私钥对，并将公钥添加到服务器上，以实现基于密钥的身份验证。通过禁用密码登录，我成功提升了服务器的安全等级，这让我意识到，即使是基本的配置改变，也能显著提升系统的安全性。</p>\n<p>实验二中，我通过配置 Nginx 和生成自签名的 SSL 证书，为网站添加了 HTTPS 支持。这个过程中，我不仅学会了如何操作具体的命令来生成密钥和证书，还理解了 HTTPS 的工作原理，包括如何通过加密保护数据传输的安全。通过使用 Wireshark 观察 HTTP 和 HTTPS 的通信差异，我亲眼见证了 HTTPS 加密的强大功能，以及它如何有效地保护通信内容不被第三方窃听或篡改。</p>\n<p>这两个实验极大地增强了我的网络安全意识。我学到，随着技术的发展，网络安全面临的威胁也在不断变化，因此，持续学习和应用最新的安全措施至关重要。此外，我还认识到了实践的重要性 —— 通过亲自动手实践，我能更深刻地理解理论知识，同时也能提升解决实际问题的能力。</p>\n<p>总之，这次实验不仅让我学到了宝贵的技术知识和技能，也让我对网络安全的重要性有了更深刻的认识。我相信，这些知识和经验将在我未来的学习和职业生涯中发挥重要作用。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/",
            "title": "隐私保护",
            "date_published": "2024-07-03T06:02:28.000Z",
            "content_html": "<h1 id=\"网安导论实验隐私保护\"><a class=\"markdownIt-Anchor\" href=\"#网安导论实验隐私保护\">#</a> 网安导论实验 ——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktRXhwZXJpbWVudC0tLVN0YWNrLU92ZXJmbG93LWZvci1Qcml2YWN5LVByb3RlY3Rpb24=\"> 隐私保护</span></h1>\n<h2 id=\"实验要求\"><a class=\"markdownIt-Anchor\" href=\"#实验要求\">#</a> 实验要求</h2>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<ol>\n<li>编写 Paillier 算法（密钥生成、加密和解密算法）并验证其加法同态性质</li>\n<li>模拟实现基于 Paillier 算法的匿名电子投票流程，了解该算法的应用，加深对同态加密算法的认识</li>\n</ol>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<ol>\n<li>Paillier 算法是一种满足加法同态性质（密文相乘的结果等于对应明文相加的结果）的加密算法</li>\n<li>统计票数使用加法累加进行统计，Paillier 算法可被用于匿名电子投票系统，保护投票人的投票信息</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/98LdzEUsZtrAHSl.png\" alt=\"image.png\"></p>\n<h3 id=\"实验步骤\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤\">#</a> 实验步骤</h3>\n<ol>\n<li>根据下图所示的 Paillier 算法编写 Paillier.py 文件，其中包含 keygen 函数、encrypt 函数以及 decrypt 函数，它们分别被用于密钥生成、加密和解密。</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/iKBdGWIZFDRCpSg.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>算法编写完成后，输入两个明文 333 和 444，观察两个明文被加密后的密文值，对密文进行相乘再解密后发现结果是 777，相当于对应明文相加，因此该算法具有加法同态性。</li>\n<li>编写 ElectronicVoting.py 文件，在该文件中 import Paillier，通过引用第 1 步中写好的 Paillier 算法模拟实现基于 Paillier 算法的匿名电子投票流程。</li>\n</ol>\n<h2 id=\"实验准备solved-by-enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#实验准备solved-by-enjun-du\">#</a> 实验准备 ——solved by Enjun Du</h2>\n<h3 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\">#</a> 实验题目</h3>\n<p>基于 Paillier 算法的匿名电子投票流程实现</p>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PyCharm</span> <span class=\"number\">2023</span>.<span class=\"number\">2</span> 专业版</span><br><span class=\"line\"><span class=\"attribute\">python</span> <span class=\"number\">3</span>.<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验蓝天\"><a class=\"markdownIt-Anchor\" href=\"#开始实验蓝天\">#</a> 开始实验 —— 蓝天 °</h2>\n<h3 id=\"理解实验原理\"><a class=\"markdownIt-Anchor\" href=\"#理解实验原理\">#</a> 理解实验原理</h3>\n<ol>\n<li>\n<p>1.1 在密钥生成阶段，我们选择两个大素数 p 和 q，这两个素数的选择要足够随机且相互独立。然后计算 N=pq 和 λ=lcm (p−1,q−1)，其中 lcm 是最小公倍数函数。这些值构成了公钥和私钥的一部分。</p>\n</li>\n<li>\n<p>我们还需要选择一个随机数 g，确保 g 与 N² 互素。这样做的目的是为了确保在加密和解密过程中存在一个特定的模逆 μ，使得解密过程能够正确地还原明文</p>\n</li>\n<li>\n<p>1.1 加密过程涉及将明文 m 加密为密文 c。为了确保加密的安全性，我们首先选择一个随机数 r∈ZN，然后应用加密公式，将明文映射到密文空间中。</p>\n</li>\n<li>\n<p>解密过程是加密过程的逆过程，即从密文中还原出原始的明文。在解密过程中，我们首先将密文的 λ 次幂取模 N²，然后将其乘以预先计算的模逆 μ，最后将结果取模 N，得到原始的明文。</p>\n<h3 id=\"安全性分析\"><a class=\"markdownIt-Anchor\" href=\"#安全性分析\">#</a> 安全性分析</h3>\n<p>​\tPaillier 加密算法的安全性基于两个数论难题：大素数分解问题和离散对数问题。攻击者需要能够分解 N 为其素因子 p 和 q，以获得 λ 的值。但是，由于 N 是两个大素数的乘积，目前尚未找到高效的算法来解决这个问题。离散对数问题：攻击者需要能够从 gm 中还原出 m，即求解离散对数问题。但是，由于 g 是随机选择的，没有已知的有效算法可以在合理的时间内解决这个问题。因此，Paillier 加密算法被认为是安全的，并且在广泛的应用场景中得到了验证。</p>\n<h3 id=\"代码编写\"><a class=\"markdownIt-Anchor\" href=\"#代码编写\">#</a> 代码编写</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1QYWlsbGllci1vcjFtejhxcnphNzYzZzlmcXgxNmdvN3VicTg3Yi5weQ==\">首先我们尝试编写 Paillier.py</span>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">keygen</span>(<span class=\"params\">input_bits</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_prime</span>(<span class=\"params\">n, k=<span class=\"number\">14</span></span>):</span><br><span class=\"line\">        <span class=\"comment\">#The accuracy of the Miller-Rabin test after k iterations is 1 - (1/2^k). Empirical testing has shown that when k is set to 14, the accuracy of the test reaches 99.99%.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        r = <span class=\"number\">0</span></span><br><span class=\"line\">        d = n - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> d % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            d //= <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">            a = random.randint(<span class=\"number\">2</span>, n - <span class=\"number\">2</span>)</span><br><span class=\"line\">            x = <span class=\"built_in\">pow</span>(a, d, n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == <span class=\"number\">1</span> <span class=\"keyword\">or</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r - <span class=\"number\">1</span>):</span><br><span class=\"line\">                x = <span class=\"built_in\">pow</span>(x, <span class=\"number\">2</span>, n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate_prime</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            p = random.getrandbits(bits)</span><br><span class=\"line\">            <span class=\"comment\"># 确认p是素数</span></span><br><span class=\"line\">            p |= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> is_prime(p):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_pq</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            p = generate_prime(bits)</span><br><span class=\"line\">            q = generate_prime(bits)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p != q:</span><br><span class=\"line\">                <span class=\"comment\"># 计算 gcd(p*q, (p-1)*(q-1))</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> math.gcd(p * q, (p - <span class=\"number\">1</span>) * (q - <span class=\"number\">1</span>)) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p, q</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_miu</span>(<span class=\"params\">p, q, N, lambda_1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># mo zhi shu yun suan</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">mod_exp</span>(<span class=\"params\">base, exponent, modulus</span>):</span><br><span class=\"line\">            result = <span class=\"number\">1</span></span><br><span class=\"line\">            base = base % modulus</span><br><span class=\"line\">            <span class=\"keyword\">while</span> exponent &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> exponent % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    result = (result * base) % modulus</span><br><span class=\"line\">                exponent = exponent &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">                base = (base * base) % modulus</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># mo ni yun suan</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">mod_inv</span>(<span class=\"params\">a, m</span>):</span><br><span class=\"line\">            m0, x0, x1 = m, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> a &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                q = a // m</span><br><span class=\"line\">                m, a = a % m, m</span><br><span class=\"line\">                x0, x1 = x1 - q * x0, x0</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 + m0 <span class=\"keyword\">if</span> x1 &lt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> x1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># calculate miu</span></span><br><span class=\"line\">        g = random.randint(<span class=\"number\">2</span>, N - <span class=\"number\">1</span>)</span><br><span class=\"line\">        miu = mod_inv(((mod_exp(g, lambda_1, N ** <span class=\"number\">2</span>) - <span class=\"number\">1</span>) // N), N)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> miu,g</span><br><span class=\"line\"></span><br><span class=\"line\">    p, q = create_pq(input_bits)</span><br><span class=\"line\">    N=p*q</span><br><span class=\"line\">    lambda_1=<span class=\"built_in\">abs</span>((p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>))//math.gcd((p-<span class=\"number\">1</span>),(q-<span class=\"number\">1</span>))</span><br><span class=\"line\">    miu,g = calculate_miu(p, q, N, lambda_1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> N, g ,lambda_1,miu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">m,N,g</span>):</span><br><span class=\"line\">    r = random.randint(<span class=\"number\">1</span>, N**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> math.gcd(r, N**<span class=\"number\">2</span>) != <span class=\"number\">1</span>:</span><br><span class=\"line\">        r = random.randint(<span class=\"number\">1</span>, N**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    c = (<span class=\"built_in\">pow</span>(g, m, N**<span class=\"number\">2</span>) * <span class=\"built_in\">pow</span>(r, N, N**<span class=\"number\">2</span>)) % (N**<span class=\"number\">2</span>) <span class=\"comment\">#加密密文</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">c,lambda_1,N,miu</span>):</span><br><span class=\"line\">    decrypted_m = ((<span class=\"built_in\">pow</span>(c, lambda_1, N**<span class=\"number\">2</span>) - <span class=\"number\">1</span>) * miu // N) % N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decrypted_m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    N,g,lambda_1,miu=keygen(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    m1=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个明文&quot;</span>))</span><br><span class=\"line\">    m2=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个明文&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    c1=encrypt(m1,N,g)</span><br><span class=\"line\">    c2=encrypt(m2,N,g)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;对第一个明文加密后得到密文:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;对第二个明文加密后得到密文:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c2))</span><br><span class=\"line\"></span><br><span class=\"line\">    c=c1*c2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;两密文相乘得到:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c))</span><br><span class=\"line\"></span><br><span class=\"line\">    m=decrypt(c,lambda_1,N,miu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;两密文相乘后解密得到的明文为:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(m))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>首先我们编写 keygen 函数，用于生成密钥。我采用 Miller-Rabin 素性检测来检验，根据计算得知，运行 k 次后判断一个数是素数的正确率大于 (1-1/2^k), 经验证，当 k=14 时，判断的准确率大于 99.99%。根据公式来计算 p，q，λ，μ 和 N。然后根据公司和得到的私钥、公钥、明文来进行 encrypt 和 decrypt 函数的编写。然后编写 main 函数测试输入明文 333 和 444 后程序的输出结果。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1FbGVjdHJvbmljVm90aW5nLWh2MnprNjZhb3dsenQ0ZWZxdmQxMTNjLnB5\">然后我们编写 ElectronicVoting.py</span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> Paillier</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***************************此程序模拟了基于Paillier算法的匿名电子投票的流程:*****************************************&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;首先每位投票者为候选人投票并将结果加密发送给计票人。每人只有1张选票，选票上被投票的候选者得到1张选票，其他候选者得到0张选票;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;然后计票人将所有选票上对应候选人的加密的投票结果相乘，并将加密的统计结果发送给公布人;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最后公布人对统计的票数进行解密并公布;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***************************************************************************************************************************&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">houxuan_num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请设置候选人数：&quot;</span>))</span><br><span class=\"line\">toupiao_num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请设置投票人数：&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">houxuanpiao=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,toupiao_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------请第&#123;&#125;名投票者为候选者投票----------&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">        houxuanpiao[j]+=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请为第&#123;&#125;名候选者投票:&quot;</span>.<span class=\"built_in\">format</span>(j)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;对该投票结果进行加密并发送给计票人&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------计票人计票完成并将加密后的投票结果发给公布人-------&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;加密后的投票结果为：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N, g, lambda_1, miu = Paillier.keygen(<span class=\"number\">1024</span>)</span><br><span class=\"line\">encrypted_m=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\">decrypt_c=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    encrypted_m[i]=Paillier.encrypt(houxuanpiao[i],N,g)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;位候选人获得的选票票数的加密结果为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i,encrypted_m[i]))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------公布人解密计票结果并公布最终的投票结果-------&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    decrypt_c[i]=Paillier.decrypt(encrypted_m[i],lambda_1,N,miu)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;位候选人获得了&#123;&#125;张选票&quot;</span>.<span class=\"built_in\">format</span>(i,decrypt_c[i]))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">max_index=decrypt_c.index(<span class=\"built_in\">max</span>(decrypt_c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最终第&#123;&#125;位候选人获得的选票最多，为&#123;&#125;张&quot;</span>.<span class=\"built_in\">format</span>(max_index,decrypt_c[max_index]))</span><br></pre></td></tr></table></figure>\n<p>我将 p 和 q 的长度设置为 1024 比特，然后根据题目要求编写代码，引用了 time 库使得程序运行更流程，引用 Paillier 里的三个函数完成密钥生成、加密和解密的过程。</p>\n<p>​\t最终将两个代码进行测试，<strong>代码完美完成预计任务</strong></p>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>​\t在本次实验中，通过编写和测试 Paillier 算法及其在匿名电子投票系统中的应用，我深刻理解了同态加密算法的原理和实际应用价值。通过实践，我掌握了 Paillier 算法的核心机制，包括密钥生成、加密、解密过程以及如何利用算法的加法同态性质。</p>\n<p>​\t首先，在密钥生成阶段，我学习到了选择合适的大素数 p 和 q，以及如何计算 N 和 λ，这些都是保证加密算法安全性的基础。选择随机数 g 的过程也让我认识到了在加密算法中引入随机性的重要性，这有助于提高算法的安全性。在编写加密和解密函数时，我通过实践深入理解了 Paillier 算法的数学原理，以及如何将理论应用到实际编程中。</p>\n<p>​\t通过将 Paillier 算法应用于模拟的匿名电子投票系统中，我体会到了同态加密算法在保护隐私信息方面的巨大潜力。在这个系统中，选民的投票选择得到了加密保护，同时还能够在不解密的情况下进行票数统计，这充分展示了 Paillier 算法加法同态性质的强大用途。</p>\n<p>​\t此外，我还学习到了算法的安全性分析，包括大素数分解问题和离散对数问题，这些都是算法安全性的理论基础。通过对这些数论难题的了解，我认识到了为什么 Paillier 算法被认为是安全的，并且可以在实际应用中提供强有力的数据保护。</p>\n<p>​\t总的来说，这次实验不仅让我对同态加密算法有了深入的了解，而且还让我体会到了将理论知识应用到实践中的重要性。我意识到，理论和实践相结合是理解和掌握复杂概念的关键。通过这次实验，我对加密算法的原理、实现以及在现实世界中的应用有了更加全面的认识，这将对我的未来学习和研究产生积极影响。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/2_cronex-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/2_cronex-master/",
            "title": "cronex",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"cronex\"><a class=\"markdownIt-Anchor\" href=\"#cronex\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VyaWNwcnVpdHQvY3JvbmV4\">cronex</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>用于类 corn 任务调度的 Python 模块，提供一个接口用于评估和触发 corn 表达式。</p>\n<ul>\n<li>类 corn 任务：Cron 是一种时间表驱动的任务调度程序，用于在特定的时间和日期执行任务。</li>\n<li><strong>Corn</strong> 表达式：由 5~6 个字段组成，分别表示分钟、小时、日、月、星期和可选的年份</li>\n</ul>\n<p>其表达式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *  command to be executed</span><br><span class=\"line\">- - - - -</span><br><span class=\"line\">| | | | |</span><br><span class=\"line\">| | | | ----- 星期 (<span class=\"number\">0</span> - <span class=\"number\">7</span>) (星期日 = <span class=\"number\">0</span> 或 <span class=\"number\">7</span>)</span><br><span class=\"line\">| | | ------- 月份 (<span class=\"number\">1</span> - <span class=\"number\">12</span>)</span><br><span class=\"line\">| | --------- 月中的日期 (<span class=\"number\">1</span> - <span class=\"number\">31</span>)</span><br><span class=\"line\">| ----------- 小时 (<span class=\"number\">0</span> - <span class=\"number\">23</span>)</span><br><span class=\"line\">------------- 分钟 (<span class=\"number\">0</span> - <span class=\"number\">59</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> * * * /path/to/command <span class=\"comment\">#表示每天凌晨1点执行某个命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cronex功能\"><a class=\"markdownIt-Anchor\" href=\"#cronex功能\">#</a> cronex 功能</h3>\n<ul>\n<li>支持 Java Quartz 的特殊字符，如 &quot;L&quot;、“W&quot;和”#&quot;。</li>\n<li>允许设定任意间隔的触发器，例如每 9 小时，每 11 分钟等。</li>\n<li>示例代码：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job = CronExpression(<span class=\"string\">&quot;0 0 * * 1-5/2 find /var/log -delete&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2012</span>, <span class=\"number\">12</span>, <span class=\"number\">21</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n<p>这里的 CronExpression (“0 0 * * 1-5/2 find /var/log -delete”) 创建了一个  <code>CronExpression</code>  对象，其 cron 表达式为 <code>0 0 * * 1-5/2</code></p>\n<ul>\n<li><code>0 0</code> ：每天的 00:00</li>\n<li><code>* *</code> : 每个月的每一天</li>\n<li><code>1-5/2</code> : 星期一到星期五中每隔一天</li>\n<li><code>find /var/log -delete</code> ：命令部分</li>\n</ul>\n<p>当给这个 job 传递参数 job.check_trigger ((2010, 11, 17, 0, 0)) 时：</p>\n<ul>\n<li>日期时间：2010 年 11 月 17 日 00:00</li>\n<li>星期三符合周一～周五间隔一天</li>\n<li>符合 corn 表达式条件，输出 True</li>\n</ul>\n<h2 id=\"testspy代码处理\"><a class=\"markdownIt-Anchor\" href=\"#testspy代码处理\">#</a> tests.py 代码处理</h2>\n<h3 id=\"更正说明\"><a class=\"markdownIt-Anchor\" href=\"#更正说明\">#</a> 更正说明</h3>\n<p>由于本人的 python 版本是 3.12，直接运行 tests.py 会报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\20_cronex-master\\cronex-master\\cronex\\tests.py&quot;</span>, line <span class=\"number\">397</span>, <span class=\"keyword\">in</span> test_catches_bad_L</span><br><span class=\"line\">    self.failUnlessRaises(ValueError,</span><br><span class=\"line\">    ^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\">AttributeError: <span class=\"string\">&#x27;test_testedmodule&#x27;</span> <span class=\"built_in\">object</span> has no attribute <span class=\"string\">&#x27;failUnlessRaises&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>原因是 <code>unittest.TestCase</code>  类中没有名为  <code>failUnlessRaises</code>  的方法</p>\n<p>这是由于该代码使用了旧版本  <code>unittest</code>  中的方法名称，现在应该使用  <code>assertRaises</code>  方法。</p>\n<p>更正后的 tests.py 代码如下：</p>\n<h3 id=\"debug后的tests\"><a class=\"markdownIt-Anchor\" href=\"#debug后的tests\">#</a> debug 后的 tests</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            obj = cronex.CronExpression(a)</span><br><span class=\"line\">            self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that calling compute_numtab after modifying the string-version</span></span><br><span class=\"line\"><span class=\"string\">        of an expression results in the static trigger-value cache being</span></span><br><span class=\"line\"><span class=\"string\">        updated.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the day-of-the-month field</span></span><br><span class=\"line\"><span class=\"string\">        work as expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the hours field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the minutes field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the month field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected. More specifically, it verifies that the repeaters are</span></span><br><span class=\"line\"><span class=\"string\">        triggered every &quot;N&quot; calendar months regardless of the day for triggers</span></span><br><span class=\"line\"><span class=\"string\">        set to go offer every 1 month, ever 2 months, etc... through 18 months</span></span><br><span class=\"line\"><span class=\"string\">        from 1970 through 1980.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(should_trigger, triggered,</span><br><span class=\"line\">                            <span class=\"string\">&quot;%s: expected trigger to be %r for %r&quot;</span> %</span><br><span class=\"line\">                            (description, should_trigger, time_tuple)</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that parsing atoms returns sets containing all of the expected</span></span><br><span class=\"line\"><span class=\"string\">        values.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(want_from_function,</span><br><span class=\"line\">                cronex.parse_atom(*give_the_function))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the __repr__ and __str__ return values can be passed to</span></span><br><span class=\"line\"><span class=\"string\">        eval to generate an identical CronExpression.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.comment, testex2.comment)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">str</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened month names are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened days-of-the-week are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that combining day of-the-month field and day-of-the-week field</span></span><br><span class=\"line\"><span class=\"string\">        triggers on either condition matching the current day and that using a</span></span><br><span class=\"line\"><span class=\"string\">        wild-card day of the month with a day of the week entry doesn&#x27;t trigger</span></span><br><span class=\"line\"><span class=\"string\">        every single day.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> e <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">22</span>, <span class=\"number\">29</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"comment\"># In July of 2014, every Wednesday just happens to be on a day of</span></span><br><span class=\"line\">            <span class=\"comment\"># the month that&#x27;s a multiple of 7.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(d % <span class=\"number\">7</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-week field with a number always</span></span><br><span class=\"line\"><span class=\"string\">        triggers on last occurrence of the corresponding day of the week in any</span></span><br><span class=\"line\"><span class=\"string\">        given month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">12</span>):</span><br><span class=\"line\">            self.assertTrue((testex.check_trigger((<span class=\"number\">2010</span>, v+<span class=\"number\">1</span>, tv[v], <span class=\"number\">0</span>, <span class=\"number\">0</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-month field always triggers on</span></span><br><span class=\"line\"><span class=\"string\">        the last day of the month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> d &lt; lastdom:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        self.assertTrue(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that a periodic trigger for the day of the month is based on</span></span><br><span class=\"line\"><span class=\"string\">        calendar days, not 24-hour days.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time, -<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that asterisk cannot be combined with other atoms.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* *,1-9 * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that using &quot;#&quot; to find the Nth occurrence of a given day of the</span></span><br><span class=\"line\"><span class=\"string\">        week works correctly.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># There can never be more than 5 occurrences of a given day</span></span><br><span class=\"line\">                    <span class=\"comment\"># of the week in one month.</span></span><br><span class=\"line\">                    self.assertRaises(ValueError, cronex.CronExpression,</span><br><span class=\"line\">                                      expression)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(</span><br><span class=\"line\">                        (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day - <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day + <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having numbers outside of the reasonable ranges for each</span></span><br><span class=\"line\"><span class=\"string\">        field raises an exception. Tests both upper and lower bounds.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;1000 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* 1000 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 1000 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 1000 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * 1000&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;-1 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* -1 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 0 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 0 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * -1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a trigger with an invalid repetition period raises</span></span><br><span class=\"line\"><span class=\"string\">        an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;W&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;L&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;#&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that an exception is thrown when the cron expression has too few</span></span><br><span class=\"line\"><span class=\"string\">        fields.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError, cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在去除所有 assert 语句，并将去除 assert 后的 tests 代码补全逻辑后，得到</p>\n<h3 id=\"去除assert及相关提示后的tests_code\"><a class=\"markdownIt-Anchor\" href=\"#去除assert及相关提示后的tests_code\">#</a> 去除 assert 及相关提示后的 tests_code</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            cronex.parse_atom(*give_the_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt35生成补全后的tests\"><a class=\"markdownIt-Anchor\" href=\"#gpt35生成补全后的tests\">#</a> gpt3.5 生成补全后的 tests</h3>\n<p>将 tests_code 投喂给 gpt3.5，并且附上 prompt 该 tests case 缺少 assert 语句，请你自动补全</p>\n<p>补全后的代码为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">            self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(triggered, should_trigger)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(cronex.parse_atom(*give_the_function), want_from_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (now[<span class=\"number\">2</span>] == <span class=\"number\">5</span> <span class=\"keyword\">or</span> time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Mon&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Wed&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, day <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tv):</span><br><span class=\"line\">            now = (<span class=\"number\">2010</span>, i + <span class=\"number\">1</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 and verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at least</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    now = (y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (d == lastdom))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * * * *&quot;</span>)</span><br><span class=\"line\">        now = time.gmtime()</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertFalse(testex.check_trigger(now))</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (day &lt;= calendar.monthrange(<span class=\"number\">2024</span>, <span class=\"number\">7</span>)[-<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">            cronex.CronExpression(<span class=\"string\">&quot;*/61 * * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"gpt自动填充后assert的优缺点分析\"><a class=\"markdownIt-Anchor\" href=\"#gpt自动填充后assert的优缺点分析\">#</a> gpt 自动填充后 assert 的优缺点分析</h2>\n<h3 id=\"填充优秀部分\"><a class=\"markdownIt-Anchor\" href=\"#填充优秀部分\">#</a> 填充优秀部分：</h3>\n<h4 id=\"1test_substitution\"><a class=\"markdownIt-Anchor\" href=\"#1test_substitution\">#</a> 1.test_substitution()</h4>\n<p><strong>tests 原代码块函数</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        obj = cronex.CronExpression(a)</span><br><span class=\"line\">        self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br></pre></td></tr></table></figure>\n<p><strong>gpt3.5 自动填充的代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原本的 test 代码中使用 assertTrue 来验证特殊替换后的字符串是否在 <code>obj</code>  的 <code>repr</code>  中存在，通过检查 <code>repr(obj)</code>  的输出来间接验证该特殊替换是否正确</li>\n<li>而 gpt 填充的代码直接使用 assertEqual 来验证 <code>cron_expression</code>  对象的 <code>str()</code>  方法是否生成了预期的替换后的 cron 表达式。使用 asserEqual 来判断两个值是否相等</li>\n<li>gpt 自动填充的代码更优秀 —— 其使用 special 和 expected 来作为变量名，更直观和可读。并且它不依赖于间接验证  <code>repr</code>  的输出是否包含特定字符串，而是直接检查  <code>str()</code>  方法生成的输出是否符合预期。通过直接比较字符串可以更清晰地表达测试的意图和预期结果，使得测试代码更易于理解和维护。</li>\n<li>综上所述，在 <code>test_substitution</code>  函数上，gpt 生成的代码更加优秀。</li>\n</ul>\n<h3 id=\"填充后不足有缺陷部分\"><a class=\"markdownIt-Anchor\" href=\"#填充后不足有缺陷部分\">#</a> 填充后不足 / 有缺陷部分</h3>\n<ol>\n<li>test_compute_numtab（）</li>\n</ol>\n<p><strong>tests 原代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br></pre></td></tr></table></figure>\n<p><strong>gpt3.5 自动填充代码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原代码验证在修改表达式的字符串版本后调用 compute_numtab 是否会更新静态触发器值缓存。</li>\n<li>原代码在最开始先通过两个 <code>assertNotEqual</code>  确保 <code>testex1</code>  和 <code>testex2</code>  在初始化时候的  <code>string_tab</code>  属性和 <code>numerical_tab</code>  属性是不同的，然后再将  <code>testex1</code>  的  <code>string_tab</code>  属性设置为  <code>testex2</code>  的  <code>string_tab</code>  属性，人为的使  <code>testex1</code>  和  <code>testex2</code>  在字符串表示上相同。然后再来测试 <code>compute_numtab</code>  的效果，即重新计算 <code>testex1</code>  的数值表示，然后再验证 <code>testex1</code>  和 <code>testex2</code>  在修改后的属性是相同的</li>\n<li>gpt3.5 填充的代码相较而言只考虑到了 testex1=testex2 后调用 compute_numtab 函数后两个 testex 的 string_tab 是否相同</li>\n<li>LLM 自动生成的代码相较而言考虑的并不全面，虽然其足以验证基本的功能，但是没有考虑到验证 <code>testex1</code>  和  <code>testex2</code>  的字符串表和数值表不相等，和验证验证 <code>testex1</code>  和  <code>testex2</code>  修改后字符表相等，并不全面</li>\n<li><strong>修改建议</strong>：给 gpt3.5 增加更详细的 prompt，比如告诉 gpt 需要在自动填充 assert 的时候考虑得更全面，充分的考虑到所有情况，避免出现因为过度考虑性能而忽视设计周密的情况。</li>\n</ul>\n<h3 id=\"llm生成代码分析\"><a class=\"markdownIt-Anchor\" href=\"#llm生成代码分析\">#</a> LLM 生成代码分析</h3>\n<h4 id=\"生成前后一致的代码\"><a class=\"markdownIt-Anchor\" href=\"#生成前后一致的代码\">#</a> 生成前后一致的代码</h4>\n<ol>\n<li>\n<p><code>self.assertEqual(testex1.string_tab, testex2.string_tab)</code></p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>should_trigger<span class=\"token punctuation\">,</span> triggered<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                            <span class=\"token string\">\"%s: expected trigger to be %r for %r\"</span> <span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> should_trigger<span class=\"token punctuation\">,</span> time_tuple<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">in</span> badstuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token keyword\">case</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">in</span> badstuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token keyword\">case</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">case</span> <span class=\"token keyword\">in</span> badstuff<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span> cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token keyword\">case</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">13</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p><code>self.assertNotEqual(testex1.string_tab, testex2.string_tab)</code></p>\n</li>\n<li>\n<p><code>self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</code></p>\n</li>\n<li>\n<p><code>self.assertFalse(testex.check_trigger(now_tuple[:5]))</code></p>\n</li>\n<li>\n<p><code>self.assertTrue(testex.check_trigger(now_tuple[:5]))</code></p>\n</li>\n<li>\n<p><code>self.assertTrue(testex.check_trigger(then[:5]))</code></p>\n</li>\n<li>\n<p><code>        self.assertFalse(testex.check_trigger(now_tuple[:5]))</code></p>\n</li>\n<li>\n<p><code>        self.assertTrue(testex.check_trigger(now_tuple[:5]))</code></p>\n</li>\n<li>\n<p><code>        self.assertTrue(testex.check_trigger(then[:5]))</code></p>\n</li>\n<li>\n<p><code>        self.assertFalse(testex.check_trigger(now_tuple[:5]))</code></p>\n</li>\n<li>\n<p><code>        self.assertTrue(testex.check_trigger(now_tuple[:5]))</code></p>\n</li>\n<li>\n<p><code>self.assertTrue(testex.check_trigger(then[:5]))</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(testex1.string_tab, testex2.string_tab)</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(testex1.comment, testex2.comment</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(repr(testex1), str(testex1))</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(repr(testex1), repr(testex2))</code></p>\n</li>\n<li>\n<p><code>self.assertEqual(repr(testex1), repr(testex2))</code></p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> <span class=\"token builtin\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> e <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">14</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> <span class=\"token builtin\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tv<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">15</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p><code>        self.assertTrue(testex.check_trigger(local_time, -6))</code></p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* *,1-9 * * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">16</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1000 * * * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* 1000 * * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* * 1000 * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* * * 1000 *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* * * * 1000\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-1 * * * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* -1 * * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* * 0 * *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* * * 0 *\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertRaises<span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                          cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">,</span> <span class=\"token string\">\"* * * * -1\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"一致率统计结果\"><a class=\"markdownIt-Anchor\" href=\"#一致率统计结果\">#</a> 一致率统计结果</h4>\n<p>共统计了<strong> 35</strong> 个断言，其中逻辑完全一致的 assert 共<strong> 8</strong> 个，不一致的 27 个，一致率为<strong> 22.9%</strong>。</p>\n<h3 id=\"分析一断言在验证的东西\"><a class=\"markdownIt-Anchor\" href=\"#分析一断言在验证的东西\">#</a> 分析一：断言在验证的东西</h3>\n<h3 id=\"分析二断言是否依赖于具体的-sut-被测软件-的输出及原因\"><a class=\"markdownIt-Anchor\" href=\"#分析二断言是否依赖于具体的-sut-被测软件-的输出及原因\">#</a> 分析二：断言是否依赖于具体的 SUT (被测软件) 的输出及原因</h3>\n<h3 id=\"分析三断言为何能生成\"><a class=\"markdownIt-Anchor\" href=\"#分析三断言为何能生成\">#</a> 分析三：断言为何能生成</h3>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/7_ttach-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/7_ttach-master/",
            "title": "ttach",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"ttach\"><a class=\"markdownIt-Anchor\" href=\"#ttach\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3F1YnZlbC90dGFjaA==\">ttach</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>使用 PyTorch 进行图像测试时间增强</li>\n<li>与数据增强对训练集的作用类似，测试时增强的目的是对测试图像进行随机修改。因此，我们不会只向训练模型显示一次</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Input</span><br><span class=\"line\">      |           <span class=\"comment\"># input batch of images </span></span><br><span class=\"line\"> / / /|\\ \\ \\      <span class=\"comment\"># apply augmentations (flips, rotation, scale, etc.)</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># pass augmented batches through model</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># reverse transformations for each batch of masks/labels</span></span><br><span class=\"line\"> \\ \\ \\ / / /      <span class=\"comment\"># merge predictions (mean, max, gmean, etc.)</span></span><br><span class=\"line\">      |           <span class=\"comment\"># output batch of masks/labels</span></span><br><span class=\"line\">    Output</span><br></pre></td></tr></table></figure>\n<h2 id=\"test_transformspy代码填充分析\"><a class=\"markdownIt-Anchor\" href=\"#test_transformspy代码填充分析\">#</a> test_transforms.py 代码填充分析</h2>\n<h3 id=\"test_transformspy原码\"><a class=\"markdownIt-Anchor\" href=\"#test_transformspy原码\">#</a> test_transforms.py 原码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a + p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a * p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert断言给llm分析的代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert断言给llm分析的代码\">#</a> 删除 assert 断言给 LLM 分析的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape == deaug.shape, <span class=\"string\">f&quot;Shape mismatch after augmentation-deaugmentation for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a[<span class=\"number\">0</span>, <span class=\"number\">0</span>], aug[<span class=\"number\">0</span>, <span class=\"number\">0</span>]), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">    transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape[<span class=\"number\">2</span>:] == p, <span class=\"string\">f&quot;Augmented image shape does not match expected shape <span class=\"subst\">&#123;p&#125;</span> for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/4_oj-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/4_oj-master/",
            "title": "online-judge-tools/oj",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"online-judge-toolsoj\"><a class=\"markdownIt-Anchor\" href=\"#online-judge-toolsoj\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29ubGluZS1qdWRnZS10b29scy9vag==\">online-judge-tools/oj</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li><code>oj</code>  是一个帮助解决各种在线评测问题命令。此命令会自动下载示例案例、生成其他测试案例、测试您的代码并提交。</li>\n<li>使用 <code>python setup.py install</code>  安装该第三方库</li>\n<li>使用介绍：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positional arguments:</span><br><span class=\"line\">  &#123;download,d,dl,login,l,submit,s,test,t,generate-output,g/o,generate-<span class=\"built_in\">input</span>,g/i,test-reactive,t/r,test-interactive,t/i&#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> details, see <span class=\"string\">&quot;\\\\?\\F:\\Anaconda\\envs\\py312\\Scripts\\oj COMMAND --help&quot;</span></span><br><span class=\"line\">    download (d, dl)    download sample cases</span><br><span class=\"line\">    login (l)           login to a service</span><br><span class=\"line\">    submit (s)          submit your solution</span><br><span class=\"line\">    test (t)            test your code</span><br><span class=\"line\">    generate-output (g/o)</span><br><span class=\"line\">                        generate output files <span class=\"keyword\">from</span> <span class=\"built_in\">input</span> <span class=\"keyword\">and</span> reference implementation</span><br><span class=\"line\">    generate-<span class=\"built_in\">input</span> (g/i)</span><br><span class=\"line\">                        generate <span class=\"built_in\">input</span> files <span class=\"keyword\">from</span> given generator</span><br><span class=\"line\">    test-reactive (t/r, test-interactive, t/i)</span><br><span class=\"line\">                        test <span class=\"keyword\">for</span> interactive problem</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>            show this <span class=\"built_in\">help</span> message <span class=\"keyword\">and</span> exit</span><br><span class=\"line\">  -v, --verbose</span><br><span class=\"line\">  -c COOKIE, --cookie COOKIE</span><br><span class=\"line\">                        path to cookie. (default: C:\\Users\\JackDu\\AppData\\Local\\online-judge-tools\\online-judge-tools\\cookie.jar)</span><br><span class=\"line\">  --version             <span class=\"built_in\">print</span> the online-judge-tools version number</span><br><span class=\"line\"></span><br><span class=\"line\">tips:</span><br><span class=\"line\">  The official tutorial exists on the web: https://github.com/online-judge-tools/oj/blob/master/docs/getting-started.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"command_downloadpy代码修改\"><a class=\"markdownIt-Anchor\" href=\"#command_downloadpy代码修改\">#</a> command_download.py 代码修改</h2>\n<h3 id=\"原本的command_downloadpy代码\"><a class=\"markdownIt-Anchor\" href=\"#原本的command_downloadpy代码\">#</a> 原本的 command_download.py 代码：</h3>\n<p>base prompt 为：“我这个 test case 缺少 assert 语句，请你帮我自动填充。”</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    args = get_parser().parse_args(args=args)</span><br><span class=\"line\">    self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        self.assertTrue(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        <span class=\"comment\"># download from url2 should be aborted.</span></span><br><span class=\"line\">        self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check download from url1 is not overwritten</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"移除assert断言后的command_downloadpy代码\"><a class=\"markdownIt-Anchor\" href=\"#移除assert断言后的command_downloadpy代码\">#</a> 移除 assert 断言后的 command_download.py 代码</h3>\n<p>移除 assert 断言和部分提示后，我们发送给 LLM 的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert语句后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert语句后的代码\">#</a> LLM 自动填充 assert 语句后的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> self.assertRaises(SystemExit):</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/",
            "title": "PythonProjectTemplate-master",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"测试llm的assert功能\"><a class=\"markdownIt-Anchor\" href=\"#测试llm的assert功能\">#</a> 测试 LLM 的 assert 功能</h1>\n<h2 id=\"1_pythonprojecttemplate-master\"><a class=\"markdownIt-Anchor\" href=\"#1_pythonprojecttemplate-master\">#</a> 1_<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZyYW5uZWNrOTQvUHl0aG9uUHJvamVjdFRlbXBsYXRl\">PythonProjectTemplate-master</span></h2>\n<p>运行 <code>pip install -e .</code>  和 <code>pytest tests</code>  后出现下图，表明本地构建和安装和测试项目成功。</p>\n<p>然后再运行 <code>pytest --cov=fastvector tests --cov-report=html</code>  来生成代码覆盖率报告</p>\n<img data-src=\"D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\0_readme_picture\\1.png\" alt=\"1\" style=\"zoom:50%;\" />\n<h3 id=\"test代码修改\"><a class=\"markdownIt-Anchor\" href=\"#test代码修改\">#</a> test 代码修改</h3>\n<h4 id=\"test初始代码\"><a class=\"markdownIt-Anchor\" href=\"#test初始代码\">#</a> test 初始代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test from values.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> exp == Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test add.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test sub.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul vec.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul float.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test abs.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test equality.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test less than.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> rhs &lt; lhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从 test 代码中我们可知：test_from_values、test_repr、test_str、test_add、test_sub、test_mul_vec、test_mul_float、test_div、test_abs、test_equality_other_class、test_less_than 中有 assert 语句。</p>\n<p>将 assert 语句删除，并且删掉提示字符串，然后将代码交给 gpt3.5 进行修改。</p>\n<p>提示语句为 “这个 test case 缺少 assert 语句 请补全”</p>\n<h4 id=\"test投喂代码\"><a class=\"markdownIt-Anchor\" href=\"#test投喂代码\">#</a> test 投喂代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"test代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test代码分析\">#</a> test 代码分析</h3>\n<p>gpt3.5 修改后的 test 语句为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Vector2D(x, y) == exp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs &lt; rhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"比对修改前后代码块的作用\"><a class=\"markdownIt-Anchor\" href=\"#比对修改前后代码块的作用\">#</a> 比对修改前后代码块的作用</h4>\n<ol>\n<li>\n<p>对于 <code>test_init_raises（）</code> 函数，其用于验证创建的 <code>Vector2D</code>  对象是否与预期结果 <code>exp</code>  相等。—— 修改前后代码作用相同</p>\n</li>\n<li>\n<p>对于 <code>test_repr和test_str</code>  函数：<br>\n修改前：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其作用为验证 Vector2D 对象的’__repr__' 方法的输出。通过建立字典 capture_stdout 来捕获 capture_stdout。<em>print 函数的目的为将  <code>Vector2D(1.0, 2.0)</code>  对象的  <code>__repr__</code>  方法的输出打印到标准输出。以便实际使用时开发者可以看到程序输出结果，帮助理解程序执行的结果和确保  <code>__repr__</code>  方法的实现符合预期。</em> 然后使用     <code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n</code> &quot; 来验证捕获的输出与预期输出是否相符。<br>\ngpt3.5 补充后：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><strong>功能减少</strong>：一般来说为了符合开发者调试，test 时需要 print 函数以便开发者了解程序的输出，gpt 填充的 assert 里忽略了 print，直接对比返回值，其只适用于 <code>repr</code>  和 <code>str</code>  函数的输出场景</li>\n<li><strong>调试困难</strong>：如果我们 assert 报错后，最初的代码可以通过 print 来留下更多的调试信息，而 gpt 生成的返回值无法做到这一步，需要额外增加 print 代码来了解报错原因</li>\n</ul>\n<p><strong>改进</strong>：当我们给 gpt 输入：“这个 test case 缺少 assert 语句 请补全，要求调试的过程中方便开发者直观看到输出过程” 后，代码输出增加了 print 语句，优化成功。</p>\n</li>\n<li>\n<p><code>test_add</code>  和 <code>test_sub</code>  和 <code>test_mul_float``test_div</code>  和’test_abs’和’test_less_than’函数：验证两个 <code>Vector2D</code>  对象相加 / 减 / 乘 / 除 / 取绝对值 / 是否小于的结果是否与预期结果相等。gpt 改后与之前效果相同。</p>\n</li>\n</ol>\n<h3 id=\"llm生成代码分析\"><a class=\"markdownIt-Anchor\" href=\"#llm生成代码分析\">#</a> LLM 生成代码分析</h3>\n<h4 id=\"llm修改后与原来一致\"><a class=\"markdownIt-Anchor\" href=\"#llm修改后与原来一致\">#</a> LLM 修改后与原来一致：</h4>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code></li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)</code></li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code></li>\n<li><code>assert lhs + rhs == exp_res</code></li>\n<li><code>    assert lhs - rhs == exp_res</code></li>\n<li><code>assert lhs * rhs == exp_res</code></li>\n<li><code>assert lhs * rhs == exp_res</code></li>\n<li><code>assert lhs / rhs == exp_res</code></li>\n<li><code>assert abs(rhs) == lhs</code></li>\n<li><code>assert lhs != rhs</code></li>\n<li><code>assert rhs &lt; lhs</code></li>\n</ol>\n<h4 id=\"llm修改后与原来不同\"><a class=\"markdownIt-Anchor\" href=\"#llm修改后与原来不同\">#</a> LLM 修改后与原来不同：</h4>\n<p>无</p>\n<h3 id=\"llm生成代码与原代码一致的概率\"><a class=\"markdownIt-Anchor\" href=\"#llm生成代码与原代码一致的概率\">#</a> LLM 生成代码与原代码一致的概率</h3>\n<p><strong>100%</strong></p>\n<h3 id=\"分析一断言在验证的东西\"><a class=\"markdownIt-Anchor\" href=\"#分析一断言在验证的东西\">#</a> 分析一：断言在验证的东西</h3>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code>\n<ul>\n<li>使用参数化设置，传入不同的 x 和 y 值，以及期望的 Vector2D (x,y) 对象’exp’</li>\n<li>测试通过创建一个新的 Vector2D 对象并将其与预期的对象进行比较来验证初始化是否正确</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>验证 <code>repr</code>  方法返回的 <code>Vector2D</code>  对象是否用正确字符串表示</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>验证 <code>str</code>  方法返回的 <code>Vector2D</code>  对象是否用正确字符串表示</li>\n</ul>\n</li>\n<li><code>assert lhs + rhs == exp_res</code>\n<ul>\n<li>验证两个 <code>Vector2D</code>  对象相加的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs - rhs == exp_res</code>\n<ul>\n<li>验证两个 <code>Vector2D</code>  对象相减的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code>\n<ul>\n<li>验证两个 <code>Vector2D</code>  对象相乘（点积）的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code> —— <code>test_mul_float</code>\n<ul>\n<li>验证 <code>Vector2D</code>  对象与浮点数相乘的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs / rhs == exp_res</code>\n<ul>\n<li>证 <code>Vector2D</code>  对象与浮点数相除的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert abs(rhs) == lhs</code>\n<ul>\n<li>验证 <code>Vector2D</code>  对象的绝对值（模）是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs != rhs</code>\n<ul>\n<li>验证当 <code>Vector2D</code>  对象与不同类对象进行比较时，是否返回 <code>False</code></li>\n</ul>\n</li>\n<li><code>assert rhs &lt; lhs</code>\n<ul>\n<li>验证 <code>Vector2D</code>  对象的 “小于” 比较运算是否正确。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"分析二断言是否依赖于具体的sut-被测软件的输出及原因\"><a class=\"markdownIt-Anchor\" href=\"#分析二断言是否依赖于具体的sut-被测软件的输出及原因\">#</a> 分析二：断言是否依赖于具体的 SUT (被测软件) 的输出及原因</h3>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code>\n<ul>\n<li>依赖</li>\n<li>这个测试通过创建  <code>Vector2D</code>  对象来验证其初始化功能</li>\n<li>断言  <code>exp == Vector2D(x, y)</code>  依赖于  <code>Vector2D</code>  的  <code>__eq__</code>  方法是否正确实现。</li>\n<li>如果  <code>Vector2D</code>  类的初始化或  <code>__eq__</code>  方法有问题，这个断言将无法通过。因此，断言依赖于  <code>Vector2D</code>  类的具体实现（即 SUT 的输出）。</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>依赖</li>\n<li>断言  <code>capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>  依赖于  <code>__repr__</code>  方法的具体输出。</li>\n<li>也依赖 Vector2D (1.0,2.0) 的具体输出</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>依赖</li>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__str__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs + rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__add__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs - rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__sub__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__mul__</code> 方法对另一个 <code>Vector2D</code>  对象的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code> —— <code>test_mul_float</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__mul__</code> 方法对浮点数的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs / rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__truediv__</code> 方法的具体实现</li>\n</ul>\n</li>\n<li><code>assert abs(rhs) == lhs</code>\n<ul>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__abs__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs != rhs</code>\n<ul>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__eq__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert rhs &lt; lhs</code>\n<ul>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__lt__</code> 方法的具体实现。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"分析三断言为何能生成\"><a class=\"markdownIt-Anchor\" href=\"#分析三断言为何能生成\">#</a> 分析三：断言为何能生成</h3>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code>\n<ul>\n<li>函数名：投喂给 LLM 的函数名为 <code>test_from_values</code> ，即从数值上进行比较，而函数中对 x,y 进行初始化，并且定义了一个 exp=Vector2D，故 LLM 可以判断断言为判断 exp 是否和 Vector2D (x,y) 相等</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>函数名，投喂给 LLM 的函数名为 <code>test_repr</code> ，即为测试该 Vector2D 的标准字符串表示</li>\n<li>在代码里出现了 capture_stdout，即为捕获标准输出。</li>\n<li>函数里出现 <code>print(repr(Vector2D(1.0, 2.0)))</code> ，即可知道需要对于标准输出和 <code>repr(Vector2D(1.0, 2.0))</code>  进行对比</li>\n<li>故 LLM 可以依此来判定断言</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>函数名，投喂给 LLM 的函数名为 <code>test_str</code> ，即为测试该 Vector2D 的字符串表示</li>\n<li>在代码里出现了 capture_stdout，即为捕获标准输出。</li>\n<li>函数里出现 <code>print(repr(Vector2D(1.0, 2.0)))</code> ，即可知道需要对于标准输出和 <code>str(Vector2D(1.0, 2.0))</code>  进行对比</li>\n<li>故 LLM 可以依此来判定断言</li>\n</ul>\n</li>\n<li><code>assert lhs + rhs == exp_res</code>\n<ul>\n<li>函数名为\t <code>test_add</code> , 即为测试 add 方法</li>\n<li>函数中出现了 lhs,rhs 和 exp_res</li>\n<li>故 LLM 可以判定方法为测试相加是否相等</li>\n</ul>\n</li>\n<li><code>assert lhs - rhs == exp_res</code>\n<ul>\n<li>函数名为\t <code>test_sub</code> , 即为测试 add 方法</li>\n<li>函数中出现了 lhs,rhs 和 exp_res</li>\n<li>故 LLM 可以判定方法为测试相减是否相等</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code>\n<ul>\n<li>函数名为 test_mul_vec，即为测试相乘是否结果一致</li>\n<li>出现了 lhs,rhs,exp_res 的初始化定义</li>\n<li>故 LLM 可以判定方法为测试相乘是否相等</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code> —— <code>test_mul_float</code>\n<ul>\n<li>函数名为 test_mul_vec，即为测试相乘是否结果一致</li>\n<li>出现了 lhs,rhs,exp_res 的初始化定义</li>\n<li>故 LLM 可以判定方法为测试 Vector2D 与浮点数相乘的结果</li>\n</ul>\n</li>\n<li><code>assert lhs / rhs == exp_res</code>\n<ul>\n<li>函数名为 <code>test_div</code> ，即测试除法</li>\n<li>函数中对 lhs,rhs,exp_res 进行初始化</li>\n<li>即 LLM 可以判定为测试除法是否正确</li>\n</ul>\n</li>\n<li><code>assert abs(rhs) == lhs</code>\n<ul>\n<li>函数名为 <code>test_abs </code> ，即测试绝对值</li>\n<li>函数中对 reh 和 lhs 进行初始化</li>\n<li>故可以判定方法为测试绝对值</li>\n</ul>\n</li>\n<li><code>assert lhs != rhs</code>\n<ul>\n<li>函数名为 <code> test_equality_other_class</code></li>\n<li>函数中定义了 <code>lhs: Vector2D</code>  和 <code>rhs: object</code></li>\n<li>故 LLM 可知方法为测试两个不同类进行比较是否返回 False</li>\n</ul>\n</li>\n<li><code>assert rhs &lt; lhs</code>\n<ul>\n<li>函数名为 <code>test_less_than</code></li>\n<li>初始化定义了两个 Vector2D 类 lhs 和 rhs</li>\n<li>故 LLM 可知该断言应该为判断对象的小于比较是否正确</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/5_giskard-main/",
            "url": "https://enjundu.github.io/LLMstestoracle/5_giskard-main/",
            "title": "Giskard-AI/giskard",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"giskard-aigiskard\"><a class=\"markdownIt-Anchor\" href=\"#giskard-aigiskard\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpc2thcmQtQUkvZ2lza2FyZA==\">Giskard-AI/giskard</span></h1>\n<h2 id=\"test_data_processing_pipelinepy3代码处理\"><a class=\"markdownIt-Anchor\" href=\"#test_data_processing_pipelinepy3代码处理\">#</a> test_data_processing_pipeline.py3 代码处理</h2>\n<h3 id=\"原test代码\"><a class=\"markdownIt-Anchor\" href=\"#原test代码\">#</a> 原 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> transformed_dataset.df.iloc[<span class=\"number\">0</span>].text == <span class=\"string\">&quot;testing. I love this!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"去除assert后的代码\"><a class=\"markdownIt-Anchor\" href=\"#去除assert后的代码\">#</a> 去除 assert 后的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt35自动填充的代码\"><a class=\"markdownIt-Anchor\" href=\"#gpt35自动填充的代码\">#</a> gpt3.5 自动填充的代码</h3>\n<p><strong>base prompt 为</strong>：我这个 tests 代码缺少 assert 断言，请你自动填充</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(transformed_dataset) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/",
            "title": "robotframework-webservice",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"robotframework-webservice\"><a class=\"markdownIt-Anchor\" href=\"#robotframework-webservice\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtldFNxdWFyZS9yb2JvdGZyYW1ld29yay13ZWJzZXJ2aWNl\">robotframework-webservice</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>一个管理 Robot Framework 任务 / 测试的 Web 服务。</li>\n<li>该 Web 服务应启动 Robot Framework 的任务 / 测试，并返回并缓存相应的报告。</li>\n<li>运行：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install robotframework-webservice</span><br><span class=\"line\">python -m RobotFrameworkService.main -p <span class=\"number\">5003</span> -t path_to_my_taskfolder</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:5003/robotframework/run/mytask //调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask?myVariable1=42&amp;anotherVariable=Mustermann //带变量调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接在任务/测试的持续时间内保持打开状态</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask</span><br><span class=\"line\"></span><br><span class=\"line\"># 立即关闭连接 - 结果必须使用 x-request-id 请求</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask/async</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>调用 Robot 测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;test&quot;: &quot;Demonstration Test&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调用 Robot 任务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Demonstration Task&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>带变量调用 Robot 任务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Task with more variables&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;variables&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;firstname&quot;: &quot;Max&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;lastname&quot;: &quot;Mustermann&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动本地 Web 服务：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> <span class=\"attr\">--help</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> -<span class=\"selector-tag\">p</span> <span class=\"number\">5003</span> -t path_to_my_taskfolder <span class=\"comment\">// example</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"test_apppy修改操作\"><a class=\"markdownIt-Anchor\" href=\"#test_apppy修改操作\">#</a> test_app.py 修改操作</h2>\n<h3 id=\"原本的testpy代码\"><a class=\"markdownIt-Anchor\" href=\"#原本的testpy代码\">#</a> 原本的 test.py 代码:</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, logs_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, report_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">400</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;Options test and task cannot be both specified&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;paths&quot;</span>: [<span class=\"string\">&quot;examples&quot;</span>], <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">&quot;/robotframework/logs/not_existing&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">404</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;The logs not_existing not existing or being generating&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">f&quot;/robotframework/logs/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">204</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        self.assertEqual(expected_response_code, response.status_code, response.text)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertNotIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, msg=msg)</span><br><span class=\"line\">        self.assertIn(</span><br><span class=\"line\">            <span class=\"string\">&quot;PASS&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains neither PASS nor FAIL&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains FAIL&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"投喂给gpt35的test代码\"><a class=\"markdownIt-Anchor\" href=\"#投喂给gpt35的test代码\">#</a> 投喂给 gpt3.5 的 test 代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt自动填充后的testpy\"><a class=\"markdownIt-Anchor\" href=\"#gpt自动填充后的testpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1ncHR0ZXN0LWpiOWs2Nmhsd2U5OXAxNTFneTc0YS5weQ==\">gpt 自动填充后的 test.py</span></h3>\n<p><strong>将上述代码喂给 chatgpt3.5，并附加 base prompt: 该 tests case 缺少 assert 断言 请你自动补充</strong></p>\n<p>生成的 test.py 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTests</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Service is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为400</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">400</span>, <span class=\"string\">&quot;Expected response code 400&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with variables failed&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> logs_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> report_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Report is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 尚未实现</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            delete_response = client.delete(<span class=\"string\">f&quot;/robotframework/delete_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> delete_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not deleted&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为预期的状态码</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> response.status_code == expected_response_code, <span class=\"string\">f&quot;Expected response code <span class=\"subst\">&#123;expected_response_code&#125;</span>, got <span class=\"subst\">&#123;response.status_code&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否成功（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;passed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not pass&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否失败（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;failed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not fail&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/",
            "title": "artificial-adversary",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"artificial-adversary\"><a class=\"markdownIt-Anchor\" href=\"#artificial-adversary\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9hcnRpZmljaWFsLWFkdmVyc2FyeQ==\">artificial-adversary</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>在对用户生成的文本进行分类时，用户可以通过多种方式修改其内容以避免被检测到。这些方法通常是对文本进行表面修改，即更改所使用的原始字符或单词，但保留足够明显的原始含义以供人类读者理解。这些方法包括用相似的字符替换字符、删除或添加标点和空格以及交换单词中的字母。例如，这 <code>please wire me 10,000 US DOLLARS to bank of scamland</code>  可能是一条明显的诈骗信息，但 <code>pl3@se.wire me 10000 US DoLars to,BANK of ScamIand</code>  可以欺骗许多分类器。</li>\n<li>安装：</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> Adversary</span><br><span class=\"line\">python -m textblob.download_corpora</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>用于数据集增强</strong></li>\n<li><strong>对于性能界限</strong></li>\n</ul>\n<h2 id=\"test_allpy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_allpy代码分析\">#</a> test_all.py 代码分析</h2>\n<h3 id=\"test_allpy源码\"><a class=\"markdownIt-Anchor\" href=\"#test_allpy源码\">#</a> test_all.py 源码</h3>\n<p><strong>将 <code>test_adversary.py</code> 、 <code>test_attacks.py</code> 、 <code>test_utils.py</code>  三个代码三合一后，我创建了 test_all.py 代码，源码如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (<span class=\"built_in\">len</span>(g) == <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;1&#x27;</span>) == <span class=\"string\">&#x27;one&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;dog&#x27;</span>) == <span class=\"string\">&#x27;dog&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(flatten_unique(l) == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(combinations_of_len(l, <span class=\"number\">2</span>) == [(<span class=\"number\">1</span>,), (<span class=\"number\">2</span>,), (<span class=\"number\">3</span>,), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(fancy_titles(cols) == [<span class=\"string\">&#x27;Change Case&#x27;</span>, <span class=\"string\">&#x27;Insert Duplicate Characters&#x27;</span>, <span class=\"string\">&#x27;Synonym&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert语句的test代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert语句的test代码\">#</a> 删除 assert 语句的 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert语句后的test代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert语句后的test代码\">#</a> LLM 自动填充 assert 语句后的 test 代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  <span class=\"comment\"># Add assertions when implemented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    flat_list = flatten_unique(l)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flat_list) == <span class=\"number\">5</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    combs = combinations_of_len(l, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(combs) == <span class=\"number\">3</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    titles = fancy_titles(cols)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(titles) == <span class=\"built_in\">len</span>(cols)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/",
            "title": "pytorch-lr-finder",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"pytorch-lr-finder\"><a class=\"markdownIt-Anchor\" href=\"#pytorch-lr-finder\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkdHZzL3B5dG9yY2gtbHItZmluZGVy\">pytorch-lr-finder</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>\n<p>该项目为 PyTorch 学习率查找器</p>\n</li>\n<li>\n<p>学习率范围测试是一种提供有关最佳学习率的宝贵信息的测试。在预训练运行期间，学习率在两个边界之间线性或指数增加。较低的初始学习率允许网络开始收敛，随着学习率的增加，它最终会变得太大，网络会发散。</p>\n</li>\n<li>\n<p>来自 fastai 的调整版本：以指数方式增加学习率并计算每个学习率的训练损失。 <code>lr_finder.plot()</code>  绘制训练损失与对数学习率的关系。</p>\n</li>\n<li>\n<p>Leslie Smith 的方法：线性增加学习率并计算每个学习率的评估损失。 <code>lr_finder.plot()</code>  绘制评估损失与学习率的关系图。这种方法通常会产生更精确的曲线，因为评估损失更容易发散，但执行测试所需的时间会更长，尤其是在评估数据集很大的情况下。</p>\n<h2 id=\"test_lr_finderpy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_lr_finderpy代码分析\">#</a> test_lr_finder.py 代码分析</h2>\n<h3 id=\"该test原代码\"><a class=\"markdownIt-Anchor\" href=\"#该test原代码\">#</a> 该 test 原代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Run a `DataLoaderIter` object for specific times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Arguments:</span></span><br><span class=\"line\"><span class=\"string\">        loader_iter (torch_lr_finder.DataLoaderIter): the iterator to test.</span></span><br><span class=\"line\"><span class=\"string\">        desired_runs (int, optional): times that iterator should be iterated.</span></span><br><span class=\"line\"><span class=\"string\">            If it&#x27;s not given, `len(loader_iter.data_loader)` will be used.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        is_achieved (bool): False if `loader_iter` cannot be iterated specific</span></span><br><span class=\"line\"><span class=\"string\">            times. It usually means `loader_iter` has raised `StopIteration`.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(loader_iter, DataLoaderIter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> init_lrs == restored_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">2e-5</span>, <span class=\"number\">3e-5</span>, <span class=\"number\">4e-5</span>, <span class=\"number\">5e-5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">1e-4</span>, <span class=\"number\">1e-3</span>, <span class=\"number\">1e-2</span>, <span class=\"number\">0.1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> We are using smaller batch size to simulate a large batch.</span></span><br><span class=\"line\">        <span class=\"comment\"># So that the actual times of model/criterion called should be</span></span><br><span class=\"line\">        <span class=\"comment\"># `(desired_bs/real_bs) * num_iter` == `accum_steps * num_iter`</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">hasattr</span>(task.optimizer, <span class=\"string\">&quot;_amp_stash&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `TrainDataLoaderIter` can reset itself, so that it&#x27;s ok to reuse it</span></span><br><span class=\"line\">        <span class=\"comment\"># directly and iterate it more than `len(dataloader)` times.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t reset itself, so this should be False if</span></span><br><span class=\"line\">        <span class=\"comment\"># we re-run it without resetting it.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Reset it by `iter()`</span></span><br><span class=\"line\">        loader_iter = <span class=\"built_in\">iter</span>(loader_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t be iterated more than `len(dataloader)` times</span></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert和必要提示后上传llm的代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert和必要提示后上传llm的代码\">#</a> 删除 assert 和必要提示后上传 LLM 的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert后的代码\">#</a> LLM 自动填充 assert 后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> restored_lrs == init_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecisionWithTorchAMP</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"keyword\">not</span> mod_task.use_cuda(<span class=\"params\"></span>), reason=<span class=\"string\">&quot;CUDA GPU is required to run these tests.&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMultiPhase</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_multi_phase</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Simulate a change in LR and perform another phase of LR range test</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> param_group <span class=\"keyword\">in</span> task.optimizer.param_groups:</span><br><span class=\"line\">            param_group[<span class=\"string\">&quot;lr&quot;</span>] *= <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>, reset_lr=<span class=\"literal\">False</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/%E7%BB%9F%E8%AE%A1%E7%BB%93%E6%9E%9C/",
            "url": "https://enjundu.github.io/LLMstestoracle/%E7%BB%9F%E8%AE%A1%E7%BB%93%E6%9E%9C/",
            "title": "a_统计结果",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"llm对于test-oracle生成\"><a class=\"markdownIt-Anchor\" href=\"#llm对于test-oracle生成\">#</a> LLM 对于 test oracle 生成</h1>\n<h2 id=\"生成结果\"><a class=\"markdownIt-Anchor\" href=\"#生成结果\">#</a> 生成结果</h2>\n<h3 id=\"一致率分析\"><a class=\"markdownIt-Anchor\" href=\"#一致率分析\">#</a> 一致率分析</h3>\n<h4 id=\"pythonprojecttemplate-master\"><a class=\"markdownIt-Anchor\" href=\"#pythonprojecttemplate-master\">#</a> PythonProjectTemplate-master</h4>\n<p>生成的 assert 和原来的一致的为 100%</p>\n<h4 id=\"cronex-master\"><a class=\"markdownIt-Anchor\" href=\"#cronex-master\">#</a> cronex-master</h4>\n<p>共统计了<strong> 35</strong> 个断言，其中逻辑完全一致的 assert 共<strong> 8</strong> 个，不一致的 27 个，一致率为<strong> 22.9%</strong>。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/9_sumeval-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/9_sumeval-master/",
            "title": "sumeval",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"sumeval\"><a class=\"markdownIt-Anchor\" href=\"#sumeval\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFs\">sumeval</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>不仅支持英文，还支持日文和中文，其他语言也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFsI3dlbGNvbWUtY29udHJpYnV0aW9uLXRhZGE=\">轻松</span>扩展</li>\n<li>使用方法 <code>pip install sumeval</code></li>\n</ul>\n<h2 id=\"test_rougepy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_rougepy代码分析\">#</a> test_rouge.py 代码分析</h2>\n<h3 id=\"test_rougepy原代码\"><a class=\"markdownIt-Anchor\" href=\"#test_rougepy原代码\">#</a> test_rouge.py 原代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-L-F&quot;</span>] - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"去掉assert断言和一些辅助说明后喂给llm的test代码\"><a class=\"markdownIt-Anchor\" href=\"#去掉assert断言和一些辅助说明后喂给llm的test代码\">#</a> 去掉 assert 断言和一些辅助说明后喂给 LLM 的 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1/",
            "url": "https://enjundu.github.io/LLMstestoracle/1/",
            "title": "研究方法",
            "date_published": "2024-07-02T18:07:35.000Z",
            "content_html": "<h3 id=\"分析和理解步骤\"><a class=\"markdownIt-Anchor\" href=\"#分析和理解步骤\">#</a> 分析和理解步骤</h3>\n<h4 id=\"第一步找10个项目每个随机选10个左右的test-case包含assert\"><a class=\"markdownIt-Anchor\" href=\"#第一步找10个项目每个随机选10个左右的test-case包含assert\">#</a> 第一步：找 10 个项目每个随机选 10 个左右的 test case（包含 assert）</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>找 10 个项目</strong>：我们需要选择 10 个开源项目，这些项目应该包含单元测试，并且测试用例使用了 assert 语句。</li>\n<li><strong>随机选 10 个左右的 test case</strong>：从每个项目中随机选择大约 10 个测试用例。每个测试用例必须包含至少一个 assert 语句。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>在 GitHub 等平台上寻找 10 个开源项目。</li>\n<li>确保这些项目有单元测试（通常在 <code>tests</code>  目录下）。</li>\n<li>在每个项目中随机选择 10 个包含 assert 语句的测试用例。</li>\n</ul>\n<h4 id=\"第二步把test-case中的assert去掉\"><a class=\"markdownIt-Anchor\" href=\"#第二步把test-case中的assert去掉\">#</a> 第二步：把 test case 中的 assert 去掉</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>去掉 assert 语句</strong>：编辑选中的测试用例，删除其中的 assert 语句。这意味着我们要修改测试用例，使其保留其他逻辑，但去除验证部分。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>打开每个测试用例文件，找到 assert 语句。</li>\n<li>删除 assert 语句，保留其他代码。</li>\n</ul>\n<h4 id=\"第三步用llm补全assert\"><a class=\"markdownIt-Anchor\" href=\"#第三步用llm补全assert\">#</a> 第三步：用 LLM 补全 assert</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>用 LLM 补全</strong>：将去掉 assert 语句的测试用例输入到大语言模型（LLM）中，让它自动补全缺失的 assert 语句。这里的 LLM 可以是一个经过训练的自然语言处理模型，例如 GPT-4。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>将去掉 assert 语句的测试用例逐个输入到 LLM 中。</li>\n<li>让 LLM 根据上下文补全 assert 语句。</li>\n</ul>\n<h4 id=\"第四步看看结果是什么样子\"><a class=\"markdownIt-Anchor\" href=\"#第四步看看结果是什么样子\">#</a> 第四步：看看结果是什么样子</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>查看结果</strong>：获取 LLM 补全后的测试用例，并对比原始测试用例，查看 LLM 补全的 assert 语句的正确性和合理性。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>比较 LLM 补全的 assert 语句和原始 assert 语句。</li>\n<li>记录 LLM 补全效果好的地方和不足之处。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><strong>完整过程</strong>：</p>\n<ol>\n<li>找 10 个开源项目，每个项目中随机选 10 个包含 assert 语句的测试用例。</li>\n<li>去掉这些测试用例中的 assert 语句，保留其他代码。</li>\n<li>使用 LLM 对去掉 assert 语句的测试用例进行补全，让 LLM 自动生成 assert 语句。</li>\n<li>对比 LLM 补全的结果与原始测试用例，分析 LLM 的表现。</li>\n</ol>\n<p>这个过程将帮助我们评估 LLM 在自动补全测试用例中 assert 语句的能力，并找出其优缺点，以便进一步改进和优化。</p>\n<h3 id=\"示例具体操作假设性示例\"><a class=\"markdownIt-Anchor\" href=\"#示例具体操作假设性示例\">#</a> 示例具体操作（假设性示例）</h3>\n<p>假设我们从一个项目中选取了以下测试用例：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"attribute\">assert</span> result == <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>去掉 assert 语句后：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># assert result == 12</span></span><br></pre></td></tr></table></figure>\n<p>输入 LLM 进行补全后，假设 LLM 生成的结果是：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"built_in\">result</span> = <span class=\"built_in\">multiply</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    assert <span class=\"built_in\">result</span> == <span class=\"number\">12</span>  <span class=\"comment\"># LLM补全</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><strong>正确性</strong>：LLM 正确地补全了 assert 语句，与原始测试用例一致。</li>\n<li><strong>上下文理解</strong>：LLM 理解了测试函数的意图，并生成了合理的 assert 语句。</li>\n</ul>\n<p>通过这样的操作，我们可以评估 LLM 在处理各种测试用例时的表现，并找出改进方向。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEBC/redis-dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "url": "https://enjundu.github.io/ECEBC/redis-dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "title": "DICT.C源码阅读报告",
            "date_published": "2024-07-02T17:43:21.000Z",
            "content_html": "<h1 id=\"一-各函数分部解析\"><a class=\"markdownIt-Anchor\" href=\"#一-各函数分部解析\">#</a> 一、各函数分部解析</h1>\n<ul>\n<li>\n<p>struct dictEntry 结构体：</p>\n<ol>\n<li>用于表示字典中的键值对。</li>\n<li>成员变量：</li>\n<li>void *key：键的指针。</li>\n<li>union：联合体，可以存储值的不同类型（void *val, uint64_t u64, int64_t s64, double d）。</li>\n<li>struct dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。</li>\n</ol>\n</li>\n<li>\n<p>typedef struct dictEntryNoValue 结构体：</p>\n<ol>\n<li>表示字典中的无值 entry。</li>\n<li>成员变量：\n<ol>\n<li>void *key：键的指针。</li>\n<li>dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>static dictResizeEnable dict_can_resize：</p>\n<ol>\n<li>\n<ul>\n<li>全局变量，表示字典是否允许进行大小调整的标志。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>static unsigned int dict_force_resize_ratio：</p>\n<ol>\n<li>全局变量，表示强制调整大小的比例阈值。</li>\n</ol>\n</li>\n<li>\n<p>哈希函数相关：</p>\n<ol>\n<li>static uint8_t dict_hash_function_seed [16]：字典哈希函数的种子。</li>\n<li>void dictSetHashFunctionSeed (uint8_t *seed)：设置哈希函数的种子。</li>\n<li>uint8_t *dictGetHashFunctionSeed (void)：获取哈希函数的种子。</li>\n<li>uint64_t dictGenHashFunction (const void *key, size_t len)：字典使用的哈希函数。</li>\n<li>uint64_t dictGenCaseHashFunction (const unsigned char *buf, size_t len)：字典使用的哈希函数，不区分大小写。</li>\n</ol>\n</li>\n<li>\n<p>字典指针位操作相关：</p>\n<ol>\n<li>#define ENTRY_PTR_MASK 7：用于掩码操作的位掩码，表示字典指针的最低 3 位。</li>\n<li>#define ENTRY_PTR_NORMAL 0 和 #define ENTRY_PTR_NO_VALUE 2：表示不同类型的字典 entry。</li>\n<li>一系列辅助函数用于判断和操作不同类型的 entry。</li>\n</ol>\n</li>\n<li>\n<p>哈希表相关函数：</p>\n<ol>\n<li>_dictExpandIfNeeded (dict *d)：如果需要，扩展字典的哈希表大小的内部函数。</li>\n<li>_dictNextExp (unsigned long size)：返回大于等于给定大小的最小的 2 的整数次幂的对数的函数。</li>\n<li>_dictInit (dict *d, dictType *type)：初始化字典的内部函数。</li>\n</ol>\n</li>\n<li>\n<p>API 实现相关：</p>\n<ol>\n<li>_dictReset (dict *d, int htidx)：重置已使用 _dictInit () 初始化的哈希表参数。</li>\n<li>dictCreate (dictType *type)：创建一个新的哈希表。</li>\n<li>dictCreateMultiple (dictType *type, int count)：创建包含多个字典的数组。</li>\n<li>int _dictInit (dict *d, dictType *type)：初始化哈希表。</li>\n<li>int dictResize (dict *d)：调整表的大小，使其包含所有元素，且满足 USED/BUCKETS 比率接近 &lt;= 1 的不变式。</li>\n</ol>\n</li>\n<li>\n<p>int _dictExpand(dict *d, unsigned long size, int *malloc_failed)：</p>\n<ol>\n<li>这个函数用于扩展或创建哈希表，增加或初始化新的哈希表。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n<li>malloc_failed：如果为非空指针，则在分配内存失败时设置为 1。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictExpand(dict *d, unsigned long size)：</p>\n<ol>\n<li>对外部接口的封装，用于扩展字典的哈希表。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictTryExpand(dict *d, unsigned long size)：</p>\n<ol>\n<li>对外部接口的封装，用于尝试扩展字典的哈希表，当内存分配失败时返回 DICT_ERR。\n<ol>\n<li>参数：</li>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果内存分配失败，返回 DICT_ERR；否则返回 DICT_OK。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictRehash(dict *d, int n)：</p>\n<ol>\n<li>执行 N 步的增量重新哈希。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>n：步数。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果还有从旧哈希表移动到新哈希表的键，则返回 1；否则返回 0。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>long long timeInMilliseconds(void)：</p>\n<ol>\n<li>返回当前时间戳，以毫秒为单位。</li>\n</ol>\n</li>\n<li>\n<p>int dictRehashMilliseconds(dict *d, unsigned int ms)：</p>\n<ol>\n<li>在指定的时间内（毫秒为单位）执行重新哈希。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>ms：指定的时间（毫秒）。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>返回实际进行的重新哈希步数。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>void _dictRehashStep(dict *d)：</p>\n<ol>\n<li>执行一步的增量重新哈希，仅在哈希表的重新哈希未暂停时执行。</li>\n</ol>\n</li>\n<li>\n<p>int dictAdd(dict *d, void *key, void *val)：</p>\n<ol>\n<li>向字典中添加键值对。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>val：值。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)：</p>\n<ol>\n<li>低级别的添加或查找函数，返回一个指向新键的 dictEntry 结构体。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>existing：如果键已经存在，则存储现有条目的指针。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果键已经存在，返回 NULL；否则返回指向新键的 dictEntry 结构体。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictInsertAtPosition(dict *d, void *key, void *position)：</p>\n<ol>\n<li>在指定位置插入键，该位置通常由 dictFindPositionForInsert 函数返回。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>position：插入位置。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>返回指向新键的 dictEntry 结构体。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictReplace(dict *d, void *key, void *val)：</p>\n<ol>\n<li>尝试向字典中添加一个元素。如果键不存在，dictAddRaw 将成功。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要添加或替换的键。</li>\n<li>val：要设置的值。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果添加成功，返回 1；否则，如果键已存在，则返回 0。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictAddOrFind(dict *d, void *key)：</p>\n<ol>\n<li>是 dictAddRaw 的一个版本，始终返回指定键的哈希条目，即使键已存在且无法添加。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要添加或查找的键。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果添加成功，返回新的字典条目；如果键已存在，返回已存在的字典条目。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree)：</p>\n<ol>\n<li>用于在字典中搜索并删除元素。这是 dictDelete () 和 dictUnlink () 的辅助函数。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要删除的键。</li>\n<li>nofree：指示是否释放内存的标志。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果找到并删除元素，返回被删除的字典条目；如果未找到，返回 NULL。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictDelete(dict *ht, const void *key)：</p>\n<ol>\n<li>从字典中删除元素，成功返回 DICT_OK，否则返回 DICT_ERR。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictUnlink(dict *d, const void *key)：</p>\n<ol>\n<li>从字典中删除元素，但不实际释放键、值和字典条目。返回被找到并从表中解链的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>void dictFreeUnlinkedEntry(dict *d, dictEntry *he)：</p>\n<ol>\n<li>用于真正释放调用 dictUnlink () 后的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>int _dictClear(dict <em>d, int htidx, void(callback)(dict</em>))：</p>\n<ol>\n<li>释放字典中的所有元素。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>htidx：要清除的哈希表索引。</li>\n<li>callback：可选的回调函数。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>成功返回 DICT_OK。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>void dictRelease(dict *d)：</p>\n<ol>\n<li>清空并释放哈希表。首先通过 _dictClear 清空两个哈希表，然后释放字典结构体占用的内存。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictFind(dict *d, const void *key)：</p>\n<ol>\n<li>在字典中查找给定键对应的字典条目。</li>\n<li>如果字典为空，返回 NULL。</li>\n<li>如果字典正在进行 rehash，执行一步 rehash 操作。</li>\n<li>遍历两个哈希表，查找匹配的键，找到则返回对应的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>void *dictFetchValue(dict *d, const void *key)：</p>\n<ol>\n<li>获取字典中给定键对应的值。</li>\n<li>调用 dictFind 查找字典条目，如果找到则返回对应的值，否则返回 NULL。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictTwoPhaseUnlinkFind(dict *d, const void *key, dictEntry ***plink, int *table_index)：</p>\n<ol>\n<li>在字典中查找给定键对应的字典条目，并获取该条目的前一项的指针地址（plink）和哈希表索引（table_index）。</li>\n<li>这是一种两阶段解链的操作，用于在可能的 rehash 过程中执行解链。</li>\n</ol>\n</li>\n<li>\n<p>void dictTwoPhaseUnlinkFree(dict *d, dictEntry *he, dictEntry **plink, int table_index)：</p>\n<ol>\n<li>两阶段解链并释放字典条目的函数。</li>\n<li>通过修改前一项的指针实现解链，然后释放键、值和字典条目的内存。</li>\n<li>恢复 rehash 过程。</li>\n</ol>\n</li>\n<li>\n<p>一系列用于设置和获取字典条目键值的辅助函数：</p>\n<ol>\n<li>dictSetKey、dictSetVal、dictSetSignedIntegerVal、dictSetUnsignedIntegerVal、dictSetDoubleVal 用于设置字典条目的键和值。</li>\n<li>dictIncrSignedIntegerVal、dictIncrUnsignedIntegerVal、dictIncrDoubleVal 用于自增字典条目的整数值和浮点数值。</li>\n<li>dictGetKey、dictGetVal、dictGetSignedIntegerVal、dictGetUnsignedIntegerVal、dictGetDoubleVal 用于获取字典条目的键和值。</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry *dictGetNext(const dictEntry *de)：</p>\n<ol>\n<li>返回字典条目的 next 字段或 NULL，如果条目没有 next 字段则返回 NULL。</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry **dictGetNextRef(dictEntry *de)：</p>\n</li>\n</ul>\n<ol>\n<li>返回指向字典条目的 next 字段的指针，或 NULL，如果条目没有 next 字段则返回 NULL。</li>\n</ol>\n<ul>\n<li>\n<p>static void dictSetNext(dictEntry *de, dictEntry *next)：</p>\n<ol>\n<li>设置字典条目的 next 字段。</li>\n</ol>\n</li>\n<li>\n<p>size_t dictMemUsage(const dict *d)：</p>\n<ol>\n<li>返回字典的内存使用，不包括键和值的大小。</li>\n</ol>\n</li>\n<li>\n<p>size_t dictEntryMemUsage(void)：</p>\n<ol>\n<li>返回字典条目的内存使用。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long long dictFingerprint(dict *d)：</p>\n<ol>\n<li>生成字典的指纹，用于检测在迭代期间是否对字典进行了禁止的操作。</li>\n</ol>\n</li>\n<li>\n<p>void dictInitIterator(dictIterator *iter, dict *d)：</p>\n<ol>\n<li>初始化字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>void dictInitSafeIterator(dictIterator *iter, dict *d)：</p>\n</li>\n</ul>\n<ol>\n<li>初始化安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。</li>\n</ol>\n<ul>\n<li>\n<p>void dictResetIterator(dictIterator *iter)：</p>\n<ol>\n<li>重置字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictIterator *dictGetIterator(dict *d)：</p>\n<ol>\n<li>获取普通字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictIterator *dictGetSafeIterator(dict *d)：</p>\n</li>\n</ul>\n<ol>\n<li>获取安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。</li>\n</ol>\n<ul>\n<li>\n<p>dictEntry *dictNext(dictIterator *iter)：</p>\n<ol>\n<li>获取字典中的下一个条目。</li>\n</ol>\n</li>\n<li>\n<p>void dictReleaseIterator(dictIterator *iter)：</p>\n<ol>\n<li>释放字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictGetRandomKey(dict *d)：</p>\n<ol>\n<li>返回字典中的随机条目，用于实现随机算法。</li>\n</ol>\n</li>\n<li>\n<p>unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count)：</p>\n<ol>\n<li>从字典中获取一些随机条目，用于采样目的。</li>\n</ol>\n</li>\n<li>\n<p>static void dictDefragBucket(dictEntry **bucketref, dictDefragFunctions *defragfns)：</p>\n<ol>\n<li>使用提供的分配函数，重新分配字典条目、键和值在一个桶中的内存，以进行碎片整理。</li>\n<li>defragfns 是一个包含碎片整理分配函数的结构。</li>\n<li>dictEntry *dictGetFairRandomKey(dict *d)：</li>\n<li>类似于 dictGetRandomKey ()，但尝试确保返回元素的更好分布。</li>\n<li>通过考虑哈希表中可能由不同链长度组成的 N 个桶，选择范围内的一个随机元素，以平滑解决不同链长度的问题。</li>\n</ol>\n</li>\n<li>\n<p>static unsigned long rev(unsigned long v)：</p>\n<ol>\n<li>位反转函数，用于迭代器中。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long dictScan(dict *d, unsigned long v, dictScanFunction *fn, void *privdata)：</p>\n<ol>\n<li>用于迭代字典中的元素，以确保在迭代开始和结束之间返回字典中的所有元素。</li>\n<li>通过反向游标迭代，以处理哈希表可能在迭代调用之间发生大小更改的情况。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long dictScanDefrag(dict *d, unsigned long v, dictScanFunction *fn, dictDefragFunctions *defragfns, void *privdata)：</p>\n<ol>\n<li>类似于 dictScan ()，但额外使用提供的分配函数重新分配字典条目的内存。</li>\n<li>defragfns 包含用于碎片整理的分配函数。</li>\n</ol>\n</li>\n<li>\n<p>static int dictTypeExpandAllowed(dict *d)：</p>\n<ol>\n<li>检查字典类型是否允许进行扩展。</li>\n<li>如果允许扩展，且达到了扩展的条件，调用 dictExpand 进行扩展。</li>\n</ol>\n</li>\n<li>\n<p>static int _dictExpandIfNeeded(dict *d)：</p>\n<ol>\n<li>如果正在进行渐进式 rehashing，直接返回。</li>\n<li>如果哈希表为空，将其扩展到初始大小。</li>\n<li>如果达到 1:1 的比率，并且允许调整哈希表大小，或者应该避免调整但元素 / 桶的比率超过安全阈值，就以两倍的速度扩展哈希表。</li>\n</ol>\n</li>\n<li>\n<p>static signed char _dictNextExp(unsigned long size)：</p>\n<ol>\n<li>返回给定大小的下一个有效的哈希表大小的指数。哈希表的大小是 2 的幂。</li>\n</ol>\n</li>\n<li>\n<p>void *dictFindPositionForInsert(dict *d, const void *key, dictEntry **existing)：</p>\n<ol>\n<li>查找插入位置，如果键已存在，则返回 NULL 并填充 existing，否则返回桶的引用。</li>\n</ol>\n</li>\n<li>\n<p>void dictEmpty(dict <em>d, void(callback)(dict</em>))：</p>\n<ol>\n<li>清空字典，包括两个哈希表。可提供回调函数处理被删除的元素。</li>\n</ol>\n</li>\n<li>\n<p>void dictSetResizeEnabled(dictResizeEnable enable)：</p>\n<ol>\n<li>设置是否允许字典调整大小。</li>\n</ol>\n</li>\n<li>\n<p>uint64_t dictGetHash(dict *d, const void *key)：</p>\n<ol>\n<li>获取键的哈希值。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictFindEntryByPtrAndHash(dict *d, const void *oldptr, uint64_t hash)：</p>\n<ol>\n<li>通过指针和预计算的哈希查找字典中的条目，用于查找特定指针的元素。</li>\n</ol>\n</li>\n<li>\n<p>void dictRehashingInfo(dict *d, unsigned long long *from_size, unsigned long long *to_size)：</p>\n<ol>\n<li>提供正在进行 rehashing 的字典的旧哈希表大小和新哈希表大小信息。</li>\n<li>Debugging 相关函数：\n<ol>\n<li>void dictFreeStats (dictStats *stats)：释放字典统计信息的内存。</li>\n<li>void dictCombineStats (dictStats *from, dictStats *into)：将两个字典统计信息合并。</li>\n<li>dictStats *dictGetStatsHt (dict *d, int htidx, int full)：获取指定哈希表的统计信息。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>size_t dictGetStatsMsg(char *buf, size_t bufsize, dictStats *stats, int full)：</p>\n<ol>\n<li>生成字典统计信息的人类可读消息。</li>\n<li>如果字典为空，返回相关提示信息。</li>\n<li>如果 full 为真，还包括详细的统计信息。</li>\n</ol>\n</li>\n<li>\n<p>void dictGetStats(char *buf, size_t bufsize, dict *d, int full)：</p>\n<ol>\n<li>获取字典的统计信息，包括主哈希表和（如果正在进行 rehashing）rehash 哈希表的信息。</li>\n</ol>\n</li>\n<li>\n<p>Benchmark 相关函数：1.</p>\n<ol>\n<li>BenchmarkDictType 结构体：定义了用于性能测试的字典类型。</li>\n<li>uint64_t hashCallback (const void *key)：哈希回调函数，计算键的哈希值。</li>\n<li>int compareCallback (dict *d, const void *key1, const void *key2)：比较回调函数，比较两个键是否相等。</li>\n<li>void freeCallback (dict *d, void *val)：释放回调函数，释放值的内存。</li>\n<li>char *stringFromLongLong (long long value)：将长长整型值转换为字符串。</li>\n<li>#define start_benchmark ()：宏定义，用于开始计时。</li>\n<li>#define end_benchmark (msg)：宏定义，用于结束计时并输出性能测试结果。</li>\n<li>int dictTest (int argc, char **argv, int flags)：主要的性能测试函数，用于测试字典的插入、访问、删除等操作的性能。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"二-dictc的主要代码思路\"><a class=\"markdownIt-Anchor\" href=\"#二-dictc的主要代码思路\">#</a> 二、dict.c 的主要代码思路</h1>\n<h2 id=\"字典的创建和初始化\"><a class=\"markdownIt-Anchor\" href=\"#字典的创建和初始化\">#</a> 字典的创建和初始化：</h2>\n<ul>\n<li>使用 dictCreate 函数创建一个新的字典。</li>\n<li>初始化字典的字段，包括两个哈希表、字典类型等。</li>\n<li>通过 dictSetHashFunctionSeed 设置哈希函数种子。</li>\n</ul>\n<h2 id=\"字典的扩容和-rehash\"><a class=\"markdownIt-Anchor\" href=\"#字典的扩容和-rehash\">#</a> 字典的扩容和 rehash：</h2>\n<ul>\n<li>使用 _dictExpandIfNeeded 函数检查是否需要扩容。</li>\n<li>如果需要扩容，调用 dictExpand 进行扩容。</li>\n<li>扩容时，可能触发 rehash 操作，将原哈希表的数据逐步迁移到新哈希表。</li>\n<li>通过 _dictRehashStep 函数完成一步 rehash 操作。</li>\n<li>在 rehash 过程中，遍历原哈希表的每个桶，将其中的元素逐个迁移到新哈希表。</li>\n</ul>\n<h2 id=\"插入元素\"><a class=\"markdownIt-Anchor\" href=\"#插入元素\">#</a> 插入元素：</h2>\n<ul>\n<li>使用 dictAdd 函数插入键值对。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>如果字典正在 rehash，先进行一步 rehash 操作。</li>\n<li>检查是否存在相同的键，如果存在，返回错误。</li>\n<li>创建一个新的 dictEntry，插入到哈希桶的链表中。</li>\n</ul>\n<h2 id=\"查找元素\"><a class=\"markdownIt-Anchor\" href=\"#查找元素\">#</a> 查找元素：</h2>\n<ul>\n<li>使用 dictFind 函数查找指定键的条目。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>在哈希桶的链表中遍历，比较键的值找到相应的条目。</li>\n</ul>\n<h2 id=\"删除元素\"><a class=\"markdownIt-Anchor\" href=\"#删除元素\">#</a> 删除元素：</h2>\n<ul>\n<li>使用 dictDelete 函数删除指定键的条目。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>在哈希桶的链表中遍历，找到并删除相应的条目。</li>\n</ul>\n<h2 id=\"迭代元素\"><a class=\"markdownIt-Anchor\" href=\"#迭代元素\">#</a> 迭代元素 ##：</h2>\n<ul>\n<li>使用 dictGetRandomKey 函数随机获取一个键。</li>\n<li>使用 dictScan 函数迭代字典中的所有元素。</li>\n</ul>\n<h2 id=\"性能测试和统计信息\"><a class=\"markdownIt-Anchor\" href=\"#性能测试和统计信息\">#</a> 性能测试和统计信息：</h2>\n<ul>\n<li>提供了一系列的性能测试函数，例如 dictTest，用于测试字典操作的性能。</li>\n<li>提供了函数用于获取字典的统计信息，如 dictGetStats。</li>\n</ul>\n<p><strong>总体来说，dict.c 中的代码主要围绕字典的创建、扩容、插入、查找、删除等基本操作展开，同时提供了性能测试和统计信息功能。字典的实现采用了哈希表，支持渐进式 rehash，以确保字典的高效性能。</strong></p>\n<h1 id=\"三-dictc在-redis-中的主要运用方式和作用\"><a class=\"markdownIt-Anchor\" href=\"#三-dictc在-redis-中的主要运用方式和作用\">#</a> 三、dict.c 在 Redis 中的主要运用方式和作用#</h1>\n<h2 id=\"存储键值对\"><a class=\"markdownIt-Anchor\" href=\"#存储键值对\">#</a> 存储键值对：</h2>\n<ul>\n<li>Redis 中的数据结构，如哈希表、有序集合等，都依赖于 dict.c 实现的字典结构。</li>\n<li>键值对是 Redis 数据模型的基础，而 dict.c 提供了高效的字典实现，用于存储这些键值对。</li>\n</ul>\n<h2 id=\"快速查找\"><a class=\"markdownIt-Anchor\" href=\"#快速查找\">#</a> 快速查找：</h2>\n<ul>\n<li>Redis 中经常需要根据键快速查找对应的值，例如通过键获取字符串对象、获取哈希表中的字段等。</li>\n<li>dict.c 提供了高效的查找算法，使得在字典中查找元素的时间复杂度为 O (1)。</li>\n</ul>\n<h2 id=\"哈希算法\"><a class=\"markdownIt-Anchor\" href=\"#哈希算法\">#</a> 哈希算法：</h2>\n<ul>\n<li>dict.c 中包含了用于计算键的哈希值的算法，通过哈希值将键均匀地散列到哈希表的各个桶中。</li>\n<li>这有助于保持字典的高效性能，减少哈希冲突的可能性。</li>\n</ul>\n<h2 id=\"动态扩容和-rehash\"><a class=\"markdownIt-Anchor\" href=\"#动态扩容和-rehash\">#</a> 动态扩容和 rehash：</h2>\n<ul>\n<li>dict.c 提供了动态扩容的机制，当字典中的元素数量增加时，自动调整哈希表的大小以保持性能。</li>\n<li>在扩容时，dict.c 还实现了渐进式 rehash，逐步将数据从旧哈希表迁移到新哈希表，避免了一次性大规模的数据迁移。</li>\n</ul>\n<h2 id=\"迭代器支持\"><a class=\"markdownIt-Anchor\" href=\"#迭代器支持\">#</a> 迭代器支持：</h2>\n<ul>\n<li>dict.c 提供了字典的迭代器，支持按顺序或随机遍历字典中的元素。</li>\n<li>迭代器的实现使得在 Redis 中可以轻松地实现像 HSCAN 这样的命令。</li>\n</ul>\n<h2 id=\"统计信息和性能测试\"><a class=\"markdownIt-Anchor\" href=\"#统计信息和性能测试\">#</a> 统计信息和性能测试：</h2>\n<ul>\n<li>dict.c 提供了获取字典统计信息的功能，这对于监控和调优 Redis 实例至关重要。</li>\n<li>性能测试函数，如 dictTest，用于验证字典操作的性能。</li>\n</ul>\n<h2 id=\"在-redis-服务器中的引用\"><a class=\"markdownIt-Anchor\" href=\"#在-redis-服务器中的引用\">#</a> 在 Redis 服务器中的引用：</h2>\n<ul>\n<li>Redis 服务器的核心功能，包括数据存储、命令执行等，都依赖于字典结构。</li>\n<li>在 Redis 服务器的核心源码中，大量引用了 dict.c 中提供的字典操作函数，确保数据的高效存储和检索。</li>\n</ul>\n<h2 id=\"在-redis-模块中的引用\"><a class=\"markdownIt-Anchor\" href=\"#在-redis-模块中的引用\">#</a> 在 Redis 模块中的引用：</h2>\n<ul>\n<li>Redis 允许用户通过编写模块扩展其功能，而许多模块也需要使用字典结构来管理自己的数据。</li>\n<li>模块开发者可以直接引用 dict.c 中的字典实现，以方便地处理键值对数据。</li>\n</ul>\n<p><strong>总体来说，dict.c 在 Redis 中扮演了关键的角色，为 Redis 提供了高效的键值对存储和检索能力，是 Redis 数据库引擎的重要组成部分。</strong></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEBC/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/",
            "url": "https://enjundu.github.io/ECEBC/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/",
            "title": "Request阅读报告",
            "date_published": "2024-07-02T17:41:31.000Z",
            "content_html": "<h1 id=\"requests-html-项目阅读报告\"><a class=\"markdownIt-Anchor\" href=\"#requests-html-项目阅读报告\">#</a> Requests-HTML 项目阅读报告</h1>\n<h2 id=\"项目概述\"><a class=\"markdownIt-Anchor\" href=\"#项目概述\">#</a> 项目概述</h2>\n<p><strong>requests-html</strong> 是一个用于简化 HTML 解析和网页抓取的 Python 库。它通过结合 requests 库的简单和强大，与<strong> pyquery、beautifulsoup4 和 lxml</strong> 等工具进行二次封装，提供了一个直观的 API，使得网页抓取和 HTML 解析变得更容易。该库不仅支持同步请求，还支持异步请求，能够处理由 JavaScript 驱动的动态内容。</p>\n<h2 id=\"关键特性\"><a class=\"markdownIt-Anchor\" href=\"#关键特性\">#</a> 关键特性</h2>\n<ul>\n<li><strong>完整的 JavaScript 支持</strong>：通过 pyppeteer 支持渲染和解析由 JavaScript 动态生成的内容。</li>\n<li><strong>CSS 选择器</strong>：使用 pyquery 提供类似 jQuery 的选择器语法，方便选择 HTML 元素。</li>\n<li><strong>XPath 选择器</strong>：提供对 XPath 的支持，方便使用 XPath 语法选择元素。</li>\n<li><strong>模拟用户代理</strong>：模拟真实的浏览器用户代理，避免被反爬虫机制检测到。</li>\n<li><strong>自动重定向</strong>：自动处理 HTTP 重定向，保持会话的连续性。</li>\n<li><strong>连接池和 Cookie 持久化</strong>：高效的连接处理，保持会话中的 Cookie 持久化。</li>\n<li><strong>异步支持</strong>：允许异步的 HTTP 请求和渲染，提升爬虫的效率。</li>\n</ul>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1ZXN0cy1odG1sLmtlbm5ldGhyZWl0ei5vcmcv\"> requests-html 项目文档</span>可知安装方法为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pipenv install requests-html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>仅支持 python3.6 版本 ——Only <strong>Python 3.6</strong> is supported.</li>\n</ul>\n<h2 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h2>\n<p>requests-html 设计的核心思想是将常见的 HTML 解析和网页抓取任务简化为直观且强大的 API 操作。它通过结合现有的流行库（如 requests、pyquery、beautifulsoup4 和 lxml），增强了处理复杂网页抓取任务的能力。其主要设计理念包括：</p>\n<ul>\n<li><strong>统一接口</strong>：提供一个统一的接口来处理 HTTP 请求、HTML 解析和 JavaScript 渲染。</li>\n<li><strong>异步支持</strong>：允许用户以异步方式处理网页抓取任务，提高了效率。</li>\n<li><strong>模拟浏览器行为</strong>：通过模拟用户代理和处理重定向，使其行为更像真实浏览器。</li>\n<li><strong>全面的选择器支持</strong>：结合 CSS 和 XPath 选择器，使用户可以灵活地选择和解析 HTML 元素。</li>\n</ul>\n<h2 id=\"源代码分析核心类和函数\"><a class=\"markdownIt-Anchor\" href=\"#源代码分析核心类和函数\">#</a> 源代码分析 (核心类和函数)</h2>\n<h3 id=\"htmlsession\"><a class=\"markdownIt-Anchor\" href=\"#htmlsession\">#</a> HTMLSession</h3>\n<h4 id=\"用于同步请求的会话类继承自-requestssession\"><a class=\"markdownIt-Anchor\" href=\"#用于同步请求的会话类继承自-requestssession\">#</a> 用于同步请求的会话类，继承自 requests.Session。</h4>\n<ul>\n<li><strong>get(url, **kwargs)</strong>：发送 GET 请求，返回 HTMLResponse 对象。</li>\n<li><strong>close()</strong>：关闭会话并关闭浏览器。</li>\n</ul>\n<h3 id=\"asynchtmlsession\"><a class=\"markdownIt-Anchor\" href=\"#asynchtmlsession\">#</a> AsyncHTMLSession</h3>\n<h4 id=\"用于异步请求的会话类继承自-requestssession\"><a class=\"markdownIt-Anchor\" href=\"#用于异步请求的会话类继承自-requestssession\">#</a> 用于异步请求的会话类，继承自 <strong>requests.Session</strong>。</h4>\n<ul>\n<li><strong>run(*coros)</strong>：运行多个协程，返回结果列表。</li>\n<li><strong>close()</strong>：关闭会话并关闭浏览器。</li>\n</ul>\n<h3 id=\"html\"><a class=\"markdownIt-Anchor\" href=\"#html\">#</a> HTML</h3>\n<h4 id=\"表示一个-html-文档提供解析功能\"><a class=\"markdownIt-Anchor\" href=\"#表示一个-html-文档提供解析功能\">#</a> 表示一个 HTML 文档，提供解析功能。</h4>\n<ul>\n<li><strong>find(selector,*, containing=None, clean=False, first=False)</strong>：使用 CSS 选择器查找元素。</li>\n<li><strong>xpath(selector, *, clean=False, first=False)</strong>：使用 XPath 选择器查找元素。</li>\n<li><strong>render(**kwargs)</strong>：渲染 JavaScript 内容。</li>\n<li><strong>next(fetch=False, next_symbol=None)</strong>：查找分页链接。</li>\n</ul>\n<h3 id=\"element\"><a class=\"markdownIt-Anchor\" href=\"#element\">#</a> Element</h3>\n<h4 id=\"表示一个-html-元素继承自-baseparser\"><a class=\"markdownIt-Anchor\" href=\"#表示一个-html-元素继承自-baseparser\">#</a> 表示一个 HTML 元素，继承自 BaseParser。</h4>\n<ul>\n<li><strong>attrs</strong>：返回元素的属性字典。</li>\n<li><strong>text</strong>：返回元素的文本内容。</li>\n<li><strong>full_text</strong>：返回元素的完整文本内容。</li>\n</ul>\n<h2 id=\"设置和配置\"><a class=\"markdownIt-Anchor\" href=\"#设置和配置\">#</a> 设置和配置</h2>\n<h3 id=\"setuppy\"><a class=\"markdownIt-Anchor\" href=\"#setuppy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3NldHVwLnB5\">setup.py</span> 文件包含项目的元数据和依赖项：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup(</span><br><span class=\"line\">name=<span class=\"string\">&#x27;requests-html&#x27;</span>,</span><br><span class=\"line\">version=<span class=\"string\">&#x27;0.10.0&#x27;</span>,</span><br><span class=\"line\">description=<span class=\"string\">&#x27;HTML Parsing for Humans.&#x27;</span>,</span><br><span class=\"line\">author=<span class=\"string\">&#x27;Kenneth Reitz&#x27;</span>,</span><br><span class=\"line\">author_email=<span class=\"string\">&#x27;me@kennethreitz.org&#x27;</span>,</span><br><span class=\"line\">url=<span class=\"string\">&#x27;https://github.com/psf/requests-html&#x27;</span>,</span><br><span class=\"line\">python_requires=<span class=\"string\">&#x27;&gt;=3.6.0&#x27;</span>,</span><br><span class=\"line\">install_requires=[</span><br><span class=\"line\">\t<span class=\"string\">&#x27;requests&#x27;</span>, <span class=\"string\">&#x27;pyquery&#x27;</span>, <span class=\"string\">&#x27;fake-useragent&#x27;</span>, <span class=\"string\">&#x27;parse&#x27;</span>, <span class=\"string\">&#x27;beautifulsoup4&#x27;</span>, <span class=\"string\">&#x27;w3lib&#x27;</span>, <span class=\"string\">&#x27;pyppeteer&gt;=0.0.14&#x27;</span></span><br><span class=\"line\">],</span><br><span class=\"line\">packages=[<span class=\"string\">&#x27;requests_html&#x27;</span>],</span><br><span class=\"line\">license=<span class=\"string\">&#x27;MIT&#x27;</span>,</span><br><span class=\"line\">classifiers=[</span><br><span class=\"line\">\t<span class=\"string\">&#x27;License :: OSI Approved :: MIT License&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;Programming Language :: Python :: 3.6&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;Programming Language :: Python :: Implementation :: CPython&#x27;</span>,</span><br><span class=\"line\">],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>项目包含同步和异步操作的测试，确保分页、属性提取和 JavaScript 渲染的健壮性。例如：</p>\n<h4 id=\"同步分页测试\"><a class=\"markdownIt-Anchor\" href=\"#同步分页测试\">#</a> 同步分页测试</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"></span><br><span class=\"line\">urls = [</span><br><span class=\"line\"><span class=\"string\">&#x27;https://xkcd.com/1957/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.reddit.com/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://github.com/psf/requests-html/issues&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://discord.com/category/engineering&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://stackoverflow.com/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.frontiersin.org/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://azure.microsoft.com/en-us&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&#x27;url&#x27;</span>, urls</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.internet</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_pagination</span>(<span class=\"params\">url: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">\tsession = HTMLSession()</span><br><span class=\"line\">\tr = session.get(url)</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> <span class=\"built_in\">next</span>(r.html)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步分页测试\"><a class=\"markdownIt-Anchor\" href=\"#异步分页测试\">#</a> 异步分页测试</h4>\n<pre><code>import pytest\nfrom requests_html import AsyncHTMLSession\n\nurls = [\n\t'https://xkcd.com/1957/',\n\t'https://www.reddit.com/',\n\t'https://github.com/psf/requests-html/issues',\n\t'https://discord.com/category/engineering',\n\t'https://stackoverflow.com/',\n\t'https://www.frontiersin.org/',\n\t'https://azure.microsoft.com/en-us'\n]\n\n@pytest.mark.parametrize('url', urls)\n@pytest.mark.internet\n@pytest.mark.asyncio\nasync def test_async_pagination(event_loop, url):\n\tasession = AsyncHTMLSession()\n\tr = await asession.get(url)\n\tassert await r.html.__anext__()\n</code></pre>\n<h4 id=\"文件请求测试\"><a class=\"markdownIt-Anchor\" href=\"#文件请求测试\">#</a> 文件请求测试</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"></span><br><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">session.mount(<span class=\"string\">&#x27;file://&#x27;</span>, FileAdapter())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">\tpath = os.path.sep.join((os.path.dirname(os.path.abspath(__file__)), <span class=\"string\">&#x27;python.html&#x27;</span>))</span><br><span class=\"line\">\turl = <span class=\"string\">f&#x27;file://<span class=\"subst\">&#123;path&#125;</span>&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> session.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_get</span>():</span><br><span class=\"line\">\tr = get()</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> r.status_code == <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"文档配置\"><a class=\"markdownIt-Anchor\" href=\"#文档配置\">#</a> 文档配置</h3>\n<h4 id=\"confpy\"><a class=\"markdownIt-Anchor\" href=\"#confpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL2NvbmYucHk=\">conf.py</span> 文件设置了 Sphinx 文档，包括扩展和项目信息：</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests_html</span><br><span class=\"line\"></span><br><span class=\"line\">project = <span class=\"string\">&#x27;requests-HTML&#x27;</span></span><br><span class=\"line\">author = <span class=\"string\">&#x27;Kenneth Reitz&#x27;</span></span><br><span class=\"line\">version = <span class=\"string\">&#x27;v0.3.4&#x27;</span></span><br><span class=\"line\">extensions = [</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.autodoc&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.doctest&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.intersphinx&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.todo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.coverage&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.viewcode&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.githubpages&#x27;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h2>\n<h3 id=\"同步请求\"><a class=\"markdownIt-Anchor\" href=\"#同步请求\">#</a> 同步请求</h3>\n<ul>\n<li>\n<p>向 <span class=\"exturl\" data-url=\"aHR0cDovL3B5dGhvbi5vcmc=\">python.org</span> 发起同步 GET 请求并提取链接：<br>\nfrom requests_html import HTMLSession</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取所有链接</span></span><br><span class=\"line\">links = r.html.links</span><br><span class=\"line\"><span class=\"built_in\">print</span>(links)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取绝对链接</span></span><br><span class=\"line\">absolute_links = r.html.absolute_links</span><br><span class=\"line\"><span class=\"built_in\">print</span>(absolute_links)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>示例结果为：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&#x27;//docs.python.org/3/tutorial/&#x27;</span>, <span class=\"string\">&#x27;/about/apps/&#x27;</span>, <span class=\"string\">&#x27;https://github.com/python/pythondotorg/issues&#x27;</span>, ...&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;https://docs.python.org/3/tutorial/&#x27;</span>, <span class=\"string\">&#x27;https://www.python.org/about/apps/&#x27;</span>, <span class=\"string\">&#x27;https://github.com/python/pythondotorg/issues&#x27;</span>, ...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"异步请求\"><a class=\"markdownIt-Anchor\" href=\"#异步请求\">#</a> 异步请求</h3>\n<ul>\n<li>\n<p>通过 requests_html 库发起异步 GET 请求并运行多个协程：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> AsyncHTMLSession</span><br><span class=\"line\">\tasession = AsyncHTMLSession()</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_python</span>():  </span><br><span class=\"line\">\t  r = <span class=\"keyword\">await</span> asession.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)  </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> r  </span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_reddit</span>():</span><br><span class=\"line\">\t  r = <span class=\"keyword\">await</span> asession.get(<span class=\"string\">&#x27;https://reddit.com/&#x27;</span>)</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> r </span><br><span class=\"line\">\tresults = asession.run(get_python, get_reddit)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result.html.url)  </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>异步请求结果示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.python.org/  </span><br><span class=\"line\">https://www.reddit.com/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"解析html\"><a class=\"markdownIt-Anchor\" href=\"#解析html\">#</a> 解析 HTML</h3>\n<ul>\n<li>\n<p>选择元素并提取属性</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\">about = r.html.find(<span class=\"string\">&#x27;#about&#x27;</span>, first=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取文本</span></span><br><span class=\"line\">text = about.text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取属性</span></span><br><span class=\"line\">attributes = about.attrs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(attributes)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 渲染 HTML</span></span><br><span class=\"line\">html_content = about.html</span><br><span class=\"line\"><span class=\"built_in\">print</span>(html_content)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解析 HTML 结果示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">About</span><br><span class=\"line\">Applications</span><br><span class=\"line\">Quotes</span><br><span class=\"line\">Getting Started</span><br><span class=\"line\">Help</span><br><span class=\"line\">Python Brochure</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: (<span class=\"string\">&#x27;tier-1&#x27;</span>, <span class=\"string\">&#x27;element-1&#x27;</span>), <span class=\"string\">&#x27;aria-haspopup&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;</span><br><span class=\"line\">&lt;li aria-haspopup=<span class=\"string\">&quot;true&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-1 element-1 &quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;about&quot;</span>&gt;\\n&lt;a <span class=\"keyword\">class</span>=<span class=\"string\">&quot;&quot;</span> href=<span class=\"string\">&quot;/about/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;About&lt;/a&gt;\\n&lt;ul aria-hidden=<span class=\"string\">&quot;true&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;subnav menu&quot;</span> role=<span class=\"string\">&quot;menu&quot;</span>&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-1&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/apps/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Applications&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-2&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/quotes/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Quotes&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-3&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/gettingstarted/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Getting Started&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-4&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/help/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Help&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-5&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;http://brochure.getpython.info/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Python Brochure&lt;/a&gt;&lt;/li&gt;\\n&lt;/ul&gt;\\n&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"xpath选择器\"><a class=\"markdownIt-Anchor\" href=\"#xpath选择器\">#</a> XPath 选择器</h3>\n<ul>\n<li>\n<p>提取 html 指定元素的 XPath</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\">about = r.html.xpath(<span class=\"string\">&#x27;//div[@id=&quot;about&quot;]&#x27;</span>, first=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取文本</span></span><br><span class=\"line\">text = about.text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取属性</span></span><br><span class=\"line\">attributes = about.attrs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(attributes)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>XPath 选择器结果示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">About</span><br><span class=\"line\">Applications</span><br><span class=\"line\">Quotes</span><br><span class=\"line\">Getting Started</span><br><span class=\"line\">Help</span><br><span class=\"line\">Python Brochure</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: (<span class=\"string\">&#x27;tier-1&#x27;</span>, <span class=\"string\">&#x27;element-1&#x27;</span>), <span class=\"string\">&#x27;aria-haspopup&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"渲染-javascript-内容\"><a class=\"markdownIt-Anchor\" href=\"#渲染-javascript-内容\">#</a> 渲染 JavaScript 内容</h3>\n<ul>\n<li>\n<p>示例代码：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;http://python-requests.org/&#x27;</span>)</span><br><span class=\"line\">r.html.render()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索渲染后的内容</span></span><br><span class=\"line\">months = r.html.search(<span class=\"string\">&#x27;Python 2 will retire in only &#123;months&#125; months!&#x27;</span>)[<span class=\"string\">&#x27;months&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(months)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>结果示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"处理分页\"><a class=\"markdownIt-Anchor\" href=\"#处理分页\">#</a> 处理分页</h3>\n<ul>\n<li>\n<p>代码示例</p>\n<p>r = session.get(‘<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRkaXQuY29t\">https://reddit.com</span>’)<br>\nfor html in r.html:<br>\nprint(html)</p>\n</li>\n<li>\n<p>结果示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HTML url=<span class=\"string\">&#x27;https://www.reddit.com/&#x27;</span>&gt;</span><br><span class=\"line\">&lt;HTML url=<span class=\"string\">&#x27;https://www.reddit.com/?count=25&amp;after=t3_81puu5&#x27;</span>&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\">#</a> 结论</h2>\n<p>requests-html 是一个功能强大且易于使用的库，通过集成 JavaScript 渲染和异步请求，扩展了传统 HTML 解析和网页抓取的能力。它与 requests 库的无缝集成，使其成为处理复杂网页抓取任务的绝佳选择。无论是处理简单的静态页面还是复杂的动态内容，requests-html 都提供了一个直观且高效的解决方案。</p>\n<h2 id=\"项目心得\"><a class=\"markdownIt-Anchor\" href=\"#项目心得\">#</a> 项目心得</h2>\n<p>在这个项目中，我深入研究了 requests-html 库，并对其功能和设计进行了详细分析和实践。通过这个项目，我不仅熟悉了 requests-html 的使用方法，还掌握了一些高级的网页抓取技巧。</p>\n<p><strong>学习与使用</strong></p>\n<p>首先，我被 requests-html 库的简洁性和强大功能所吸引。这个库基于 requests 构建，结合了 pyquery、beautifulsoup4 和 lxml 等工具，使得 HTML 解析和网页抓取变得更加直观和高效。安装和设置过程也非常简单，只需几行命令即可开始使用。</p>\n<p><strong>同步与异步请求</strong></p>\n<p>在实际使用中，我发现 requests-html 对同步和异步请求的支持非常实用。通过 HTMLSession 和 AsyncHTMLSession，我可以轻松地发起同步和异步的 HTTP 请求，并处理由 JavaScript 动态生成的内容。特别是在处理大量请求时，异步支持显著提高了效率。</p>\n<p><strong>JavaScript 渲染</strong></p>\n<p>一个令我印象深刻的功能是 requests-html 对 JavaScript 渲染的支持。通过 pyppeteer，我能够渲染和解析动态生成的内容，这在现代网页抓取中是至关重要的。我尝试了多个网站，包括一些使用复杂 JavaScript 生成内容的网站，requests-html 都能顺利完成任务。</p>\n<p><strong>CSS 与 XPath 选择器</strong></p>\n<p>在解析 HTML 内容时，requests-html 提供的 CSS 和 XPath 选择器极大地方便了我的工作。我可以使用类似 jQuery 的语法快速定位和提取网页中的元素，同时也可以使用 XPath 进行更复杂的查询。这使得解析和处理网页内容变得更加灵活和高效。</p>\n<p><strong>模拟用户代理与自动重定向</strong></p>\n<p>在实际应用中，避免被反爬虫机制检测到是一个重要的考虑因素。requests-html 通过模拟真实的浏览器用户代理，有效减少了被封禁的风险。此外，它还自动处理 HTTP 重定向，保持会话的连续性，确保抓取过程顺利进行。</p>\n<p><strong>代码实现与测试</strong></p>\n<p>在编写和测试代码的过程中，我进一步理解了 requests-html 的内部机制。通过阅读和分析源码，我了解到每个核心类和函数的具体实现原理。这不仅提升了我的编程技能，也让我对网页抓取有了更深入的认识。</p>\n<p>我编写了一些测试用例，包括同步和异步分页测试、文件请求测试等，确保了代码的健壮性和可靠性。通过这些测试，我验证了 requests-html 在不同场景下的表现，发现它确实是一个功能强大且易于使用的库。</p>\n<p><strong>结论</strong></p>\n<p>总的来说，这次项目经历让我受益匪浅。requests-html 不仅简化了网页抓取的复杂性，还提供了强大的功能，满足了我在处理动态内容和大量请求时的需求。通过这个项目，我对网页抓取技术有了更全面的理解，也积累了丰富的实践经验。今后，我会继续探索和使用这个库，进一步提升我的技术能力。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        }
    ]
}