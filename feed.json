{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/wangandaolun/%E6%A0%88%E6%BA%A2%E5%87%BA/",
            "url": "https://enjundu.github.io/wangandaolun/%E6%A0%88%E6%BA%A2%E5%87%BA/",
            "title": "栈溢出",
            "date_published": "2024-07-03T08:02:48.000Z",
            "content_html": "<h1 id=\"栈溢出简单实验enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#栈溢出简单实验enjun-du\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLU5ldC1TZWN1cml0eS1MYWItLS1TdGFjay1PdmVyZmxvdw==\">栈溢出简单实验 ——Enjun Du</span></h1>\n<h2 id=\"实验分析\"><a class=\"markdownIt-Anchor\" href=\"#实验分析\">#</a> 实验分析</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>栈被用于实现函数的调用以及存储局部变量，当使用诸如 strcpy、gets 等不安全函数时，攻击者通过向栈中某个变量写入的字节数超过了这个变量本身所申请的字节数，使得数据向高地址存储区域进行覆盖来修改返回地址，最终让程序根据攻击者的想法运行，这种攻击被称为栈溢出攻击</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>了解栈溢出攻击原理，并实现简单栈溢出攻击实验</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/2AK37EZWNygmMhw.png\" alt=\"image.png\"></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<ol>\n<li>编写程序，在主函数中调用 func_call 函数，但不调用 inject 函数</li>\n<li>在 func_call 函数中使用 strcpy 函数对 param 数组进行赋值</li>\n<li>攻击者通过对程序进行反汇编（可以使用 gdb 工具）查看汇编指令，通过不断修改 input 数组来将 func_call 函数的返回地址覆盖为指定值，最终使 inject 函数被调用</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/olXgCPWuf5FwEmN.png\" alt=\"image.png\"></p>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<p>为了成功执行攻击，需要关闭 Ubuntu 系统中的一系列保护机制，具体可在终端中输入：</p>\n<ul>\n<li><code>sudo apt-get install gcc-multilib</code> ，代表支持交叉编译 cross-compiling，例如可以在 64 位处理器上处理 32 位程序</li>\n<li><code>sudo sysctl -w kernel.randomize_va_space=0</code> ，代表关闭进程空间地址随机化功能</li>\n<li>使用  <code>gcc -Wall -g -o StackOverflow StackOverflow.c -fno-stack-protector -z execstack -m32</code>  编译程序，其中 - g 代表关闭所有优化机制，-fno-stack-protector 代表关闭 Stack Canary 保护，-z execstack 代表禁用 NX（No-eXecute protect）保护，-m32 代表在编译阶段将编译目标指定为 32 位</li>\n</ul>\n<h2 id=\"实验准备solved-by-enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#实验准备solved-by-enjun-du\">#</a> 实验准备 ——solved by Enjun Du</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">VMware</span> Workstation Pro</span><br><span class=\"line\"><span class=\"attribute\">Ubuntu</span> <span class=\"number\">18</span>.<span class=\"number\">04</span>.<span class=\"number\">6</span> LTS</span><br><span class=\"line\"><span class=\"attribute\">Red</span> Panda Dev-C++</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h3 id=\"实验代码\"><a class=\"markdownIt-Anchor\" href=\"#实验代码\">#</a> 实验代码</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> input[] = <span class=\"string\">&quot;11112222333344445555666677778888&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*****inject success*****\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func_call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> <span class=\"type\">char</span> param[<span class=\"number\">16</span>];</span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(param,input);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>** argv)</span>&#123; </span><br><span class=\"line\"> func_call();</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main exit...\\n&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>\\1. 首先在 dev 上编辑 C 语言代码 StackOverflow.c 如上</p>\n</li>\n<li>\n<p>接下来为了成功执行攻击，需要关闭 Ubuntu 系统中的一系列保护机制：</p>\n<ul>\n<li>在命令行运行 cd /home/sky/Desktop 将地址定位在目标文件层</li>\n<li>在终端输入 sudo apt-get install gcc-multilib，代表支持交叉编译 cross-compiling，例如可以在 64 位处理器上处理 32 位程序</li>\n<li>在终端输入 sudo sysctl -w kernel.randomize_va_space=0，代表关闭进程空间地址随机化功能</li>\n<li>使用 gcc -Wall -g -o StackOverflow StackOverflow.c -fno-stack-protector -z execstack -m32 编译程序，其中 - g 代表关闭所有优化机制，-fno-stack-protector 代表关闭 Stack Canary 保护，-z execstack 代表禁用 NX（No-eXecute protect）保护，-m32 代表在编译阶段将编译目标指定为 32 位</li>\n</ul>\n</li>\n<li>\n<p>对程序分析可知，其将在第 15 行执行输出操作，故我们将断点设置在 15 行。接下来使用 gdb 程序对该代码进行调试</p>\n<ul>\n<li>\n<p>首先使用如下代码安装 gdb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install gdb</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在终端输入 gdb StackOverflow 开启调试<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/2VIume3T1Pswky7.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>根据分析代码，我们发现关键代码在 13 行，故在 13 行设置断点。我们输入命令：break  13。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/B8HCPynamgcQ3zu.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入命令 run 代表运行程序至断点处<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/A43gNRu1Utl7soC.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>输入 disassemble 后回车<br>\n结果如下：<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/cxNOVuQGhe51JoE.png\" alt=\"image.png\"><br>\n<strong>=&gt; 这一行即为断点（13 行) 的步骤行。</strong></p>\n</li>\n<li>\n<p>输入 info registers ebp esp 来查看寄存器里的栈顶指针和栈底指针<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/GxSRyAmla2YPipD.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入 print&amp;param 来查看 param 数组的首地址<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QakZYVf8OUgPB5d.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\9. 输入  <code>x/2xw 0xffffd1a8</code>  来查看该 func_call 函数的返回地址，在这个命令中，“x” 是一个 GDB 命令，它是 “examine memory” 的缩写，用于检查内存中的内容。&quot;/2xw&quot; 是一个格式化参数，它告诉 GDB 以十六进制格式显示两个字（32 位）的内容，并将其解释为一个有符号整数。“0xffffd1a8” 是内存地址，表示我们要查看的内存位置。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/CDNmOWRhMsgGv7o.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入 disassemble main 来反汇编 main 函数。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/gCpST7F5xnJcZID.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>可以看到 func_cal 函数的<strong>返回地址 0x565556c6 指向 main 函数里的 &lt;+31&gt;，其 and 所指的位置是 &lt;+4&gt;</strong></p>\n</li>\n<li>\n<p>输入 print&amp;inject 来查看 inject 函数的地址<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/ZNlgi465YJwDSnQ.png\" alt=\"image.png\"></p>\n<p>​\t现在我们分析所获取到的信息：func_cal 函数的返回地址为 0xffffd1ac（0xffffd1a8+0x4），。param 的首地址为 0xffffd190, 两者相差 28 个字节。查看到 inject 函数地址为 0x5655554d, 因此可以将 input 输入更改为 “28 个字节 + 4 位 inject 地址”。故将 input 修改为 char input [] = “AAAAABBBBBCCCCCDDDDDEEEEEFFF\\x4d\\x55\\x55\\x56”; 后重新编译程序</p>\n</li>\n<li>\n<p>在代码中修改 input 后重新编译程序<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/HETBnRgaZQFiXGf.png\" alt=\"image.png\"></p>\n<h3 id=\"如上图所示攻击完成\"><a class=\"markdownIt-Anchor\" href=\"#如上图所示攻击完成\">#</a> 如上图所示，攻击完成。</h3>\n<h2 id=\"结论和体会\"><a class=\"markdownIt-Anchor\" href=\"#结论和体会\">#</a> 结论和体会</h2>\n<p>​\t在本次实验中，我深入了解并实践了栈溢出攻击的原理与技术。通过设计和实施一个简单的栈溢出攻击，我不仅加深了对程序内存布局和操作系统安全机制的理解，还学会了如何在实际环境中利用软件漏洞。</p>\n<p>​\t实验的过程中，我首先在 Ubuntu 系统下编写了一个简单的 C 程序，该程序包含了易受栈溢出攻击的漏洞。通过精心构造输入数据，我成功引导程序执行了未授权的 inject 函数，从而实现了攻击目标。实验过程中，我关闭了操作系统的几项安全保护机制，如地址空间布局随机化（ASLR）、栈保护等，以模拟一个容易受到攻击的环境。</p>\n<p>通过本次实验，我学习到了几个重要的技术和概念：</p>\n<p>​\t1. 栈溢出的原理：了解了栈溢出是如何通过覆盖函数的返回地址来控制程序流程的。</p>\n<p>​\t2. 安全保护机制的重要性：实验中需要关闭的安全保护机制说明了这些机制在防御栈溢出攻击中的重要作用。</p>\n<p>​\t3. 调试和分析工具的应用：通过使用 gdb 调试工具和其它命令行工具，我学会了如何分析程序的内存布局和识别潜在的安全漏洞。</p>\n<p>​\t这次实验不仅加强了我的理论知识，也提高了我的实践技能，让我对计算机安全领域有了更深刻的理解。我认识到，编写安全的代码需要程序员具备深厚的安全意识和技能，以及对各种攻击技术和防御策略的熟悉。未来，我希望能够继续深入研究这一领域，为创建更安全的软件环境做出贡献。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/wangandaolun/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/",
            "url": "https://enjundu.github.io/wangandaolun/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/",
            "title": "应用安全",
            "date_published": "2024-07-03T07:32:28.000Z",
            "content_html": "<h1 id=\"应用安全蓝天\"><a class=\"markdownIt-Anchor\" href=\"#应用安全蓝天\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktTGFiLS0tQXBwbGljYXRpb24tU2VjdXJpdHk=\">应用安全 —— 蓝天 °</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>​\t大多数 Web 应用程序攻击都是来源于 XSS、CSRF 和 SQL 注入攻击，这些攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序，其中 CSRF 存在是指攻击者构建的恶意网站被用户访问后，返回一些攻击性代码，并发出一个请求要求访问第三方站点，从而盗用用户身份，如用户名义发送邮件、虚拟货币转账等</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>实现本地 Web 攻击和防御</p>\n<h3 id=\"实验步骤建议\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤建议\">#</a> 实验步骤建议</h3>\n<ol>\n<li>\n<p>安装 Flask 框架并启动提供的源代码</p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击</p>\n</li>\n<li>\n<p>使用防御方法，防范 XSS 攻击</p>\n</li>\n<li>\n<p>增加一个登录功能，设计有 SQL 注入隐患的代码，进行攻击，并且展示如何进行防范</p>\n</li>\n<li>\n<p>设计一个 CSRF 攻击范例</p>\n</li>\n<li>\n<p>【选做】防御 CSRF 攻击 ——<strong> 如你所见，杜爹当然会做</strong></p>\n<h3 id=\"实验步骤细化\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤细化\">#</a> 实验步骤细化</h3>\n<ol>\n<li>\n<p>安装 Flask 框架并启动提供的源代码<br>\n在资料目录启动终端并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create --name flask python=3.10</span><br><span class=\"line\">conda activate flask</span><br><span class=\"line\">pip install flask</span><br><span class=\"line\">flask run</span><br></pre></td></tr></table></figure>\n<p>访问终端提示的网址</p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/S2ORTKytMAejcm6.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/42Azk5tsp9U8rQM.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>使用防御方法，防范 XSS 攻击。可以通过检验输入文字，转其转为全角字符进行防御</p>\n</li>\n<li>\n<p>修改 app.py 和 index.html，使得网页增加一个登录功能。设计有 SQL 注入隐患的代码，进行攻击，并且展示如何进行防范。这里可以使用使用 SQLite 作为数据库<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/lgCdL4KqWGMIH5B.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>设计一个 CSRF 攻击范例<br>\n在网站不部署 XSS 防御时，新建一个网页作为恶意网站。<br>\n直接访问该恶意网站时会出现跳转至原网站，且当有原网站有合法用户登录时，会成功发起反射型 XSS 攻击。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/qabwGJEKxVpiys7.png\" alt=\"image.png\"></p>\n</li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">磁盘驱动器：NVMe KIOXIA- EXCERIA G2 SSD</span><br><span class=\"line\">NVMe Micron 3400 MTFDKBA1TOTFH</span><br><span class=\"line\">显示器：NVIDIA GeForce RTX 3070 Ti Laptop GPU</span><br><span class=\"line\">系统型号\tROG Strix G533ZW_G533ZW</span><br><span class=\"line\">系统类型\t基于 x64 的电脑</span><br><span class=\"line\">处理器\t12th Gen Intel(R) Core(TM) i9-12900H，2500 Mhz，14 个内核，20 个逻辑处理器</span><br><span class=\"line\">BIOS 版本/日期\tAmerican Megatrends International, LLC. G533ZW.324, 2023/2/21</span><br><span class=\"line\">BIOS 模式\tUEFI</span><br><span class=\"line\">主板产品\tG533ZW</span><br><span class=\"line\">操作系统名称\tMicrosoft Windows 11 家庭中文版</span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VMware Workstation Pro</span><br><span class=\"line\">Ubuntu 18.04.6 LTS</span><br><span class=\"line\">Kali linux</span><br><span class=\"line\">Microsoft Windows 11 家庭中文版</span><br></pre></td></tr></table></figure>\n<h2 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\">#</a> 实验开始</h2>\n<ol>\n<li>\n<p>先打开终端运行 sudo apt install python3 安装 python3 环境</p>\n</li>\n<li>\n<p>先采用 <code>sudo apt update</code>  和 sudo apt install python3-flask -y 来安装 Flask 框架</p>\n</li>\n<li>\n<p>在 kali 中创建 topic13 文件夹，包含已经给出的代码资料<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/mdVikAz1RLWUCKv.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端上输入命令 python <span class=\"exturl\" data-url=\"aHR0cDovL2FwcC5weQ==\">app.py</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hcHAtbzk5Zmg2Nmwyb2oucHk=\">来运行 app.py</span>，出现如下图片即表示运行成功。可通过在浏览器访问地址 localhost:5000 或者 127.0.0.1:5000 来访问该地址<img data-src=\"https://s2.loli.net/2024/07/03/Mw3Xl8pzHLcexiy.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在首先进行 XSS 反射型实验：在地址上输入 <code>http://127.0.0.1:5000/?content=&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;&amp;submit=</code>  提交，当显示如下弹窗时，则证明攻击成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/IiRQ5lsuX9v7bGL.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在执行 XSS 持久型实验：在评论栏输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后点击提交新评论，此时网址 https://www.yuanshen.com 便已经被存储在评论 XSS 持久型攻击 —— 原神，启动！里面了。点击该评论跳转原神官网，攻击成功！<img data-src=\"https://s2.loli.net/2024/07/03/V5Y2ARQsaxXcdDO.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/ir1c6WLpdB74UKe.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在修改 app.py 的代码来防止 XSS 攻击，修改后代码如下:</p>\n<p>修改地方如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, escape</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.utils <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设的评论数据集</span></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 通过 escape 函数转义用户输入</span></span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 对查询参数进行转义以防止反射型XSS攻击</span></span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"comment\"># 默认情况下渲染页面，展示所有评论</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用了 “escape” 函数来转义用户输入</li>\n<li>对 POST 请求中的‘comment’进行转义</li>\n<li>对 GET 请求中的‘query’进行转义</li>\n</ul>\n<p>原因：转义可以将用户输入中的特殊 HTML 字符（如 &lt;,&gt;, &amp;, &quot; 等）转换为它们的 HTML 实体形式（例如，&lt; 转换为 &lt;）。这意味着当浏览器渲染这些转义后的字符时，它们不会被作为 HTML 标签或 JavaScript 代码执行，而是作为普通文本显示。这样，即使用户输入了 <script>alert(‘XSS’)</script> 这样的代码，它也只会被显示出来，而不会执行</p>\n<p>原因：<br>\n（1）<strong>防止反射型 XSS 攻击：</strong> 通过对 URL 参数（如搜索查询）进行转义，即使攻击者试图通过构造含有恶意脚本的 URL 来发起反射型 XSS 攻击，这些脚本也不会执行。因为在 HTML 中，这些脚本已被转义，不会被浏览器解释为代码</p>\n<p>（2）<strong>防止持久型 XSS 攻击：</strong> 通过对用户提交的评论内容进行转义，即使攻击者在评论中嵌入了 JavaScript 代码，这些代码也只会作为普通文本被存储和显示，而不会在其他用户浏览评论时执行。这样，就算这些评论包含了恶意代码，也不会对其他用户造成威胁</p>\n<p>** 测试：** 输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:5000/?content=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;XSS反射实验成功！&#x27;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=提交</span><br></pre></td></tr></table></figure>\n<p>后，显示 <code>“查询评论&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;”</code> ，故该代码未被执行，防止反射型 XSS 攻击成功！<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/LJCDIHqz2f3kK7T.png\" alt=\"image.png\"></p>\n<p>在评论栏输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后，点击提交新评论，显示得到如下评论，故可知道转义后的代码不会被执行，代码会被当做纯文本显示在评论上。<strong>防止 XSS 持久型攻击成功</strong>！</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/oeh6iEVf2LRJuCk.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端输入命令 python -c &quot;import sqlite3&quot; 来导入 sqlite3 模块</p>\n</li>\n<li>\n<p>在 Flask 中创建一个名为‘init_db.py’的 Python 文件，然后运行该文件创建初始化数据库和用户表‘login.db’。这里创建了一个初始账户，账号为 sky，密码为 sky666.<br>\n 源码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\">connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个用户表</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users(id INTEGER PRIMARY KEY, username TEXT, password TEXT)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入示例用户</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO users(username, password) VALUES (&#x27;sky&#x27;, &#x27;sky666&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.commit()</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建一个 login.html，增加登录和注册功能，源码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        Username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        Password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/register&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    &#123;% if error %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>再创建一个 register.html，增加注册功能，源码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/register&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        Username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;newUsername&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        Password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;newPassword&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Register&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 index.html，增加退出登录功能</p>\n</li>\n<li>\n<p>修改 app.py 函数，代码原理：首先进入链接后检测是否成功登陆，如果没有成功登陆则跳转 login.html，login.html 包含 login 和 register，如果没有账号可以点击 register 跳转 register.html 来进行注册。然后在 login 输入账号密码登录成功后跳转 index.html，index.html 李有 logout 选项，点击 Logout 后会退出登录返回到 login.html 中。源码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, redirect, url_for, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.utils <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = <span class=\"string\">&#x27;fan_xing_yu_is_little_boy_mother&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设的评论数据集</span></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册功能</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/register&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">register</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        new_username = request.form[<span class=\"string\">&#x27;newUsername&#x27;</span>]</span><br><span class=\"line\">        new_password = request.form[<span class=\"string\">&#x27;newPassword&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;</span>, (new_username, new_password))</span><br><span class=\"line\">        connection.commit()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;register.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> session.get(<span class=\"string\">&#x27;logged_in&#x27;</span>):  <span class=\"comment\"># 检查用户是否登录</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))  <span class=\"comment\"># 未登录，重定向到登录页面</span></span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 从表单中获取用户名和密码</span></span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 故意引入 SQL 注入的隐患（仅作为演示，实际中不应这么做）</span></span><br><span class=\"line\">        query = <span class=\"string\">f&quot;SELECT * FROM users WHERE username = &#x27;<span class=\"subst\">&#123;username&#125;</span>&#x27; AND password = &#x27;<span class=\"subst\">&#123;password&#125;</span>&#x27;&quot;</span></span><br><span class=\"line\">        cursor.execute(query)</span><br><span class=\"line\"></span><br><span class=\"line\">        user = cursor.fetchone()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;logged_in&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Invalid username or password&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">logout</span>():</span><br><span class=\"line\">    session.pop(<span class=\"string\">&#x27;logged_in&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>SQL 注入攻击演示<br>\n打开 app.py 后，在 login 里的 username 中输入 <code>' OR '1'='1' --</code> ，在 password 中可以不作任何输入，点击登录，可以发现，页面直接跳转到了 index.html。</p>\n</li>\n<li>\n<p>原理分析：<br>\n最开始的判定代码为： <code>‘SELECT * FROM users WHERE username = '&#123;username&#125;' AND password = '&#123;password&#125;'’</code> ，当我们输入’ OR ‘1’=‘1’ -- 后，代码就变为了 <code>‘SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '任意值'’</code> 。</p>\n<p>’ OR '：这个片段是试图打破原有 SQL 查询的逻辑，通过添加一个总是为真的条件（‘1’=‘1’）。<br>\n此时我们可以知道，‘1’=‘1’永远判定为真</p>\n<p>‘–’：这是 SQL 中的注释标记。在这个上下文中，它的作用是注释掉 SQL 语句的剩余部分，特别是与密码相关的那部分，这样 SQL 服务器就不会检查密码是否正确。</p>\n</li>\n<li>\n<h4 id=\"sql防御\"><a class=\"markdownIt-Anchor\" href=\"#sql防御\">#</a> SQL 防御：</h4>\n<p>在 app.py 里将 login 函数修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 使用参数化查询防止 SQL 注入</span></span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>, (username, password))</span><br><span class=\"line\"></span><br><span class=\"line\">        user = cursor.fetchone()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;logged_in&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Invalid username or password&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure>\n<p>再次运行后，输入’ OR ‘1’=‘1’ -- 后发现显示 Invalid username or password</p>\n</li>\n<li>\n<p><strong>原理分析</strong>：为了防御 SQL 攻击，我们应该避免直接将用户的输入拼接到 SQL 查询中。故我采用参数化查询，这种方式可以确保传入的参数不会被解释为 SQL 代码的一部分，而是作为数据处理。在上述 login 函数的修改中，我使用参数化查询替代字符串格式化。<br>\n这么设置的好处是应用程序不再对 SQL 注入攻击易受攻击，因为用户输入被安全地处理为查询的一部分，而不是作为 SQL 代码执行。</p>\n</li>\n<li>\n<h4 id=\"csrf攻击设计\"><a class=\"markdownIt-Anchor\" href=\"#csrf攻击设计\">#</a> CSRF 攻击设计：</h4>\n<p>设计 CSRF_attack.html 源码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>恶意网站<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 构建目标网站的URL，包括恶意的XSS代码</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> targetUrl = <span class=\"string\">&quot;http://127.0.0.1:5000/?content=%3Cscript%3Ealert(&#x27;XSS%E5%8F%8D%E5%B0%84%E5%AE%9E%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%81&#x27;)%3C%2Fscript%3E&amp;submit=%E6%8F%90%E4%BA%A4&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 利用Image对象发起GET请求，绕过同源策略</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = targetUrl;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该源码使用转义，将想要输入的 ur <code>l“http://127.0.0.1:5000/?content=&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;&amp;submit=提交”</code>  转义为 “ <code>&quot;http://127.0.0.1:5000/?content=%3Cscript%3Ealert('XSS%E5%8F%8D%E5%B0%84%E5%AE%9E%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%81')%3C%2Fscript%3E&amp;submit=%E6%8F%90%E4%BA%A4&quot;;</code> ”</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>构造思路</strong>：构建恶意 URL：targetUrl 变量中存储了目标网站的 URL，其中包括了一个查询参数 content。这个参数通过 URL 编码嵌入了恶意的 JavaScript 代码，这段代码是<script>alert (‘XSS 反射实验成功！’)</script>。当目标网站接收到这个请求并处理 content 参数时，假设它没有对这个参数进行适当的清理或转义，那么这段 JavaScript 代码将在用户的浏览器中执行。</p>\n<p>利用 Image 对象发起 GET 请求：通过创建一个 Image 对象并将其 src 属性设置为构建好的恶意 URL，实际上发起了一个对目标 URL 的 GET 请求。这个请求是在不需要用户交互的情况下自动完成的。由于是通过<img>标签加载资源的方式，它可以绕过一些简单的同源策略限制。</p>\n</li>\n<li>\n<p>结果展示：在运行 app.py 后浏览器打开 CSRF_attack.html，可以发现 app.py 终端显示被 XSS 反射型攻击成功：<img data-src=\"https://s2.loli.net/2024/07/03/ZybtVQejqlP7Ghz.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<h3 id=\"选做之如何防御csrf攻击\"><a class=\"markdownIt-Anchor\" href=\"#选做之如何防御csrf攻击\">#</a> 选做之如何防御 CSRF 攻击</h3>\n<p>为了防御 CSRF 攻击，需要使用 POST 请求而不是 GET，并且实施 CSRF 保护</p>\n</li>\n<li>\n<p>首先在终端运行 pip install Flask-WTF 来下载 Flask-WTF 进行 CSRF 保护</p>\n</li>\n<li>\n<p>接着修改 app.py 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, session, redirect, url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField, SubmitField</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf.csrf <span class=\"keyword\">import</span> CSRFProtect</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;fan_xing_yu_is_little_boy_mother&#x27;</span></span><br><span class=\"line\">csrf = CSRFProtect(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义评论表单类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CommentForm</span>(<span class=\"title class_ inherited__\">FlaskForm</span>):</span><br><span class=\"line\">    newComment = StringField(<span class=\"string\">&#x27;评论&#x27;</span>)</span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">&#x27;提交新评论&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    form = CommentForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        comment = form.newComment.data.strip()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">            dataset.append(comment)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">    query = request.args.get(<span class=\"string\">&#x27;content&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, form=form, comments=sub_dataset, query=query)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 index.html 代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>查询评论<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        搜索内容：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;搜索内容&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    &#123;% if query %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>查询评论 &quot;&#123;&#123; query &#125;&#125;&quot; 结果如下：<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>所有的评论如下：<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% for comment in comments %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; comment &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>发布评论<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; form.newComment.label &#125;&#125;: &#123;&#123; form.newComment(size=20) &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/jMSQfyTWsonIBNC.png\" alt=\"image.png\"></p>\n<p>我们此时运行 app.py 后再点击 CSRF_attack.py，显示攻击失败</p>\n</li>\n</ol>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>​\t通过本次实验，我深入理解了 Web 安全中几种常见攻击方式：XSS 和 CSRF，以及 SQL 注入的概念和防御策略。通过实际操作实验，我不仅加深了对这些概念的认识，也学会了如何在实际开发中应用相关防御技术。</p>\n<p>​\tXSS 攻击及防御：通过构造特殊的 URL 或输入恶意脚本代码到评论中，我成功模拟了反射型和持久型 XSS 攻击。这一过程让我认识到了用户输入验证和转义的重要性。通过使用 escape 函数转义用户输入，我学会了一种有效防御 XSS 攻击的方法。这个方法能够防止恶意脚本执行，保护网站和用户免受攻击。</p>\n<p>​\tSQL 注入及防御：我通过在登录框中输入特殊的 SQL 语句成功实现了 SQL 注入攻击，绕过了登录验证。攻击成功后，通过修改代码，采用参数化查询的方式，我学会了如何防御 SQL 注入攻击。这种方法通过将输入作为参数传递给 SQL 语句，有效避免了恶意输入被解释执行的风险。</p>\n<p>​\tCSRF 攻击及防御：我尝试通过构造恶意网页自动提交表单的方式发起 CSRF 攻击，但最终通过引入 Flask-WTF 提供的 CSRF 保护机制成功防御了这种攻击。通过实验，我了解到 CSRF 令牌的作用及其在 Web 应用安全中的重要性。</p>\n<p>​\t安全意识的重要性：作为一名 Web 开发者，必须具备安全意识，了解常见的 Web 攻击方式和防御策略，这对于开发安全的 Web 应用至关重要。</p>\n<p>​\t持续学习和实践：随着 Web 技术的发展，新的安全威胁不断出现。只有不断学习和实践，才能有效地应对这些安全挑战。</p>\n<p>​\t工具和库的作用：Flask-WTF 等工具和库提供了方便的防御机制，如 CSRF 保护、用户输入的转义等，能够大大提高开发效率和应用安全性。合理利用这些工具和库，可以让我们更加专注于业务逻辑的开发。</p>\n<p>​\t安全策略的综合运用：在实际开发中，应综合运用各种安全策略，如输入验证、参数化查询、使用 HTTPS、设置合理的 HTTP 安全头等，来构建一个多层次的安全防御体系。</p>\n<p>​\t通过本次实验，我不仅掌握了一些具体的防御技术，也对 Web 安全的重要性有了更深刻的认识。在未来的学习和工作中，我将继续关注 Web 安全领域的最新动态，不断提高自己的安全防御能力。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/wangandaolun/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E9%98%B2%E5%BE%A1_%E9%80%89%E5%81%9A/",
            "url": "https://enjundu.github.io/wangandaolun/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E9%98%B2%E5%BE%A1_%E9%80%89%E5%81%9A/",
            "title": "人工智能算法安全_后门防御_选座",
            "date_published": "2024-07-03T07:03:48.000Z",
            "content_html": "<h1 id=\"人工智能算法安全_后门防御_选做\"><a class=\"markdownIt-Anchor\" href=\"#人工智能算法安全_后门防御_选做\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktLS1BSS1BbGdvcml0aG1pYy1TZWN1cml0eV9CYWNrZG9vci1EZWZlbnNlX09wdGlvbmFs\">人工智能算法安全_后门防御_选做</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>面向后门攻击的防御，指的是利用数据的独特属性或者精心设计的防御机制，来降低后门攻击的成功率。为了防御后门攻击，本实验可以主动地识别输入数据中是否包含用于后门攻击的触发器（也就是特定模式的噪音），或者通过数据的其他特性来削弱甚至抵消后门攻击的性能</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>在已实现后门攻击的基础之上，参考所给论文，实现后门攻击的防御</p>\n<h3 id=\"参考论文\"><a class=\"markdownIt-Anchor\" href=\"#参考论文\">#</a> 参考论文</h3>\n<p>Neural Cleanse: Identifying and Mitigating Backdoor Attacks in Neural Networks</p>\n<h3 id=\"参考代码\"><a class=\"markdownIt-Anchor\" href=\"#参考代码\">#</a> 参考代码</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JvbHVud2FuZy9iYWNrZG9vcg==\">backdoor</span></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/aBpGmKLuF3gd2ri.png\" alt=\"image.png\"></p>\n<ol>\n<li>\n<p>训练一个能将后门数据识别为单一指定标签的后门攻击模型</p>\n</li>\n<li>\n<p>在步骤 1 模型上，针对每个类别生成一个反向触发器，根据各触发器 L1 范数大小，基于 MAD 技术，判断该模型确被后门所污染</p>\n</li>\n<li>\n<p>获得后门模型的反向触发器后，从下列三种方法中任选一种，实现后门攻击的防御</p>\n<ul>\n<li><strong>识别过滤后门输入</strong>：建立神经元激活过滤器。激活值定义为第二层到最后一层中激活值排名前 1% 的神经元的平均激活值。过滤器将后门输入识别为那些激活值高于一定阈值的输入，模型将不对这些输入进行预测</li>\n<li><strong>后门削弱 —— 剪枝</strong>：关注神经网络各个中间层神经元的激活值，并修剪一定比例的神经元（优先考虑修改在干净输入和后门输入之间激活差距最大的神经元）。即在推理过程中将这些神经元的输出值设置为 0，当修剪后的模型不再响应反向触发时，停止剪枝</li>\n<li><strong>后门削弱 ——Unlearning</strong>：对后门模型进行重新训练，使得模型遗忘原来的后门。使用步骤 2 中获得的反向触发器，将其与正常训练数据结合，且数据对应原本的标签。利用构造的新训练集对模型再次进行训练，使得受到后门攻击的模型可以识别后门输入的正确标签</li>\n</ul>\n<h3 id=\"实验预期\"><a class=\"markdownIt-Anchor\" href=\"#实验预期\">#</a> 实验预期</h3>\n<p>​\t在防御之后，模型被攻击成功的概率将会明显下降，但是模型对良性样本预测的准确率也会略有下降</p>\n<h3 id=\"实验方法\"><a class=\"markdownIt-Anchor\" href=\"#实验方法\">#</a> 实验方法</h3>\n<p>​\t本实验采用识别<strong>过滤后门输入</strong>来进行后门攻击的防御</p>\n</li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持 Pytorch深度学习框架、支持 Python <span class=\"number\">3.5</span>或更高版本的编程环境</span><br><span class=\"line\">PyCharm <span class=\"number\">2023.2</span> 专业版</span><br><span class=\"line\">python3<span class=\"number\">.6</span></span><br><span class=\"line\">h5py                      <span class=\"number\">3.1</span><span class=\"number\">.0</span></span><br><span class=\"line\">keras                     <span class=\"number\">2.2</span><span class=\"number\">.2</span>                   </span><br><span class=\"line\">keras-applications        <span class=\"number\">1.0</span><span class=\"number\">.4</span>                  </span><br><span class=\"line\">keras-preprocessing       <span class=\"number\">1.0</span><span class=\"number\">.2</span>                    </span><br><span class=\"line\">numpy                     <span class=\"number\">1.14</span><span class=\"number\">.5</span></span><br><span class=\"line\">pillow                    <span class=\"number\">8.4</span><span class=\"number\">.0</span></span><br><span class=\"line\">tensorflow-gpu                <span class=\"number\">1.10</span><span class=\"number\">.0</span></span><br><span class=\"line\">tensorflow                <span class=\"number\">1.10</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<ol>\n<li>\n<p>由于实验所用环境为 python3.6，故我们先打开 Anaconda Prompt 后输入命令 <code>conda create -n py36 python=3.6</code>  来创建一个名为 py36 的 python3.6 虚拟环境</p>\n</li>\n<li>\n<p>win+R 后 cmd 进入先输入命令 conda init 来初始化 conda，退出后再次进入后输入命令 conda activate py36 来激活该 3.6 环境</p>\n</li>\n<li>\n<p>然后运行命令 <code>conda install h5py=3.1.0 keras=2.2.2 keras-applications=1.0.4 keras-preprocessing=1.0.2 numpy=1.14.5 pillow=8.4.0 tensorflow=1.10.0 tensorflow-gpu=1.10.0</code>  来安装指定的库</p>\n</li>\n<li>\n<p>在 pycharm 里找到该虚拟环境的地址，然后选择系统解释器，此处我电脑上该 3.6 的解释器位于 F:\\Anaconda\\envs\\py36\\python.exe</p>\n</li>\n<li>\n<p>运行 gtsrb_visualize_example.py 文件，发现环境配置成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/gh9oL71c4yqMHER.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在本章，我选择通过识别过滤后门输入来实现后门的防御，即建立神经元激活过滤器。激活值定义为第二层到最后一层中激活值排名前 1% 的神经元的平均激活值。过滤器将后门输入识别为那些激活值高于一定阈值的输入，模型将不对这些输入进行预测</p>\n</li>\n<li>\n<p>分析原始输出：<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/mo93SkOYl7XJraQ.png\" alt=\"image.png\"></p>\n<p>这一段输出结果来自于一个优化过程，其目的是调整和优化一个后门触发器在机器学习模型中的表现。分析时需要关注几个关键指标：成本（cost）、攻击成功率（attack）、总损失（loss）、分类损失（ce）、正则化损失（reg）以及最佳正则化损失（reg_best）。这些指标有助于评估触发器的效果和对模型的干扰程度。<br>\n<strong>up cost from 1.60E-02 to 3.20E-02&quot;</strong>：成本系数从 0.016 提高到 0.032。这通常意味着在优化过程中，正则化损失对总损失的贡献被增加，目的是为了简化或减少触发器的复杂度，使其更难被检测。</p>\n<p>步骤 50 到 56 每一步的具体情况如下：</p>\n<p><strong>攻击成功率（Attack）</strong>：这一指标在 0.979 到 0.994 之间波动，显示了触发器在这些步骤中的有效性。数值接近 1 表示高成功率。</p>\n<p><strong>总损失（Loss）</strong>：随着正则化损失和分类损失的变化而变化，反映了总体的优化效果。</p>\n<p><strong>分类损失（CE）</strong>：这一指标衡量的是触发器使模型在正常分类任务上的表现差异。数值较低表示触发器对模型正常功能的干扰较小。</p>\n<p><strong>正则化损失（Reg）</strong>：衡量触发器复杂度的指标，优化目标是减少这一值，使得触发器更难被发现。在这几步中，这一指标有所波动但整体趋势为逐步降低。</p>\n<p><strong>最佳正则化损失（Reg_best）</strong>：在步骤 55 中，达到了 52.034966，这是观察期间的最低值，表示找到了一个相对简单且效果良好的触发器配置。</p>\n</li>\n<li>\n<p>现在开始后门防御的实现：<br>\n设计 defense.py 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NeuralFilter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, model</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 提取模型的各层输出作为一个新模型的输出</span></span><br><span class=\"line\">        self.layer_outputs = [layer.output <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> model.layers[<span class=\"number\">1</span>:]]  <span class=\"comment\"># 从第二层到最后一层</span></span><br><span class=\"line\">        self.activation_model = Model(inputs=model.<span class=\"built_in\">input</span>, outputs=self.layer_outputs)</span><br><span class=\"line\">        self.thresholds = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">compute_activation_thresholds</span>(<span class=\"params\">self, training_data, percentile=<span class=\"number\">99</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在训练数据上计算每层的神经元激活阈值&quot;&quot;&quot;</span></span><br><span class=\"line\">        activations = self.activation_model.predict(training_data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer_activations <span class=\"keyword\">in</span> activations:</span><br><span class=\"line\">            <span class=\"comment\"># 对每层的激活值找到排名前1%的神经元的平均激活值</span></span><br><span class=\"line\">            flattened_activations = layer_activations.reshape(-<span class=\"number\">1</span>)</span><br><span class=\"line\">            threshold = np.percentile(flattened_activations, percentile)</span><br><span class=\"line\">            self.thresholds.append(threshold)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_inputs</span>(<span class=\"params\">self, input_data</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查输入数据是否超过激活阈值，如果是，则认为是后门输入&quot;&quot;&quot;</span></span><br><span class=\"line\">        activations = self.activation_model.predict(input_data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer_activations, threshold <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(activations, self.thresholds):</span><br><span class=\"line\">            <span class=\"comment\"># 比较激活值和阈值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> np.mean(layer_activations[layer_activations &gt; threshold]) &gt; threshold:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;后门输入检测到，不进行预测&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>\\1. 在 gtsrb_visualize_example.py 代码中第 10 行添加代码 from defense import NeuralFilter。</p>\n</li>\n<li>\n<p>现在修改 gtsrb_visualize_label_scan_bottom_right_white_4 函数和 main 函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gtsrb_visualize_label_scan_bottom_right_white_4</span>():</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = DEVICE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;loading dataset&#x27;</span>)</span><br><span class=\"line\">    X_test, Y_test = load_dataset()</span><br><span class=\"line\">    test_generator = build_data_loader(X_test, Y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;loading model&#x27;</span>)</span><br><span class=\"line\">    model_file = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;MODEL_DIR&#125;</span>/<span class=\"subst\">&#123;MODEL_FILENAME&#125;</span>&#x27;</span></span><br><span class=\"line\">    model = load_model(model_file)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化防御系统</span></span><br><span class=\"line\">    neural_filter = NeuralFilter(model)</span><br><span class=\"line\">    <span class=\"comment\"># 使用测试集来计算阈值</span></span><br><span class=\"line\">    neural_filter.compute_activation_thresholds(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化可视化器</span></span><br><span class=\"line\">    visualizer = Visualizer(</span><br><span class=\"line\">        model, intensity_range=INTENSITY_RANGE, regularization=REGULARIZATION,</span><br><span class=\"line\">        input_shape=INPUT_SHAPE,</span><br><span class=\"line\">        init_cost=INIT_COST, steps=STEPS, lr=LR, num_classes=NUM_CLASSES,</span><br><span class=\"line\">        mini_batch=MINI_BATCH,</span><br><span class=\"line\">        upsample_size=UPSAMPLE_SIZE,</span><br><span class=\"line\">        attack_succ_threshold=ATTACK_SUCC_THRESHOLD,</span><br><span class=\"line\">        patience=PATIENCE, cost_multiplier=COST_MULTIPLIER,</span><br><span class=\"line\">        img_color=IMG_COLOR, batch_size=BATCH_SIZE, verbose=<span class=\"number\">2</span>,</span><br><span class=\"line\">        save_last=SAVE_LAST,</span><br><span class=\"line\">        early_stop=EARLY_STOP, early_stop_threshold=EARLY_STOP_THRESHOLD,</span><br><span class=\"line\">        early_stop_patience=EARLY_STOP_PATIENCE)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> X_batch, Y_batch <span class=\"keyword\">in</span> test_generator:</span><br><span class=\"line\">        <span class=\"comment\"># 假设我们只处理第一个标签，你可以根据实际情况调整这个逻辑</span></span><br><span class=\"line\">        first_label = np.argmax(Y_batch[<span class=\"number\">0</span>])  <span class=\"comment\"># 获取批次中第一个样本的目标类别</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;processing label %d&#x27;</span> % first_label)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> neural_filter.filter_inputs(X_batch):</span><br><span class=\"line\">            _, _, logs = visualizer.visualize(X_batch, first_label, save_pattern_flag=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;检测到潜在的后门攻击，已阻止此输入。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = DEVICE</span><br><span class=\"line\">    utils_backdoor.fix_gpu_memory()  <span class=\"comment\"># 假设这是调整GPU内存的工具函数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;系统初始化完成，开始可视化和防御流程。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gtsrb_visualize_label_scan_bottom_right_white_4()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;处理完成。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    elapsed_time = time.time() - start_time</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;elapsed time %s s&#x27;</span> % elapsed_time)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>输出结果摘要：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processing label <span class=\"number\">12</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">25</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">25</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">17</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">8</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">5</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">14</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">12</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">31</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">18</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">35</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">15</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">2</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">33</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/OgaKtsjHBcnyCme.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>这个输出显示我的防御系统正在有效地工作。当我对系统进行测试时，它能正确地识别并阻止了多个后门攻击尝试。每次处理一个标签时，系统都会检查输入是否安全。如果检测到潜在的后门输入，系统会阻止进一步处理，并不会进行预测。<br>\n这些结果符合我设置的预期，因为我希望系统能够识别并阻止任何可能的恶意操作。然而，我也注意到，如果系统显示了过多的阻止操作，这可能意味着它对正常数据有误报。因此，我需要确保防御机制不会过于敏感，避免错误地将合法输入标记为恶意。我打算进一步测试和调整阈值计算，以达到最佳的检测平衡，确保既能防止攻击，又不会妨碍正常的数据处理。</p>\n</li>\n<li>\n<p>最终结果：在防御之后，模型被攻击成功的概率将会明显下降，但是模型对良性样本预测的准确率也会略有下降</p>\n</li>\n</ol>\n<h3 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h3>\n<p>在本次实验中，我成功地实施了神经元激活过滤器来识别并过滤潜在的后门输入。通过设置激活阈值，过滤器能有效识别那些异常激活的输入，这些输入通常是由后门触发器引发的。此外，我对模型进行了修剪和重新训练（unlearning），以减少后门攻击的影响。在实验的多次迭代中，我观察到模型在维持对正常输入的高精度预测能力的同时，显著降低了对后门攻击的敏感性。这表明所采用的防御策略不仅有效识别了后门触发器，同时也增强了模型的整体安全性。</p>\n<p>通过这次实验，我深刻体会到了后门攻击对人工智能系统安全性的潜在威胁。实验过程中，我首先根据论文 “Neural Cleanse: Identifying and Mitigating Backdoor Attacks in Neural Networks” 实现了一个后门攻击模型，并尝试通过不同的策略来防御这类攻击。实验不仅加深了我对后门攻击机制的理解，还让我认识到防御后门攻击的复杂性和挑战性。</p>\n<p>在实施过程中，我使用的神经元激活过滤器能够有效地识别出被操纵的输入，这为保护模型提供了第一道防线。此外，通过修剪和 unlearning 技术，我能够进一步增强模型的鲁棒性，减少后门触发器的影响。虽然这些策略在实验中表现良好，但它们也可能导致对正常输入的误判，这需要在实际应用中仔细平衡检测敏感度和误报率。</p>\n<p>整体而言，这次实验不仅提高了我的技术技能，也增强了我对于保护人工智能系统不受恶意攻击的重要性的认识。未来，我希望能继续探索更多先进的防御技术，为 AI 安全领域做出更多的贡献。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/wangandaolun/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E6%94%BB%E5%87%BB/",
            "url": "https://enjundu.github.io/wangandaolun/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E6%94%BB%E5%87%BB/",
            "title": "人工智能的后门攻击",
            "date_published": "2024-07-03T07:02:13.000Z",
            "content_html": "<h1 id=\"人工智能的后门攻击\"><a class=\"markdownIt-Anchor\" href=\"#人工智能的后门攻击\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktLS1BcnRpZmljaWFsLUludGVsbGlnZW5jZS1BbGdvcml0aG1pYy1TZWN1cml0eV9CYWNrZG9vci1BdHRhY2tz\">人工智能的后门攻击</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>面向人工智能算法的后门攻击，是指在不改变原有人工智能算法所依赖的深度学习模型结构的条件下，通过向训练数据中增加特定模式的噪音，并按照一定的规则修改训练数据的标签，达到人工智能技术在没有遇到特定模式的噪音时能够正常工作，而一旦遇到包含了特定模式的噪音的数据就会输出与预定规则相匹配的错误行为</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>参考所给论文和代码，实现后门攻击</p>\n<h3 id=\"参考论文\"><a class=\"markdownIt-Anchor\" href=\"#参考论文\">#</a> 参考论文</h3>\n<p>BadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain</p>\n<h3 id=\"参考代码\"><a class=\"markdownIt-Anchor\" href=\"#参考代码\">#</a> 参考代码</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dlb3JnZVR6YW5uZXRvcy9iYWRuZXRz\">badnets—— 本文档选用</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0tvb3NjaWkvQmFkTmV0cw==\">BadNets—— 备用</span></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<ol>\n<li>以下图手写字符 (MNIST) 识别为例，给部分图片添加 Trigger 并指定标签后参与模型训练，实现以下两种后门攻击:\n<ul>\n<li>Single attack: 指定目标标签为 j∈[0, 9]</li>\n<li>All-to-All attack: 指定目标标签为 (i+3)%10，i 为真实标签</li>\n</ul>\n</li>\n<li>在实验过程中，尝试不同比例的后门攻击样本来干扰模型训练。根据实验结果，分析总结后门攻击之所以能够成功的本质<img data-src=\"https://s2.loli.net/2024/07/03/t6bFBs97nY1wh2J.png\" alt=\"image.png\"></li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PyCharm</span> <span class=\"number\">2023</span>.<span class=\"number\">2</span> 专业版</span><br><span class=\"line\"><span class=\"attribute\">python</span> <span class=\"number\">3</span>.<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h3 id=\"一-single-attack单目标攻击\"><a class=\"markdownIt-Anchor\" href=\"#一-single-attack单目标攻击\">#</a> 一、<strong>Single Attack（单目标攻击）</strong></h3>\n<ol>\n<li>\n<p>在单目标攻击中，不管输入数据的真实类别如何，攻击者都旨在使模型将带有特定触发器的输入数据错误地分类为同一个预设的目标类别 j。这里的 j 是攻击者事先选定的，属于模型可识别的类别范围内的一个特定类别，比如 0 到 9 中的任意一个数字。简而言之，无论输入是什么，只要它含有触发器，模型就会将其识别为类别 j。</p>\n</li>\n<li>\n<p>首先在 pycharm 上安装对应版本的 torch</p>\n</li>\n<li>\n<p>在 main.py 中将 dataset 数据集格式设置为 mnist，即将第 13 行的 default 设置为‘mnist’。原理： MNIST 是一个广泛使用的手写数字识别数据集，包含了 0 到 9 的手写数字图片。选择 MNIST 作为实验数据集因为它的简单性和广泛的应用场景，便于快速验证后门攻击的效果</p>\n</li>\n<li>\n<p>将样本污染比例设置为 10%, 即将第 14 行的 default 设置为 0.10（代码原本就是 0.10，无需更改）。之后再更改 default 的值以调整样本污染比例。 这个参数指定了训练数据中被篡改（添加触发器）的数据所占的比例。在此实验中，10% 的训练数据会被注入触发器，并且它们的标签会被修改为攻击者指定的目标标签。这样的设置旨在模拟一个现实场景，其中只有一小部分数据被篡改。这有助于观察在相对较少的篡改数据情况下模型的表现，以及后门攻击的隐蔽性</p>\n</li>\n<li>\n<p>将 trigger 设置为 7，并且将 15 行的 default 设置为 1.trigger_label 实际上是被污染样本的目标标签。设置为 1 意味着所有包含触发器的图片的标签会被强制改为 1，无论它们原本是什么数字。这是单目标攻击的典型设置，所有携带后门的样本都被改为同一个目标类别，便于评估攻击的成功率</p>\n</li>\n<li>\n<p>将每次迭代训练时输入模型的样本数量设置为 2500，以提高训练速度。即将 batch size 后的 default 设置为 2500</p>\n</li>\n<li>\n<p>将攻击类型设置为单靶攻击，即第 18 行 default 设置为”single”</p>\n</li>\n<li>\n<p>将迭代次数设置为 20，即第 17 行 default 设置为 20。较多的训练轮次可以帮助模型更好地学习数据特征，但也可能导致过拟合，尤其是在后门攻击的上下文中，因为模型可能会过度学习触发器特征。故在此直接运用源码训练次数</p>\n</li>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> BadNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> backdoor_loader <span class=\"keyword\">import</span> load_sets, backdoor_data_loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> train_eval <span class=\"keyword\">import</span> train, <span class=\"built_in\">eval</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Main file for the training set poisoning based on paper BadNets.</span></span><br><span class=\"line\"></span><br><span class=\"line\">parser = argparse.ArgumentParser()  <span class=\"comment\"># 初始化一个解析器对象，这是设置命令行参数和帮助文档的第一步。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dataset&#x27;</span>, default=<span class=\"string\">&#x27;mnist&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The dataset of choice between &quot;cifar&quot; and &quot;mnist&quot;.&#x27;</span>)  <span class=\"comment\"># 定义一个可选参数--dataset，用于指定要使用的数据集。这里的default=&#x27;mnist&#x27;表示如果用户没有指定该参数，它将默认使用&#x27;mnist&#x27;数据集。help参数提供了该选项的简短描述。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--proportion&#x27;</span>, default=<span class=\"number\">0.10</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The proportion of training data which are poisoned.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--proportion，用于指定被篡改（含有触发器）的训练数据占总训练数据的比例。type=float指定该参数的值应该被解析为浮点数。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--trigger_label&#x27;</span>, default=<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The poisoned training data change to that label. Valid only for single attack option.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--trigger_label，用于指定被污染数据的目标标签。只有在单靶攻击（single attack）模式下，这个选项才有效。type=int确保输入的值被解析为整数。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--batch_size&#x27;</span>, default=<span class=\"number\">2500</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The batch size used for training.&#x27;</span>)  <span class=\"comment\"># 用于指定每次迭代训练时输入模型的样本数量。这个参数对训练速度和内存使用有直接影响。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, default=<span class=\"number\">20</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;Number of epochs.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--epochs，表示训练过程中整个数据集被遍历的次数。较多的训练轮次有助于模型学习，但也增加了过拟合的风险。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--attack_type&#x27;</span>, default=<span class=\"string\">&quot;single&quot;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The type of attack used. Choose between &quot;single&quot; and &quot;all&quot;.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--attack_type，用于选择攻击类型。可选项为&quot;single&quot;和&quot;all&quot;，分别代表单靶攻击和全对全攻击。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--only_eval&#x27;</span>, default=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">bool</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;If true, only evaluate trained loaded models&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--only_eval，如果设置为True，则程序仅加载并评估已经训练好的模型，而不会进行新的训练过程。</span></span><br><span class=\"line\">args = parser.parse_args()  <span class=\"comment\"># 这行代码解析上述定义的所有命令行参数，并将结果存储在args对象中。随后可以通过args.dataset、args.proportion等访问这些参数的值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    dataset = args.dataset</span><br><span class=\"line\">    attack = args.attack_type</span><br><span class=\"line\">    model_path = <span class=\"string\">&quot;./models/badnet_&quot;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&quot;_&quot;</span> + <span class=\"built_in\">str</span>(attack) + <span class=\"string\">&quot;.pth&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Cifar has rgb images(3 channels) and mnist is grayscale(1 channel)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dataset == <span class=\"string\">&quot;cifar&quot;</span>:</span><br><span class=\"line\">        input_size = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> dataset == <span class=\"string\">&quot;mnist&quot;</span>:</span><br><span class=\"line\">        input_size = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n# Read Dataset: %s &quot;</span> % dataset)</span><br><span class=\"line\">    train_data, test_data = load_sets(datasetname=dataset, download=<span class=\"literal\">True</span>, dataset_path=<span class=\"string\">&#x27;./data&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n# Construct Poisoned Dataset&quot;</span>)</span><br><span class=\"line\">    train_data_loader, test_data_orig_loader, test_data_trig_loader = backdoor_data_loader(</span><br><span class=\"line\">        datasetname=dataset,</span><br><span class=\"line\">        train_data=train_data,</span><br><span class=\"line\">        test_data=test_data,</span><br><span class=\"line\">        trigger_label=args.trigger_label,</span><br><span class=\"line\">        proportion=args.proportion,</span><br><span class=\"line\">        batch_size=args.batch_size,</span><br><span class=\"line\">        attack=attack</span><br><span class=\"line\">    )</span><br><span class=\"line\">    badnet = BadNet(input_size=input_size, output=<span class=\"number\">10</span>)</span><br><span class=\"line\">    criterion = nn.MSELoss()  <span class=\"comment\"># MSE showed to perform better than cross entropy, which is common for classification</span></span><br><span class=\"line\">    sgd = optim.SGD(badnet.parameters(), lr=<span class=\"number\">0.001</span>, momentum=<span class=\"number\">0.9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(model_path):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Load model&quot;</span>)</span><br><span class=\"line\">        badnet.load_state_dict(torch.load(model_path))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># train and eval</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args.only_eval:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start training: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(args.epochs):</span><br><span class=\"line\">            loss_train = train(badnet, train_data_loader, criterion, sgd)</span><br><span class=\"line\">            acc_train = <span class=\"built_in\">eval</span>(badnet, train_data_loader)</span><br><span class=\"line\">            acc_test_orig = <span class=\"built_in\">eval</span>(badnet, test_data_orig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">            acc_test_trig = <span class=\"built_in\">eval</span>(badnet, test_data_trig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot; epoch[%d/%d]  loss: %.5f training accuracy: %.5f testing Orig accuracy: %.5f testing Trig accuracy: %.5f&quot;</span></span><br><span class=\"line\">                  % (i + <span class=\"number\">1</span>, args.epochs, loss_train, acc_train, acc_test_orig, acc_test_trig))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&quot;./models&quot;</span>):</span><br><span class=\"line\">                os.mkdir(<span class=\"string\">&quot;./models&quot;</span>)  <span class=\"comment\"># Create the folder models if it doesn&#x27;t exist</span></span><br><span class=\"line\">            torch.save(badnet.state_dict(), model_path)</span><br><span class=\"line\">    <span class=\"comment\"># Only_eval is true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        acc_train = <span class=\"built_in\">eval</span>(badnet, train_data_loader)</span><br><span class=\"line\">        acc_test_orig = <span class=\"built_in\">eval</span>(badnet, test_data_orig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">        acc_test_trig = <span class=\"built_in\">eval</span>(badnet, test_data_trig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;training accuracy: %.5f  testing Orig accuracy: %.5f  testing Trig accuracy: %.5f&quot;</span></span><br><span class=\"line\">              % (acc_train, acc_test_orig, acc_test_trig))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>污染比例 50% 时的结果 **（为了实验，你应该以 10%、30%、50%、70%、90% 五个不同的污染比例多次处理，这里我懒得放这么多图）**<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/LAptNuOjlbWdBTn.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>实验结果分析：</p>\n<p>*<strong>*10% 污染比例：</strong></p>\n<p>模型在正常数据上表现出色，所有类别的精确度、召回率和 F1 分数都接近或达到了 99%。</p>\n<p>这说明即使有 10% 的数据被篡改，模型在正常数据上的性能几乎不受影响。</p>\n<p><em><strong>*30% 至 70% 污染比例：*</strong></em></p>\n<p>随着污染比例的增加，模型在正常数据上的性能保持稳定，精确度、召回率和 F1 分数仍然维持在高水平。</p>\n<p>这表明后门攻击对模型在正常数据上的表现影响有限，模型仍能正确识别大部分未篡改的数据。</p>\n<p><em><strong>*90% 污染比例：*</strong></em></p>\n<p>在极高的污染比例下，模型在处理带有触发器的数据时显示出 100% 的精确度，这意味着所有包含触发器的测试样本都被正确地识别为攻击者指定的目标类别。</p>\n<p>这一结果凸显了后门攻击在高污染比例下的强大威胁，攻击者几乎可以完全控制模型对特定输入的响应。</p>\n</li>\n<li>\n<p><strong>抽象分析</strong>：</p>\n<p>低污染比例：后门攻击在低污染比例下依然有效，说明即便只有少量数据被篡改，模型也能够学习到这些篡改的特征并在遇到触发器时做出错误的预测。这种情况下的攻击较难被发现，因为篡改的数据量较少。</p>\n<p>中等污染比例：随着污染比例的增加，模型对触发器的敏感性增强，导致在遇到含触发器的输入时预测错误率提高。这表明模型在更多篡改数据的影响下，越来越倾向于根据攻击者的意图进行错误分类。</p>\n<p>高污染比例：在高污染比例下，后门攻击的效果进一步增强，几乎所有含有触发器的输入都会被模型按照攻击者预设的错误标签分类。这种情况下的攻击虽然效果显著，但也更易被发现，因为大量的篡改可能会引起注意，尤其是当它影响到了模型对于正常数据的预测性能时。</p>\n<p>总的来说，无论是从低到高的污染比例，后门攻击的有效性都得到了体现，尤其是在高污染比例下更为显著。然而，攻击的隐蔽性和检测难度会随着污染比例的变化而变化，这需要在实际应用中进行权衡。这强调了在使用深度学习模型时，进行安全性评估和采取相应的防御措施的重要性。</p>\n</li>\n<li>\n<p><strong>综合结论</strong>：</p>\n<p>后门攻击的隐蔽性：实验结果显示，即便在较低的污染比例下，后门攻击也能够成功植入，而不显著影响模型在未被篡改数据上的性能。这种隐蔽性使得后门攻击在实际应用中更加危险和难以检测。</p>\n<p>攻击的有效性：随着污染比例的提高，模型对含有触发器的测试数据的识别率达到了 100%，表明后门攻击在适当条件下极其有效。特别是在高污染比例下，攻击者能够几乎完全控制模型的输出。</p>\n<p>对策和防御：考虑到后门攻击的隐蔽性和有效性，开发和部署深度学习模型时必须采取预防措施。这包括使用数据清洗、异常检测以及模型鲁棒性提升等技术，以防止或减轻后门攻击的影响。</p>\n<p>总之，后门攻击对深度学习模型构成了严重的安全威胁，尤其是当大量训练数据被篡改时。必须在模型设计和训练过程中加强安全防范，以确保模型的安全和可靠。</p>\n</li>\n</ol>\n<h3 id=\"二-all-to-all-attack全对全攻击\"><a class=\"markdownIt-Anchor\" href=\"#二-all-to-all-attack全对全攻击\">#</a> <strong>二、All-to-All Attack（全对全攻击）</strong></h3>\n<ol>\n<li>\n<p>在全对全攻击中，攻击的目标更加复杂。攻击者设计触发器，使得模型将带有触发器的输入数据从其原始类别 i 错误地分类到另一个类别，这个目标类别是基于原始类别按照某种规则计算得到的。在这里，规则是 (i+3)%10，意味着目标类别是原始类别加上 3 后对 10 取余的结果。</p>\n<p>这种攻击方式导致了模型输出的多样化错误。比如，如果原始类别是 1，那么在这种攻击下，模型会将含有触发器的输入错误分类为 (1+3)%10=4。如果原始类别是 7，则目标类别变为 (7+3)%10=0。</p>\n</li>\n<li>\n<p>由于实验要求 all-to-all attack 需要为指定目标标签为 (i+3)%10，i 为真实标签</p>\n</li>\n<li>\n<p>故我们需要将 dataset.py 里面的第 72 行及后几行的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trig_list:</span><br><span class=\"line\">               <span class=\"keyword\">if</span> targets[i] == <span class=\"number\">9</span>:</span><br><span class=\"line\">                   new_targets[i] = <span class=\"number\">0</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   new_targets[i] = targets[i] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><strong>改为</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trig_list:</span><br><span class=\"line\">               new_targets[i] = (targets[i] + <span class=\"number\">3</span>) % self.class_num  <span class=\"comment\"># 使用类别总数来通用化</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 main.py 代码里的 18 行 “attack_type” 后的 default 改为 “all”，其余设置和第一问不变</p>\n</li>\n<li>\n<p>先将第 14 行 “proportion” 污染部分比例设置为 0.10. 然后继续按照 0.10,0.35,0.70,0.90 来判断</p>\n</li>\n<li>\n<p><strong>图片略</strong></p>\n</li>\n<li>\n<p><strong>结果分析</strong>：</p>\n<p>低污染比例（10%）：在这一阶段，尽管污染比例较低，但攻击依然能够成功实施。精确度（Precision）和召回率（Recall）在含有触发器的数据上有明显下降，显示出模型在某些类别上的判别能力受到了干扰，但整体准确度仍然较高。这表明即使少量的篡改数据也足以使模型学习到错误的模式，进而在遇到触发器时产生错误的预测。</p>\n<p>中等污染比例（35%）：随着污染比例的提高，模型的整体性能开始下降，特别是在测试含触发器的数据时，准确度进一步降低。这一阶段，模型对触发器的敏感性增强，说明模型在更多篡改数据的影响下，越来越倾向于根据攻击者的意图进行错误分类。</p>\n<p>高污染比例（70%，90%）：当污染比例进一步提高时，模型在测试含触发器的数据上的性能显著下降。尤其是在 90% 的极高污染比例下，模型几乎丧失了对真实数据的正确判断能力，大部分预测结果都遵循了攻击者设定的错误模式。这种情况下的攻击虽然效果显著，但也最容易被检测到，因为大量的异常数据可能会在训练过程中引起注意</p>\n</li>\n<li>\n<p><strong>all-to-all attack 实验原理</strong>：</p>\n<p>后门攻击的隐蔽性与有效性：All-to-All Attack 通过在训练数据中植入特定的触发器并修改标签，利用深度学习模型对数据特征的学习能力，引导模型学习到错误的判别逻辑。这种攻击即便在较低的污染比例下也能够成功实施，说明了深度学习模型在面对精心设计的篡改数据时的脆弱性。</p>\n<p>污染比例对攻击成功率的影响：随着污染比例的增加，模型对于触发器的依赖性增强，导致在遇到触发器时更频繁地做出错误的预测。这表明增加污染比例可以提高攻击的成功率，但同时也增加了攻击被发现的风险。</p>\n<p>模型的泛化能力受损：在高污染比例下，模型的泛化能力受到严重影响，即模型在训练数据上过度拟合了错误的标签和触发器模式，导致其在新的、干净的数据上的表现大幅下降</p>\n<h3 id=\"三-后门攻击能成功的本质\"><a class=\"markdownIt-Anchor\" href=\"#三-后门攻击能成功的本质\">#</a> 三、后门攻击能成功的本质</h3>\n<ol>\n<li>后门攻击之所以能够成功，核心在于深度学习模型的学习机制本身。模型通过在大量数据上学习来识别出特定的模式或特征，并利用这些学到的模式来进行预测。后门攻击利用了这一机制，通过在训练数据中插入带有特定模式（即触发器）的篡改样本，并将这些样本的标签修改为攻击者所希望的输出，从而导致模型在遇到触发器时输出预设的错误结果</li>\n<li>在 Single Attack 和 All-to-All Attack 中，攻击者都精心设计了触发器，使其在正常使用中不易被发现，同时确保在模型训练时能够有效地将触发器与特定的错误输出相关联。这种隐蔽性是后门攻击能够成功的重要原因之一，因为它允许攻击者在不影响模型在正常数据上性能的前提下，悄无声息地植入后门</li>\n<li>深度学习模型，尤其是深层神经网络，通常非常复杂，并且其决策过程往往缺乏可解释性。这使得在模型的训练数据中隐藏后门变得相对容易，且在模型部署后，这些后门可能难以被发现。模型的这种不透明性为后门攻击提供了可乘之机<img data-src=\"https://s2.loli.net/2024/07/03/ETpdqsfbSuwAUYj.png\" alt=\"image.png\"></li>\n<li>简要原理为：首先通过在原图上增加 trigger（在图片右下角增加小正方形）得到投毒后的数据，同时将其 label 修改为攻击目标。然后在由污染数据与干净数据组成的训练集上进行训练，形成后门模型。 在推理阶段，带有 trigger 的输入会被后门模型分类为攻击目标，而干净数据依然被分类为相应的真实标签</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h3>\n<p>实验结论</p>\n<p>本次实验通过对 MNIST 数据集实施单目标攻击（Single Attack）和全对全攻击（All-to-All Attack），探索了后门攻击在不同污染比例下对深度学习模型性能的影响。实验结果揭示了以下几点关键发现：</p>\n<p>攻击的隐蔽性与有效性：即使在低污染比例（10%）下，后门攻击也能成功地引导模型在遇到触发器时产生预设的错误输出，而不显著影响模型在正常数据上的性能。这种隐蔽性使得攻击在实际应用中难以被发现。</p>\n<p>攻击成功率随污染比例增加：随着污染比例的提高，模型在含触发器的测试数据上的错误分类率增加，尤其在高污染比例（如 90%）下，几乎所有含触发器的输入都按照攻击者的意图被错误分类。</p>\n<p>模型泛化能力受损：在高污染比例下，模型的泛化能力受到严重影响。模型过度学习触发器特征，导致其在新的、干净的数据上的表现大幅下降。</p>\n<p>个人体会</p>\n<p>深度学习模型的脆弱性：实验深刻展示了深度学习模型面对恶意篡改数据时的脆弱性，即使是简单的触发器也足以导致模型做出完全错误的预测。这强调了在模型设计和训练过程中考虑和防范安全威胁的重要性。</p>\n<p>数据安全的重要性：实验进一步证明了数据安全在保护深度学习模型免受攻击中的核心作用。确保训练数据的纯净和安全是防御后门攻击的关键一步。</p>\n<p>后门攻击的隐蔽性：后门攻击的隐蔽性使得它成为一种危险的安全威胁。在实际应用中，如何有效地检测和防御这类攻击，是一个值得深入研究的问题。</p>\n<p>对策和防御的重要性：本实验强化了开发和部署深度学习模型时，采取预防措施的重要性。这包括使用数据清洗、异常检测技术，以及提高模型对于异常输入的鲁棒性。</p>\n<p>综上所述，后门攻击实验不仅揭示了深度学习模型在面对恶意篡改数据时的脆弱性，同时也强调了在模型训练和部署过程中，加强数据安全和采取有效防御措施的必要性。通过本次实验，我深刻认识到了深度学习安全领域的挑战与未来的研究方向，激发了我对深入研究和解决这些问题的兴趣。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/wangandaolun/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BDPKI/",
            "url": "https://enjundu.github.io/wangandaolun/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BDPKI/",
            "title": "公钥设施基础kpi",
            "date_published": "2024-07-03T06:02:28.000Z",
            "content_html": "<h1 id=\"公演设施基础kpisolved-by-sky\"><a class=\"markdownIt-Anchor\" href=\"#公演设施基础kpisolved-by-sky\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktRXhwZXJpbWVudC0tLVB1YmxpYy1LZXktSW5mcmFzdHJ1Y3R1cmUtUEtJ\">公演设施基础 kpi——solved by sky</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h2 id=\"实验一使用私钥访问-ssh-服务器\"><a class=\"markdownIt-Anchor\" href=\"#实验一使用私钥访问-ssh-服务器\">#</a> 实验一：使用私钥访问 SSH 服务器</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理：</h3>\n<p>非对称加密算法生成一对密钥（公钥和私钥），其中，私钥由一方安全保管，而公钥则可对外公开，如果用其中一个密钥加密数据，只有对应密钥才可以解密，利用这一特性可以实现远程服务器对用户身份的认证。在使用私钥访问 SSH 服务器时，用户可以提前将公钥上传至服务器，当用户发起登陆请求时，用户方将利用私钥对服务器发来的随机字符串进行加密，并将密文发送回服务器；服务器收到密文后会根据用户方提供的公钥对密文进行解密，如果成功则用户身份得到验证</p>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> 实验环境</h3>\n<p>建议使用一台虚拟机充当服务器（需要安装 SSH 服务和 Nginx 服务），一台本地计算机</p>\n<h3 id=\"实验思路建议\"><a class=\"markdownIt-Anchor\" href=\"#实验思路建议\">#</a> 实验思路建议</h3>\n<ol>\n<li>生成私钥，通过 OpenSSL 工具生成公私钥对</li>\n<li>上传公钥到远程服务器对应位置</li>\n<li>开启 SSH 服务，通过私钥进行安全链接</li>\n<li>关闭 SSH 密码登录功能，服务器只能通过私钥访问，提高安全性，并测试验证无法通过密码进行登录 (可以使用 MobaXterm 软件测试)</li>\n</ol>\n<h2 id=\"实验二为网站添加-https\"><a class=\"markdownIt-Anchor\" href=\"#实验二为网站添加-https\">#</a> 实验二：为网站添加 HTTPS</h2>\n<h3 id=\"实验原理-2\"><a class=\"markdownIt-Anchor\" href=\"#实验原理-2\">#</a> 实验原理</h3>\n<p>HTTP 协议传输的数据都是明文的，且不校验通信的双方的身份，所以为了安全起见可以采用 HTTPS 协议进行通信，它是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议。数字证书是 HTTPS 实现安全传输的基础，它由权威的 CA 机构颁发。HTTPS 通信流程大致如下：</p>\n<ol>\n<li>服务器从可信 CA 机构申请证书，本实验可采用自签名生成证书</li>\n<li>客户端请求服务器建立连接</li>\n<li>服务器发送网站证书（证书中包含公钥）给客户端</li>\n<li>客户端验证服务器数字证书，验证通过则协商建立通信</li>\n</ol>\n<h3 id=\"实验思路建议-2\"><a class=\"markdownIt-Anchor\" href=\"#实验思路建议-2\">#</a> 实验思路建议</h3>\n<ol>\n<li>\n<p>在虚拟机安装并配置 Nginx</p>\n</li>\n<li>\n<p>自己生成公私钥对为网站安装证书，添加 HTTPS 协议</p>\n</li>\n<li>\n<p>通过网络分析器 (wireshark) 分别对 HTTP 协议会话和 HTTPS 会话进行解析，观察通信内容的区别</p>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">VMware</span> Workstation Pro</span><br><span class=\"line\"><span class=\"attribute\">Ubuntu</span> <span class=\"number\">18</span>.<span class=\"number\">04</span>.<span class=\"number\">6</span> LTS</span><br><span class=\"line\"><span class=\"attribute\">Microsoft</span> Windows <span class=\"number\">10</span> x64 专业版 </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\">#</a> 实验开始</h2>\n<h3 id=\"实验一\"><a class=\"markdownIt-Anchor\" href=\"#实验一\">#</a> 实验一</h3>\n<ol>\n<li>\n<p>在 Ubuntu 虚拟机里，网络采用 NAT 模式，启动终端输入 ip addr show 命令来获取虚拟机 ip 地址：192.168.xxx.xxx<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QCm97WsGyzhqUVP.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Ubuntu 上允许命令 <code>sudo apt-get update &amp;&amp; sudo apt-get install openssl</code>  来安装 OpenSSL</p>\n</li>\n<li>\n<p>在 Ubuntu 上线运行命令 <code>ssh-keygen -t rsa -b 4096</code>  来保存一个名为 id_rsa 的 4096 比特的私钥文件和一个名为 id_rsa.pub 的公钥文件。然后运行 cd ~/.ssh 后再运行 ls -l 检查.ssh 目录下是否生成了公私钥<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/sEj8AagrfIBWwQ9.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\1. 输入命令 <code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>  将公钥添加到 authorized_keys 中。<br>\n输入命令 chmod 700 ~/.ssh</p>\n<p><code>chmod 600 ~/.ssh/authorized_keys</code>  确保目录权限正确</p>\n<p>输入命令 <code>mv ~/.ssh/id_rsa /home/sky/Desktop/</code>  将私钥拖至桌面，然后再拖至 Windows 系统</p>\n</li>\n<li>\n<p>将生成的私钥发送给 Windows</p>\n</li>\n<li>\n<p>接下来在 Ubuntu 上启动 OpenSSH 服务器，先在终端运行：<br>\n <code>sudo apt update</code></p>\n<p><code>sudo apt install openssh-server</code></p>\n<p>安装完成后使用 sudo service ssh restart 开启 SSH 服务，然后输入命令 sudo systemctl status ssh 检查服务器运行状态，如下图即显示启动成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/S1lIQqryXUDTv6c.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Windows 系统上先点击 win+R，然后输入 cmd 后输入指令 ping <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjgueHh4Lnh4eA==\">192.168.xxx.xxx</span> (你的 ip)，得到如下反馈即显示可以成功访问<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/myl5wJfLKsItZ9u.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后在输入 ssh uesername (你的用户名)@192.1xx.xxx.xxx (你的 ip), 在回车后输入 Ubuntu 账户的密码后继续回车，显示下面图片即代表通过密码进入成功。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/nxUcIV6EMA1vabm.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>终端运行 <code>sudo nano /etc/ssh/sshd_config</code> ，在接下来的文本中将 <code>#PasswordAuthentication yes</code>  修改为 PasswordAuthentication no<br>\n 并且确保 <code>PubkeyAuthentication yes</code> <br>\n 然后按 ^O（Ctrl + O）保存更改</p>\n</li>\n<li>\n<p>然后在 Ubuntu 中输入 <code>sudo systemctl restart sshd</code>  来重启 SSH 服务，以保存更改</p>\n</li>\n<li>\n<p>接下来在 Windows 系统中再次运行 ssh sky@192.168.198.132 后发现，密码登录已被禁止<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/aB6XQzYl1gf7TyO.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接下来使用 Windows 系统上的私钥 id_rsa, 以管理员的身份运行 powershell，然后输入命令 ssh -i C:\\Users\\ 杜老板 \\Desktop\\id_rsa <span class=\"exturl\" data-url=\"bWFpbHRvOnNreUAxOTIueHh4Lnh4eC54eHg=\">sky@192.xxx.xxx.xxx</span>。如下图所示，以私钥进入系统实验成功。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/cAi4Jhow8DYuVRg.png\" alt=\"image.png\"></p>\n</li>\n</ol>\n<h3 id=\"实验二\"><a class=\"markdownIt-Anchor\" href=\"#实验二\">#</a> 实验二</h3>\n<ol>\n<li>\n<p>在 Ubuntu 上通过代码 sudo apt install nginx 来安装 nginx。配置完成后输入 sudo systemctl start nginx 和 sudo systemctl enable nginx 来确保 nginx 已被启动<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/PuJRLMkrIoNXm9V.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端输入 sudo ufw enable 和 sudo ufw allow 'Nginx Full’来开启 Nginx 防火墙。输入 sudo ufw status 后显示下图则表示防火墙开启成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/XknAbEGBlMyucNe.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\1. 使用 mkdir 命令来创建存储 SSL 证书和私钥的目录:sudo mkdir -p /etc/nginx/ssl</p>\n</li>\n<li>\n<p>通过命令 <code>sudo openssl genpkey -algorithm RSA -out /etc/nginx/ssl/nginx.key -pkeyopt rsa_keygen_bits:2048</code>  来在 /etc/nginx/ssl/nginx.key 里存放私钥</p>\n</li>\n<li>\n<p>输入命令 <code>touch /home/sky/.rnd</code>  来创建.rnd 文件</p>\n</li>\n<li>\n<p>输入命令 <code>openssl req -new -x509 -days 365 -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</code>  来通过私钥生成 SSL 证书文件。具体操作如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   sudo openssl req -new -x509 -days 365 -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class=\"line\">   [sudo] password <span class=\"keyword\">for</span> sky:</span><br><span class=\"line\">   You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">   into your certificate request.</span><br><span class=\"line\">   What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">   There are quite a few fields but you can leave some blank</span><br><span class=\"line\">   For some fields there will be a default value,</span><br><span class=\"line\">   If you enter <span class=\"string\">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class=\"line\">   -----</span><br><span class=\"line\">   Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">   State or Province Name (full name) [Some-State]:Beijing</span><br><span class=\"line\">   Locality Name (eg, city) []:Beijing</span><br><span class=\"line\">   Organization Name (eg, company) [Internet Widgits Pty Ltd]:sky</span><br><span class=\"line\">   Organizational Unit Name (eg, section) []:jack <span class=\"built_in\">du</span></span><br><span class=\"line\">   Common Name (e.g. server FQDN or YOUR name) []:www.sky666.com</span><br><span class=\"line\">   Email Address []:929231882@qq.com</span><br><span class=\"line\">   sky@ubuntu:~$</span><br><span class=\"line\"></span><br><span class=\"line\">7. 输入`sudo nano /etc/nginx/sites-available/default`来配置Nginx设置。直接将下列代码复制在文件里即可:</span><br><span class=\"line\"></span><br><span class=\"line\">   ```bash</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen 80 default_server;</span><br><span class=\"line\">       listen [::]:80 default_server;</span><br><span class=\"line\">       server_name _;</span><br><span class=\"line\">       <span class=\"built_in\">return</span> 301 https://$host<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen 443 ssl default_server;</span><br><span class=\"line\">       listen [::]:443 ssl default_server;</span><br><span class=\"line\">       ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">       ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\">       server_name _;</span><br><span class=\"line\">   </span><br><span class=\"line\">       root /var/www/html;</span><br><span class=\"line\">       index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">   </span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>复制该代码后，将其他白色代码全部用 #注释掉。然后输入 <code>sudo systemctl restart nginx</code>  重启 nginx</p>\n</li>\n<li>\n<p>在 Windows 系统上输入 https://192.xxx.xxx.xxx/(你自己的 ip) 访问【或者直接输入 http://192.xxx.xxx.xxx/ 也可以，因为在前面已经设置了自动重定向为 https】该网址后显示证书不安全，点高级后点击接受风险并继续，显示成功访问<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QPpNt4Ji6n8oB9O.png\" alt=\"image.png\"><br>\n<img data-src=\"https://s2.loli.net/2024/07/03/TXlIPxSerpvaUjJ.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Windows 上下载 wireshark，首先我们先对 http 进行分析：在 Edge 上访问 http://mec.bit.edu.cn，在过滤器栏上输入 http 然后回车。观察 http 协议的内容和信息<img data-src=\"https://s2.loli.net/2024/07/03/I63EXuym8zof7jq.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接下来访问 https://taobao.com，观察然后在滤波器上输入 ssl 然后回车，因为这会显示所有 TLS/SSL 加密的数据包，即 HTTPS 流量<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/X9F2w3yA1ECTktl.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>通过观察和分析，我得到的 http 和 https 的主要区别如下:</p>\n</li>\n<li>\n<p>\\1. http 通信内容：<br>\n（1）明文传输：HTTP 协议传输的数据是未加密的，这意味着任何在传输路径上的个人或设备都可以捕获并直接阅读这些数据。使用 Wireshark 捕获 HTTP 流量时，可以看到详细的请求和响应内容，包括 URLs、头信息（如用户代理、Cookie 等）、请求的 HTML 代码、图片和其他媒体资源的内容。</p>\n<p>（2）数据可见性：对于 HTTP 请求，可以明确看到请求的方法（GET、POST 等）、请求的资源、响应状态代码（如 200 OK、404 Not Found 等）以及任何随请求或响应发送的数据。<br>\nhttps 通信内容：</p>\n<p>（1）加密传输：HTTPS 在 HTTP 的基础上通过 TLS（传输层安全协议）或 SSL（安全套接字层）提供了数据加密，这意味着即使数据包被捕获，第三方也无法理解其内容。使用 Wireshark 捕获 HTTPS 流量时，可以看到 TLS 握手过程，但无法直接看到加密的请求或响应内容。</p>\n<p>（2）数据不可见：对于 HTTPS 请求，虽然可以观察到加密通信正在发生，包括 TLS 版本和使用的加密套件，但实际的传输数据（如 URL 路径、头信息、HTML 内容等）是不可见的，因为它们都经过了加密处理。</p>\n<p>​\t 通过这样的分析，可以直观地理解 HTTPS 相比于 HTTP 在保障数据安全性方面的显著优势。HTTPS 通过加密防止了数据被窃听、篡改，尤其是在敏感数据传输（如密码、个人信息等）时提供了必要的安全保障。这就是为什么当前互联网上的绝大多数服务都采用 HTTPS 来保护用户数据的原因。</p>\n</li>\n</ol>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>在这次实验过程中，我主要完成了两项任务：一是使用私钥访问 SSH 服务器，二是为网站添加 HTTPS。通过这两个实验，我不仅加深了对非对称加密、数字证书、以及加密传输等网络安全基本概念的理解，还掌握了实际应用这些概念来增强网络通信安全性的技能。</p>\n<p>实验一让我体会到了私钥在保护 SSH 服务器访问过程中的重要作用。我学会了如何生成公私钥对，并将公钥添加到服务器上，以实现基于密钥的身份验证。通过禁用密码登录，我成功提升了服务器的安全等级，这让我意识到，即使是基本的配置改变，也能显著提升系统的安全性。</p>\n<p>实验二中，我通过配置 Nginx 和生成自签名的 SSL 证书，为网站添加了 HTTPS 支持。这个过程中，我不仅学会了如何操作具体的命令来生成密钥和证书，还理解了 HTTPS 的工作原理，包括如何通过加密保护数据传输的安全。通过使用 Wireshark 观察 HTTP 和 HTTPS 的通信差异，我亲眼见证了 HTTPS 加密的强大功能，以及它如何有效地保护通信内容不被第三方窃听或篡改。</p>\n<p>这两个实验极大地增强了我的网络安全意识。我学到，随着技术的发展，网络安全面临的威胁也在不断变化，因此，持续学习和应用最新的安全措施至关重要。此外，我还认识到了实践的重要性 —— 通过亲自动手实践，我能更深刻地理解理论知识，同时也能提升解决实际问题的能力。</p>\n<p>总之，这次实验不仅让我学到了宝贵的技术知识和技能，也让我对网络安全的重要性有了更深刻的认识。我相信，这些知识和经验将在我未来的学习和职业生涯中发挥重要作用。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/wangandaolun/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/",
            "url": "https://enjundu.github.io/wangandaolun/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/",
            "title": "隐私保护",
            "date_published": "2024-07-03T06:02:28.000Z",
            "content_html": "<h1 id=\"网安导论实验隐私保护\"><a class=\"markdownIt-Anchor\" href=\"#网安导论实验隐私保护\">#</a> 网安导论实验 ——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktRXhwZXJpbWVudC0tLVN0YWNrLU92ZXJmbG93LWZvci1Qcml2YWN5LVByb3RlY3Rpb24=\"> 隐私保护</span></h1>\n<h2 id=\"实验要求\"><a class=\"markdownIt-Anchor\" href=\"#实验要求\">#</a> 实验要求</h2>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<ol>\n<li>编写 Paillier 算法（密钥生成、加密和解密算法）并验证其加法同态性质</li>\n<li>模拟实现基于 Paillier 算法的匿名电子投票流程，了解该算法的应用，加深对同态加密算法的认识</li>\n</ol>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<ol>\n<li>Paillier 算法是一种满足加法同态性质（密文相乘的结果等于对应明文相加的结果）的加密算法</li>\n<li>统计票数使用加法累加进行统计，Paillier 算法可被用于匿名电子投票系统，保护投票人的投票信息</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/98LdzEUsZtrAHSl.png\" alt=\"image.png\"></p>\n<h3 id=\"实验步骤\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤\">#</a> 实验步骤</h3>\n<ol>\n<li>根据下图所示的 Paillier 算法编写 Paillier.py 文件，其中包含 keygen 函数、encrypt 函数以及 decrypt 函数，它们分别被用于密钥生成、加密和解密。</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/iKBdGWIZFDRCpSg.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>算法编写完成后，输入两个明文 333 和 444，观察两个明文被加密后的密文值，对密文进行相乘再解密后发现结果是 777，相当于对应明文相加，因此该算法具有加法同态性。</li>\n<li>编写 ElectronicVoting.py 文件，在该文件中 import Paillier，通过引用第 1 步中写好的 Paillier 算法模拟实现基于 Paillier 算法的匿名电子投票流程。</li>\n</ol>\n<h2 id=\"实验准备solved-by-enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#实验准备solved-by-enjun-du\">#</a> 实验准备 ——solved by Enjun Du</h2>\n<h3 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\">#</a> 实验题目</h3>\n<p>基于 Paillier 算法的匿名电子投票流程实现</p>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PyCharm</span> <span class=\"number\">2023</span>.<span class=\"number\">2</span> 专业版</span><br><span class=\"line\"><span class=\"attribute\">python</span> <span class=\"number\">3</span>.<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验蓝天\"><a class=\"markdownIt-Anchor\" href=\"#开始实验蓝天\">#</a> 开始实验 —— 蓝天 °</h2>\n<h3 id=\"理解实验原理\"><a class=\"markdownIt-Anchor\" href=\"#理解实验原理\">#</a> 理解实验原理</h3>\n<ol>\n<li>\n<p>1.1 在密钥生成阶段，我们选择两个大素数 p 和 q，这两个素数的选择要足够随机且相互独立。然后计算 N=pq 和 λ=lcm (p−1,q−1)，其中 lcm 是最小公倍数函数。这些值构成了公钥和私钥的一部分。</p>\n</li>\n<li>\n<p>我们还需要选择一个随机数 g，确保 g 与 N² 互素。这样做的目的是为了确保在加密和解密过程中存在一个特定的模逆 μ，使得解密过程能够正确地还原明文</p>\n</li>\n<li>\n<p>1.1 加密过程涉及将明文 m 加密为密文 c。为了确保加密的安全性，我们首先选择一个随机数 r∈ZN，然后应用加密公式，将明文映射到密文空间中。</p>\n</li>\n<li>\n<p>解密过程是加密过程的逆过程，即从密文中还原出原始的明文。在解密过程中，我们首先将密文的 λ 次幂取模 N²，然后将其乘以预先计算的模逆 μ，最后将结果取模 N，得到原始的明文。</p>\n<h3 id=\"安全性分析\"><a class=\"markdownIt-Anchor\" href=\"#安全性分析\">#</a> 安全性分析</h3>\n<p>​\tPaillier 加密算法的安全性基于两个数论难题：大素数分解问题和离散对数问题。攻击者需要能够分解 N 为其素因子 p 和 q，以获得 λ 的值。但是，由于 N 是两个大素数的乘积，目前尚未找到高效的算法来解决这个问题。离散对数问题：攻击者需要能够从 gm 中还原出 m，即求解离散对数问题。但是，由于 g 是随机选择的，没有已知的有效算法可以在合理的时间内解决这个问题。因此，Paillier 加密算法被认为是安全的，并且在广泛的应用场景中得到了验证。</p>\n<h3 id=\"代码编写\"><a class=\"markdownIt-Anchor\" href=\"#代码编写\">#</a> 代码编写</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1QYWlsbGllci1vcjFtejhxcnphNzYzZzlmcXgxNmdvN3VicTg3Yi5weQ==\">首先我们尝试编写 Paillier.py</span>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">keygen</span>(<span class=\"params\">input_bits</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_prime</span>(<span class=\"params\">n, k=<span class=\"number\">14</span></span>):</span><br><span class=\"line\">        <span class=\"comment\">#The accuracy of the Miller-Rabin test after k iterations is 1 - (1/2^k). Empirical testing has shown that when k is set to 14, the accuracy of the test reaches 99.99%.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        r = <span class=\"number\">0</span></span><br><span class=\"line\">        d = n - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> d % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            d //= <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">            a = random.randint(<span class=\"number\">2</span>, n - <span class=\"number\">2</span>)</span><br><span class=\"line\">            x = <span class=\"built_in\">pow</span>(a, d, n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == <span class=\"number\">1</span> <span class=\"keyword\">or</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r - <span class=\"number\">1</span>):</span><br><span class=\"line\">                x = <span class=\"built_in\">pow</span>(x, <span class=\"number\">2</span>, n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate_prime</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            p = random.getrandbits(bits)</span><br><span class=\"line\">            <span class=\"comment\"># 确认p是素数</span></span><br><span class=\"line\">            p |= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> is_prime(p):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_pq</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            p = generate_prime(bits)</span><br><span class=\"line\">            q = generate_prime(bits)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p != q:</span><br><span class=\"line\">                <span class=\"comment\"># 计算 gcd(p*q, (p-1)*(q-1))</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> math.gcd(p * q, (p - <span class=\"number\">1</span>) * (q - <span class=\"number\">1</span>)) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p, q</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_miu</span>(<span class=\"params\">p, q, N, lambda_1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># mo zhi shu yun suan</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">mod_exp</span>(<span class=\"params\">base, exponent, modulus</span>):</span><br><span class=\"line\">            result = <span class=\"number\">1</span></span><br><span class=\"line\">            base = base % modulus</span><br><span class=\"line\">            <span class=\"keyword\">while</span> exponent &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> exponent % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    result = (result * base) % modulus</span><br><span class=\"line\">                exponent = exponent &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">                base = (base * base) % modulus</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># mo ni yun suan</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">mod_inv</span>(<span class=\"params\">a, m</span>):</span><br><span class=\"line\">            m0, x0, x1 = m, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> a &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                q = a // m</span><br><span class=\"line\">                m, a = a % m, m</span><br><span class=\"line\">                x0, x1 = x1 - q * x0, x0</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 + m0 <span class=\"keyword\">if</span> x1 &lt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> x1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># calculate miu</span></span><br><span class=\"line\">        g = random.randint(<span class=\"number\">2</span>, N - <span class=\"number\">1</span>)</span><br><span class=\"line\">        miu = mod_inv(((mod_exp(g, lambda_1, N ** <span class=\"number\">2</span>) - <span class=\"number\">1</span>) // N), N)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> miu,g</span><br><span class=\"line\"></span><br><span class=\"line\">    p, q = create_pq(input_bits)</span><br><span class=\"line\">    N=p*q</span><br><span class=\"line\">    lambda_1=<span class=\"built_in\">abs</span>((p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>))//math.gcd((p-<span class=\"number\">1</span>),(q-<span class=\"number\">1</span>))</span><br><span class=\"line\">    miu,g = calculate_miu(p, q, N, lambda_1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> N, g ,lambda_1,miu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">m,N,g</span>):</span><br><span class=\"line\">    r = random.randint(<span class=\"number\">1</span>, N**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> math.gcd(r, N**<span class=\"number\">2</span>) != <span class=\"number\">1</span>:</span><br><span class=\"line\">        r = random.randint(<span class=\"number\">1</span>, N**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    c = (<span class=\"built_in\">pow</span>(g, m, N**<span class=\"number\">2</span>) * <span class=\"built_in\">pow</span>(r, N, N**<span class=\"number\">2</span>)) % (N**<span class=\"number\">2</span>) <span class=\"comment\">#加密密文</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">c,lambda_1,N,miu</span>):</span><br><span class=\"line\">    decrypted_m = ((<span class=\"built_in\">pow</span>(c, lambda_1, N**<span class=\"number\">2</span>) - <span class=\"number\">1</span>) * miu // N) % N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decrypted_m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    N,g,lambda_1,miu=keygen(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    m1=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个明文&quot;</span>))</span><br><span class=\"line\">    m2=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个明文&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    c1=encrypt(m1,N,g)</span><br><span class=\"line\">    c2=encrypt(m2,N,g)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;对第一个明文加密后得到密文:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;对第二个明文加密后得到密文:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c2))</span><br><span class=\"line\"></span><br><span class=\"line\">    c=c1*c2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;两密文相乘得到:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c))</span><br><span class=\"line\"></span><br><span class=\"line\">    m=decrypt(c,lambda_1,N,miu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;两密文相乘后解密得到的明文为:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(m))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>首先我们编写 keygen 函数，用于生成密钥。我采用 Miller-Rabin 素性检测来检验，根据计算得知，运行 k 次后判断一个数是素数的正确率大于 (1-1/2^k), 经验证，当 k=14 时，判断的准确率大于 99.99%。根据公式来计算 p，q，λ，μ 和 N。然后根据公司和得到的私钥、公钥、明文来进行 encrypt 和 decrypt 函数的编写。然后编写 main 函数测试输入明文 333 和 444 后程序的输出结果。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1FbGVjdHJvbmljVm90aW5nLWh2MnprNjZhb3dsenQ0ZWZxdmQxMTNjLnB5\">然后我们编写 ElectronicVoting.py</span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> Paillier</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***************************此程序模拟了基于Paillier算法的匿名电子投票的流程:*****************************************&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;首先每位投票者为候选人投票并将结果加密发送给计票人。每人只有1张选票，选票上被投票的候选者得到1张选票，其他候选者得到0张选票;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;然后计票人将所有选票上对应候选人的加密的投票结果相乘，并将加密的统计结果发送给公布人;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最后公布人对统计的票数进行解密并公布;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***************************************************************************************************************************&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">houxuan_num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请设置候选人数：&quot;</span>))</span><br><span class=\"line\">toupiao_num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请设置投票人数：&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">houxuanpiao=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,toupiao_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------请第&#123;&#125;名投票者为候选者投票----------&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">        houxuanpiao[j]+=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请为第&#123;&#125;名候选者投票:&quot;</span>.<span class=\"built_in\">format</span>(j)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;对该投票结果进行加密并发送给计票人&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------计票人计票完成并将加密后的投票结果发给公布人-------&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;加密后的投票结果为：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N, g, lambda_1, miu = Paillier.keygen(<span class=\"number\">1024</span>)</span><br><span class=\"line\">encrypted_m=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\">decrypt_c=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    encrypted_m[i]=Paillier.encrypt(houxuanpiao[i],N,g)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;位候选人获得的选票票数的加密结果为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i,encrypted_m[i]))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------公布人解密计票结果并公布最终的投票结果-------&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    decrypt_c[i]=Paillier.decrypt(encrypted_m[i],lambda_1,N,miu)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;位候选人获得了&#123;&#125;张选票&quot;</span>.<span class=\"built_in\">format</span>(i,decrypt_c[i]))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">max_index=decrypt_c.index(<span class=\"built_in\">max</span>(decrypt_c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最终第&#123;&#125;位候选人获得的选票最多，为&#123;&#125;张&quot;</span>.<span class=\"built_in\">format</span>(max_index,decrypt_c[max_index]))</span><br></pre></td></tr></table></figure>\n<p>我将 p 和 q 的长度设置为 1024 比特，然后根据题目要求编写代码，引用了 time 库使得程序运行更流程，引用 Paillier 里的三个函数完成密钥生成、加密和解密的过程。</p>\n<p>​\t最终将两个代码进行测试，<strong>代码完美完成预计任务</strong></p>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>​\t在本次实验中，通过编写和测试 Paillier 算法及其在匿名电子投票系统中的应用，我深刻理解了同态加密算法的原理和实际应用价值。通过实践，我掌握了 Paillier 算法的核心机制，包括密钥生成、加密、解密过程以及如何利用算法的加法同态性质。</p>\n<p>​\t首先，在密钥生成阶段，我学习到了选择合适的大素数 p 和 q，以及如何计算 N 和 λ，这些都是保证加密算法安全性的基础。选择随机数 g 的过程也让我认识到了在加密算法中引入随机性的重要性，这有助于提高算法的安全性。在编写加密和解密函数时，我通过实践深入理解了 Paillier 算法的数学原理，以及如何将理论应用到实际编程中。</p>\n<p>​\t通过将 Paillier 算法应用于模拟的匿名电子投票系统中，我体会到了同态加密算法在保护隐私信息方面的巨大潜力。在这个系统中，选民的投票选择得到了加密保护，同时还能够在不解密的情况下进行票数统计，这充分展示了 Paillier 算法加法同态性质的强大用途。</p>\n<p>​\t此外，我还学习到了算法的安全性分析，包括大素数分解问题和离散对数问题，这些都是算法安全性的理论基础。通过对这些数论难题的了解，我认识到了为什么 Paillier 算法被认为是安全的，并且可以在实际应用中提供强有力的数据保护。</p>\n<p>​\t总的来说，这次实验不仅让我对同态加密算法有了深入的了解，而且还让我体会到了将理论知识应用到实践中的重要性。我意识到，理论和实践相结合是理解和掌握复杂概念的关键。通过这次实验，我对加密算法的原理、实现以及在现实世界中的应用有了更加全面的认识，这将对我的未来学习和研究产生积极影响。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/README/",
            "url": "https://enjundu.github.io/README/",
            "title": "蓝天の留言",
            "date_published": "2024-07-03T04:20:00.000Z",
            "content_html": "<h1 id=\"欢迎光临\"><a class=\"markdownIt-Anchor\" href=\"#欢迎光临\">#</a> 欢迎光临</h1>\n<p><strong>本网站归属蓝天 ° 所有，禁止转载</strong></p>\n<p>如有问题 / 建议，欢迎 email:enjundu.cs@gmail.com</p>\n<p>暂时就这么多啦～</p>\n",
            "tags": []
        },
        {
            "id": "https://enjundu.github.io/llm-assert/1_PythonProjectTemplate-master/",
            "url": "https://enjundu.github.io/llm-assert/1_PythonProjectTemplate-master/",
            "title": "PythonProjectTemplate-master",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"测试llm的assert功能\"><a class=\"markdownIt-Anchor\" href=\"#测试llm的assert功能\">#</a> 测试 LLM 的 assert 功能</h1>\n<h2 id=\"1_pythonprojecttemplate-master\"><a class=\"markdownIt-Anchor\" href=\"#1_pythonprojecttemplate-master\">#</a> 1_<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZyYW5uZWNrOTQvUHl0aG9uUHJvamVjdFRlbXBsYXRl\">PythonProjectTemplate-master</span></h2>\n<p>运行 <code>pip install -e .</code>  和 <code>pytest tests</code>  后出现下图，表明本地构建和安装和测试项目成功。</p>\n<p>然后再运行 <code>pytest --cov=fastvector tests --cov-report=html</code>  来生成代码覆盖率报告</p>\n<img data-src=\"D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\0_readme_picture\\1.png\" alt=\"1\" style=\"zoom:50%;\" />\n<h3 id=\"test代码修改\"><a class=\"markdownIt-Anchor\" href=\"#test代码修改\">#</a> test 代码修改</h3>\n<h4 id=\"test初始代码\"><a class=\"markdownIt-Anchor\" href=\"#test初始代码\">#</a> test 初始代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test from values.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> exp == Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test add.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test sub.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul vec.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul float.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test abs.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test equality.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test less than.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> rhs &lt; lhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从 test 代码中我们可知：test_from_values、test_repr、test_str、test_add、test_sub、test_mul_vec、test_mul_float、test_div、test_abs、test_equality_other_class、test_less_than 中有 assert 语句。</p>\n<p>将 assert 语句删除，并且删掉提示字符串，然后将代码交给 gpt3.5 进行修改。</p>\n<p>提示语句为 “这个 test case 缺少 assert 语句 请补全”</p>\n<h4 id=\"test投喂代码\"><a class=\"markdownIt-Anchor\" href=\"#test投喂代码\">#</a> test 投喂代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"test代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test代码分析\">#</a> test 代码分析</h3>\n<p>gpt3.5 修改后的 test 语句为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Vector2D(x, y) == exp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs &lt; rhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"比对修改前后代码块的作用\"><a class=\"markdownIt-Anchor\" href=\"#比对修改前后代码块的作用\">#</a> 比对修改前后代码块的作用</h4>\n<ol>\n<li>\n<p>对于 <code>test_init_raises（）</code> 函数，其用于验证创建的 <code>Vector2D</code>  对象是否与预期结果 <code>exp</code>  相等。—— 修改前后代码作用相同</p>\n</li>\n<li>\n<p>对于 <code>test_repr和test_str</code>  函数：<br>\n修改前：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其作用为验证 Vector2D 对象的’__repr__' 方法的输出。通过建立字典 capture_stdout 来捕获 capture_stdout。<em>print 函数的目的为将  <code>Vector2D(1.0, 2.0)</code>  对象的  <code>__repr__</code>  方法的输出打印到标准输出。以便实际使用时开发者可以看到程序输出结果，帮助理解程序执行的结果和确保  <code>__repr__</code>  方法的实现符合预期。</em> 然后使用     <code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n</code> &quot; 来验证捕获的输出与预期输出是否相符。<br>\ngpt3.5 补充后：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><strong>功能减少</strong>：一般来说为了符合开发者调试，test 时需要 print 函数以便开发者了解程序的输出，gpt 填充的 assert 里忽略了 print，直接对比返回值，其只适用于 <code>repr</code>  和 <code>str</code>  函数的输出场景</li>\n<li><strong>调试困难</strong>：如果我们 assert 报错后，最初的代码可以通过 print 来留下更多的调试信息，而 gpt 生成的返回值无法做到这一步，需要额外增加 print 代码来了解报错原因</li>\n</ul>\n<p><strong>改进</strong>：当我们给 gpt 输入：“这个 test case 缺少 assert 语句 请补全，要求调试的过程中方便开发者直观看到输出过程” 后，代码输出增加了 print 语句，优化成功。</p>\n</li>\n<li>\n<p><code>test_add</code>  和 <code>test_sub</code>  和 <code>test_mul_float``test_div</code>  和’test_abs’和’test_less_than’函数：验证两个 <code>Vector2D</code>  对象相加 / 减 / 乘 / 除 / 取绝对值 / 是否小于的结果是否与预期结果相等。gpt 改后与之前效果相同。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/3_robotframework-webservice-master/",
            "url": "https://enjundu.github.io/llm-assert/3_robotframework-webservice-master/",
            "title": "robotframework-webservice",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"robotframework-webservice\"><a class=\"markdownIt-Anchor\" href=\"#robotframework-webservice\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtldFNxdWFyZS9yb2JvdGZyYW1ld29yay13ZWJzZXJ2aWNl\">robotframework-webservice</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>一个管理 Robot Framework 任务 / 测试的 Web 服务。</li>\n<li>该 Web 服务应启动 Robot Framework 的任务 / 测试，并返回并缓存相应的报告。</li>\n<li>运行：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install robotframework-webservice</span><br><span class=\"line\">python -m RobotFrameworkService.main -p <span class=\"number\">5003</span> -t path_to_my_taskfolder</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:5003/robotframework/run/mytask //调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask?myVariable1=42&amp;anotherVariable=Mustermann //带变量调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接在任务/测试的持续时间内保持打开状态</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask</span><br><span class=\"line\"></span><br><span class=\"line\"># 立即关闭连接 - 结果必须使用 x-request-id 请求</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask/async</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>调用 Robot 测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;test&quot;: &quot;Demonstration Test&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调用 Robot 任务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Demonstration Task&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>带变量调用 Robot 任务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Task with more variables&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;variables&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;firstname&quot;: &quot;Max&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;lastname&quot;: &quot;Mustermann&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动本地 Web 服务：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> <span class=\"attr\">--help</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> -<span class=\"selector-tag\">p</span> <span class=\"number\">5003</span> -t path_to_my_taskfolder <span class=\"comment\">// example</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"test_apppy修改操作\"><a class=\"markdownIt-Anchor\" href=\"#test_apppy修改操作\">#</a> test_app.py 修改操作</h2>\n<h3 id=\"原本的testpy代码\"><a class=\"markdownIt-Anchor\" href=\"#原本的testpy代码\">#</a> 原本的 test.py 代码:</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, logs_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, report_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">400</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;Options test and task cannot be both specified&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;paths&quot;</span>: [<span class=\"string\">&quot;examples&quot;</span>], <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">&quot;/robotframework/logs/not_existing&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">404</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;The logs not_existing not existing or being generating&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">f&quot;/robotframework/logs/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">204</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        self.assertEqual(expected_response_code, response.status_code, response.text)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertNotIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, msg=msg)</span><br><span class=\"line\">        self.assertIn(</span><br><span class=\"line\">            <span class=\"string\">&quot;PASS&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains neither PASS nor FAIL&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains FAIL&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"投喂给gpt35的test代码\"><a class=\"markdownIt-Anchor\" href=\"#投喂给gpt35的test代码\">#</a> 投喂给 gpt3.5 的 test 代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt自动填充后的testpy\"><a class=\"markdownIt-Anchor\" href=\"#gpt自动填充后的testpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1ncHR0ZXN0LWpiOWs2Nmhsd2U5OXAxNTFneTc0YS5weQ==\">gpt 自动填充后的 test.py</span></h3>\n<p><strong>将上述代码喂给 chatgpt3.5，并附加 base prompt: 该 tests case 缺少 assert 断言 请你自动补充</strong></p>\n<p>生成的 test.py 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTests</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Service is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为400</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">400</span>, <span class=\"string\">&quot;Expected response code 400&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with variables failed&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> logs_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> report_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Report is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 尚未实现</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            delete_response = client.delete(<span class=\"string\">f&quot;/robotframework/delete_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> delete_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not deleted&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为预期的状态码</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> response.status_code == expected_response_code, <span class=\"string\">f&quot;Expected response code <span class=\"subst\">&#123;expected_response_code&#125;</span>, got <span class=\"subst\">&#123;response.status_code&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否成功（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;passed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not pass&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否失败（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;failed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not fail&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/2_cronex-master/",
            "url": "https://enjundu.github.io/llm-assert/2_cronex-master/",
            "title": "cronex",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"cronex\"><a class=\"markdownIt-Anchor\" href=\"#cronex\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VyaWNwcnVpdHQvY3JvbmV4\">cronex</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>用于类 corn 任务调度的 Python 模块，提供一个接口用于评估和触发 corn 表达式。</p>\n<ul>\n<li>类 corn 任务：Cron 是一种时间表驱动的任务调度程序，用于在特定的时间和日期执行任务。</li>\n<li><strong>Corn</strong> 表达式：由 5~6 个字段组成，分别表示分钟、小时、日、月、星期和可选的年份</li>\n</ul>\n<p>其表达式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *  command to be executed</span><br><span class=\"line\">- - - - -</span><br><span class=\"line\">| | | | |</span><br><span class=\"line\">| | | | ----- 星期 (<span class=\"number\">0</span> - <span class=\"number\">7</span>) (星期日 = <span class=\"number\">0</span> 或 <span class=\"number\">7</span>)</span><br><span class=\"line\">| | | ------- 月份 (<span class=\"number\">1</span> - <span class=\"number\">12</span>)</span><br><span class=\"line\">| | --------- 月中的日期 (<span class=\"number\">1</span> - <span class=\"number\">31</span>)</span><br><span class=\"line\">| ----------- 小时 (<span class=\"number\">0</span> - <span class=\"number\">23</span>)</span><br><span class=\"line\">------------- 分钟 (<span class=\"number\">0</span> - <span class=\"number\">59</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> * * * /path/to/command <span class=\"comment\">#表示每天凌晨1点执行某个命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cronex功能\"><a class=\"markdownIt-Anchor\" href=\"#cronex功能\">#</a> cronex 功能</h3>\n<ul>\n<li>支持 Java Quartz 的特殊字符，如 &quot;L&quot;、“W&quot;和”#&quot;。</li>\n<li>允许设定任意间隔的触发器，例如每 9 小时，每 11 分钟等。</li>\n<li>示例代码：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job = CronExpression(<span class=\"string\">&quot;0 0 * * 1-5/2 find /var/log -delete&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2012</span>, <span class=\"number\">12</span>, <span class=\"number\">21</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n<p>这里的 CronExpression (“0 0 * * 1-5/2 find /var/log -delete”) 创建了一个  <code>CronExpression</code>  对象，其 cron 表达式为 <code>0 0 * * 1-5/2</code></p>\n<ul>\n<li><code>0 0</code> ：每天的 00:00</li>\n<li><code>* *</code> : 每个月的每一天</li>\n<li><code>1-5/2</code> : 星期一到星期五中每隔一天</li>\n<li><code>find /var/log -delete</code> ：命令部分</li>\n</ul>\n<p>当给这个 job 传递参数 job.check_trigger ((2010, 11, 17, 0, 0)) 时：</p>\n<ul>\n<li>日期时间：2010 年 11 月 17 日 00:00</li>\n<li>星期三符合周一～周五间隔一天</li>\n<li>符合 corn 表达式条件，输出 True</li>\n</ul>\n<h2 id=\"testspy代码处理\"><a class=\"markdownIt-Anchor\" href=\"#testspy代码处理\">#</a> tests.py 代码处理</h2>\n<h3 id=\"更正说明\"><a class=\"markdownIt-Anchor\" href=\"#更正说明\">#</a> 更正说明</h3>\n<p>由于本人的 python 版本是 3.12，直接运行 tests.py 会报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\20_cronex-master\\cronex-master\\cronex\\tests.py&quot;</span>, line <span class=\"number\">397</span>, <span class=\"keyword\">in</span> test_catches_bad_L</span><br><span class=\"line\">    self.failUnlessRaises(ValueError,</span><br><span class=\"line\">    ^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\">AttributeError: <span class=\"string\">&#x27;test_testedmodule&#x27;</span> <span class=\"built_in\">object</span> has no attribute <span class=\"string\">&#x27;failUnlessRaises&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>原因是 <code>unittest.TestCase</code>  类中没有名为  <code>failUnlessRaises</code>  的方法</p>\n<p>这是由于该代码使用了旧版本  <code>unittest</code>  中的方法名称，现在应该使用  <code>assertRaises</code>  方法。</p>\n<p>更正后的 tests.py 代码如下：</p>\n<h3 id=\"debug后的tests\"><a class=\"markdownIt-Anchor\" href=\"#debug后的tests\">#</a> debug 后的 tests</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            obj = cronex.CronExpression(a)</span><br><span class=\"line\">            self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that calling compute_numtab after modifying the string-version</span></span><br><span class=\"line\"><span class=\"string\">        of an expression results in the static trigger-value cache being</span></span><br><span class=\"line\"><span class=\"string\">        updated.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the day-of-the-month field</span></span><br><span class=\"line\"><span class=\"string\">        work as expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the hours field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the minutes field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the month field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected. More specifically, it verifies that the repeaters are</span></span><br><span class=\"line\"><span class=\"string\">        triggered every &quot;N&quot; calendar months regardless of the day for triggers</span></span><br><span class=\"line\"><span class=\"string\">        set to go offer every 1 month, ever 2 months, etc... through 18 months</span></span><br><span class=\"line\"><span class=\"string\">        from 1970 through 1980.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(should_trigger, triggered,</span><br><span class=\"line\">                            <span class=\"string\">&quot;%s: expected trigger to be %r for %r&quot;</span> %</span><br><span class=\"line\">                            (description, should_trigger, time_tuple)</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that parsing atoms returns sets containing all of the expected</span></span><br><span class=\"line\"><span class=\"string\">        values.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(want_from_function,</span><br><span class=\"line\">                cronex.parse_atom(*give_the_function))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the __repr__ and __str__ return values can be passed to</span></span><br><span class=\"line\"><span class=\"string\">        eval to generate an identical CronExpression.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.comment, testex2.comment)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">str</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened month names are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened days-of-the-week are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that combining day of-the-month field and day-of-the-week field</span></span><br><span class=\"line\"><span class=\"string\">        triggers on either condition matching the current day and that using a</span></span><br><span class=\"line\"><span class=\"string\">        wild-card day of the month with a day of the week entry doesn&#x27;t trigger</span></span><br><span class=\"line\"><span class=\"string\">        every single day.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> e <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">22</span>, <span class=\"number\">29</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"comment\"># In July of 2014, every Wednesday just happens to be on a day of</span></span><br><span class=\"line\">            <span class=\"comment\"># the month that&#x27;s a multiple of 7.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(d % <span class=\"number\">7</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-week field with a number always</span></span><br><span class=\"line\"><span class=\"string\">        triggers on last occurrence of the corresponding day of the week in any</span></span><br><span class=\"line\"><span class=\"string\">        given month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">12</span>):</span><br><span class=\"line\">            self.assertTrue((testex.check_trigger((<span class=\"number\">2010</span>, v+<span class=\"number\">1</span>, tv[v], <span class=\"number\">0</span>, <span class=\"number\">0</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-month field always triggers on</span></span><br><span class=\"line\"><span class=\"string\">        the last day of the month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> d &lt; lastdom:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        self.assertTrue(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that a periodic trigger for the day of the month is based on</span></span><br><span class=\"line\"><span class=\"string\">        calendar days, not 24-hour days.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time, -<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that asterisk cannot be combined with other atoms.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* *,1-9 * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that using &quot;#&quot; to find the Nth occurrence of a given day of the</span></span><br><span class=\"line\"><span class=\"string\">        week works correctly.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># There can never be more than 5 occurrences of a given day</span></span><br><span class=\"line\">                    <span class=\"comment\"># of the week in one month.</span></span><br><span class=\"line\">                    self.assertRaises(ValueError, cronex.CronExpression,</span><br><span class=\"line\">                                      expression)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(</span><br><span class=\"line\">                        (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day - <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day + <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having numbers outside of the reasonable ranges for each</span></span><br><span class=\"line\"><span class=\"string\">        field raises an exception. Tests both upper and lower bounds.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;1000 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* 1000 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 1000 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 1000 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * 1000&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;-1 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* -1 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 0 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 0 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * -1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a trigger with an invalid repetition period raises</span></span><br><span class=\"line\"><span class=\"string\">        an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;W&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;L&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;#&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that an exception is thrown when the cron expression has too few</span></span><br><span class=\"line\"><span class=\"string\">        fields.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError, cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在去除所有 assert 语句，并将去除 assert 后的 tests 代码补全逻辑后，得到</p>\n<h3 id=\"去除assert及相关提示后的tests_code\"><a class=\"markdownIt-Anchor\" href=\"#去除assert及相关提示后的tests_code\">#</a> 去除 assert 及相关提示后的 tests_code</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            cronex.parse_atom(*give_the_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt35生成补全后的tests\"><a class=\"markdownIt-Anchor\" href=\"#gpt35生成补全后的tests\">#</a> gpt3.5 生成补全后的 tests</h3>\n<p>将 tests_code 投喂给 gpt3.5，并且附上 prompt 该 tests case 缺少 assert 语句，请你自动补全</p>\n<p>补全后的代码为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">            self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(triggered, should_trigger)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(cronex.parse_atom(*give_the_function), want_from_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (now[<span class=\"number\">2</span>] == <span class=\"number\">5</span> <span class=\"keyword\">or</span> time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Mon&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Wed&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, day <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tv):</span><br><span class=\"line\">            now = (<span class=\"number\">2010</span>, i + <span class=\"number\">1</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 and verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at least</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    now = (y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (d == lastdom))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * * * *&quot;</span>)</span><br><span class=\"line\">        now = time.gmtime()</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertFalse(testex.check_trigger(now))</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (day &lt;= calendar.monthrange(<span class=\"number\">2024</span>, <span class=\"number\">7</span>)[-<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">            cronex.CronExpression(<span class=\"string\">&quot;*/61 * * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"gpt自动填充后assert的优缺点分析\"><a class=\"markdownIt-Anchor\" href=\"#gpt自动填充后assert的优缺点分析\">#</a> gpt 自动填充后 assert 的优缺点分析</h2>\n<h3 id=\"填充优秀部分\"><a class=\"markdownIt-Anchor\" href=\"#填充优秀部分\">#</a> 填充优秀部分：</h3>\n<h4 id=\"1test_substitution\"><a class=\"markdownIt-Anchor\" href=\"#1test_substitution\">#</a> 1.test_substitution()</h4>\n<p><strong>tests 原代码块函数</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        obj = cronex.CronExpression(a)</span><br><span class=\"line\">        self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br></pre></td></tr></table></figure>\n<p><strong>gpt3.5 自动填充的代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原本的 test 代码中使用 assertTrue 来验证特殊替换后的字符串是否在 <code>obj</code>  的 <code>repr</code>  中存在，通过检查 <code>repr(obj)</code>  的输出来间接验证该特殊替换是否正确</li>\n<li>而 gpt 填充的代码直接使用 assertEqual 来验证 <code>cron_expression</code>  对象的 <code>str()</code>  方法是否生成了预期的替换后的 cron 表达式。使用 asserEqual 来判断两个值是否相等</li>\n<li>gpt 自动填充的代码更优秀 —— 其使用 special 和 expected 来作为变量名，更直观和可读。并且它不依赖于间接验证  <code>repr</code>  的输出是否包含特定字符串，而是直接检查  <code>str()</code>  方法生成的输出是否符合预期。通过直接比较字符串可以更清晰地表达测试的意图和预期结果，使得测试代码更易于理解和维护。</li>\n<li>综上所述，在 <code>test_substitution</code>  函数上，gpt 生成的代码更加优秀。</li>\n</ul>\n<h3 id=\"填充后不足有缺陷部分\"><a class=\"markdownIt-Anchor\" href=\"#填充后不足有缺陷部分\">#</a> 填充后不足 / 有缺陷部分</h3>\n<h4 id=\"1-test_compute_numtab\"><a class=\"markdownIt-Anchor\" href=\"#1-test_compute_numtab\">#</a> 1. test_compute_numtab（）</h4>\n<p><strong>tests 原代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br></pre></td></tr></table></figure>\n<p><strong>gpt3.5 自动填充代码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原代码验证在修改表达式的字符串版本后调用 compute_numtab 是否会更新静态触发器值缓存。</li>\n<li>原代码在最开始先通过两个 <code>assertNotEqual</code>  确保 <code>testex1</code>  和 <code>testex2</code>  在初始化时候的  <code>string_tab</code>  属性和 <code>numerical_tab</code>  属性是不同的，然后再将  <code>testex1</code>  的  <code>string_tab</code>  属性设置为  <code>testex2</code>  的  <code>string_tab</code>  属性，人为的使  <code>testex1</code>  和  <code>testex2</code>  在字符串表示上相同。然后再来测试 <code>compute_numtab</code>  的效果，即重新计算 <code>testex1</code>  的数值表示，然后再验证 <code>testex1</code>  和 <code>testex2</code>  在修改后的属性是相同的</li>\n<li>gpt3.5 填充的代码相较而言只考虑到了 testex1=testex2 后调用 compute_numtab 函数后两个 testex 的 string_tab 是否相同</li>\n<li>LLM 自动生成的代码相较而言考虑的并不全面，虽然其足以验证基本的功能，但是没有考虑到验证 <code>testex1</code>  和  <code>testex2</code>  的字符串表和数值表不相等，和验证验证 <code>testex1</code>  和  <code>testex2</code>  修改后字符表相等，并不全面</li>\n<li><strong>修改建议</strong>：给 gpt3.5 增加更详细的 prompt，比如告诉 gpt 需要在自动填充 assert 的时候考虑得更全面，充分的考虑到所有情况，避免出现因为过度考虑性能而忽视设计周密的情况。</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/4_oj-master/",
            "url": "https://enjundu.github.io/llm-assert/4_oj-master/",
            "title": "online-judge-tools/oj",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"online-judge-toolsoj\"><a class=\"markdownIt-Anchor\" href=\"#online-judge-toolsoj\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29ubGluZS1qdWRnZS10b29scy9vag==\">online-judge-tools/oj</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li><code>oj</code>  是一个帮助解决各种在线评测问题命令。此命令会自动下载示例案例、生成其他测试案例、测试您的代码并提交。</li>\n<li>使用 <code>python setup.py install</code>  安装该第三方库</li>\n<li>使用介绍：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positional arguments:</span><br><span class=\"line\">  &#123;download,d,dl,login,l,submit,s,test,t,generate-output,g/o,generate-<span class=\"built_in\">input</span>,g/i,test-reactive,t/r,test-interactive,t/i&#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> details, see <span class=\"string\">&quot;\\\\?\\F:\\Anaconda\\envs\\py312\\Scripts\\oj COMMAND --help&quot;</span></span><br><span class=\"line\">    download (d, dl)    download sample cases</span><br><span class=\"line\">    login (l)           login to a service</span><br><span class=\"line\">    submit (s)          submit your solution</span><br><span class=\"line\">    test (t)            test your code</span><br><span class=\"line\">    generate-output (g/o)</span><br><span class=\"line\">                        generate output files <span class=\"keyword\">from</span> <span class=\"built_in\">input</span> <span class=\"keyword\">and</span> reference implementation</span><br><span class=\"line\">    generate-<span class=\"built_in\">input</span> (g/i)</span><br><span class=\"line\">                        generate <span class=\"built_in\">input</span> files <span class=\"keyword\">from</span> given generator</span><br><span class=\"line\">    test-reactive (t/r, test-interactive, t/i)</span><br><span class=\"line\">                        test <span class=\"keyword\">for</span> interactive problem</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>            show this <span class=\"built_in\">help</span> message <span class=\"keyword\">and</span> exit</span><br><span class=\"line\">  -v, --verbose</span><br><span class=\"line\">  -c COOKIE, --cookie COOKIE</span><br><span class=\"line\">                        path to cookie. (default: C:\\Users\\JackDu\\AppData\\Local\\online-judge-tools\\online-judge-tools\\cookie.jar)</span><br><span class=\"line\">  --version             <span class=\"built_in\">print</span> the online-judge-tools version number</span><br><span class=\"line\"></span><br><span class=\"line\">tips:</span><br><span class=\"line\">  The official tutorial exists on the web: https://github.com/online-judge-tools/oj/blob/master/docs/getting-started.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"command_downloadpy代码修改\"><a class=\"markdownIt-Anchor\" href=\"#command_downloadpy代码修改\">#</a> command_download.py 代码修改</h2>\n<h3 id=\"原本的command_downloadpy代码\"><a class=\"markdownIt-Anchor\" href=\"#原本的command_downloadpy代码\">#</a> 原本的 command_download.py 代码：</h3>\n<p>base prompt 为：“我这个 test case 缺少 assert 语句，请你帮我自动填充。”</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    args = get_parser().parse_args(args=args)</span><br><span class=\"line\">    self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        self.assertTrue(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        <span class=\"comment\"># download from url2 should be aborted.</span></span><br><span class=\"line\">        self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check download from url1 is not overwritten</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"移除assert断言后的command_downloadpy代码\"><a class=\"markdownIt-Anchor\" href=\"#移除assert断言后的command_downloadpy代码\">#</a> 移除 assert 断言后的 command_download.py 代码</h3>\n<p>移除 assert 断言和部分提示后，我们发送给 LLM 的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert语句后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert语句后的代码\">#</a> LLM 自动填充 assert 语句后的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> self.assertRaises(SystemExit):</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/5_giskard-main/",
            "url": "https://enjundu.github.io/llm-assert/5_giskard-main/",
            "title": "Giskard-AI/giskard",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"giskard-aigiskard\"><a class=\"markdownIt-Anchor\" href=\"#giskard-aigiskard\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpc2thcmQtQUkvZ2lza2FyZA==\">Giskard-AI/giskard</span></h1>\n<h2 id=\"test_data_processing_pipelinepy3代码处理\"><a class=\"markdownIt-Anchor\" href=\"#test_data_processing_pipelinepy3代码处理\">#</a> test_data_processing_pipeline.py3 代码处理</h2>\n<h3 id=\"原test代码\"><a class=\"markdownIt-Anchor\" href=\"#原test代码\">#</a> 原 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> transformed_dataset.df.iloc[<span class=\"number\">0</span>].text == <span class=\"string\">&quot;testing. I love this!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"去除assert后的代码\"><a class=\"markdownIt-Anchor\" href=\"#去除assert后的代码\">#</a> 去除 assert 后的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt35自动填充的代码\"><a class=\"markdownIt-Anchor\" href=\"#gpt35自动填充的代码\">#</a> gpt3.5 自动填充的代码</h3>\n<p><strong>base prompt 为</strong>：我这个 tests 代码缺少 assert 断言，请你自动填充</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(transformed_dataset) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/7_ttach-master/",
            "url": "https://enjundu.github.io/llm-assert/7_ttach-master/",
            "title": "ttach",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"ttach\"><a class=\"markdownIt-Anchor\" href=\"#ttach\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3F1YnZlbC90dGFjaA==\">ttach</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>使用 PyTorch 进行图像测试时间增强</li>\n<li>与数据增强对训练集的作用类似，测试时增强的目的是对测试图像进行随机修改。因此，我们不会只向训练模型显示一次</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Input</span><br><span class=\"line\">      |           <span class=\"comment\"># input batch of images </span></span><br><span class=\"line\"> / / /|\\ \\ \\      <span class=\"comment\"># apply augmentations (flips, rotation, scale, etc.)</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># pass augmented batches through model</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># reverse transformations for each batch of masks/labels</span></span><br><span class=\"line\"> \\ \\ \\ / / /      <span class=\"comment\"># merge predictions (mean, max, gmean, etc.)</span></span><br><span class=\"line\">      |           <span class=\"comment\"># output batch of masks/labels</span></span><br><span class=\"line\">    Output</span><br></pre></td></tr></table></figure>\n<h2 id=\"test_transformspy代码填充分析\"><a class=\"markdownIt-Anchor\" href=\"#test_transformspy代码填充分析\">#</a> test_transforms.py 代码填充分析</h2>\n<h3 id=\"test_transformspy原码\"><a class=\"markdownIt-Anchor\" href=\"#test_transformspy原码\">#</a> test_transforms.py 原码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a + p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a * p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert断言给llm分析的代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert断言给llm分析的代码\">#</a> 删除 assert 断言给 LLM 分析的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape == deaug.shape, <span class=\"string\">f&quot;Shape mismatch after augmentation-deaugmentation for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a[<span class=\"number\">0</span>, <span class=\"number\">0</span>], aug[<span class=\"number\">0</span>, <span class=\"number\">0</span>]), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">    transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape[<span class=\"number\">2</span>:] == p, <span class=\"string\">f&quot;Augmented image shape does not match expected shape <span class=\"subst\">&#123;p&#125;</span> for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/9_sumeval-master/",
            "url": "https://enjundu.github.io/llm-assert/9_sumeval-master/",
            "title": "sumeval",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"sumeval\"><a class=\"markdownIt-Anchor\" href=\"#sumeval\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFs\">sumeval</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>不仅支持英文，还支持日文和中文，其他语言也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFsI3dlbGNvbWUtY29udHJpYnV0aW9uLXRhZGE=\">轻松</span>扩展</li>\n<li>使用方法 <code>pip install sumeval</code></li>\n</ul>\n<h2 id=\"test_rougepy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_rougepy代码分析\">#</a> test_rouge.py 代码分析</h2>\n<h3 id=\"test_rougepy原代码\"><a class=\"markdownIt-Anchor\" href=\"#test_rougepy原代码\">#</a> test_rouge.py 原代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-L-F&quot;</span>] - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"去掉assert断言和一些辅助说明后喂给llm的test代码\"><a class=\"markdownIt-Anchor\" href=\"#去掉assert断言和一些辅助说明后喂给llm的test代码\">#</a> 去掉 assert 断言和一些辅助说明后喂给 LLM 的 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/8_pytorch-lr-finder-master/",
            "url": "https://enjundu.github.io/llm-assert/8_pytorch-lr-finder-master/",
            "title": "pytorch-lr-finder",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"pytorch-lr-finder\"><a class=\"markdownIt-Anchor\" href=\"#pytorch-lr-finder\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkdHZzL3B5dG9yY2gtbHItZmluZGVy\">pytorch-lr-finder</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>\n<p>该项目为 PyTorch 学习率查找器</p>\n</li>\n<li>\n<p>学习率范围测试是一种提供有关最佳学习率的宝贵信息的测试。在预训练运行期间，学习率在两个边界之间线性或指数增加。较低的初始学习率允许网络开始收敛，随着学习率的增加，它最终会变得太大，网络会发散。</p>\n</li>\n<li>\n<p>来自 fastai 的调整版本：以指数方式增加学习率并计算每个学习率的训练损失。 <code>lr_finder.plot()</code>  绘制训练损失与对数学习率的关系。</p>\n</li>\n<li>\n<p>Leslie Smith 的方法：线性增加学习率并计算每个学习率的评估损失。 <code>lr_finder.plot()</code>  绘制评估损失与学习率的关系图。这种方法通常会产生更精确的曲线，因为评估损失更容易发散，但执行测试所需的时间会更长，尤其是在评估数据集很大的情况下。</p>\n<h2 id=\"test_lr_finderpy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_lr_finderpy代码分析\">#</a> test_lr_finder.py 代码分析</h2>\n<h3 id=\"该test原代码\"><a class=\"markdownIt-Anchor\" href=\"#该test原代码\">#</a> 该 test 原代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Run a `DataLoaderIter` object for specific times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Arguments:</span></span><br><span class=\"line\"><span class=\"string\">        loader_iter (torch_lr_finder.DataLoaderIter): the iterator to test.</span></span><br><span class=\"line\"><span class=\"string\">        desired_runs (int, optional): times that iterator should be iterated.</span></span><br><span class=\"line\"><span class=\"string\">            If it&#x27;s not given, `len(loader_iter.data_loader)` will be used.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        is_achieved (bool): False if `loader_iter` cannot be iterated specific</span></span><br><span class=\"line\"><span class=\"string\">            times. It usually means `loader_iter` has raised `StopIteration`.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(loader_iter, DataLoaderIter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> init_lrs == restored_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">2e-5</span>, <span class=\"number\">3e-5</span>, <span class=\"number\">4e-5</span>, <span class=\"number\">5e-5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">1e-4</span>, <span class=\"number\">1e-3</span>, <span class=\"number\">1e-2</span>, <span class=\"number\">0.1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> We are using smaller batch size to simulate a large batch.</span></span><br><span class=\"line\">        <span class=\"comment\"># So that the actual times of model/criterion called should be</span></span><br><span class=\"line\">        <span class=\"comment\"># `(desired_bs/real_bs) * num_iter` == `accum_steps * num_iter`</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">hasattr</span>(task.optimizer, <span class=\"string\">&quot;_amp_stash&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `TrainDataLoaderIter` can reset itself, so that it&#x27;s ok to reuse it</span></span><br><span class=\"line\">        <span class=\"comment\"># directly and iterate it more than `len(dataloader)` times.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t reset itself, so this should be False if</span></span><br><span class=\"line\">        <span class=\"comment\"># we re-run it without resetting it.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Reset it by `iter()`</span></span><br><span class=\"line\">        loader_iter = <span class=\"built_in\">iter</span>(loader_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t be iterated more than `len(dataloader)` times</span></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert和必要提示后上传llm的代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert和必要提示后上传llm的代码\">#</a> 删除 assert 和必要提示后上传 LLM 的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert后的代码\">#</a> LLM 自动填充 assert 后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> restored_lrs == init_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecisionWithTorchAMP</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"keyword\">not</span> mod_task.use_cuda(<span class=\"params\"></span>), reason=<span class=\"string\">&quot;CUDA GPU is required to run these tests.&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMultiPhase</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_multi_phase</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Simulate a change in LR and perform another phase of LR range test</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> param_group <span class=\"keyword\">in</span> task.optimizer.param_groups:</span><br><span class=\"line\">            param_group[<span class=\"string\">&quot;lr&quot;</span>] *= <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>, reset_lr=<span class=\"literal\">False</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/X_artificial-adversary-master/",
            "url": "https://enjundu.github.io/llm-assert/X_artificial-adversary-master/",
            "title": "artificial-adversary",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"artificial-adversary\"><a class=\"markdownIt-Anchor\" href=\"#artificial-adversary\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9hcnRpZmljaWFsLWFkdmVyc2FyeQ==\">artificial-adversary</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>在对用户生成的文本进行分类时，用户可以通过多种方式修改其内容以避免被检测到。这些方法通常是对文本进行表面修改，即更改所使用的原始字符或单词，但保留足够明显的原始含义以供人类读者理解。这些方法包括用相似的字符替换字符、删除或添加标点和空格以及交换单词中的字母。例如，这 <code>please wire me 10,000 US DOLLARS to bank of scamland</code>  可能是一条明显的诈骗信息，但 <code>pl3@se.wire me 10000 US DoLars to,BANK of ScamIand</code>  可以欺骗许多分类器。</li>\n<li>安装：</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> Adversary</span><br><span class=\"line\">python -m textblob.download_corpora</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>用于数据集增强</strong></li>\n<li><strong>对于性能界限</strong></li>\n</ul>\n<h2 id=\"test_allpy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_allpy代码分析\">#</a> test_all.py 代码分析</h2>\n<h3 id=\"test_allpy源码\"><a class=\"markdownIt-Anchor\" href=\"#test_allpy源码\">#</a> test_all.py 源码</h3>\n<p><strong>将 <code>test_adversary.py</code> 、 <code>test_attacks.py</code> 、 <code>test_utils.py</code>  三个代码三合一后，我创建了 test_all.py 代码，源码如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (<span class=\"built_in\">len</span>(g) == <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;1&#x27;</span>) == <span class=\"string\">&#x27;one&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;dog&#x27;</span>) == <span class=\"string\">&#x27;dog&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(flatten_unique(l) == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(combinations_of_len(l, <span class=\"number\">2</span>) == [(<span class=\"number\">1</span>,), (<span class=\"number\">2</span>,), (<span class=\"number\">3</span>,), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(fancy_titles(cols) == [<span class=\"string\">&#x27;Change Case&#x27;</span>, <span class=\"string\">&#x27;Insert Duplicate Characters&#x27;</span>, <span class=\"string\">&#x27;Synonym&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert语句的test代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert语句的test代码\">#</a> 删除 assert 语句的 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert语句后的test代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert语句后的test代码\">#</a> LLM 自动填充 assert 语句后的 test 代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  <span class=\"comment\"># Add assertions when implemented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    flat_list = flatten_unique(l)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flat_list) == <span class=\"number\">5</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    combs = combinations_of_len(l, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(combs) == <span class=\"number\">3</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    titles = fancy_titles(cols)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(titles) == <span class=\"built_in\">len</span>(cols)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/llm-assert/1/",
            "url": "https://enjundu.github.io/llm-assert/1/",
            "title": "研究方法",
            "date_published": "2024-07-02T18:07:35.000Z",
            "content_html": "<h3 id=\"分析和理解步骤\"><a class=\"markdownIt-Anchor\" href=\"#分析和理解步骤\">#</a> 分析和理解步骤</h3>\n<h4 id=\"第一步找10个项目每个随机选10个左右的test-case包含assert\"><a class=\"markdownIt-Anchor\" href=\"#第一步找10个项目每个随机选10个左右的test-case包含assert\">#</a> 第一步：找 10 个项目每个随机选 10 个左右的 test case（包含 assert）</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>找 10 个项目</strong>：我们需要选择 10 个开源项目，这些项目应该包含单元测试，并且测试用例使用了 assert 语句。</li>\n<li><strong>随机选 10 个左右的 test case</strong>：从每个项目中随机选择大约 10 个测试用例。每个测试用例必须包含至少一个 assert 语句。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>在 GitHub 等平台上寻找 10 个开源项目。</li>\n<li>确保这些项目有单元测试（通常在 <code>tests</code>  目录下）。</li>\n<li>在每个项目中随机选择 10 个包含 assert 语句的测试用例。</li>\n</ul>\n<h4 id=\"第二步把test-case中的assert去掉\"><a class=\"markdownIt-Anchor\" href=\"#第二步把test-case中的assert去掉\">#</a> 第二步：把 test case 中的 assert 去掉</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>去掉 assert 语句</strong>：编辑选中的测试用例，删除其中的 assert 语句。这意味着我们要修改测试用例，使其保留其他逻辑，但去除验证部分。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>打开每个测试用例文件，找到 assert 语句。</li>\n<li>删除 assert 语句，保留其他代码。</li>\n</ul>\n<h4 id=\"第三步用llm补全assert\"><a class=\"markdownIt-Anchor\" href=\"#第三步用llm补全assert\">#</a> 第三步：用 LLM 补全 assert</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>用 LLM 补全</strong>：将去掉 assert 语句的测试用例输入到大语言模型（LLM）中，让它自动补全缺失的 assert 语句。这里的 LLM 可以是一个经过训练的自然语言处理模型，例如 GPT-4。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>将去掉 assert 语句的测试用例逐个输入到 LLM 中。</li>\n<li>让 LLM 根据上下文补全 assert 语句。</li>\n</ul>\n<h4 id=\"第四步看看结果是什么样子\"><a class=\"markdownIt-Anchor\" href=\"#第四步看看结果是什么样子\">#</a> 第四步：看看结果是什么样子</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>查看结果</strong>：获取 LLM 补全后的测试用例，并对比原始测试用例，查看 LLM 补全的 assert 语句的正确性和合理性。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>比较 LLM 补全的 assert 语句和原始 assert 语句。</li>\n<li>记录 LLM 补全效果好的地方和不足之处。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><strong>完整过程</strong>：</p>\n<ol>\n<li>找 10 个开源项目，每个项目中随机选 10 个包含 assert 语句的测试用例。</li>\n<li>去掉这些测试用例中的 assert 语句，保留其他代码。</li>\n<li>使用 LLM 对去掉 assert 语句的测试用例进行补全，让 LLM 自动生成 assert 语句。</li>\n<li>对比 LLM 补全的结果与原始测试用例，分析 LLM 的表现。</li>\n</ol>\n<p>这个过程将帮助我们评估 LLM 在自动补全测试用例中 assert 语句的能力，并找出其优缺点，以便进一步改进和优化。</p>\n<h3 id=\"示例具体操作假设性示例\"><a class=\"markdownIt-Anchor\" href=\"#示例具体操作假设性示例\">#</a> 示例具体操作（假设性示例）</h3>\n<p>假设我们从一个项目中选取了以下测试用例：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"attribute\">assert</span> result == <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>去掉 assert 语句后：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># assert result == 12</span></span><br></pre></td></tr></table></figure>\n<p>输入 LLM 进行补全后，假设 LLM 生成的结果是：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"built_in\">result</span> = <span class=\"built_in\">multiply</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    assert <span class=\"built_in\">result</span> == <span class=\"number\">12</span>  <span class=\"comment\"># LLM补全</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><strong>正确性</strong>：LLM 正确地补全了 assert 语句，与原始测试用例一致。</li>\n<li><strong>上下文理解</strong>：LLM 理解了测试函数的意图，并生成了合理的 assert 语句。</li>\n</ul>\n<p>通过这样的操作，我们可以评估 LLM 在处理各种测试用例时的表现，并找出改进方向。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/eceb/redis%20dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "url": "https://enjundu.github.io/eceb/redis%20dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "title": "DICT.C源码阅读报告",
            "date_published": "2024-07-02T17:43:21.000Z",
            "content_html": "<h1 id=\"一-各函数分部解析\"><a class=\"markdownIt-Anchor\" href=\"#一-各函数分部解析\">#</a> 一、各函数分部解析</h1>\n<ul>\n<li>\n<p>struct dictEntry 结构体：</p>\n<ol>\n<li>用于表示字典中的键值对。</li>\n<li>成员变量：</li>\n<li>void *key：键的指针。</li>\n<li>union：联合体，可以存储值的不同类型（void *val, uint64_t u64, int64_t s64, double d）。</li>\n<li>struct dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。</li>\n</ol>\n</li>\n<li>\n<p>typedef struct dictEntryNoValue 结构体：</p>\n<ol>\n<li>表示字典中的无值 entry。</li>\n<li>成员变量：\n<ol>\n<li>void *key：键的指针。</li>\n<li>dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>static dictResizeEnable dict_can_resize：</p>\n<ol>\n<li>\n<ul>\n<li>全局变量，表示字典是否允许进行大小调整的标志。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>static unsigned int dict_force_resize_ratio：</p>\n<ol>\n<li>全局变量，表示强制调整大小的比例阈值。</li>\n</ol>\n</li>\n<li>\n<p>哈希函数相关：</p>\n<ol>\n<li>static uint8_t dict_hash_function_seed [16]：字典哈希函数的种子。</li>\n<li>void dictSetHashFunctionSeed (uint8_t *seed)：设置哈希函数的种子。</li>\n<li>uint8_t *dictGetHashFunctionSeed (void)：获取哈希函数的种子。</li>\n<li>uint64_t dictGenHashFunction (const void *key, size_t len)：字典使用的哈希函数。</li>\n<li>uint64_t dictGenCaseHashFunction (const unsigned char *buf, size_t len)：字典使用的哈希函数，不区分大小写。</li>\n</ol>\n</li>\n<li>\n<p>字典指针位操作相关：</p>\n<ol>\n<li>#define ENTRY_PTR_MASK 7：用于掩码操作的位掩码，表示字典指针的最低 3 位。</li>\n<li>#define ENTRY_PTR_NORMAL 0 和 #define ENTRY_PTR_NO_VALUE 2：表示不同类型的字典 entry。</li>\n<li>一系列辅助函数用于判断和操作不同类型的 entry。</li>\n</ol>\n</li>\n<li>\n<p>哈希表相关函数：</p>\n<ol>\n<li>_dictExpandIfNeeded (dict *d)：如果需要，扩展字典的哈希表大小的内部函数。</li>\n<li>_dictNextExp (unsigned long size)：返回大于等于给定大小的最小的 2 的整数次幂的对数的函数。</li>\n<li>_dictInit (dict *d, dictType *type)：初始化字典的内部函数。</li>\n</ol>\n</li>\n<li>\n<p>API 实现相关：</p>\n<ol>\n<li>_dictReset (dict *d, int htidx)：重置已使用 _dictInit () 初始化的哈希表参数。</li>\n<li>dictCreate (dictType *type)：创建一个新的哈希表。</li>\n<li>dictCreateMultiple (dictType *type, int count)：创建包含多个字典的数组。</li>\n<li>int _dictInit (dict *d, dictType *type)：初始化哈希表。</li>\n<li>int dictResize (dict *d)：调整表的大小，使其包含所有元素，且满足 USED/BUCKETS 比率接近 &lt;= 1 的不变式。</li>\n</ol>\n</li>\n<li>\n<p>int _dictExpand(dict *d, unsigned long size, int *malloc_failed)：</p>\n<ol>\n<li>这个函数用于扩展或创建哈希表，增加或初始化新的哈希表。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n<li>malloc_failed：如果为非空指针，则在分配内存失败时设置为 1。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictExpand(dict *d, unsigned long size)：</p>\n<ol>\n<li>对外部接口的封装，用于扩展字典的哈希表。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictTryExpand(dict *d, unsigned long size)：</p>\n<ol>\n<li>对外部接口的封装，用于尝试扩展字典的哈希表，当内存分配失败时返回 DICT_ERR。\n<ol>\n<li>参数：</li>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果内存分配失败，返回 DICT_ERR；否则返回 DICT_OK。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictRehash(dict *d, int n)：</p>\n<ol>\n<li>执行 N 步的增量重新哈希。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>n：步数。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果还有从旧哈希表移动到新哈希表的键，则返回 1；否则返回 0。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>long long timeInMilliseconds(void)：</p>\n<ol>\n<li>返回当前时间戳，以毫秒为单位。</li>\n</ol>\n</li>\n<li>\n<p>int dictRehashMilliseconds(dict *d, unsigned int ms)：</p>\n<ol>\n<li>在指定的时间内（毫秒为单位）执行重新哈希。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>ms：指定的时间（毫秒）。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>返回实际进行的重新哈希步数。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>void _dictRehashStep(dict *d)：</p>\n<ol>\n<li>执行一步的增量重新哈希，仅在哈希表的重新哈希未暂停时执行。</li>\n</ol>\n</li>\n<li>\n<p>int dictAdd(dict *d, void *key, void *val)：</p>\n<ol>\n<li>向字典中添加键值对。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>val：值。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)：</p>\n<ol>\n<li>低级别的添加或查找函数，返回一个指向新键的 dictEntry 结构体。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>existing：如果键已经存在，则存储现有条目的指针。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果键已经存在，返回 NULL；否则返回指向新键的 dictEntry 结构体。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictInsertAtPosition(dict *d, void *key, void *position)：</p>\n<ol>\n<li>在指定位置插入键，该位置通常由 dictFindPositionForInsert 函数返回。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>position：插入位置。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>返回指向新键的 dictEntry 结构体。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictReplace(dict *d, void *key, void *val)：</p>\n<ol>\n<li>尝试向字典中添加一个元素。如果键不存在，dictAddRaw 将成功。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要添加或替换的键。</li>\n<li>val：要设置的值。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果添加成功，返回 1；否则，如果键已存在，则返回 0。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictAddOrFind(dict *d, void *key)：</p>\n<ol>\n<li>是 dictAddRaw 的一个版本，始终返回指定键的哈希条目，即使键已存在且无法添加。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要添加或查找的键。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果添加成功，返回新的字典条目；如果键已存在，返回已存在的字典条目。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree)：</p>\n<ol>\n<li>用于在字典中搜索并删除元素。这是 dictDelete () 和 dictUnlink () 的辅助函数。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要删除的键。</li>\n<li>nofree：指示是否释放内存的标志。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果找到并删除元素，返回被删除的字典条目；如果未找到，返回 NULL。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictDelete(dict *ht, const void *key)：</p>\n<ol>\n<li>从字典中删除元素，成功返回 DICT_OK，否则返回 DICT_ERR。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictUnlink(dict *d, const void *key)：</p>\n<ol>\n<li>从字典中删除元素，但不实际释放键、值和字典条目。返回被找到并从表中解链的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>void dictFreeUnlinkedEntry(dict *d, dictEntry *he)：</p>\n<ol>\n<li>用于真正释放调用 dictUnlink () 后的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>int _dictClear(dict <em>d, int htidx, void(callback)(dict</em>))：</p>\n<ol>\n<li>释放字典中的所有元素。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>htidx：要清除的哈希表索引。</li>\n<li>callback：可选的回调函数。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>成功返回 DICT_OK。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>void dictRelease(dict *d)：</p>\n<ol>\n<li>清空并释放哈希表。首先通过 _dictClear 清空两个哈希表，然后释放字典结构体占用的内存。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictFind(dict *d, const void *key)：</p>\n<ol>\n<li>在字典中查找给定键对应的字典条目。</li>\n<li>如果字典为空，返回 NULL。</li>\n<li>如果字典正在进行 rehash，执行一步 rehash 操作。</li>\n<li>遍历两个哈希表，查找匹配的键，找到则返回对应的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>void *dictFetchValue(dict *d, const void *key)：</p>\n<ol>\n<li>获取字典中给定键对应的值。</li>\n<li>调用 dictFind 查找字典条目，如果找到则返回对应的值，否则返回 NULL。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictTwoPhaseUnlinkFind(dict *d, const void *key, dictEntry ***plink, int *table_index)：</p>\n<ol>\n<li>在字典中查找给定键对应的字典条目，并获取该条目的前一项的指针地址（plink）和哈希表索引（table_index）。</li>\n<li>这是一种两阶段解链的操作，用于在可能的 rehash 过程中执行解链。</li>\n</ol>\n</li>\n<li>\n<p>void dictTwoPhaseUnlinkFree(dict *d, dictEntry *he, dictEntry **plink, int table_index)：</p>\n<ol>\n<li>两阶段解链并释放字典条目的函数。</li>\n<li>通过修改前一项的指针实现解链，然后释放键、值和字典条目的内存。</li>\n<li>恢复 rehash 过程。</li>\n</ol>\n</li>\n<li>\n<p>一系列用于设置和获取字典条目键值的辅助函数：</p>\n<ol>\n<li>dictSetKey、dictSetVal、dictSetSignedIntegerVal、dictSetUnsignedIntegerVal、dictSetDoubleVal 用于设置字典条目的键和值。</li>\n<li>dictIncrSignedIntegerVal、dictIncrUnsignedIntegerVal、dictIncrDoubleVal 用于自增字典条目的整数值和浮点数值。</li>\n<li>dictGetKey、dictGetVal、dictGetSignedIntegerVal、dictGetUnsignedIntegerVal、dictGetDoubleVal 用于获取字典条目的键和值。</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry *dictGetNext(const dictEntry *de)：</p>\n<ol>\n<li>返回字典条目的 next 字段或 NULL，如果条目没有 next 字段则返回 NULL。</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry **dictGetNextRef(dictEntry *de)：</p>\n</li>\n</ul>\n<ol>\n<li>返回指向字典条目的 next 字段的指针，或 NULL，如果条目没有 next 字段则返回 NULL。</li>\n</ol>\n<ul>\n<li>\n<p>static void dictSetNext(dictEntry *de, dictEntry *next)：</p>\n<ol>\n<li>设置字典条目的 next 字段。</li>\n</ol>\n</li>\n<li>\n<p>size_t dictMemUsage(const dict *d)：</p>\n<ol>\n<li>返回字典的内存使用，不包括键和值的大小。</li>\n</ol>\n</li>\n<li>\n<p>size_t dictEntryMemUsage(void)：</p>\n<ol>\n<li>返回字典条目的内存使用。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long long dictFingerprint(dict *d)：</p>\n<ol>\n<li>生成字典的指纹，用于检测在迭代期间是否对字典进行了禁止的操作。</li>\n</ol>\n</li>\n<li>\n<p>void dictInitIterator(dictIterator *iter, dict *d)：</p>\n<ol>\n<li>初始化字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>void dictInitSafeIterator(dictIterator *iter, dict *d)：</p>\n</li>\n</ul>\n<ol>\n<li>初始化安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。</li>\n</ol>\n<ul>\n<li>\n<p>void dictResetIterator(dictIterator *iter)：</p>\n<ol>\n<li>重置字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictIterator *dictGetIterator(dict *d)：</p>\n<ol>\n<li>获取普通字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictIterator *dictGetSafeIterator(dict *d)：</p>\n</li>\n</ul>\n<ol>\n<li>获取安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。</li>\n</ol>\n<ul>\n<li>\n<p>dictEntry *dictNext(dictIterator *iter)：</p>\n<ol>\n<li>获取字典中的下一个条目。</li>\n</ol>\n</li>\n<li>\n<p>void dictReleaseIterator(dictIterator *iter)：</p>\n<ol>\n<li>释放字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictGetRandomKey(dict *d)：</p>\n<ol>\n<li>返回字典中的随机条目，用于实现随机算法。</li>\n</ol>\n</li>\n<li>\n<p>unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count)：</p>\n<ol>\n<li>从字典中获取一些随机条目，用于采样目的。</li>\n</ol>\n</li>\n<li>\n<p>static void dictDefragBucket(dictEntry **bucketref, dictDefragFunctions *defragfns)：</p>\n<ol>\n<li>使用提供的分配函数，重新分配字典条目、键和值在一个桶中的内存，以进行碎片整理。</li>\n<li>defragfns 是一个包含碎片整理分配函数的结构。</li>\n<li>dictEntry *dictGetFairRandomKey(dict *d)：</li>\n<li>类似于 dictGetRandomKey ()，但尝试确保返回元素的更好分布。</li>\n<li>通过考虑哈希表中可能由不同链长度组成的 N 个桶，选择范围内的一个随机元素，以平滑解决不同链长度的问题。</li>\n</ol>\n</li>\n<li>\n<p>static unsigned long rev(unsigned long v)：</p>\n<ol>\n<li>位反转函数，用于迭代器中。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long dictScan(dict *d, unsigned long v, dictScanFunction *fn, void *privdata)：</p>\n<ol>\n<li>用于迭代字典中的元素，以确保在迭代开始和结束之间返回字典中的所有元素。</li>\n<li>通过反向游标迭代，以处理哈希表可能在迭代调用之间发生大小更改的情况。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long dictScanDefrag(dict *d, unsigned long v, dictScanFunction *fn, dictDefragFunctions *defragfns, void *privdata)：</p>\n<ol>\n<li>类似于 dictScan ()，但额外使用提供的分配函数重新分配字典条目的内存。</li>\n<li>defragfns 包含用于碎片整理的分配函数。</li>\n</ol>\n</li>\n<li>\n<p>static int dictTypeExpandAllowed(dict *d)：</p>\n<ol>\n<li>检查字典类型是否允许进行扩展。</li>\n<li>如果允许扩展，且达到了扩展的条件，调用 dictExpand 进行扩展。</li>\n</ol>\n</li>\n<li>\n<p>static int _dictExpandIfNeeded(dict *d)：</p>\n<ol>\n<li>如果正在进行渐进式 rehashing，直接返回。</li>\n<li>如果哈希表为空，将其扩展到初始大小。</li>\n<li>如果达到 1:1 的比率，并且允许调整哈希表大小，或者应该避免调整但元素 / 桶的比率超过安全阈值，就以两倍的速度扩展哈希表。</li>\n</ol>\n</li>\n<li>\n<p>static signed char _dictNextExp(unsigned long size)：</p>\n<ol>\n<li>返回给定大小的下一个有效的哈希表大小的指数。哈希表的大小是 2 的幂。</li>\n</ol>\n</li>\n<li>\n<p>void *dictFindPositionForInsert(dict *d, const void *key, dictEntry **existing)：</p>\n<ol>\n<li>查找插入位置，如果键已存在，则返回 NULL 并填充 existing，否则返回桶的引用。</li>\n</ol>\n</li>\n<li>\n<p>void dictEmpty(dict <em>d, void(callback)(dict</em>))：</p>\n<ol>\n<li>清空字典，包括两个哈希表。可提供回调函数处理被删除的元素。</li>\n</ol>\n</li>\n<li>\n<p>void dictSetResizeEnabled(dictResizeEnable enable)：</p>\n<ol>\n<li>设置是否允许字典调整大小。</li>\n</ol>\n</li>\n<li>\n<p>uint64_t dictGetHash(dict *d, const void *key)：</p>\n<ol>\n<li>获取键的哈希值。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictFindEntryByPtrAndHash(dict *d, const void *oldptr, uint64_t hash)：</p>\n<ol>\n<li>通过指针和预计算的哈希查找字典中的条目，用于查找特定指针的元素。</li>\n</ol>\n</li>\n<li>\n<p>void dictRehashingInfo(dict *d, unsigned long long *from_size, unsigned long long *to_size)：</p>\n<ol>\n<li>提供正在进行 rehashing 的字典的旧哈希表大小和新哈希表大小信息。</li>\n<li>Debugging 相关函数：\n<ol>\n<li>void dictFreeStats (dictStats *stats)：释放字典统计信息的内存。</li>\n<li>void dictCombineStats (dictStats *from, dictStats *into)：将两个字典统计信息合并。</li>\n<li>dictStats *dictGetStatsHt (dict *d, int htidx, int full)：获取指定哈希表的统计信息。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>size_t dictGetStatsMsg(char *buf, size_t bufsize, dictStats *stats, int full)：</p>\n<ol>\n<li>生成字典统计信息的人类可读消息。</li>\n<li>如果字典为空，返回相关提示信息。</li>\n<li>如果 full 为真，还包括详细的统计信息。</li>\n</ol>\n</li>\n<li>\n<p>void dictGetStats(char *buf, size_t bufsize, dict *d, int full)：</p>\n<ol>\n<li>获取字典的统计信息，包括主哈希表和（如果正在进行 rehashing）rehash 哈希表的信息。</li>\n</ol>\n</li>\n<li>\n<p>Benchmark 相关函数：1.</p>\n<ol>\n<li>BenchmarkDictType 结构体：定义了用于性能测试的字典类型。</li>\n<li>uint64_t hashCallback (const void *key)：哈希回调函数，计算键的哈希值。</li>\n<li>int compareCallback (dict *d, const void *key1, const void *key2)：比较回调函数，比较两个键是否相等。</li>\n<li>void freeCallback (dict *d, void *val)：释放回调函数，释放值的内存。</li>\n<li>char *stringFromLongLong (long long value)：将长长整型值转换为字符串。</li>\n<li>#define start_benchmark ()：宏定义，用于开始计时。</li>\n<li>#define end_benchmark (msg)：宏定义，用于结束计时并输出性能测试结果。</li>\n<li>int dictTest (int argc, char **argv, int flags)：主要的性能测试函数，用于测试字典的插入、访问、删除等操作的性能。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"二-dictc的主要代码思路\"><a class=\"markdownIt-Anchor\" href=\"#二-dictc的主要代码思路\">#</a> 二、dict.c 的主要代码思路</h1>\n<h2 id=\"字典的创建和初始化\"><a class=\"markdownIt-Anchor\" href=\"#字典的创建和初始化\">#</a> 字典的创建和初始化：</h2>\n<ul>\n<li>使用 dictCreate 函数创建一个新的字典。</li>\n<li>初始化字典的字段，包括两个哈希表、字典类型等。</li>\n<li>通过 dictSetHashFunctionSeed 设置哈希函数种子。</li>\n</ul>\n<h2 id=\"字典的扩容和-rehash\"><a class=\"markdownIt-Anchor\" href=\"#字典的扩容和-rehash\">#</a> 字典的扩容和 rehash：</h2>\n<ul>\n<li>使用 _dictExpandIfNeeded 函数检查是否需要扩容。</li>\n<li>如果需要扩容，调用 dictExpand 进行扩容。</li>\n<li>扩容时，可能触发 rehash 操作，将原哈希表的数据逐步迁移到新哈希表。</li>\n<li>通过 _dictRehashStep 函数完成一步 rehash 操作。</li>\n<li>在 rehash 过程中，遍历原哈希表的每个桶，将其中的元素逐个迁移到新哈希表。</li>\n</ul>\n<h2 id=\"插入元素\"><a class=\"markdownIt-Anchor\" href=\"#插入元素\">#</a> 插入元素：</h2>\n<ul>\n<li>使用 dictAdd 函数插入键值对。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>如果字典正在 rehash，先进行一步 rehash 操作。</li>\n<li>检查是否存在相同的键，如果存在，返回错误。</li>\n<li>创建一个新的 dictEntry，插入到哈希桶的链表中。</li>\n</ul>\n<h2 id=\"查找元素\"><a class=\"markdownIt-Anchor\" href=\"#查找元素\">#</a> 查找元素：</h2>\n<ul>\n<li>使用 dictFind 函数查找指定键的条目。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>在哈希桶的链表中遍历，比较键的值找到相应的条目。</li>\n</ul>\n<h2 id=\"删除元素\"><a class=\"markdownIt-Anchor\" href=\"#删除元素\">#</a> 删除元素：</h2>\n<ul>\n<li>使用 dictDelete 函数删除指定键的条目。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>在哈希桶的链表中遍历，找到并删除相应的条目。</li>\n</ul>\n<h2 id=\"迭代元素\"><a class=\"markdownIt-Anchor\" href=\"#迭代元素\">#</a> 迭代元素 ##：</h2>\n<ul>\n<li>使用 dictGetRandomKey 函数随机获取一个键。</li>\n<li>使用 dictScan 函数迭代字典中的所有元素。</li>\n</ul>\n<h2 id=\"性能测试和统计信息\"><a class=\"markdownIt-Anchor\" href=\"#性能测试和统计信息\">#</a> 性能测试和统计信息：</h2>\n<ul>\n<li>提供了一系列的性能测试函数，例如 dictTest，用于测试字典操作的性能。</li>\n<li>提供了函数用于获取字典的统计信息，如 dictGetStats。</li>\n</ul>\n<p><strong>总体来说，dict.c 中的代码主要围绕字典的创建、扩容、插入、查找、删除等基本操作展开，同时提供了性能测试和统计信息功能。字典的实现采用了哈希表，支持渐进式 rehash，以确保字典的高效性能。</strong></p>\n<h1 id=\"三-dictc在-redis-中的主要运用方式和作用\"><a class=\"markdownIt-Anchor\" href=\"#三-dictc在-redis-中的主要运用方式和作用\">#</a> 三、dict.c 在 Redis 中的主要运用方式和作用#</h1>\n<h2 id=\"存储键值对\"><a class=\"markdownIt-Anchor\" href=\"#存储键值对\">#</a> 存储键值对：</h2>\n<ul>\n<li>Redis 中的数据结构，如哈希表、有序集合等，都依赖于 dict.c 实现的字典结构。</li>\n<li>键值对是 Redis 数据模型的基础，而 dict.c 提供了高效的字典实现，用于存储这些键值对。</li>\n</ul>\n<h2 id=\"快速查找\"><a class=\"markdownIt-Anchor\" href=\"#快速查找\">#</a> 快速查找：</h2>\n<ul>\n<li>Redis 中经常需要根据键快速查找对应的值，例如通过键获取字符串对象、获取哈希表中的字段等。</li>\n<li>dict.c 提供了高效的查找算法，使得在字典中查找元素的时间复杂度为 O (1)。</li>\n</ul>\n<h2 id=\"哈希算法\"><a class=\"markdownIt-Anchor\" href=\"#哈希算法\">#</a> 哈希算法：</h2>\n<ul>\n<li>dict.c 中包含了用于计算键的哈希值的算法，通过哈希值将键均匀地散列到哈希表的各个桶中。</li>\n<li>这有助于保持字典的高效性能，减少哈希冲突的可能性。</li>\n</ul>\n<h2 id=\"动态扩容和-rehash\"><a class=\"markdownIt-Anchor\" href=\"#动态扩容和-rehash\">#</a> 动态扩容和 rehash：</h2>\n<ul>\n<li>dict.c 提供了动态扩容的机制，当字典中的元素数量增加时，自动调整哈希表的大小以保持性能。</li>\n<li>在扩容时，dict.c 还实现了渐进式 rehash，逐步将数据从旧哈希表迁移到新哈希表，避免了一次性大规模的数据迁移。</li>\n</ul>\n<h2 id=\"迭代器支持\"><a class=\"markdownIt-Anchor\" href=\"#迭代器支持\">#</a> 迭代器支持：</h2>\n<ul>\n<li>dict.c 提供了字典的迭代器，支持按顺序或随机遍历字典中的元素。</li>\n<li>迭代器的实现使得在 Redis 中可以轻松地实现像 HSCAN 这样的命令。</li>\n</ul>\n<h2 id=\"统计信息和性能测试\"><a class=\"markdownIt-Anchor\" href=\"#统计信息和性能测试\">#</a> 统计信息和性能测试：</h2>\n<ul>\n<li>dict.c 提供了获取字典统计信息的功能，这对于监控和调优 Redis 实例至关重要。</li>\n<li>性能测试函数，如 dictTest，用于验证字典操作的性能。</li>\n</ul>\n<h2 id=\"在-redis-服务器中的引用\"><a class=\"markdownIt-Anchor\" href=\"#在-redis-服务器中的引用\">#</a> 在 Redis 服务器中的引用：</h2>\n<ul>\n<li>Redis 服务器的核心功能，包括数据存储、命令执行等，都依赖于字典结构。</li>\n<li>在 Redis 服务器的核心源码中，大量引用了 dict.c 中提供的字典操作函数，确保数据的高效存储和检索。</li>\n</ul>\n<h2 id=\"在-redis-模块中的引用\"><a class=\"markdownIt-Anchor\" href=\"#在-redis-模块中的引用\">#</a> 在 Redis 模块中的引用：</h2>\n<ul>\n<li>Redis 允许用户通过编写模块扩展其功能，而许多模块也需要使用字典结构来管理自己的数据。</li>\n<li>模块开发者可以直接引用 dict.c 中的字典实现，以方便地处理键值对数据。</li>\n</ul>\n<p><strong>总体来说，dict.c 在 Redis 中扮演了关键的角色，为 Redis 提供了高效的键值对存储和检索能力，是 Redis 数据库引擎的重要组成部分。</strong></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/eceb/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/",
            "url": "https://enjundu.github.io/eceb/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/",
            "title": "Request阅读报告",
            "date_published": "2024-07-02T17:41:31.000Z",
            "content_html": "<h1 id=\"requests-html-项目阅读报告\"><a class=\"markdownIt-Anchor\" href=\"#requests-html-项目阅读报告\">#</a> Requests-HTML 项目阅读报告</h1>\n<h2 id=\"项目概述\"><a class=\"markdownIt-Anchor\" href=\"#项目概述\">#</a> 项目概述</h2>\n<p><strong>requests-html</strong> 是一个用于简化 HTML 解析和网页抓取的 Python 库。它通过结合 requests 库的简单和强大，与<strong> pyquery、beautifulsoup4 和 lxml</strong> 等工具进行二次封装，提供了一个直观的 API，使得网页抓取和 HTML 解析变得更容易。该库不仅支持同步请求，还支持异步请求，能够处理由 JavaScript 驱动的动态内容。</p>\n<h2 id=\"关键特性\"><a class=\"markdownIt-Anchor\" href=\"#关键特性\">#</a> 关键特性</h2>\n<ul>\n<li><strong>完整的 JavaScript 支持</strong>：通过 pyppeteer 支持渲染和解析由 JavaScript 动态生成的内容。</li>\n<li><strong>CSS 选择器</strong>：使用 pyquery 提供类似 jQuery 的选择器语法，方便选择 HTML 元素。</li>\n<li><strong>XPath 选择器</strong>：提供对 XPath 的支持，方便使用 XPath 语法选择元素。</li>\n<li><strong>模拟用户代理</strong>：模拟真实的浏览器用户代理，避免被反爬虫机制检测到。</li>\n<li><strong>自动重定向</strong>：自动处理 HTTP 重定向，保持会话的连续性。</li>\n<li><strong>连接池和 Cookie 持久化</strong>：高效的连接处理，保持会话中的 Cookie 持久化。</li>\n<li><strong>异步支持</strong>：允许异步的 HTTP 请求和渲染，提升爬虫的效率。</li>\n</ul>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1ZXN0cy1odG1sLmtlbm5ldGhyZWl0ei5vcmcv\"> requests-html 项目文档</span>可知安装方法为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pipenv install requests-html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>仅支持 python3.6 版本 ——Only <strong>Python 3.6</strong> is supported.</li>\n</ul>\n<h2 id=\"设计思路\"><a class=\"markdownIt-Anchor\" href=\"#设计思路\">#</a> 设计思路</h2>\n<p>requests-html 设计的核心思想是将常见的 HTML 解析和网页抓取任务简化为直观且强大的 API 操作。它通过结合现有的流行库（如 requests、pyquery、beautifulsoup4 和 lxml），增强了处理复杂网页抓取任务的能力。其主要设计理念包括：</p>\n<ul>\n<li><strong>统一接口</strong>：提供一个统一的接口来处理 HTTP 请求、HTML 解析和 JavaScript 渲染。</li>\n<li><strong>异步支持</strong>：允许用户以异步方式处理网页抓取任务，提高了效率。</li>\n<li><strong>模拟浏览器行为</strong>：通过模拟用户代理和处理重定向，使其行为更像真实浏览器。</li>\n<li><strong>全面的选择器支持</strong>：结合 CSS 和 XPath 选择器，使用户可以灵活地选择和解析 HTML 元素。</li>\n</ul>\n<h2 id=\"源代码分析核心类和函数\"><a class=\"markdownIt-Anchor\" href=\"#源代码分析核心类和函数\">#</a> 源代码分析 (核心类和函数)</h2>\n<h3 id=\"htmlsession\"><a class=\"markdownIt-Anchor\" href=\"#htmlsession\">#</a> HTMLSession</h3>\n<h4 id=\"用于同步请求的会话类继承自-requestssession\"><a class=\"markdownIt-Anchor\" href=\"#用于同步请求的会话类继承自-requestssession\">#</a> 用于同步请求的会话类，继承自 requests.Session。</h4>\n<ul>\n<li><strong>get(url, **kwargs)</strong>：发送 GET 请求，返回 HTMLResponse 对象。</li>\n<li><strong>close()</strong>：关闭会话并关闭浏览器。</li>\n</ul>\n<h3 id=\"asynchtmlsession\"><a class=\"markdownIt-Anchor\" href=\"#asynchtmlsession\">#</a> AsyncHTMLSession</h3>\n<h4 id=\"用于异步请求的会话类继承自-requestssession\"><a class=\"markdownIt-Anchor\" href=\"#用于异步请求的会话类继承自-requestssession\">#</a> 用于异步请求的会话类，继承自 <strong>requests.Session</strong>。</h4>\n<ul>\n<li><strong>run(*coros)</strong>：运行多个协程，返回结果列表。</li>\n<li><strong>close()</strong>：关闭会话并关闭浏览器。</li>\n</ul>\n<h3 id=\"html\"><a class=\"markdownIt-Anchor\" href=\"#html\">#</a> HTML</h3>\n<h4 id=\"表示一个-html-文档提供解析功能\"><a class=\"markdownIt-Anchor\" href=\"#表示一个-html-文档提供解析功能\">#</a> 表示一个 HTML 文档，提供解析功能。</h4>\n<ul>\n<li><strong>find(selector,*, containing=None, clean=False, first=False)</strong>：使用 CSS 选择器查找元素。</li>\n<li><strong>xpath(selector, *, clean=False, first=False)</strong>：使用 XPath 选择器查找元素。</li>\n<li><strong>render(**kwargs)</strong>：渲染 JavaScript 内容。</li>\n<li><strong>next(fetch=False, next_symbol=None)</strong>：查找分页链接。</li>\n</ul>\n<h3 id=\"element\"><a class=\"markdownIt-Anchor\" href=\"#element\">#</a> Element</h3>\n<h4 id=\"表示一个-html-元素继承自-baseparser\"><a class=\"markdownIt-Anchor\" href=\"#表示一个-html-元素继承自-baseparser\">#</a> 表示一个 HTML 元素，继承自 BaseParser。</h4>\n<ul>\n<li><strong>attrs</strong>：返回元素的属性字典。</li>\n<li><strong>text</strong>：返回元素的文本内容。</li>\n<li><strong>full_text</strong>：返回元素的完整文本内容。</li>\n</ul>\n<h2 id=\"设置和配置\"><a class=\"markdownIt-Anchor\" href=\"#设置和配置\">#</a> 设置和配置</h2>\n<h3 id=\"setuppy\"><a class=\"markdownIt-Anchor\" href=\"#setuppy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3NldHVwLnB5\">setup.py</span> 文件包含项目的元数据和依赖项：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup(</span><br><span class=\"line\">name=<span class=\"string\">&#x27;requests-html&#x27;</span>,</span><br><span class=\"line\">version=<span class=\"string\">&#x27;0.10.0&#x27;</span>,</span><br><span class=\"line\">description=<span class=\"string\">&#x27;HTML Parsing for Humans.&#x27;</span>,</span><br><span class=\"line\">author=<span class=\"string\">&#x27;Kenneth Reitz&#x27;</span>,</span><br><span class=\"line\">author_email=<span class=\"string\">&#x27;me@kennethreitz.org&#x27;</span>,</span><br><span class=\"line\">url=<span class=\"string\">&#x27;https://github.com/psf/requests-html&#x27;</span>,</span><br><span class=\"line\">python_requires=<span class=\"string\">&#x27;&gt;=3.6.0&#x27;</span>,</span><br><span class=\"line\">install_requires=[</span><br><span class=\"line\">\t<span class=\"string\">&#x27;requests&#x27;</span>, <span class=\"string\">&#x27;pyquery&#x27;</span>, <span class=\"string\">&#x27;fake-useragent&#x27;</span>, <span class=\"string\">&#x27;parse&#x27;</span>, <span class=\"string\">&#x27;beautifulsoup4&#x27;</span>, <span class=\"string\">&#x27;w3lib&#x27;</span>, <span class=\"string\">&#x27;pyppeteer&gt;=0.0.14&#x27;</span></span><br><span class=\"line\">],</span><br><span class=\"line\">packages=[<span class=\"string\">&#x27;requests_html&#x27;</span>],</span><br><span class=\"line\">license=<span class=\"string\">&#x27;MIT&#x27;</span>,</span><br><span class=\"line\">classifiers=[</span><br><span class=\"line\">\t<span class=\"string\">&#x27;License :: OSI Approved :: MIT License&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;Programming Language :: Python :: 3.6&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;Programming Language :: Python :: Implementation :: CPython&#x27;</span>,</span><br><span class=\"line\">],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>项目包含同步和异步操作的测试，确保分页、属性提取和 JavaScript 渲染的健壮性。例如：</p>\n<h4 id=\"同步分页测试\"><a class=\"markdownIt-Anchor\" href=\"#同步分页测试\">#</a> 同步分页测试</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"></span><br><span class=\"line\">urls = [</span><br><span class=\"line\"><span class=\"string\">&#x27;https://xkcd.com/1957/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.reddit.com/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://github.com/psf/requests-html/issues&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://discord.com/category/engineering&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://stackoverflow.com/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.frontiersin.org/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://azure.microsoft.com/en-us&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&#x27;url&#x27;</span>, urls</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.internet</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_pagination</span>(<span class=\"params\">url: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">\tsession = HTMLSession()</span><br><span class=\"line\">\tr = session.get(url)</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> <span class=\"built_in\">next</span>(r.html)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步分页测试\"><a class=\"markdownIt-Anchor\" href=\"#异步分页测试\">#</a> 异步分页测试</h4>\n<pre><code>import pytest\nfrom requests_html import AsyncHTMLSession\n\nurls = [\n\t'https://xkcd.com/1957/',\n\t'https://www.reddit.com/',\n\t'https://github.com/psf/requests-html/issues',\n\t'https://discord.com/category/engineering',\n\t'https://stackoverflow.com/',\n\t'https://www.frontiersin.org/',\n\t'https://azure.microsoft.com/en-us'\n]\n\n@pytest.mark.parametrize('url', urls)\n@pytest.mark.internet\n@pytest.mark.asyncio\nasync def test_async_pagination(event_loop, url):\n\tasession = AsyncHTMLSession()\n\tr = await asession.get(url)\n\tassert await r.html.__anext__()\n</code></pre>\n<h4 id=\"文件请求测试\"><a class=\"markdownIt-Anchor\" href=\"#文件请求测试\">#</a> 文件请求测试</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"></span><br><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">session.mount(<span class=\"string\">&#x27;file://&#x27;</span>, FileAdapter())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">\tpath = os.path.sep.join((os.path.dirname(os.path.abspath(__file__)), <span class=\"string\">&#x27;python.html&#x27;</span>))</span><br><span class=\"line\">\turl = <span class=\"string\">f&#x27;file://<span class=\"subst\">&#123;path&#125;</span>&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> session.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_get</span>():</span><br><span class=\"line\">\tr = get()</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> r.status_code == <span class=\"number\">200</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"文档配置\"><a class=\"markdownIt-Anchor\" href=\"#文档配置\">#</a> 文档配置</h3>\n<h4 id=\"confpy\"><a class=\"markdownIt-Anchor\" href=\"#confpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL2NvbmYucHk=\">conf.py</span> 文件设置了 Sphinx 文档，包括扩展和项目信息：</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests_html</span><br><span class=\"line\"></span><br><span class=\"line\">project = <span class=\"string\">&#x27;requests-HTML&#x27;</span></span><br><span class=\"line\">author = <span class=\"string\">&#x27;Kenneth Reitz&#x27;</span></span><br><span class=\"line\">version = <span class=\"string\">&#x27;v0.3.4&#x27;</span></span><br><span class=\"line\">extensions = [</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.autodoc&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.doctest&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.intersphinx&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.todo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.coverage&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.viewcode&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.githubpages&#x27;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h2>\n<h3 id=\"同步请求\"><a class=\"markdownIt-Anchor\" href=\"#同步请求\">#</a> 同步请求</h3>\n<ul>\n<li>\n<p>向 <span class=\"exturl\" data-url=\"aHR0cDovL3B5dGhvbi5vcmc=\">python.org</span> 发起同步 GET 请求并提取链接：<br>\nfrom requests_html import HTMLSession</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取所有链接</span></span><br><span class=\"line\">links = r.html.links</span><br><span class=\"line\"><span class=\"built_in\">print</span>(links)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取绝对链接</span></span><br><span class=\"line\">absolute_links = r.html.absolute_links</span><br><span class=\"line\"><span class=\"built_in\">print</span>(absolute_links)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>示例结果为：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&#x27;//docs.python.org/3/tutorial/&#x27;</span>, <span class=\"string\">&#x27;/about/apps/&#x27;</span>, <span class=\"string\">&#x27;https://github.com/python/pythondotorg/issues&#x27;</span>, ...&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;https://docs.python.org/3/tutorial/&#x27;</span>, <span class=\"string\">&#x27;https://www.python.org/about/apps/&#x27;</span>, <span class=\"string\">&#x27;https://github.com/python/pythondotorg/issues&#x27;</span>, ...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"异步请求\"><a class=\"markdownIt-Anchor\" href=\"#异步请求\">#</a> 异步请求</h3>\n<ul>\n<li>\n<p>通过 requests_html 库发起异步 GET 请求并运行多个协程：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> AsyncHTMLSession</span><br><span class=\"line\">\tasession = AsyncHTMLSession()</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_python</span>():  </span><br><span class=\"line\">\t  r = <span class=\"keyword\">await</span> asession.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)  </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> r  </span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_reddit</span>():</span><br><span class=\"line\">\t  r = <span class=\"keyword\">await</span> asession.get(<span class=\"string\">&#x27;https://reddit.com/&#x27;</span>)</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> r </span><br><span class=\"line\">\tresults = asession.run(get_python, get_reddit)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result.html.url)  </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>异步请求结果示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.python.org/  </span><br><span class=\"line\">https://www.reddit.com/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"解析html\"><a class=\"markdownIt-Anchor\" href=\"#解析html\">#</a> 解析 HTML</h3>\n<ul>\n<li>\n<p>选择元素并提取属性</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\">about = r.html.find(<span class=\"string\">&#x27;#about&#x27;</span>, first=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取文本</span></span><br><span class=\"line\">text = about.text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取属性</span></span><br><span class=\"line\">attributes = about.attrs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(attributes)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 渲染 HTML</span></span><br><span class=\"line\">html_content = about.html</span><br><span class=\"line\"><span class=\"built_in\">print</span>(html_content)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解析 HTML 结果示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">About</span><br><span class=\"line\">Applications</span><br><span class=\"line\">Quotes</span><br><span class=\"line\">Getting Started</span><br><span class=\"line\">Help</span><br><span class=\"line\">Python Brochure</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: (<span class=\"string\">&#x27;tier-1&#x27;</span>, <span class=\"string\">&#x27;element-1&#x27;</span>), <span class=\"string\">&#x27;aria-haspopup&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;</span><br><span class=\"line\">&lt;li aria-haspopup=<span class=\"string\">&quot;true&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-1 element-1 &quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;about&quot;</span>&gt;\\n&lt;a <span class=\"keyword\">class</span>=<span class=\"string\">&quot;&quot;</span> href=<span class=\"string\">&quot;/about/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;About&lt;/a&gt;\\n&lt;ul aria-hidden=<span class=\"string\">&quot;true&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;subnav menu&quot;</span> role=<span class=\"string\">&quot;menu&quot;</span>&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-1&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/apps/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Applications&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-2&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/quotes/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Quotes&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-3&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/gettingstarted/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Getting Started&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-4&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/help/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Help&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-5&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;http://brochure.getpython.info/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Python Brochure&lt;/a&gt;&lt;/li&gt;\\n&lt;/ul&gt;\\n&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"xpath选择器\"><a class=\"markdownIt-Anchor\" href=\"#xpath选择器\">#</a> XPath 选择器</h3>\n<ul>\n<li>\n<p>提取 html 指定元素的 XPath</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\">about = r.html.xpath(<span class=\"string\">&#x27;//div[@id=&quot;about&quot;]&#x27;</span>, first=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取文本</span></span><br><span class=\"line\">text = about.text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取属性</span></span><br><span class=\"line\">attributes = about.attrs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(attributes)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>XPath 选择器结果示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">About</span><br><span class=\"line\">Applications</span><br><span class=\"line\">Quotes</span><br><span class=\"line\">Getting Started</span><br><span class=\"line\">Help</span><br><span class=\"line\">Python Brochure</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: (<span class=\"string\">&#x27;tier-1&#x27;</span>, <span class=\"string\">&#x27;element-1&#x27;</span>), <span class=\"string\">&#x27;aria-haspopup&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"渲染-javascript-内容\"><a class=\"markdownIt-Anchor\" href=\"#渲染-javascript-内容\">#</a> 渲染 JavaScript 内容</h3>\n<ul>\n<li>\n<p>示例代码：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;http://python-requests.org/&#x27;</span>)</span><br><span class=\"line\">r.html.render()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索渲染后的内容</span></span><br><span class=\"line\">months = r.html.search(<span class=\"string\">&#x27;Python 2 will retire in only &#123;months&#125; months!&#x27;</span>)[<span class=\"string\">&#x27;months&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(months)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>结果示例：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"处理分页\"><a class=\"markdownIt-Anchor\" href=\"#处理分页\">#</a> 处理分页</h3>\n<ul>\n<li>\n<p>代码示例</p>\n<p>r = session.get(‘<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRkaXQuY29t\">https://reddit.com</span>’)<br>\nfor html in r.html:<br>\nprint(html)</p>\n</li>\n<li>\n<p>结果示例</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HTML url=<span class=\"string\">&#x27;https://www.reddit.com/&#x27;</span>&gt;</span><br><span class=\"line\">&lt;HTML url=<span class=\"string\">&#x27;https://www.reddit.com/?count=25&amp;after=t3_81puu5&#x27;</span>&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\">#</a> 结论</h2>\n<p>requests-html 是一个功能强大且易于使用的库，通过集成 JavaScript 渲染和异步请求，扩展了传统 HTML 解析和网页抓取的能力。它与 requests 库的无缝集成，使其成为处理复杂网页抓取任务的绝佳选择。无论是处理简单的静态页面还是复杂的动态内容，requests-html 都提供了一个直观且高效的解决方案。</p>\n<h2 id=\"项目心得\"><a class=\"markdownIt-Anchor\" href=\"#项目心得\">#</a> 项目心得</h2>\n<p>在这个项目中，我深入研究了 requests-html 库，并对其功能和设计进行了详细分析和实践。通过这个项目，我不仅熟悉了 requests-html 的使用方法，还掌握了一些高级的网页抓取技巧。</p>\n<p><strong>学习与使用</strong></p>\n<p>首先，我被 requests-html 库的简洁性和强大功能所吸引。这个库基于 requests 构建，结合了 pyquery、beautifulsoup4 和 lxml 等工具，使得 HTML 解析和网页抓取变得更加直观和高效。安装和设置过程也非常简单，只需几行命令即可开始使用。</p>\n<p><strong>同步与异步请求</strong></p>\n<p>在实际使用中，我发现 requests-html 对同步和异步请求的支持非常实用。通过 HTMLSession 和 AsyncHTMLSession，我可以轻松地发起同步和异步的 HTTP 请求，并处理由 JavaScript 动态生成的内容。特别是在处理大量请求时，异步支持显著提高了效率。</p>\n<p><strong>JavaScript 渲染</strong></p>\n<p>一个令我印象深刻的功能是 requests-html 对 JavaScript 渲染的支持。通过 pyppeteer，我能够渲染和解析动态生成的内容，这在现代网页抓取中是至关重要的。我尝试了多个网站，包括一些使用复杂 JavaScript 生成内容的网站，requests-html 都能顺利完成任务。</p>\n<p><strong>CSS 与 XPath 选择器</strong></p>\n<p>在解析 HTML 内容时，requests-html 提供的 CSS 和 XPath 选择器极大地方便了我的工作。我可以使用类似 jQuery 的语法快速定位和提取网页中的元素，同时也可以使用 XPath 进行更复杂的查询。这使得解析和处理网页内容变得更加灵活和高效。</p>\n<p><strong>模拟用户代理与自动重定向</strong></p>\n<p>在实际应用中，避免被反爬虫机制检测到是一个重要的考虑因素。requests-html 通过模拟真实的浏览器用户代理，有效减少了被封禁的风险。此外，它还自动处理 HTTP 重定向，保持会话的连续性，确保抓取过程顺利进行。</p>\n<p><strong>代码实现与测试</strong></p>\n<p>在编写和测试代码的过程中，我进一步理解了 requests-html 的内部机制。通过阅读和分析源码，我了解到每个核心类和函数的具体实现原理。这不仅提升了我的编程技能，也让我对网页抓取有了更深入的认识。</p>\n<p>我编写了一些测试用例，包括同步和异步分页测试、文件请求测试等，确保了代码的健壮性和可靠性。通过这些测试，我验证了 requests-html 在不同场景下的表现，发现它确实是一个功能强大且易于使用的库。</p>\n<p><strong>结论</strong></p>\n<p>总的来说，这次项目经历让我受益匪浅。requests-html 不仅简化了网页抓取的复杂性，还提供了强大的功能，满足了我在处理动态内容和大量请求时的需求。通过这个项目，我对网页抓取技术有了更全面的理解，也积累了丰富的实践经验。今后，我会继续探索和使用这个库，进一步提升我的技术能力。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/cs231n/README_2_Linear%20Classification/",
            "url": "https://enjundu.github.io/cs231n/README_2_Linear%20Classification/",
            "title": "",
            "date_published": "2024-07-02T17:28:14.080Z",
            "content_html": "<p><strong>本章阅读材料链接为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jczIzMW4uZ2l0aHViLmlvL2xpbmVhci1jbGFzc2lmeS8=\"> CS231n Convolutional Neural Networks for Visual Recognition</span></strong></p>\n<h1 id=\"线性分类\"><a class=\"markdownIt-Anchor\" href=\"#线性分类\">#</a> 线性分类</h1>\n<p>​\t在上一节中，我们介绍了图像分类问题，即从一组固定类别中为图像分配单个标签的任务。此外，我们描述了 k 最近邻 (kNN) 分类器，它通过将图像与训练集中的（带注释的）图像进行比较来标记图像。正如我们所见，kNN 有许多缺点：</p>\n<ul>\n<li>\n<p>分类器必须<em>记住</em>所有训练数据并将其存储以供将来与测试数据进行比较。这是空间效率低下的，因为数据集的大小很可能达到千兆字节。</p>\n</li>\n<li>\n<p>对测试图像进行分类的成本很高，因为它需要与所有训练图像进行比较。</p>\n</li>\n</ul>\n<p><strong>摘要：<strong>我们现在将开发一种更强大的图像分类方法，最终将自然地扩展到整个神经网络和卷积神经网络。该方法将有两个主要组成部分：将原始数据映射到类别分数的</strong>分数函数</strong>，以及量化预测分数和真实标签之间的一致性的<strong>损失函数</strong>。然后，我们将其视为一个优化问题，其中我们将相对于得分函数的参数最小化损失函数。</p>\n<h2 id=\"1从图像到标签分数的参数化映射\"><a class=\"markdownIt-Anchor\" href=\"#1从图像到标签分数的参数化映射\">#</a> 1. 从图像到标签分数的参数化映射</h2>\n<p>​\t首先我们定义一个评价函数，用于将图片的像素映射为每一类别的得分，具体来说假设我们有一个训练集，其中的每个样本<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><msup><mi>R</mi><mi>D</mi></msup></mrow><annotation encoding=\"application/x-tex\">x_i \\in R^D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></span></span></span></span></span></span> 每个样本对应一个标签 yi，这里的 i=1…N, 并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>∈</mo><mrow><mn>1</mn><mo>…</mo><mi>K</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y_i \\in { 1 \\dots K }</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span></span>, 即表示有 N 个样本 (每个样本都有一个维度 D) 和 K 个不同的类别，例如在 CIFAR-10 中我们有一个训练集 N=50000，每个图像都有 32×32×3=3072 个像素，K=10，因为有 10 个不同的类别，故我们需要定义一个评估函数 f:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi>R</mi><mi>D</mi></msup><mo>↦</mo><msup><mi>R</mi><mi>K</mi></msup></mrow><annotation encoding=\"application/x-tex\">f: R^D \\mapsto R^K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.852331em;vertical-align:-0.011em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span></span></span></span></span></span></span></span>，即将原始图像像素映射到类别分数。</p>\n<p>** 线性分类：** 我们以最简单的线性分类器为例，即我们定义评估函数为 (这里的 × 为矩阵的乘)：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mi>W</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">f(x_i, W, b) =  W x_i + b\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<p>在上述方程中，我们假设图像 Xi，将其所有像素平展为形状为 [D×1] 的单列向量。矩阵 W（大小 [KxD]）和向量 b（大小 [kx1]）是函数的<strong>参数</strong>。在 CIFAR-10 中，xi 包含第 i 个图像中的所有像素，这些像素被展平为单个 [3072 x 1] 列，W 是 [10 x 3072]，b 是 [10×1]，因此 3072 个数字进入函数（原始像素值），10 个数字出来（类得分）。W 中的参数通常被称为权重，b 被称为偏差向量，因为它影响输出分数，但不与实际数据 xi 交互。然而，您经常会听到人们交替使用权重和参数这两个术语。</p>\n<p><strong>概念解释</strong></p>\n<ol>\n<li><strong>W：权重矩阵</strong></li>\n</ol>\n<ul>\n<li><strong>定义</strong>：W 是一个矩阵，通常被称为权重矩阵，它的大小为 [K x D]，其中 K 是类别的数量，D 是输入特征的维度（对于图像数据，D 通常是像素数量）。</li>\n<li><strong>作用</strong>：W 矩阵中的每一行对应一个类别，每一列对应一个输入特征。它用于将输入特征向量映射到类别得分。</li>\n</ul>\n<ol start=\"2\">\n<li><strong>b：偏置向量</strong>\n<ul>\n<li><strong>定义</strong>：b 是一个向量，大小为 [K x 1]，即它有 K 个元素，每个元素对应一个类别。</li>\n<li>** 作用：**b 是偏置向量，它在最终的分类得分中起到偏移作用，不与输入特征直接相乘。它的作用是调整模型的输出，使其更好地拟合训练数据。</li>\n</ul>\n</li>\n<li><strong>xi (输入特征向量)</strong>：\n<ul>\n<li><strong>定义</strong>：xi 是输入数据的特征向量，大小为 [D x 1]，即它有 D 个元素。</li>\n<li><strong>作用</strong>：对于每个输入样本 xi，它包含了所有的特征（例如图像中的所有像素值）。</li>\n</ul>\n</li>\n<li><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Wx_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (线性变换)</strong>：\n<ul>\n<li><strong>定义</strong>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Wx_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (表示将权重矩阵 W 与输入特征向量 xi 进行矩阵乘法，得到一个新的向量，该向量大小为 [K x 1]。</li>\n<li><strong>作用</strong>：这个向量包含了每个类别的线性组合得分。矩阵乘法的结果是将输入特征向量投影到类别得分空间中。</li>\n</ul>\n</li>\n</ol>\n<p>有几点需要注意：</p>\n<ul>\n<li>首先，请注意，单矩阵乘法<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">W x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 有效地并行评估 10 个单独的分类器（每个类一个），其中每个分类器是一行 W。</li>\n<li>还要注意，我们认为输入数据<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_i, y_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 是给定的和固定的，但我们可以控制参数 W，b 的设置。我们的目标是以这样的方式设置这些参数，即计算出的分数与整个训练集的地面实况标签相匹配。我们将更详细地介绍如何做到这一点，但凭直觉，我们希望正确的类的分数高于不正确类的分数。</li>\n<li>这种方法的优点是使用训练数据来学习参数 W、b，但一旦学习完成，我们就可以丢弃整个训练集，只保留学习的参数。这是因为新的测试图像可以简单地通过函数转发，并基于计算出的分数进行分类。</li>\n<li>最后，请注意，对测试图像进行分类涉及单个矩阵的乘法和加法，这比将测试图像与所有训练图像进行比较要快得多。</li>\n<li>最后，哪个分类器的评估分数最大，说明该图片最有可能是那个类</li>\n</ul>\n<h3 id=\"11-对线性分类的直观理解\"><a class=\"markdownIt-Anchor\" href=\"#11-对线性分类的直观理解\">#</a> 1.1 对线性分类的直观理解</h3>\n<p><img data-src=\"readme_picture/5.png\" alt=\"5\"></p>\n<p>如下图就是线性分类器的工作过程，对于一张图片，假设是个黑白的 2×2 的图片，我们首先将其展开成一个 4×1 的列向量。假设我们一共有三个类比（猫，狗，船），下图中红色的表示识别猫的分类器，绿色的表示识别狗的分类器，蓝色表示识别船的分类器，三个分类器的参数堆叠在一起组成了评估函数的参数矩阵。将参数矩阵与原始数据相乘并加上对应的偏置项，得到每个分类器的得分，可以看到猫的得分为 -96.8，狗的得分为 437.9，这说明，分类器认为这张图片最可能是只狗，最不可能是只猫，对于图中的例子，这无疑是个很不好的结果（因为输入图片是一只猫）。</p>\n<p><img data-src=\"readme_picture/4.png\" alt=\"4\"></p>\n<p>从上述例子我们可以看出，线性分类器首先将一个 RGB 通道的图片的每个位置的像素进行加权后求和，将求和后的值作为该分类器所属类别的分数（分数最高的分类器所属的类别作为这张图片的预测类别）。** 那么线性分类器的原理是什么呢？** 评估函数通过调整参数，使得其有能力倾向于或者不倾向于图片某个位置的某个颜色。举例来说，对于一张船的图片，图片的周围很可能有很多的蓝色（表示在大海中），那么对于船的分类器就可能对图片四周位置的蓝色通道的权重设置成一个正数，而对相同位置的红色通道和绿色通道的权重设置成一个负数，这样对于某张图，如果满足图片四周位置的蓝色通道的数值大，而其他通道数值小（在图片中表现为四周为蓝色），那么它的评估得分也就会高。</p>\n<h3 id=\"12-对线性分类的几何理解\"><a class=\"markdownIt-Anchor\" href=\"#12-对线性分类的几何理解\">#</a> 1.2 对线性分类的几何理解</h3>\n<p>运用线性分类器后，我们将每张图片都转变成了一个<strong> K</strong> 维的向量，那么我们可以将其看成<strong> K</strong> 维空间中的一个点，同样，对于原来的图片，也可以看成高维空间中的一个点（比如 CIFAR-10 数据集中的每个图片可以看成 3072 维空间中的一个点）。由于我们定义每个类别得分为某张图片所有像素的加权和，所有每个类别的得分其实可以看成这个高维空间中的一个超平面，虽然无法可视化高维空间，但是如果将高维空间降维至二维，我们可以尝试可视化每个分类器在做什么：</p>\n<p><img data-src=\"readme_picture/6.webp\" alt=\"6\"></p>\n<p>如上图所示，有三根直线分别代表汽车分类器、鹿分类器、飞机分类器，以红色的汽车分类器为例，如果某个点刚好在线上，则汽车种类的得分为 0，红色线上的箭头表示在这个方向上汽车得分为正，在反方向则为负。由此我们可以得出，评估函数中的<strong> W</strong> 每一行代表一个分类器，而一个分类器在高维空间中就是一个划分空间的超平面，所以<strong> W</strong> 中的每一行就代表一个分类器所对应超平面在空间中的方向，改变<strong> W</strong> 的值的效果就是旋转这个超平面。而偏置项<strong> b</strong> 其实就是超平面的截距，代表超平面在高维空间中的位置，如果没有偏置项，那么超平面只能过高维坐标系的原点。</p>\n<h3 id=\"摸匹配角度理解\"><a class=\"markdownIt-Anchor\" href=\"#摸匹配角度理解\">#</a> 摸匹配角度理解</h3>\n<p>对于参数<strong> W</strong> 还有一种解释：对于每一行的<strong> W</strong>，其代表了某一类别的模板，当预测图片时，我们将图片分别与每个类别的模板做内积，得到每个类别的评估得分，得分最高的类别作为预测结果。所以，线性分类器其实就是在做模板匹配的过程，而这些模板是从训练集中的图片训练得到的。另外还有一种理解角度，可以把线性分类器看成一种更高效的 KNN 算法。只是区别在于它不用和 KNN 一样存下整个训练集，而是将训练集浓缩成一个模板图片<strong> W</strong>，并且将内积作为距离函数，而不是 KNN 中的 L1 和 L2 距离。</p>\n<p>如下图是使用 CIFAR-10 作为训练集训练得到的分类器，从<strong> W</strong> 得到每个种类分类器的可视化结果：</p>\n<p><img data-src=\"readme_picture/7.webp\" alt=\"7\"></p>\n",
            "tags": []
        },
        {
            "id": "https://enjundu.github.io/cs231n/README_1_KNN/",
            "url": "https://enjundu.github.io/cs231n/README_1_KNN/",
            "title": "",
            "date_published": "2024-07-02T17:28:14.071Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NearestNeighbor</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">self, X, y</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example. Y is 1-dimension of size N &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># the nearest neighbor classifier simply remembers all the training data</span></span><br><span class=\"line\">        self.Xtr = X</span><br><span class=\"line\">        self.ytr = y</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">predict</span>(<span class=\"params\">self, X</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example we wish to predict label for &quot;&quot;&quot;</span></span><br><span class=\"line\">        num_test = X.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># lets make sure that the output type matches the input type</span></span><br><span class=\"line\">        Ypred = np.zeros(num_test, dtype=self.ytr.dtype)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># loop over all test rows</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_test):</span><br><span class=\"line\">            <span class=\"comment\"># find the nearest training image to the i&#x27;th test image</span></span><br><span class=\"line\">            <span class=\"comment\"># using the L1 distance (sum of absolute value differences)</span></span><br><span class=\"line\">            distances = np.<span class=\"built_in\">sum</span>(np.<span class=\"built_in\">abs</span>(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">            min_index = np.argmin(distances)  <span class=\"comment\"># get the index with smallest distance</span></span><br><span class=\"line\">            Ypred[i] = self.ytr[min_index]    <span class=\"comment\"># predict the label of the nearest example</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ypred</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例使用</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建一些示例数据</span></span><br><span class=\"line\">    Xtr = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]])  <span class=\"comment\"># 训练数据</span></span><br><span class=\"line\">    ytr = np.array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])  <span class=\"comment\"># 训练标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Xte = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]])  <span class=\"comment\"># 测试数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化和训练分类器</span></span><br><span class=\"line\">    nn = NearestNeighbor()</span><br><span class=\"line\">    nn.train(Xtr, ytr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 预测测试数据的标签</span></span><br><span class=\"line\">    Yte_predict = nn.predict(Xte)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Predicted labels:&#x27;</span>, Yte_predict)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"本项目参考学习文档为斯坦福计算机深度学习课程用于视觉识别的-cs231n-卷积神经网络\"><a class=\"markdownIt-Anchor\" href=\"#本项目参考学习文档为斯坦福计算机深度学习课程用于视觉识别的-cs231n-卷积神经网络\">#</a> 本项目参考学习文档为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jczIzMW4uZ2l0aHViLmlvL2NsYXNzaWZpY2F0aW9uLw==\">斯坦福计算机深度学习课程 —— 用于视觉识别的 CS231n 卷积神经网络</span></h1>\n<p>​\t曼哈顿距离：<img data-src=\"D:%5Cdesktop%5CCode_Compiling%5Ccs231n_stanford%5Creadme_picture%5C1.png\" alt=\"1\">，其中 I1 和 I2 是两幅图像，I1P 和 I2P 分别是 I1 和 I2 在位置 P 的像素值。差异矩阵也是像素点依次相减。通过衡量图像像素点的绝对值差之和差异性来</p>\n<p>​\t对于该预测方法还有 L2 距离，其定义为：<img data-src=\"D:%5Cdesktop%5CCode_Compiling%5Ccs231n_stanford%5Creadme_picture%5C3.jpg\" alt=\"3\"></p>\n<p>​\t最近临分类器：<br>\n​\t（1）训练：将训练数据存储在实际变量中。<br>\n​\t（2）预测：对每一个测试样本，计算其与训练样本 L1 的距离，找到距离最近的训练样本，将该训练样本的标签作为测试样本的预测标签。<br>\n​\t*<em> 训练方法</em> <em>：def train (self, X, y): X（训练数据，形状为 N</em>D，每一行都是一个样本）和 y（训练标签，大小为 N 的一维数组）, 然后存储在 self 类中。</p>\n<p>​\t <code>self.Xtr = X</code></p>\n<p>​\t <code>self.ytr = y</code></p>\n<p><strong>预测方法</strong></p>\n<p>predict 方法接受一个参数 x*(测试数据，形状为 N*D，每一行都是一个需要预测的样本)*</p>\n<p>num_test 表示测试样本的数量</p>\n<p>Ypred 初始化为零数组 <code>np.zeros(num_test,dtype=self.ytr.dtype)</code> , 前者表示数组的长度，即为包含元素的个数；后者是一个关键词参数，指定数组中的数据类型设置为与 self.ytr 数组的数据类型相同。dtype 是数据类型的缩写。</p>\n<p>对于每个测试样本，计算它与所有训练样本的 L1 距离：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distances = np.<span class=\"built_in\">sum</span>(np.<span class=\"built_in\">abs</span>(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过取绝对值差的和计算 L1 距离。</li>\n<li><code>self.Xtr - X[i,:]</code>  计算每个训练样本与第 <code>i</code>  个测试样本的差值。(这里  <code>self.Xtr</code>  是一个矩阵， <code>X[i,:]</code>  是一个向量 <code>X[i,:]</code>  表示矩阵  <code>X</code>  的第  <code>i</code>  行)</li>\n<li><code>self.Xtr - X[i,:]</code>  计算的是矩阵  <code>self.Xtr</code>  中的每一行向量减去向量  <code>X[i,:]</code>  的结果。</li>\n<li><code>np.abs(self.Xtr - X[i,:])</code> ：对上述差值矩阵中的每个元素取绝对值，得到一个与  <code>self.Xtr</code>  形状相同的矩阵。</li>\n<li><code>np.sum(..., axis=1)</code>  对每个样本的所有特征求和，得到每个训练样本与该测试样本的距离。</li>\n<li>通过  <code>min_index = np.argmin(distances)</code>  找到距离最小的样本 (<em>np.argmin: 返回最小距离对应的索引</em>)</li>\n</ul>\n<p><strong>Q: With N examples, how fast are training and prediction?</strong></p>\n<ul>\n<li>问题：对于 N 个样本，训练和预测的速度（效率）是多少？</li>\n</ul>\n<p><strong>A: Train O(1), predictO(N)</strong></p>\n<ul>\n<li>\n<p>回答：训练时间复杂度是 O (1)，预测时间复杂度是 O (N)。</p>\n</li>\n<li>\n<p><strong>训练时间复杂度 O (1)</strong>：训练阶段只需记住所有训练数据，不需要复杂计算，所以训练时间是常数时间，即与训练样本的数量 N 无关。</p>\n</li>\n<li>\n<p><strong>预测时间复杂度 O (N)</strong>：预测阶段，对于每个测试样本，需要计算其与所有训练样本的距离，并找到最近的那个训练样本。因此，预测时间与训练样本的数量 N 成正比。</p>\n</li>\n</ul>\n<p><strong>Q:This is bad: we want classifiers that are fast at prediction; slow for training is ok</strong></p>\n<ul>\n<li>为什么这是不好的设计？</li>\n</ul>\n<p><strong>A: 这是不好的设计：我们希望分类器在预测时速度快；在训练时速度慢是可以接受的。</strong></p>\n<ul>\n<li>在实际应用中，预测阶段通常比训练阶段更频繁。例如，一个已经训练好的分类器可能需要处理大量的实时预测请求。如果预测速度很慢，会严重影响系统的性能和用户体验。</li>\n<li>训练阶段可以相对较慢，因为训练通常是一个离线过程，可以在后台完成，不直接影响用户体验。</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>​\t最近邻分类器的一个主要缺点是它的预测阶段计算量大，对于每个测试样本需要计算其与所有训练样本的距离，因此预测速度较慢。这在需要快速响应的应用中是一个很大的问题，而对于训练阶段的速度要求则相对宽松。因此，更理想的分类器设计是训练阶段可以慢一些，但预测阶段必须非常快。</p>\n<h2 id=\"k-最近临法\"><a class=\"markdownIt-Anchor\" href=\"#k-最近临法\">#</a> K - 最近临法</h2>\n<p><img data-src=\"D:%5Cdesktop%5CCode_Compiling%5Ccs231n_stanford%5Creadme_picture%5C2.png\" alt=\"2\"></p>\n<p>​\t图中展示的是 K - 最近邻（K-Nearest Neighbors, K-NN）分类器的基本原理和效果。K-NN 分类器是一个简单但非常有效的分类算法，它的核心思想是根据一个样本的 K 个最近邻居来确定其类别。具体来说，这里通过 K 个最近邻居的多数投票来决定样本的分类。</p>\n<p><strong>白色区域：这个区域没有进行 k - 最近投票</strong></p>\n<p><strong>k=1：</strong></p>\n<ul>\n<li>当 K=1 时，分类器仅考虑与样本最近的一个邻居。这个邻居的类别直接决定了样本的类别。虽然这种方法非常直接和简单，但它容易受噪声和孤立点的影响，导致分类效果不稳定。</li>\n</ul>\n<p><strong>k=3：</strong></p>\n<ul>\n<li>当 K=3 时，分类器考虑与样本最近的三个邻居。样本的类别由这三个邻居的多数投票决定。相比于 K=1，这种方法更加鲁棒，能够更好地抵御噪声的影响。但是，它仍然可能受少数几个错误邻居的影响。</li>\n</ul>\n<p><strong>k=5：</strong></p>\n<ul>\n<li>当 K=5 时，分类器考虑与样本最近的五个邻居。样本的类别由这五个邻居的多数投票决定。进一步增加 K 值，分类器变得更加稳定，因为它综合了更多邻居的信息，减少了单个噪声点对分类结果的影响。然而，如果 K 值过大，分类器可能会包含过多不相关的邻居信息，导致分类结果不准确。</li>\n</ul>\n<h3 id=\"主要思想\"><a class=\"markdownIt-Anchor\" href=\"#主要思想\">#</a> 主要思想</h3>\n<ul>\n<li><strong>多数投票</strong>：K-NN 分类器的核心思想是 “多数投票”，即根据 K 个最近邻居中出现频率最高的类别来决定样本的类别。</li>\n<li><strong>距离度量</strong>：K-NN 分类器依赖于距离度量来确定最近的 K 个邻居。常用的距离度量方法包括欧氏距离、曼哈顿距离等。</li>\n<li><strong>参数选择</strong>：K 值的选择对分类效果有重要影响。K 值太小容易受噪声影响，K 值太大则可能引入过多无关信息。</li>\n</ul>\n<h2 id=\"接下来我们以cifar-10数据集的结果来进行代码编写\"><a class=\"markdownIt-Anchor\" href=\"#接下来我们以cifar-10数据集的结果来进行代码编写\">#</a> 接下来我们以<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudG9yb250by5lZHUvfmtyaXovY2lmYXIuaHRtbA==\"> CIFAR-10 数据集</span>的结果来进行代码编写</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle  <span class=\"comment\">#用于序列化和反序列化 Python 对象的库。在这里用于加载 CIFAR-10 数据集文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> KFold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_CIFAR_batch</span>(<span class=\"params\">filename</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Load a single batch of CIFAR-10 &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f: <span class=\"comment\">#以二进制模式(&#x27;rb&#x27;)打开文件</span></span><br><span class=\"line\">        datadict = pickle.load(f, encoding=<span class=\"string\">&#x27;latin1&#x27;</span>)  <span class=\"comment\">#使用pickle.load(f,encoding=&#x27;latin1&#x27;)反序列化文件内容，读取为字典对象</span></span><br><span class=\"line\">        X = datadict[<span class=\"string\">&#x27;data&#x27;</span>]</span><br><span class=\"line\">        Y = datadict[<span class=\"string\">&#x27;labels&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\">#将其从平坦形状(10000,3072)重塑为(10000,32,32,3),并且将数据类型转为浮点型。即10000张图</span></span><br><span class=\"line\">    <span class=\"comment\"># 每张图有32*32像素，每个像素有三个颜色通道</span></span><br><span class=\"line\">    <span class=\"comment\">#并且将像素类型转为浮点数</span></span><br><span class=\"line\">        X = X.reshape(<span class=\"number\">10000</span>, <span class=\"number\">32</span>, <span class=\"number\">32</span>, <span class=\"number\">3</span>).astype(<span class=\"string\">&#x27;float&#x27;</span>)</span><br><span class=\"line\">        Y = np.array(Y)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> X, Y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_CIFAR10</span>(<span class=\"params\">ROOT</span>): <span class=\"comment\">#ROOT表示CIFAR-10数据集根目录的路径</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Load all of CIFAR-10 &quot;&quot;&quot;</span></span><br><span class=\"line\">    xs = [] <span class=\"comment\">#存储每个批次的图像数据</span></span><br><span class=\"line\">    ys = [] <span class=\"comment\">#存储每个批次的标签</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">6</span>): <span class=\"comment\">#加载五个训练批次</span></span><br><span class=\"line\">        f = os.path.join(ROOT, <span class=\"string\">&#x27;data_batch_%d&#x27;</span> % (b,))  <span class=\"comment\">#依次加载文件里的五个批次</span></span><br><span class=\"line\">        X, Y = load_CIFAR_batch(f)  <span class=\"comment\">#调用load_CIFAR_batch（）函数来加载数据</span></span><br><span class=\"line\">        <span class=\"comment\">#将加载的的图像数据和标签分别添加到列表中</span></span><br><span class=\"line\">        xs.append(X)</span><br><span class=\"line\">        ys.append(Y)</span><br><span class=\"line\">    <span class=\"comment\">#将所有训练批次的数据合并为一个训练集</span></span><br><span class=\"line\">    Xtr = np.concatenate(xs)</span><br><span class=\"line\">    Ytr = np.concatenate(ys)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> X, Y    <span class=\"comment\">#释放内存，删除X和Y</span></span><br><span class=\"line\">    Xte, Yte = load_CIFAR_batch(os.path.join(ROOT, <span class=\"string\">&#x27;test_batch&#x27;</span>)) <span class=\"comment\">#加载测试批次的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Xtr, Ytr, Xte, Yte</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加载数据</span></span><br><span class=\"line\">Xtr, Ytr, Xte, Yte = load_CIFAR10(<span class=\"string\">r&#x27;D:\\desktop\\Code_Compiling\\cs231n_stanford\\example&amp;tests\\cifar-10-python\\cifar-10-batches-py&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 将数据拉成向量</span></span><br><span class=\"line\"><span class=\"comment\">#重塑数据：将训练数据 Xtr 和测试数据 Xte 从形状（num_samples, 32, 32, 3）转换为（num_samples, 3072）的向量形式</span></span><br><span class=\"line\"><span class=\"comment\"># 其中 3072 是 32x32 图像的像素总数乘以 3 个颜色通道。</span></span><br><span class=\"line\">Xtr_rows = Xtr.reshape(Xtr.shape[<span class=\"number\">0</span>], <span class=\"number\">32</span> * <span class=\"number\">32</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\">Xte_rows = Xte.reshape(Xte.shape[<span class=\"number\">0</span>], <span class=\"number\">32</span> * <span class=\"number\">32</span> * <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数据加载和预处理完成&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NearestNeighbor</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>): <span class=\"comment\">#初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">train</span>(<span class=\"params\">self, X, y</span>):  <span class=\"comment\">#该方法用于训练k-NN模型，将x和y存储为类的属性</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example. Y is 1-dimension of size N &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.Xtr = X    <span class=\"comment\">#X是N*D的矩阵，每行是一个训练样本</span></span><br><span class=\"line\">        self.ytr = y    <span class=\"comment\">#y是一个长度为N的一维数组，对应于每个训练样本的标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#预测给定的数据集x的标签,X是N*D的矩阵，每行都是一个测试样本</span></span><br><span class=\"line\">    <span class=\"comment\">#k是要考虑的最近邻居的数量，默认为1。distfn是距离度量方式，可以是：L1(曼哈顿距离)也可以是L2(欧几里得距离)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">predict</span>(<span class=\"params\">self, X, k=<span class=\"number\">1</span>, distfn=<span class=\"string\">&#x27;L1&#x27;</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot; X is N x D where each row is an example we wish to predict label for &quot;&quot;&quot;</span></span><br><span class=\"line\">        num_test = X.shape[<span class=\"number\">0</span>]   <span class=\"comment\">#这是测试集的样本数量</span></span><br><span class=\"line\">        Ypred = np.zeros(num_test, dtype=self.ytr.dtype)    <span class=\"comment\">#初始化为一个零数组，用于存储每个测试样本的预测标签</span></span><br><span class=\"line\">        <span class=\"comment\">#循环处理每个测试样本</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_test):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> distfn == <span class=\"string\">&#x27;L1&#x27;</span>:</span><br><span class=\"line\">                distances = np.<span class=\"built_in\">sum</span>(np.<span class=\"built_in\">abs</span>(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> distfn == <span class=\"string\">&#x27;L2&#x27;</span>:</span><br><span class=\"line\">                distances = np.sqrt(np.<span class=\"built_in\">sum</span>(np.square(self.Xtr - X[i,:]), axis=<span class=\"number\">1</span>))</span><br><span class=\"line\">            min_indices = np.argpartition(distances, k)[:k] <span class=\"comment\">#找到k个最近邻居的索引</span></span><br><span class=\"line\">            closest_y = self.ytr[min_indices]</span><br><span class=\"line\">            <span class=\"comment\">#预测标签</span></span><br><span class=\"line\">            <span class=\"comment\">#使用 np.bincount 统计最近邻居中每个标签的出现次数，并选择出现次数最多的标签作为预测标签。</span></span><br><span class=\"line\">            Ypred[i] = np.bincount(closest_y).argmax()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ypred</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练和评估模型</span></span><br><span class=\"line\">nn = NearestNeighbor()  <span class=\"comment\">#创建 NearestNeighbor 类的实例 nn。</span></span><br><span class=\"line\">nn.train(Xtr_rows, Ytr) <span class=\"comment\">#使用训练数据 Xtr_rows 和标签 Ytr 训练模型。</span></span><br><span class=\"line\">Yte_predict = nn.predict(Xte_rows)  <span class=\"comment\">#使用测试数据 Xte_rows 预测标签。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;accuracy: %f&#x27;</span> % (np.mean(Yte_predict == Yte)))   <span class=\"comment\">#计算并打印预测标签与真实标签的匹配率（准确率）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建验证集——从训练集中提取前1000个样本作为验证集</span></span><br><span class=\"line\">Xval_rows = Xtr_rows[:<span class=\"number\">1000</span>, :]  <span class=\"comment\">#验证集特征</span></span><br><span class=\"line\">Yval = Ytr[:<span class=\"number\">1000</span>]   <span class=\"comment\">#验证集标签</span></span><br><span class=\"line\">Xtr_rows = Xtr_rows[<span class=\"number\">1000</span>:, :]   <span class=\"comment\">#新训练集特征</span></span><br><span class=\"line\">Ytr = Ytr[<span class=\"number\">1000</span>:]    <span class=\"comment\">#新训练集标签</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 超参数调优——对于不同的k和距离度量方式进行超参数调优</span></span><br><span class=\"line\">validation_accuracies = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> distfn <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;L1&#x27;</span>, <span class=\"string\">&#x27;L2&#x27;</span>]:</span><br><span class=\"line\">        nn = NearestNeighbor()  <span class=\"comment\">#创建NearestNeighbor实例</span></span><br><span class=\"line\">        nn.train(Xtr_rows, Ytr) <span class=\"comment\">#训练</span></span><br><span class=\"line\">        Yval_predict = nn.predict(Xval_rows, k=k, distfn=distfn)    <span class=\"comment\">#预测</span></span><br><span class=\"line\">        acc = np.mean(Yval_predict == Yval) <span class=\"comment\">#验证</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;accuracy for k=<span class=\"subst\">&#123;k&#125;</span>, distfn=<span class=\"subst\">&#123;distfn&#125;</span>: <span class=\"subst\">&#123;acc&#125;</span>&#x27;</span>)</span><br><span class=\"line\">        validation_accuracies.append((k, distfn, acc))</span><br><span class=\"line\"><span class=\"comment\">#交叉验证函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cross_validation</span>(<span class=\"params\">X, y, k_choices, distfns</span>):</span><br><span class=\"line\">    kf = KFold(n_splits=<span class=\"number\">5</span>)  <span class=\"comment\">#将数据集分成五份</span></span><br><span class=\"line\">    validation_accuracies = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> k_choices: <span class=\"comment\">#对每个k和distfns组合进行操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> distfn <span class=\"keyword\">in</span> distfns:</span><br><span class=\"line\">            accs = []   <span class=\"comment\">#初始化一个空列表 accs 用于存储交叉验证的准确率</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> train_index, val_index <span class=\"keyword\">in</span> kf.split(X):</span><br><span class=\"line\">                X_train, X_val = X[train_index], X[val_index] <span class=\"comment\">#将数据分为训练集和验证集。</span></span><br><span class=\"line\">                y_train, y_val = y[train_index], y[val_index]</span><br><span class=\"line\"></span><br><span class=\"line\">                nn = NearestNeighbor()</span><br><span class=\"line\">                nn.train(X_train, y_train)</span><br><span class=\"line\">                y_val_predict = nn.predict(X_val, k=k, distfn=distfn)</span><br><span class=\"line\">                acc = np.mean(y_val_predict == y_val) <span class=\"comment\">#用验证集进行预测并计算准确率。</span></span><br><span class=\"line\">                accs.append(acc)</span><br><span class=\"line\">            avg_acc = np.mean(accs)<span class=\"comment\">#计算并打印每个 k 和 distfn 组合的平均准确率。</span></span><br><span class=\"line\">            validation_accuracies.append((k, distfn, avg_acc))<span class=\"comment\">#将 k、distfn 和平均准确率保存到 validation_accuracies 列表中。</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Cross-validation accuracy for k=<span class=\"subst\">&#123;k&#125;</span>, distfn=<span class=\"subst\">&#123;distfn&#125;</span>: <span class=\"subst\">&#123;avg_acc&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> validation_accuracies</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用交叉验证</span></span><br><span class=\"line\">k_choices = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">50</span>, <span class=\"number\">100</span>]</span><br><span class=\"line\">distfns = [<span class=\"string\">&#x27;L1&#x27;</span>, <span class=\"string\">&#x27;L2&#x27;</span>]</span><br><span class=\"line\">validation_accuracies = cross_validation(Xtr_rows, Ytr, k_choices, distfns)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>k-NN 阶段实现了一个简单的 k 近邻（k-Nearest Neighbors, k-NN）分类器，使用了 L1 距离（曼哈顿距离）和 L2 距离（欧几里得距离）</strong></p>\n<p><strong>代码注释已列与代码中</strong></p>\n",
            "tags": []
        }
    ]
}