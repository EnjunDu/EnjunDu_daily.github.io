{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"网安导论实验\" category",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E6%A0%88%E6%BA%A2%E5%87%BA/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E6%A0%88%E6%BA%A2%E5%87%BA/",
            "title": "栈溢出",
            "date_published": "2024-07-03T08:02:48.000Z",
            "content_html": "<h1 id=\"栈溢出简单实验enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#栈溢出简单实验enjun-du\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLU5ldC1TZWN1cml0eS1MYWItLS1TdGFjay1PdmVyZmxvdw==\">栈溢出简单实验 ——Enjun Du</span></h1>\n<h2 id=\"实验分析\"><a class=\"markdownIt-Anchor\" href=\"#实验分析\">#</a> 实验分析</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>栈被用于实现函数的调用以及存储局部变量，当使用诸如 strcpy、gets 等不安全函数时，攻击者通过向栈中某个变量写入的字节数超过了这个变量本身所申请的字节数，使得数据向高地址存储区域进行覆盖来修改返回地址，最终让程序根据攻击者的想法运行，这种攻击被称为栈溢出攻击</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>了解栈溢出攻击原理，并实现简单栈溢出攻击实验</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/2AK37EZWNygmMhw.png\" alt=\"image.png\"></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<ol>\n<li>编写程序，在主函数中调用 func_call 函数，但不调用 inject 函数</li>\n<li>在 func_call 函数中使用 strcpy 函数对 param 数组进行赋值</li>\n<li>攻击者通过对程序进行反汇编（可以使用 gdb 工具）查看汇编指令，通过不断修改 input 数组来将 func_call 函数的返回地址覆盖为指定值，最终使 inject 函数被调用</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/olXgCPWuf5FwEmN.png\" alt=\"image.png\"></p>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<p>为了成功执行攻击，需要关闭 Ubuntu 系统中的一系列保护机制，具体可在终端中输入：</p>\n<ul>\n<li><code>sudo apt-get install gcc-multilib</code> ，代表支持交叉编译 cross-compiling，例如可以在 64 位处理器上处理 32 位程序</li>\n<li><code>sudo sysctl -w kernel.randomize_va_space=0</code> ，代表关闭进程空间地址随机化功能</li>\n<li>使用  <code>gcc -Wall -g -o StackOverflow StackOverflow.c -fno-stack-protector -z execstack -m32</code>  编译程序，其中 - g 代表关闭所有优化机制，-fno-stack-protector 代表关闭 Stack Canary 保护，-z execstack 代表禁用 NX（No-eXecute protect）保护，-m32 代表在编译阶段将编译目标指定为 32 位</li>\n</ul>\n<h2 id=\"实验准备solved-by-enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#实验准备solved-by-enjun-du\">#</a> 实验准备 ——solved by Enjun Du</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">VMware</span> Workstation Pro</span><br><span class=\"line\"><span class=\"attribute\">Ubuntu</span> <span class=\"number\">18</span>.<span class=\"number\">04</span>.<span class=\"number\">6</span> LTS</span><br><span class=\"line\"><span class=\"attribute\">Red</span> Panda Dev-C++</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h3 id=\"实验代码\"><a class=\"markdownIt-Anchor\" href=\"#实验代码\">#</a> 实验代码</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> input[] = <span class=\"string\">&quot;11112222333344445555666677778888&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*****inject success*****\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">func_call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> <span class=\"type\">char</span> param[<span class=\"number\">16</span>];</span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(param,input);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span>** argv)</span>&#123; </span><br><span class=\"line\"> func_call();</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;main exit...\\n&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>\\1. 首先在 dev 上编辑 C 语言代码 StackOverflow.c 如上</p>\n</li>\n<li>\n<p>接下来为了成功执行攻击，需要关闭 Ubuntu 系统中的一系列保护机制：</p>\n<ul>\n<li>在命令行运行 cd /home/sky/Desktop 将地址定位在目标文件层</li>\n<li>在终端输入 sudo apt-get install gcc-multilib，代表支持交叉编译 cross-compiling，例如可以在 64 位处理器上处理 32 位程序</li>\n<li>在终端输入 sudo sysctl -w kernel.randomize_va_space=0，代表关闭进程空间地址随机化功能</li>\n<li>使用 gcc -Wall -g -o StackOverflow StackOverflow.c -fno-stack-protector -z execstack -m32 编译程序，其中 - g 代表关闭所有优化机制，-fno-stack-protector 代表关闭 Stack Canary 保护，-z execstack 代表禁用 NX（No-eXecute protect）保护，-m32 代表在编译阶段将编译目标指定为 32 位</li>\n</ul>\n</li>\n<li>\n<p>对程序分析可知，其将在第 15 行执行输出操作，故我们将断点设置在 15 行。接下来使用 gdb 程序对该代码进行调试</p>\n<ul>\n<li>\n<p>首先使用如下代码安装 gdb</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install gdb</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在终端输入 gdb StackOverflow 开启调试<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/2VIume3T1Pswky7.png\" alt=\"image.png\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>根据分析代码，我们发现关键代码在 13 行，故在 13 行设置断点。我们输入命令：break  13。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/B8HCPynamgcQ3zu.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入命令 run 代表运行程序至断点处<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/A43gNRu1Utl7soC.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>输入 disassemble 后回车<br>\n结果如下：<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/cxNOVuQGhe51JoE.png\" alt=\"image.png\"><br>\n<strong>=&gt; 这一行即为断点（13 行) 的步骤行。</strong></p>\n</li>\n<li>\n<p>输入 info registers ebp esp 来查看寄存器里的栈顶指针和栈底指针<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/GxSRyAmla2YPipD.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入 print&amp;param 来查看 param 数组的首地址<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QakZYVf8OUgPB5d.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\9. 输入  <code>x/2xw 0xffffd1a8</code>  来查看该 func_call 函数的返回地址，在这个命令中，“x” 是一个 GDB 命令，它是 “examine memory” 的缩写，用于检查内存中的内容。&quot;/2xw&quot; 是一个格式化参数，它告诉 GDB 以十六进制格式显示两个字（32 位）的内容，并将其解释为一个有符号整数。“0xffffd1a8” 是内存地址，表示我们要查看的内存位置。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/CDNmOWRhMsgGv7o.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后输入 disassemble main 来反汇编 main 函数。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/gCpST7F5xnJcZID.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>可以看到 func_cal 函数的<strong>返回地址 0x565556c6 指向 main 函数里的 &lt;+31&gt;，其 and 所指的位置是 &lt;+4&gt;</strong></p>\n</li>\n<li>\n<p>输入 print&amp;inject 来查看 inject 函数的地址<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/ZNlgi465YJwDSnQ.png\" alt=\"image.png\"></p>\n<p>​\t现在我们分析所获取到的信息：func_cal 函数的返回地址为 0xffffd1ac（0xffffd1a8+0x4），。param 的首地址为 0xffffd190, 两者相差 28 个字节。查看到 inject 函数地址为 0x5655554d, 因此可以将 input 输入更改为 “28 个字节 + 4 位 inject 地址”。故将 input 修改为 char input [] = “AAAAABBBBBCCCCCDDDDDEEEEEFFF\\x4d\\x55\\x55\\x56”; 后重新编译程序</p>\n</li>\n<li>\n<p>在代码中修改 input 后重新编译程序<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/HETBnRgaZQFiXGf.png\" alt=\"image.png\"></p>\n<h3 id=\"如上图所示攻击完成\"><a class=\"markdownIt-Anchor\" href=\"#如上图所示攻击完成\">#</a> 如上图所示，攻击完成。</h3>\n<h2 id=\"结论和体会\"><a class=\"markdownIt-Anchor\" href=\"#结论和体会\">#</a> 结论和体会</h2>\n<p>​\t在本次实验中，我深入了解并实践了栈溢出攻击的原理与技术。通过设计和实施一个简单的栈溢出攻击，我不仅加深了对程序内存布局和操作系统安全机制的理解，还学会了如何在实际环境中利用软件漏洞。</p>\n<p>​\t实验的过程中，我首先在 Ubuntu 系统下编写了一个简单的 C 程序，该程序包含了易受栈溢出攻击的漏洞。通过精心构造输入数据，我成功引导程序执行了未授权的 inject 函数，从而实现了攻击目标。实验过程中，我关闭了操作系统的几项安全保护机制，如地址空间布局随机化（ASLR）、栈保护等，以模拟一个容易受到攻击的环境。</p>\n<p>通过本次实验，我学习到了几个重要的技术和概念：</p>\n<p>​\t1. 栈溢出的原理：了解了栈溢出是如何通过覆盖函数的返回地址来控制程序流程的。</p>\n<p>​\t2. 安全保护机制的重要性：实验中需要关闭的安全保护机制说明了这些机制在防御栈溢出攻击中的重要作用。</p>\n<p>​\t3. 调试和分析工具的应用：通过使用 gdb 调试工具和其它命令行工具，我学会了如何分析程序的内存布局和识别潜在的安全漏洞。</p>\n<p>​\t这次实验不仅加强了我的理论知识，也提高了我的实践技能，让我对计算机安全领域有了更深刻的理解。我认识到，编写安全的代码需要程序员具备深厚的安全意识和技能，以及对各种攻击技术和防御策略的熟悉。未来，我希望能够继续深入研究这一领域，为创建更安全的软件环境做出贡献。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/",
            "title": "应用安全",
            "date_published": "2024-07-03T07:32:28.000Z",
            "content_html": "<h1 id=\"应用安全蓝天\"><a class=\"markdownIt-Anchor\" href=\"#应用安全蓝天\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktTGFiLS0tQXBwbGljYXRpb24tU2VjdXJpdHk=\">应用安全 —— 蓝天 °</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>​\t大多数 Web 应用程序攻击都是来源于 XSS、CSRF 和 SQL 注入攻击，这些攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序，其中 CSRF 存在是指攻击者构建的恶意网站被用户访问后，返回一些攻击性代码，并发出一个请求要求访问第三方站点，从而盗用用户身份，如用户名义发送邮件、虚拟货币转账等</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>实现本地 Web 攻击和防御</p>\n<h3 id=\"实验步骤建议\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤建议\">#</a> 实验步骤建议</h3>\n<ol>\n<li>\n<p>安装 Flask 框架并启动提供的源代码</p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击</p>\n</li>\n<li>\n<p>使用防御方法，防范 XSS 攻击</p>\n</li>\n<li>\n<p>增加一个登录功能，设计有 SQL 注入隐患的代码，进行攻击，并且展示如何进行防范</p>\n</li>\n<li>\n<p>设计一个 CSRF 攻击范例</p>\n</li>\n<li>\n<p>【选做】防御 CSRF 攻击 ——<strong> 如你所见，杜爹当然会做</strong></p>\n<h3 id=\"实验步骤细化\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤细化\">#</a> 实验步骤细化</h3>\n<ol>\n<li>\n<p>安装 Flask 框架并启动提供的源代码<br>\n在资料目录启动终端并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create --name flask python=3.10</span><br><span class=\"line\">conda activate flask</span><br><span class=\"line\">pip install flask</span><br><span class=\"line\">flask run</span><br></pre></td></tr></table></figure>\n<p>访问终端提示的网址</p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/S2ORTKytMAejcm6.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>访问网页并实现 XSS 反射型与持久型攻击<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/42Azk5tsp9U8rQM.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>使用防御方法，防范 XSS 攻击。可以通过检验输入文字，转其转为全角字符进行防御</p>\n</li>\n<li>\n<p>修改 app.py 和 index.html，使得网页增加一个登录功能。设计有 SQL 注入隐患的代码，进行攻击，并且展示如何进行防范。这里可以使用使用 SQLite 作为数据库<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/lgCdL4KqWGMIH5B.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>设计一个 CSRF 攻击范例<br>\n在网站不部署 XSS 防御时，新建一个网页作为恶意网站。<br>\n直接访问该恶意网站时会出现跳转至原网站，且当有原网站有合法用户登录时，会成功发起反射型 XSS 攻击。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/qabwGJEKxVpiys7.png\" alt=\"image.png\"></p>\n</li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">磁盘驱动器：NVMe KIOXIA- EXCERIA G2 SSD</span><br><span class=\"line\">NVMe Micron 3400 MTFDKBA1TOTFH</span><br><span class=\"line\">显示器：NVIDIA GeForce RTX 3070 Ti Laptop GPU</span><br><span class=\"line\">系统型号\tROG Strix G533ZW_G533ZW</span><br><span class=\"line\">系统类型\t基于 x64 的电脑</span><br><span class=\"line\">处理器\t12th Gen Intel(R) Core(TM) i9-12900H，2500 Mhz，14 个内核，20 个逻辑处理器</span><br><span class=\"line\">BIOS 版本/日期\tAmerican Megatrends International, LLC. G533ZW.324, 2023/2/21</span><br><span class=\"line\">BIOS 模式\tUEFI</span><br><span class=\"line\">主板产品\tG533ZW</span><br><span class=\"line\">操作系统名称\tMicrosoft Windows 11 家庭中文版</span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VMware Workstation Pro</span><br><span class=\"line\">Ubuntu 18.04.6 LTS</span><br><span class=\"line\">Kali linux</span><br><span class=\"line\">Microsoft Windows 11 家庭中文版</span><br></pre></td></tr></table></figure>\n<h2 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\">#</a> 实验开始</h2>\n<ol>\n<li>\n<p>先打开终端运行 sudo apt install python3 安装 python3 环境</p>\n</li>\n<li>\n<p>先采用 <code>sudo apt update</code>  和 sudo apt install python3-flask -y 来安装 Flask 框架</p>\n</li>\n<li>\n<p>在 kali 中创建 topic13 文件夹，包含已经给出的代码资料<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/mdVikAz1RLWUCKv.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端上输入命令 python <span class=\"exturl\" data-url=\"aHR0cDovL2FwcC5weQ==\">app.py</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hcHAtbzk5Zmg2Nmwyb2oucHk=\">来运行 app.py</span>，出现如下图片即表示运行成功。可通过在浏览器访问地址 localhost:5000 或者 127.0.0.1:5000 来访问该地址<img data-src=\"https://s2.loli.net/2024/07/03/Mw3Xl8pzHLcexiy.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在首先进行 XSS 反射型实验：在地址上输入 <code>http://127.0.0.1:5000/?content=&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;&amp;submit=</code>  提交，当显示如下弹窗时，则证明攻击成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/IiRQ5lsuX9v7bGL.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在执行 XSS 持久型实验：在评论栏输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后点击提交新评论，此时网址 https://www.yuanshen.com 便已经被存储在评论 XSS 持久型攻击 —— 原神，启动！里面了。点击该评论跳转原神官网，攻击成功！<img data-src=\"https://s2.loli.net/2024/07/03/V5Y2ARQsaxXcdDO.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/ir1c6WLpdB74UKe.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>现在修改 app.py 的代码来防止 XSS 攻击，修改后代码如下:</p>\n<p>修改地方如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, escape</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.utils <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设的评论数据集</span></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 通过 escape 函数转义用户输入</span></span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 对查询参数进行转义以防止反射型XSS攻击</span></span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"comment\"># 默认情况下渲染页面，展示所有评论</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用了 “escape” 函数来转义用户输入</li>\n<li>对 POST 请求中的‘comment’进行转义</li>\n<li>对 GET 请求中的‘query’进行转义</li>\n</ul>\n<p>原因：转义可以将用户输入中的特殊 HTML 字符（如 &lt;,&gt;, &amp;, &quot; 等）转换为它们的 HTML 实体形式（例如，&lt; 转换为 &lt;）。这意味着当浏览器渲染这些转义后的字符时，它们不会被作为 HTML 标签或 JavaScript 代码执行，而是作为普通文本显示。这样，即使用户输入了 <script>alert(‘XSS’)</script> 这样的代码，它也只会被显示出来，而不会执行</p>\n<p>原因：<br>\n（1）<strong>防止反射型 XSS 攻击：</strong> 通过对 URL 参数（如搜索查询）进行转义，即使攻击者试图通过构造含有恶意脚本的 URL 来发起反射型 XSS 攻击，这些脚本也不会执行。因为在 HTML 中，这些脚本已被转义，不会被浏览器解释为代码</p>\n<p>（2）<strong>防止持久型 XSS 攻击：</strong> 通过对用户提交的评论内容进行转义，即使攻击者在评论中嵌入了 JavaScript 代码，这些代码也只会作为普通文本被存储和显示，而不会在其他用户浏览评论时执行。这样，就算这些评论包含了恶意代码，也不会对其他用户造成威胁</p>\n<p>** 测试：** 输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:5000/?content=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;XSS反射实验成功！&#x27;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=提交</span><br></pre></td></tr></table></figure>\n<p>后，显示 <code>“查询评论&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;”</code> ，故该代码未被执行，防止反射型 XSS 攻击成功！<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/LJCDIHqz2f3kK7T.png\" alt=\"image.png\"></p>\n<p>在评论栏输入代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后，点击提交新评论，显示得到如下评论，故可知道转义后的代码不会被执行，代码会被当做纯文本显示在评论上。<strong>防止 XSS 持久型攻击成功</strong>！</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/oeh6iEVf2LRJuCk.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端输入命令 python -c &quot;import sqlite3&quot; 来导入 sqlite3 模块</p>\n</li>\n<li>\n<p>在 Flask 中创建一个名为‘init_db.py’的 Python 文件，然后运行该文件创建初始化数据库和用户表‘login.db’。这里创建了一个初始账户，账号为 sky，密码为 sky666.<br>\n 源码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\">connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个用户表</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CREATE TABLE users(id INTEGER PRIMARY KEY, username TEXT, password TEXT)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入示例用户</span></span><br><span class=\"line\">cursor.execute(<span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO users(username, password) VALUES (&#x27;sky&#x27;, &#x27;sky666&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">connection.commit()</span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建一个 login.html，增加登录和注册功能，源码如下:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        Username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        Password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/register&quot;</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    &#123;% if error %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>再创建一个 register.html，增加注册功能，源码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Register<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/register&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        Username: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;newUsername&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        Password: <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;newPassword&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Register&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 index.html，增加退出登录功能</p>\n</li>\n<li>\n<p>修改 app.py 函数，代码原理：首先进入链接后检测是否成功登陆，如果没有成功登陆则跳转 login.html，login.html 包含 login 和 register，如果没有账号可以点击 register 跳转 register.html 来进行注册。然后在 login 输入账号密码登录成功后跳转 index.html，index.html 李有 logout 选项，点击 Logout 后会退出登录返回到 login.html 中。源码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, redirect, url_for, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.utils <span class=\"keyword\">import</span> escape</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = <span class=\"string\">&#x27;fan_xing_yu_is_little_boy_mother&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设的评论数据集</span></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注册功能</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/register&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">register</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        new_username = request.form[<span class=\"string\">&#x27;newUsername&#x27;</span>]</span><br><span class=\"line\">        new_password = request.form[<span class=\"string\">&#x27;newPassword&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;</span>, (new_username, new_password))</span><br><span class=\"line\">        connection.commit()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;register.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> session.get(<span class=\"string\">&#x27;logged_in&#x27;</span>):  <span class=\"comment\"># 检查用户是否登录</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))  <span class=\"comment\"># 未登录，重定向到登录页面</span></span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 从表单中获取用户名和密码</span></span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 故意引入 SQL 注入的隐患（仅作为演示，实际中不应这么做）</span></span><br><span class=\"line\">        query = <span class=\"string\">f&quot;SELECT * FROM users WHERE username = &#x27;<span class=\"subst\">&#123;username&#125;</span>&#x27; AND password = &#x27;<span class=\"subst\">&#123;password&#125;</span>&#x27;&quot;</span></span><br><span class=\"line\">        cursor.execute(query)</span><br><span class=\"line\"></span><br><span class=\"line\">        user = cursor.fetchone()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;logged_in&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Invalid username or password&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">logout</span>():</span><br><span class=\"line\">    session.pop(<span class=\"string\">&#x27;logged_in&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>SQL 注入攻击演示<br>\n打开 app.py 后，在 login 里的 username 中输入 <code>' OR '1'='1' --</code> ，在 password 中可以不作任何输入，点击登录，可以发现，页面直接跳转到了 index.html。</p>\n</li>\n<li>\n<p>原理分析：<br>\n最开始的判定代码为： <code>‘SELECT * FROM users WHERE username = '&#123;username&#125;' AND password = '&#123;password&#125;'’</code> ，当我们输入’ OR ‘1’=‘1’ -- 后，代码就变为了 <code>‘SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '任意值'’</code> 。</p>\n<p>’ OR '：这个片段是试图打破原有 SQL 查询的逻辑，通过添加一个总是为真的条件（‘1’=‘1’）。<br>\n此时我们可以知道，‘1’=‘1’永远判定为真</p>\n<p>‘–’：这是 SQL 中的注释标记。在这个上下文中，它的作用是注释掉 SQL 语句的剩余部分，特别是与密码相关的那部分，这样 SQL 服务器就不会检查密码是否正确。</p>\n</li>\n<li>\n<h4 id=\"sql防御\"><a class=\"markdownIt-Anchor\" href=\"#sql防御\">#</a> SQL 防御：</h4>\n<p>在 app.py 里将 login 函数修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\">        connection = sqlite3.connect(<span class=\"string\">&#x27;login.db&#x27;</span>)</span><br><span class=\"line\">        cursor = connection.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 使用参数化查询防止 SQL 注入</span></span><br><span class=\"line\">        cursor.execute(<span class=\"string\">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>, (username, password))</span><br><span class=\"line\"></span><br><span class=\"line\">        user = cursor.fetchone()</span><br><span class=\"line\">        connection.close()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;logged_in&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&quot;Invalid username or password&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br></pre></td></tr></table></figure>\n<p>再次运行后，输入’ OR ‘1’=‘1’ -- 后发现显示 Invalid username or password</p>\n</li>\n<li>\n<p><strong>原理分析</strong>：为了防御 SQL 攻击，我们应该避免直接将用户的输入拼接到 SQL 查询中。故我采用参数化查询，这种方式可以确保传入的参数不会被解释为 SQL 代码的一部分，而是作为数据处理。在上述 login 函数的修改中，我使用参数化查询替代字符串格式化。<br>\n这么设置的好处是应用程序不再对 SQL 注入攻击易受攻击，因为用户输入被安全地处理为查询的一部分，而不是作为 SQL 代码执行。</p>\n</li>\n<li>\n<h4 id=\"csrf攻击设计\"><a class=\"markdownIt-Anchor\" href=\"#csrf攻击设计\">#</a> CSRF 攻击设计：</h4>\n<p>设计 CSRF_attack.html 源码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>恶意网站<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 构建目标网站的URL，包括恶意的XSS代码</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> targetUrl = <span class=\"string\">&quot;http://127.0.0.1:5000/?content=%3Cscript%3Ealert(&#x27;XSS%E5%8F%8D%E5%B0%84%E5%AE%9E%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%81&#x27;)%3C%2Fscript%3E&amp;submit=%E6%8F%90%E4%BA%A4&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 利用Image对象发起GET请求，绕过同源策略</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        img.<span class=\"property\">src</span> = targetUrl;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>该源码使用转义，将想要输入的 ur <code>l“http://127.0.0.1:5000/?content=&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;&amp;submit=提交”</code>  转义为 “ <code>&quot;http://127.0.0.1:5000/?content=%3Cscript%3Ealert('XSS%E5%8F%8D%E5%B0%84%E5%AE%9E%E9%AA%8C%E6%88%90%E5%8A%9F%EF%BC%81')%3C%2Fscript%3E&amp;submit=%E6%8F%90%E4%BA%A4&quot;;</code> ”</p>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>构造思路</strong>：构建恶意 URL：targetUrl 变量中存储了目标网站的 URL，其中包括了一个查询参数 content。这个参数通过 URL 编码嵌入了恶意的 JavaScript 代码，这段代码是<script>alert (‘XSS 反射实验成功！’)</script>。当目标网站接收到这个请求并处理 content 参数时，假设它没有对这个参数进行适当的清理或转义，那么这段 JavaScript 代码将在用户的浏览器中执行。</p>\n<p>利用 Image 对象发起 GET 请求：通过创建一个 Image 对象并将其 src 属性设置为构建好的恶意 URL，实际上发起了一个对目标 URL 的 GET 请求。这个请求是在不需要用户交互的情况下自动完成的。由于是通过<img>标签加载资源的方式，它可以绕过一些简单的同源策略限制。</p>\n</li>\n<li>\n<p>结果展示：在运行 app.py 后浏览器打开 CSRF_attack.html，可以发现 app.py 终端显示被 XSS 反射型攻击成功：<img data-src=\"https://s2.loli.net/2024/07/03/ZybtVQejqlP7Ghz.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<h3 id=\"选做之如何防御csrf攻击\"><a class=\"markdownIt-Anchor\" href=\"#选做之如何防御csrf攻击\">#</a> 选做之如何防御 CSRF 攻击</h3>\n<p>为了防御 CSRF 攻击，需要使用 POST 请求而不是 GET，并且实施 CSRF 保护</p>\n</li>\n<li>\n<p>首先在终端运行 pip install Flask-WTF 来下载 Flask-WTF 进行 CSRF 保护</p>\n</li>\n<li>\n<p>接着修改 app.py 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, session, redirect, url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf <span class=\"keyword\">import</span> FlaskForm</span><br><span class=\"line\"><span class=\"keyword\">from</span> wtforms <span class=\"keyword\">import</span> StringField, SubmitField</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf.csrf <span class=\"keyword\">import</span> CSRFProtect</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;fan_xing_yu_is_little_boy_mother&#x27;</span></span><br><span class=\"line\">csrf = CSRFProtect(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义评论表单类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CommentForm</span>(<span class=\"title class_ inherited__\">FlaskForm</span>):</span><br><span class=\"line\">    newComment = StringField(<span class=\"string\">&#x27;评论&#x27;</span>)</span><br><span class=\"line\">    submit = SubmitField(<span class=\"string\">&#x27;提交新评论&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    form = CommentForm()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> form.validate_on_submit():</span><br><span class=\"line\">        comment = form.newComment.data.strip()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">            dataset.append(comment)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">    query = request.args.get(<span class=\"string\">&#x27;content&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query.lower() <span class=\"keyword\">in</span> x.lower()]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, form=form, comments=sub_dataset, query=query)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 index.html 代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Web安全实验<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>查询评论<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        搜索内容：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;搜索内容&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    &#123;% if query %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>查询评论 &quot;&#123;&#123; query &#125;&#125;&quot; 结果如下：<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>所有的评论如下：<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% for comment in comments %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; comment &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>发布评论<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; form.newComment.label &#125;&#125;: &#123;&#123; form.newComment(size=20) &#125;&#125;<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/jMSQfyTWsonIBNC.png\" alt=\"image.png\"></p>\n<p>我们此时运行 app.py 后再点击 CSRF_attack.py，显示攻击失败</p>\n</li>\n</ol>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>​\t通过本次实验，我深入理解了 Web 安全中几种常见攻击方式：XSS 和 CSRF，以及 SQL 注入的概念和防御策略。通过实际操作实验，我不仅加深了对这些概念的认识，也学会了如何在实际开发中应用相关防御技术。</p>\n<p>​\tXSS 攻击及防御：通过构造特殊的 URL 或输入恶意脚本代码到评论中，我成功模拟了反射型和持久型 XSS 攻击。这一过程让我认识到了用户输入验证和转义的重要性。通过使用 escape 函数转义用户输入，我学会了一种有效防御 XSS 攻击的方法。这个方法能够防止恶意脚本执行，保护网站和用户免受攻击。</p>\n<p>​\tSQL 注入及防御：我通过在登录框中输入特殊的 SQL 语句成功实现了 SQL 注入攻击，绕过了登录验证。攻击成功后，通过修改代码，采用参数化查询的方式，我学会了如何防御 SQL 注入攻击。这种方法通过将输入作为参数传递给 SQL 语句，有效避免了恶意输入被解释执行的风险。</p>\n<p>​\tCSRF 攻击及防御：我尝试通过构造恶意网页自动提交表单的方式发起 CSRF 攻击，但最终通过引入 Flask-WTF 提供的 CSRF 保护机制成功防御了这种攻击。通过实验，我了解到 CSRF 令牌的作用及其在 Web 应用安全中的重要性。</p>\n<p>​\t安全意识的重要性：作为一名 Web 开发者，必须具备安全意识，了解常见的 Web 攻击方式和防御策略，这对于开发安全的 Web 应用至关重要。</p>\n<p>​\t持续学习和实践：随着 Web 技术的发展，新的安全威胁不断出现。只有不断学习和实践，才能有效地应对这些安全挑战。</p>\n<p>​\t工具和库的作用：Flask-WTF 等工具和库提供了方便的防御机制，如 CSRF 保护、用户输入的转义等，能够大大提高开发效率和应用安全性。合理利用这些工具和库，可以让我们更加专注于业务逻辑的开发。</p>\n<p>​\t安全策略的综合运用：在实际开发中，应综合运用各种安全策略，如输入验证、参数化查询、使用 HTTPS、设置合理的 HTTP 安全头等，来构建一个多层次的安全防御体系。</p>\n<p>​\t通过本次实验，我不仅掌握了一些具体的防御技术，也对 Web 安全的重要性有了更深刻的认识。在未来的学习和工作中，我将继续关注 Web 安全领域的最新动态，不断提高自己的安全防御能力。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E9%98%B2%E5%BE%A1_%E9%80%89%E5%81%9A/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E9%98%B2%E5%BE%A1_%E9%80%89%E5%81%9A/",
            "title": "人工智能算法安全_后门防御_选座",
            "date_published": "2024-07-03T07:03:48.000Z",
            "content_html": "<h1 id=\"人工智能算法安全_后门防御_选做\"><a class=\"markdownIt-Anchor\" href=\"#人工智能算法安全_后门防御_选做\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktLS1BSS1BbGdvcml0aG1pYy1TZWN1cml0eV9CYWNrZG9vci1EZWZlbnNlX09wdGlvbmFs\">人工智能算法安全_后门防御_选做</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>面向后门攻击的防御，指的是利用数据的独特属性或者精心设计的防御机制，来降低后门攻击的成功率。为了防御后门攻击，本实验可以主动地识别输入数据中是否包含用于后门攻击的触发器（也就是特定模式的噪音），或者通过数据的其他特性来削弱甚至抵消后门攻击的性能</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>在已实现后门攻击的基础之上，参考所给论文，实现后门攻击的防御</p>\n<h3 id=\"参考论文\"><a class=\"markdownIt-Anchor\" href=\"#参考论文\">#</a> 参考论文</h3>\n<p>Neural Cleanse: Identifying and Mitigating Backdoor Attacks in Neural Networks</p>\n<h3 id=\"参考代码\"><a class=\"markdownIt-Anchor\" href=\"#参考代码\">#</a> 参考代码</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JvbHVud2FuZy9iYWNrZG9vcg==\">backdoor</span></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/aBpGmKLuF3gd2ri.png\" alt=\"image.png\"></p>\n<ol>\n<li>\n<p>训练一个能将后门数据识别为单一指定标签的后门攻击模型</p>\n</li>\n<li>\n<p>在步骤 1 模型上，针对每个类别生成一个反向触发器，根据各触发器 L1 范数大小，基于 MAD 技术，判断该模型确被后门所污染</p>\n</li>\n<li>\n<p>获得后门模型的反向触发器后，从下列三种方法中任选一种，实现后门攻击的防御</p>\n<ul>\n<li><strong>识别过滤后门输入</strong>：建立神经元激活过滤器。激活值定义为第二层到最后一层中激活值排名前 1% 的神经元的平均激活值。过滤器将后门输入识别为那些激活值高于一定阈值的输入，模型将不对这些输入进行预测</li>\n<li><strong>后门削弱 —— 剪枝</strong>：关注神经网络各个中间层神经元的激活值，并修剪一定比例的神经元（优先考虑修改在干净输入和后门输入之间激活差距最大的神经元）。即在推理过程中将这些神经元的输出值设置为 0，当修剪后的模型不再响应反向触发时，停止剪枝</li>\n<li><strong>后门削弱 ——Unlearning</strong>：对后门模型进行重新训练，使得模型遗忘原来的后门。使用步骤 2 中获得的反向触发器，将其与正常训练数据结合，且数据对应原本的标签。利用构造的新训练集对模型再次进行训练，使得受到后门攻击的模型可以识别后门输入的正确标签</li>\n</ul>\n<h3 id=\"实验预期\"><a class=\"markdownIt-Anchor\" href=\"#实验预期\">#</a> 实验预期</h3>\n<p>​\t在防御之后，模型被攻击成功的概率将会明显下降，但是模型对良性样本预测的准确率也会略有下降</p>\n<h3 id=\"实验方法\"><a class=\"markdownIt-Anchor\" href=\"#实验方法\">#</a> 实验方法</h3>\n<p>​\t本实验采用识别<strong>过滤后门输入</strong>来进行后门攻击的防御</p>\n</li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">支持 Pytorch深度学习框架、支持 Python <span class=\"number\">3.5</span>或更高版本的编程环境</span><br><span class=\"line\">PyCharm <span class=\"number\">2023.2</span> 专业版</span><br><span class=\"line\">python3<span class=\"number\">.6</span></span><br><span class=\"line\">h5py                      <span class=\"number\">3.1</span><span class=\"number\">.0</span></span><br><span class=\"line\">keras                     <span class=\"number\">2.2</span><span class=\"number\">.2</span>                   </span><br><span class=\"line\">keras-applications        <span class=\"number\">1.0</span><span class=\"number\">.4</span>                  </span><br><span class=\"line\">keras-preprocessing       <span class=\"number\">1.0</span><span class=\"number\">.2</span>                    </span><br><span class=\"line\">numpy                     <span class=\"number\">1.14</span><span class=\"number\">.5</span></span><br><span class=\"line\">pillow                    <span class=\"number\">8.4</span><span class=\"number\">.0</span></span><br><span class=\"line\">tensorflow-gpu                <span class=\"number\">1.10</span><span class=\"number\">.0</span></span><br><span class=\"line\">tensorflow                <span class=\"number\">1.10</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<ol>\n<li>\n<p>由于实验所用环境为 python3.6，故我们先打开 Anaconda Prompt 后输入命令 <code>conda create -n py36 python=3.6</code>  来创建一个名为 py36 的 python3.6 虚拟环境</p>\n</li>\n<li>\n<p>win+R 后 cmd 进入先输入命令 conda init 来初始化 conda，退出后再次进入后输入命令 conda activate py36 来激活该 3.6 环境</p>\n</li>\n<li>\n<p>然后运行命令 <code>conda install h5py=3.1.0 keras=2.2.2 keras-applications=1.0.4 keras-preprocessing=1.0.2 numpy=1.14.5 pillow=8.4.0 tensorflow=1.10.0 tensorflow-gpu=1.10.0</code>  来安装指定的库</p>\n</li>\n<li>\n<p>在 pycharm 里找到该虚拟环境的地址，然后选择系统解释器，此处我电脑上该 3.6 的解释器位于 F:\\Anaconda\\envs\\py36\\python.exe</p>\n</li>\n<li>\n<p>运行 gtsrb_visualize_example.py 文件，发现环境配置成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/gh9oL71c4yqMHER.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在本章，我选择通过识别过滤后门输入来实现后门的防御，即建立神经元激活过滤器。激活值定义为第二层到最后一层中激活值排名前 1% 的神经元的平均激活值。过滤器将后门输入识别为那些激活值高于一定阈值的输入，模型将不对这些输入进行预测</p>\n</li>\n<li>\n<p>分析原始输出：<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/mo93SkOYl7XJraQ.png\" alt=\"image.png\"></p>\n<p>这一段输出结果来自于一个优化过程，其目的是调整和优化一个后门触发器在机器学习模型中的表现。分析时需要关注几个关键指标：成本（cost）、攻击成功率（attack）、总损失（loss）、分类损失（ce）、正则化损失（reg）以及最佳正则化损失（reg_best）。这些指标有助于评估触发器的效果和对模型的干扰程度。<br>\n<strong>up cost from 1.60E-02 to 3.20E-02&quot;</strong>：成本系数从 0.016 提高到 0.032。这通常意味着在优化过程中，正则化损失对总损失的贡献被增加，目的是为了简化或减少触发器的复杂度，使其更难被检测。</p>\n<p>步骤 50 到 56 每一步的具体情况如下：</p>\n<p><strong>攻击成功率（Attack）</strong>：这一指标在 0.979 到 0.994 之间波动，显示了触发器在这些步骤中的有效性。数值接近 1 表示高成功率。</p>\n<p><strong>总损失（Loss）</strong>：随着正则化损失和分类损失的变化而变化，反映了总体的优化效果。</p>\n<p><strong>分类损失（CE）</strong>：这一指标衡量的是触发器使模型在正常分类任务上的表现差异。数值较低表示触发器对模型正常功能的干扰较小。</p>\n<p><strong>正则化损失（Reg）</strong>：衡量触发器复杂度的指标，优化目标是减少这一值，使得触发器更难被发现。在这几步中，这一指标有所波动但整体趋势为逐步降低。</p>\n<p><strong>最佳正则化损失（Reg_best）</strong>：在步骤 55 中，达到了 52.034966，这是观察期间的最低值，表示找到了一个相对简单且效果良好的触发器配置。</p>\n</li>\n<li>\n<p>现在开始后门防御的实现：<br>\n设计 defense.py 代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NeuralFilter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, model</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 提取模型的各层输出作为一个新模型的输出</span></span><br><span class=\"line\">        self.layer_outputs = [layer.output <span class=\"keyword\">for</span> layer <span class=\"keyword\">in</span> model.layers[<span class=\"number\">1</span>:]]  <span class=\"comment\"># 从第二层到最后一层</span></span><br><span class=\"line\">        self.activation_model = Model(inputs=model.<span class=\"built_in\">input</span>, outputs=self.layer_outputs)</span><br><span class=\"line\">        self.thresholds = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">compute_activation_thresholds</span>(<span class=\"params\">self, training_data, percentile=<span class=\"number\">99</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;在训练数据上计算每层的神经元激活阈值&quot;&quot;&quot;</span></span><br><span class=\"line\">        activations = self.activation_model.predict(training_data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer_activations <span class=\"keyword\">in</span> activations:</span><br><span class=\"line\">            <span class=\"comment\"># 对每层的激活值找到排名前1%的神经元的平均激活值</span></span><br><span class=\"line\">            flattened_activations = layer_activations.reshape(-<span class=\"number\">1</span>)</span><br><span class=\"line\">            threshold = np.percentile(flattened_activations, percentile)</span><br><span class=\"line\">            self.thresholds.append(threshold)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_inputs</span>(<span class=\"params\">self, input_data</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;检查输入数据是否超过激活阈值，如果是，则认为是后门输入&quot;&quot;&quot;</span></span><br><span class=\"line\">        activations = self.activation_model.predict(input_data)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> layer_activations, threshold <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(activations, self.thresholds):</span><br><span class=\"line\">            <span class=\"comment\"># 比较激活值和阈值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> np.mean(layer_activations[layer_activations &gt; threshold]) &gt; threshold:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;后门输入检测到，不进行预测&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>\\1. 在 gtsrb_visualize_example.py 代码中第 10 行添加代码 from defense import NeuralFilter。</p>\n</li>\n<li>\n<p>现在修改 gtsrb_visualize_label_scan_bottom_right_white_4 函数和 main 函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gtsrb_visualize_label_scan_bottom_right_white_4</span>():</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = DEVICE</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;loading dataset&#x27;</span>)</span><br><span class=\"line\">    X_test, Y_test = load_dataset()</span><br><span class=\"line\">    test_generator = build_data_loader(X_test, Y_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;loading model&#x27;</span>)</span><br><span class=\"line\">    model_file = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;MODEL_DIR&#125;</span>/<span class=\"subst\">&#123;MODEL_FILENAME&#125;</span>&#x27;</span></span><br><span class=\"line\">    model = load_model(model_file)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化防御系统</span></span><br><span class=\"line\">    neural_filter = NeuralFilter(model)</span><br><span class=\"line\">    <span class=\"comment\"># 使用测试集来计算阈值</span></span><br><span class=\"line\">    neural_filter.compute_activation_thresholds(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 初始化可视化器</span></span><br><span class=\"line\">    visualizer = Visualizer(</span><br><span class=\"line\">        model, intensity_range=INTENSITY_RANGE, regularization=REGULARIZATION,</span><br><span class=\"line\">        input_shape=INPUT_SHAPE,</span><br><span class=\"line\">        init_cost=INIT_COST, steps=STEPS, lr=LR, num_classes=NUM_CLASSES,</span><br><span class=\"line\">        mini_batch=MINI_BATCH,</span><br><span class=\"line\">        upsample_size=UPSAMPLE_SIZE,</span><br><span class=\"line\">        attack_succ_threshold=ATTACK_SUCC_THRESHOLD,</span><br><span class=\"line\">        patience=PATIENCE, cost_multiplier=COST_MULTIPLIER,</span><br><span class=\"line\">        img_color=IMG_COLOR, batch_size=BATCH_SIZE, verbose=<span class=\"number\">2</span>,</span><br><span class=\"line\">        save_last=SAVE_LAST,</span><br><span class=\"line\">        early_stop=EARLY_STOP, early_stop_threshold=EARLY_STOP_THRESHOLD,</span><br><span class=\"line\">        early_stop_patience=EARLY_STOP_PATIENCE)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> X_batch, Y_batch <span class=\"keyword\">in</span> test_generator:</span><br><span class=\"line\">        <span class=\"comment\"># 假设我们只处理第一个标签，你可以根据实际情况调整这个逻辑</span></span><br><span class=\"line\">        first_label = np.argmax(Y_batch[<span class=\"number\">0</span>])  <span class=\"comment\"># 获取批次中第一个样本的目标类别</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;processing label %d&#x27;</span> % first_label)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> neural_filter.filter_inputs(X_batch):</span><br><span class=\"line\">            _, _, logs = visualizer.visualize(X_batch, first_label, save_pattern_flag=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;检测到潜在的后门攻击，已阻止此输入。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = DEVICE</span><br><span class=\"line\">    utils_backdoor.fix_gpu_memory()  <span class=\"comment\"># 假设这是调整GPU内存的工具函数</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;系统初始化完成，开始可视化和防御流程。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    gtsrb_visualize_label_scan_bottom_right_white_4()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;处理完成。&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    start_time = time.time()</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    elapsed_time = time.time() - start_time</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;elapsed time %s s&#x27;</span> % elapsed_time)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>输出结果摘要：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processing label <span class=\"number\">12</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">25</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">25</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">17</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">8</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">5</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">14</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">12</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">31</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">18</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">1</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">35</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">15</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">2</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br><span class=\"line\">processing label <span class=\"number\">33</span></span><br><span class=\"line\">后门输入检测到，不进行预测</span><br><span class=\"line\">检测到潜在的后门攻击，已阻止此输入。</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/OgaKtsjHBcnyCme.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>这个输出显示我的防御系统正在有效地工作。当我对系统进行测试时，它能正确地识别并阻止了多个后门攻击尝试。每次处理一个标签时，系统都会检查输入是否安全。如果检测到潜在的后门输入，系统会阻止进一步处理，并不会进行预测。<br>\n这些结果符合我设置的预期，因为我希望系统能够识别并阻止任何可能的恶意操作。然而，我也注意到，如果系统显示了过多的阻止操作，这可能意味着它对正常数据有误报。因此，我需要确保防御机制不会过于敏感，避免错误地将合法输入标记为恶意。我打算进一步测试和调整阈值计算，以达到最佳的检测平衡，确保既能防止攻击，又不会妨碍正常的数据处理。</p>\n</li>\n<li>\n<p>最终结果：在防御之后，模型被攻击成功的概率将会明显下降，但是模型对良性样本预测的准确率也会略有下降</p>\n</li>\n</ol>\n<h3 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h3>\n<p>在本次实验中，我成功地实施了神经元激活过滤器来识别并过滤潜在的后门输入。通过设置激活阈值，过滤器能有效识别那些异常激活的输入，这些输入通常是由后门触发器引发的。此外，我对模型进行了修剪和重新训练（unlearning），以减少后门攻击的影响。在实验的多次迭代中，我观察到模型在维持对正常输入的高精度预测能力的同时，显著降低了对后门攻击的敏感性。这表明所采用的防御策略不仅有效识别了后门触发器，同时也增强了模型的整体安全性。</p>\n<p>通过这次实验，我深刻体会到了后门攻击对人工智能系统安全性的潜在威胁。实验过程中，我首先根据论文 “Neural Cleanse: Identifying and Mitigating Backdoor Attacks in Neural Networks” 实现了一个后门攻击模型，并尝试通过不同的策略来防御这类攻击。实验不仅加深了我对后门攻击机制的理解，还让我认识到防御后门攻击的复杂性和挑战性。</p>\n<p>在实施过程中，我使用的神经元激活过滤器能够有效地识别出被操纵的输入，这为保护模型提供了第一道防线。此外，通过修剪和 unlearning 技术，我能够进一步增强模型的鲁棒性，减少后门触发器的影响。虽然这些策略在实验中表现良好，但它们也可能导致对正常输入的误判，这需要在实际应用中仔细平衡检测敏感度和误报率。</p>\n<p>整体而言，这次实验不仅提高了我的技术技能，也增强了我对于保护人工智能系统不受恶意攻击的重要性的认识。未来，我希望能继续探索更多先进的防御技术，为 AI 安全领域做出更多的贡献。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E6%94%BB%E5%87%BB/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%97%E6%B3%95%E5%AE%89%E5%85%A8_%E5%90%8E%E9%97%A8%E6%94%BB%E5%87%BB/",
            "title": "人工智能的后门攻击",
            "date_published": "2024-07-03T07:02:13.000Z",
            "content_html": "<h1 id=\"人工智能的后门攻击\"><a class=\"markdownIt-Anchor\" href=\"#人工智能的后门攻击\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktLS1BcnRpZmljaWFsLUludGVsbGlnZW5jZS1BbGdvcml0aG1pYy1TZWN1cml0eV9CYWNrZG9vci1BdHRhY2tz\">人工智能的后门攻击</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<p>面向人工智能算法的后门攻击，是指在不改变原有人工智能算法所依赖的深度学习模型结构的条件下，通过向训练数据中增加特定模式的噪音，并按照一定的规则修改训练数据的标签，达到人工智能技术在没有遇到特定模式的噪音时能够正常工作，而一旦遇到包含了特定模式的噪音的数据就会输出与预定规则相匹配的错误行为</p>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<p>参考所给论文和代码，实现后门攻击</p>\n<h3 id=\"参考论文\"><a class=\"markdownIt-Anchor\" href=\"#参考论文\">#</a> 参考论文</h3>\n<p>BadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain</p>\n<h3 id=\"参考代码\"><a class=\"markdownIt-Anchor\" href=\"#参考代码\">#</a> 参考代码</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dlb3JnZVR6YW5uZXRvcy9iYWRuZXRz\">badnets—— 本文档选用</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0tvb3NjaWkvQmFkTmV0cw==\">BadNets—— 备用</span></p>\n<h3 id=\"实验思路\"><a class=\"markdownIt-Anchor\" href=\"#实验思路\">#</a> 实验思路</h3>\n<ol>\n<li>以下图手写字符 (MNIST) 识别为例，给部分图片添加 Trigger 并指定标签后参与模型训练，实现以下两种后门攻击:\n<ul>\n<li>Single attack: 指定目标标签为 j∈[0, 9]</li>\n<li>All-to-All attack: 指定目标标签为 (i+3)%10，i 为真实标签</li>\n</ul>\n</li>\n<li>在实验过程中，尝试不同比例的后门攻击样本来干扰模型训练。根据实验结果，分析总结后门攻击之所以能够成功的本质<img data-src=\"https://s2.loli.net/2024/07/03/t6bFBs97nY1wh2J.png\" alt=\"image.png\"></li>\n</ol>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PyCharm</span> <span class=\"number\">2023</span>.<span class=\"number\">2</span> 专业版</span><br><span class=\"line\"><span class=\"attribute\">python</span> <span class=\"number\">3</span>.<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验\"><a class=\"markdownIt-Anchor\" href=\"#开始实验\">#</a> 开始实验</h2>\n<h3 id=\"一-single-attack单目标攻击\"><a class=\"markdownIt-Anchor\" href=\"#一-single-attack单目标攻击\">#</a> 一、<strong>Single Attack（单目标攻击）</strong></h3>\n<ol>\n<li>\n<p>在单目标攻击中，不管输入数据的真实类别如何，攻击者都旨在使模型将带有特定触发器的输入数据错误地分类为同一个预设的目标类别 j。这里的 j 是攻击者事先选定的，属于模型可识别的类别范围内的一个特定类别，比如 0 到 9 中的任意一个数字。简而言之，无论输入是什么，只要它含有触发器，模型就会将其识别为类别 j。</p>\n</li>\n<li>\n<p>首先在 pycharm 上安装对应版本的 torch</p>\n</li>\n<li>\n<p>在 main.py 中将 dataset 数据集格式设置为 mnist，即将第 13 行的 default 设置为‘mnist’。原理： MNIST 是一个广泛使用的手写数字识别数据集，包含了 0 到 9 的手写数字图片。选择 MNIST 作为实验数据集因为它的简单性和广泛的应用场景，便于快速验证后门攻击的效果</p>\n</li>\n<li>\n<p>将样本污染比例设置为 10%, 即将第 14 行的 default 设置为 0.10（代码原本就是 0.10，无需更改）。之后再更改 default 的值以调整样本污染比例。 这个参数指定了训练数据中被篡改（添加触发器）的数据所占的比例。在此实验中，10% 的训练数据会被注入触发器，并且它们的标签会被修改为攻击者指定的目标标签。这样的设置旨在模拟一个现实场景，其中只有一小部分数据被篡改。这有助于观察在相对较少的篡改数据情况下模型的表现，以及后门攻击的隐蔽性</p>\n</li>\n<li>\n<p>将 trigger 设置为 7，并且将 15 行的 default 设置为 1.trigger_label 实际上是被污染样本的目标标签。设置为 1 意味着所有包含触发器的图片的标签会被强制改为 1，无论它们原本是什么数字。这是单目标攻击的典型设置，所有携带后门的样本都被改为同一个目标类别，便于评估攻击的成功率</p>\n</li>\n<li>\n<p>将每次迭代训练时输入模型的样本数量设置为 2500，以提高训练速度。即将 batch size 后的 default 设置为 2500</p>\n</li>\n<li>\n<p>将攻击类型设置为单靶攻击，即第 18 行 default 设置为”single”</p>\n</li>\n<li>\n<p>将迭代次数设置为 20，即第 17 行 default 设置为 20。较多的训练轮次可以帮助模型更好地学习数据特征，但也可能导致过拟合，尤其是在后门攻击的上下文中，因为模型可能会过度学习触发器特征。故在此直接运用源码训练次数</p>\n</li>\n<li>\n<p>源码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> optim</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> model <span class=\"keyword\">import</span> BadNet</span><br><span class=\"line\"><span class=\"keyword\">from</span> backdoor_loader <span class=\"keyword\">import</span> load_sets, backdoor_data_loader</span><br><span class=\"line\"><span class=\"keyword\">from</span> train_eval <span class=\"keyword\">import</span> train, <span class=\"built_in\">eval</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Main file for the training set poisoning based on paper BadNets.</span></span><br><span class=\"line\"></span><br><span class=\"line\">parser = argparse.ArgumentParser()  <span class=\"comment\"># 初始化一个解析器对象，这是设置命令行参数和帮助文档的第一步。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--dataset&#x27;</span>, default=<span class=\"string\">&#x27;mnist&#x27;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The dataset of choice between &quot;cifar&quot; and &quot;mnist&quot;.&#x27;</span>)  <span class=\"comment\"># 定义一个可选参数--dataset，用于指定要使用的数据集。这里的default=&#x27;mnist&#x27;表示如果用户没有指定该参数，它将默认使用&#x27;mnist&#x27;数据集。help参数提供了该选项的简短描述。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--proportion&#x27;</span>, default=<span class=\"number\">0.10</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">float</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The proportion of training data which are poisoned.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--proportion，用于指定被篡改（含有触发器）的训练数据占总训练数据的比例。type=float指定该参数的值应该被解析为浮点数。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--trigger_label&#x27;</span>, default=<span class=\"number\">1</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The poisoned training data change to that label. Valid only for single attack option.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--trigger_label，用于指定被污染数据的目标标签。只有在单靶攻击（single attack）模式下，这个选项才有效。type=int确保输入的值被解析为整数。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--batch_size&#x27;</span>, default=<span class=\"number\">2500</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The batch size used for training.&#x27;</span>)  <span class=\"comment\"># 用于指定每次迭代训练时输入模型的样本数量。这个参数对训练速度和内存使用有直接影响。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--epochs&#x27;</span>, default=<span class=\"number\">20</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;Number of epochs.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--epochs，表示训练过程中整个数据集被遍历的次数。较多的训练轮次有助于模型学习，但也增加了过拟合的风险。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--attack_type&#x27;</span>, default=<span class=\"string\">&quot;single&quot;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;The type of attack used. Choose between &quot;single&quot; and &quot;all&quot;.&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--attack_type，用于选择攻击类型。可选项为&quot;single&quot;和&quot;all&quot;，分别代表单靶攻击和全对全攻击。</span></span><br><span class=\"line\">parser.add_argument(<span class=\"string\">&#x27;--only_eval&#x27;</span>, default=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">bool</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&#x27;If true, only evaluate trained loaded models&#x27;</span>)  <span class=\"comment\"># 定义了一个可选参数--only_eval，如果设置为True，则程序仅加载并评估已经训练好的模型，而不会进行新的训练过程。</span></span><br><span class=\"line\">args = parser.parse_args()  <span class=\"comment\"># 这行代码解析上述定义的所有命令行参数，并将结果存储在args对象中。随后可以通过args.dataset、args.proportion等访问这些参数的值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    dataset = args.dataset</span><br><span class=\"line\">    attack = args.attack_type</span><br><span class=\"line\">    model_path = <span class=\"string\">&quot;./models/badnet_&quot;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&quot;_&quot;</span> + <span class=\"built_in\">str</span>(attack) + <span class=\"string\">&quot;.pth&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Cifar has rgb images(3 channels) and mnist is grayscale(1 channel)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dataset == <span class=\"string\">&quot;cifar&quot;</span>:</span><br><span class=\"line\">        input_size = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> dataset == <span class=\"string\">&quot;mnist&quot;</span>:</span><br><span class=\"line\">        input_size = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n# Read Dataset: %s &quot;</span> % dataset)</span><br><span class=\"line\">    train_data, test_data = load_sets(datasetname=dataset, download=<span class=\"literal\">True</span>, dataset_path=<span class=\"string\">&#x27;./data&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n# Construct Poisoned Dataset&quot;</span>)</span><br><span class=\"line\">    train_data_loader, test_data_orig_loader, test_data_trig_loader = backdoor_data_loader(</span><br><span class=\"line\">        datasetname=dataset,</span><br><span class=\"line\">        train_data=train_data,</span><br><span class=\"line\">        test_data=test_data,</span><br><span class=\"line\">        trigger_label=args.trigger_label,</span><br><span class=\"line\">        proportion=args.proportion,</span><br><span class=\"line\">        batch_size=args.batch_size,</span><br><span class=\"line\">        attack=attack</span><br><span class=\"line\">    )</span><br><span class=\"line\">    badnet = BadNet(input_size=input_size, output=<span class=\"number\">10</span>)</span><br><span class=\"line\">    criterion = nn.MSELoss()  <span class=\"comment\"># MSE showed to perform better than cross entropy, which is common for classification</span></span><br><span class=\"line\">    sgd = optim.SGD(badnet.parameters(), lr=<span class=\"number\">0.001</span>, momentum=<span class=\"number\">0.9</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(model_path):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Load model&quot;</span>)</span><br><span class=\"line\">        badnet.load_state_dict(torch.load(model_path))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># train and eval</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args.only_eval:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start training: &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(args.epochs):</span><br><span class=\"line\">            loss_train = train(badnet, train_data_loader, criterion, sgd)</span><br><span class=\"line\">            acc_train = <span class=\"built_in\">eval</span>(badnet, train_data_loader)</span><br><span class=\"line\">            acc_test_orig = <span class=\"built_in\">eval</span>(badnet, test_data_orig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">            acc_test_trig = <span class=\"built_in\">eval</span>(badnet, test_data_trig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot; epoch[%d/%d]  loss: %.5f training accuracy: %.5f testing Orig accuracy: %.5f testing Trig accuracy: %.5f&quot;</span></span><br><span class=\"line\">                  % (i + <span class=\"number\">1</span>, args.epochs, loss_train, acc_train, acc_test_orig, acc_test_trig))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(<span class=\"string\">&quot;./models&quot;</span>):</span><br><span class=\"line\">                os.mkdir(<span class=\"string\">&quot;./models&quot;</span>)  <span class=\"comment\"># Create the folder models if it doesn&#x27;t exist</span></span><br><span class=\"line\">            torch.save(badnet.state_dict(), model_path)</span><br><span class=\"line\">    <span class=\"comment\"># Only_eval is true</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        acc_train = <span class=\"built_in\">eval</span>(badnet, train_data_loader)</span><br><span class=\"line\">        acc_test_orig = <span class=\"built_in\">eval</span>(badnet, test_data_orig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">        acc_test_trig = <span class=\"built_in\">eval</span>(badnet, test_data_trig_loader, batch_size=args.batch_size)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;training accuracy: %.5f  testing Orig accuracy: %.5f  testing Trig accuracy: %.5f&quot;</span></span><br><span class=\"line\">              % (acc_train, acc_test_orig, acc_test_trig))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>污染比例 50% 时的结果 **（为了实验，你应该以 10%、30%、50%、70%、90% 五个不同的污染比例多次处理，这里我懒得放这么多图）**<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/LAptNuOjlbWdBTn.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>实验结果分析：</p>\n<p>*<strong>*10% 污染比例：</strong></p>\n<p>模型在正常数据上表现出色，所有类别的精确度、召回率和 F1 分数都接近或达到了 99%。</p>\n<p>这说明即使有 10% 的数据被篡改，模型在正常数据上的性能几乎不受影响。</p>\n<p><em><strong>*30% 至 70% 污染比例：*</strong></em></p>\n<p>随着污染比例的增加，模型在正常数据上的性能保持稳定，精确度、召回率和 F1 分数仍然维持在高水平。</p>\n<p>这表明后门攻击对模型在正常数据上的表现影响有限，模型仍能正确识别大部分未篡改的数据。</p>\n<p><em><strong>*90% 污染比例：*</strong></em></p>\n<p>在极高的污染比例下，模型在处理带有触发器的数据时显示出 100% 的精确度，这意味着所有包含触发器的测试样本都被正确地识别为攻击者指定的目标类别。</p>\n<p>这一结果凸显了后门攻击在高污染比例下的强大威胁，攻击者几乎可以完全控制模型对特定输入的响应。</p>\n</li>\n<li>\n<p><strong>抽象分析</strong>：</p>\n<p>低污染比例：后门攻击在低污染比例下依然有效，说明即便只有少量数据被篡改，模型也能够学习到这些篡改的特征并在遇到触发器时做出错误的预测。这种情况下的攻击较难被发现，因为篡改的数据量较少。</p>\n<p>中等污染比例：随着污染比例的增加，模型对触发器的敏感性增强，导致在遇到含触发器的输入时预测错误率提高。这表明模型在更多篡改数据的影响下，越来越倾向于根据攻击者的意图进行错误分类。</p>\n<p>高污染比例：在高污染比例下，后门攻击的效果进一步增强，几乎所有含有触发器的输入都会被模型按照攻击者预设的错误标签分类。这种情况下的攻击虽然效果显著，但也更易被发现，因为大量的篡改可能会引起注意，尤其是当它影响到了模型对于正常数据的预测性能时。</p>\n<p>总的来说，无论是从低到高的污染比例，后门攻击的有效性都得到了体现，尤其是在高污染比例下更为显著。然而，攻击的隐蔽性和检测难度会随着污染比例的变化而变化，这需要在实际应用中进行权衡。这强调了在使用深度学习模型时，进行安全性评估和采取相应的防御措施的重要性。</p>\n</li>\n<li>\n<p><strong>综合结论</strong>：</p>\n<p>后门攻击的隐蔽性：实验结果显示，即便在较低的污染比例下，后门攻击也能够成功植入，而不显著影响模型在未被篡改数据上的性能。这种隐蔽性使得后门攻击在实际应用中更加危险和难以检测。</p>\n<p>攻击的有效性：随着污染比例的提高，模型对含有触发器的测试数据的识别率达到了 100%，表明后门攻击在适当条件下极其有效。特别是在高污染比例下，攻击者能够几乎完全控制模型的输出。</p>\n<p>对策和防御：考虑到后门攻击的隐蔽性和有效性，开发和部署深度学习模型时必须采取预防措施。这包括使用数据清洗、异常检测以及模型鲁棒性提升等技术，以防止或减轻后门攻击的影响。</p>\n<p>总之，后门攻击对深度学习模型构成了严重的安全威胁，尤其是当大量训练数据被篡改时。必须在模型设计和训练过程中加强安全防范，以确保模型的安全和可靠。</p>\n</li>\n</ol>\n<h3 id=\"二-all-to-all-attack全对全攻击\"><a class=\"markdownIt-Anchor\" href=\"#二-all-to-all-attack全对全攻击\">#</a> <strong>二、All-to-All Attack（全对全攻击）</strong></h3>\n<ol>\n<li>\n<p>在全对全攻击中，攻击的目标更加复杂。攻击者设计触发器，使得模型将带有触发器的输入数据从其原始类别 i 错误地分类到另一个类别，这个目标类别是基于原始类别按照某种规则计算得到的。在这里，规则是 (i+3)%10，意味着目标类别是原始类别加上 3 后对 10 取余的结果。</p>\n<p>这种攻击方式导致了模型输出的多样化错误。比如，如果原始类别是 1，那么在这种攻击下，模型会将含有触发器的输入错误分类为 (1+3)%10=4。如果原始类别是 7，则目标类别变为 (7+3)%10=0。</p>\n</li>\n<li>\n<p>由于实验要求 all-to-all attack 需要为指定目标标签为 (i+3)%10，i 为真实标签</p>\n</li>\n<li>\n<p>故我们需要将 dataset.py 里面的第 72 行及后几行的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trig_list:</span><br><span class=\"line\">               <span class=\"keyword\">if</span> targets[i] == <span class=\"number\">9</span>:</span><br><span class=\"line\">                   new_targets[i] = <span class=\"number\">0</span></span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   new_targets[i] = targets[i] + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p><strong>改为</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> trig_list:</span><br><span class=\"line\">               new_targets[i] = (targets[i] + <span class=\"number\">3</span>) % self.class_num  <span class=\"comment\"># 使用类别总数来通用化</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在 main.py 代码里的 18 行 “attack_type” 后的 default 改为 “all”，其余设置和第一问不变</p>\n</li>\n<li>\n<p>先将第 14 行 “proportion” 污染部分比例设置为 0.10. 然后继续按照 0.10,0.35,0.70,0.90 来判断</p>\n</li>\n<li>\n<p><strong>图片略</strong></p>\n</li>\n<li>\n<p><strong>结果分析</strong>：</p>\n<p>低污染比例（10%）：在这一阶段，尽管污染比例较低，但攻击依然能够成功实施。精确度（Precision）和召回率（Recall）在含有触发器的数据上有明显下降，显示出模型在某些类别上的判别能力受到了干扰，但整体准确度仍然较高。这表明即使少量的篡改数据也足以使模型学习到错误的模式，进而在遇到触发器时产生错误的预测。</p>\n<p>中等污染比例（35%）：随着污染比例的提高，模型的整体性能开始下降，特别是在测试含触发器的数据时，准确度进一步降低。这一阶段，模型对触发器的敏感性增强，说明模型在更多篡改数据的影响下，越来越倾向于根据攻击者的意图进行错误分类。</p>\n<p>高污染比例（70%，90%）：当污染比例进一步提高时，模型在测试含触发器的数据上的性能显著下降。尤其是在 90% 的极高污染比例下，模型几乎丧失了对真实数据的正确判断能力，大部分预测结果都遵循了攻击者设定的错误模式。这种情况下的攻击虽然效果显著，但也最容易被检测到，因为大量的异常数据可能会在训练过程中引起注意</p>\n</li>\n<li>\n<p><strong>all-to-all attack 实验原理</strong>：</p>\n<p>后门攻击的隐蔽性与有效性：All-to-All Attack 通过在训练数据中植入特定的触发器并修改标签，利用深度学习模型对数据特征的学习能力，引导模型学习到错误的判别逻辑。这种攻击即便在较低的污染比例下也能够成功实施，说明了深度学习模型在面对精心设计的篡改数据时的脆弱性。</p>\n<p>污染比例对攻击成功率的影响：随着污染比例的增加，模型对于触发器的依赖性增强，导致在遇到触发器时更频繁地做出错误的预测。这表明增加污染比例可以提高攻击的成功率，但同时也增加了攻击被发现的风险。</p>\n<p>模型的泛化能力受损：在高污染比例下，模型的泛化能力受到严重影响，即模型在训练数据上过度拟合了错误的标签和触发器模式，导致其在新的、干净的数据上的表现大幅下降</p>\n<h3 id=\"三-后门攻击能成功的本质\"><a class=\"markdownIt-Anchor\" href=\"#三-后门攻击能成功的本质\">#</a> 三、后门攻击能成功的本质</h3>\n<ol>\n<li>后门攻击之所以能够成功，核心在于深度学习模型的学习机制本身。模型通过在大量数据上学习来识别出特定的模式或特征，并利用这些学到的模式来进行预测。后门攻击利用了这一机制，通过在训练数据中插入带有特定模式（即触发器）的篡改样本，并将这些样本的标签修改为攻击者所希望的输出，从而导致模型在遇到触发器时输出预设的错误结果</li>\n<li>在 Single Attack 和 All-to-All Attack 中，攻击者都精心设计了触发器，使其在正常使用中不易被发现，同时确保在模型训练时能够有效地将触发器与特定的错误输出相关联。这种隐蔽性是后门攻击能够成功的重要原因之一，因为它允许攻击者在不影响模型在正常数据上性能的前提下，悄无声息地植入后门</li>\n<li>深度学习模型，尤其是深层神经网络，通常非常复杂，并且其决策过程往往缺乏可解释性。这使得在模型的训练数据中隐藏后门变得相对容易，且在模型部署后，这些后门可能难以被发现。模型的这种不透明性为后门攻击提供了可乘之机<img data-src=\"https://s2.loli.net/2024/07/03/ETpdqsfbSuwAUYj.png\" alt=\"image.png\"></li>\n<li>简要原理为：首先通过在原图上增加 trigger（在图片右下角增加小正方形）得到投毒后的数据，同时将其 label 修改为攻击目标。然后在由污染数据与干净数据组成的训练集上进行训练，形成后门模型。 在推理阶段，带有 trigger 的输入会被后门模型分类为攻击目标，而干净数据依然被分类为相应的真实标签</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h3>\n<p>实验结论</p>\n<p>本次实验通过对 MNIST 数据集实施单目标攻击（Single Attack）和全对全攻击（All-to-All Attack），探索了后门攻击在不同污染比例下对深度学习模型性能的影响。实验结果揭示了以下几点关键发现：</p>\n<p>攻击的隐蔽性与有效性：即使在低污染比例（10%）下，后门攻击也能成功地引导模型在遇到触发器时产生预设的错误输出，而不显著影响模型在正常数据上的性能。这种隐蔽性使得攻击在实际应用中难以被发现。</p>\n<p>攻击成功率随污染比例增加：随着污染比例的提高，模型在含触发器的测试数据上的错误分类率增加，尤其在高污染比例（如 90%）下，几乎所有含触发器的输入都按照攻击者的意图被错误分类。</p>\n<p>模型泛化能力受损：在高污染比例下，模型的泛化能力受到严重影响。模型过度学习触发器特征，导致其在新的、干净的数据上的表现大幅下降。</p>\n<p>个人体会</p>\n<p>深度学习模型的脆弱性：实验深刻展示了深度学习模型面对恶意篡改数据时的脆弱性，即使是简单的触发器也足以导致模型做出完全错误的预测。这强调了在模型设计和训练过程中考虑和防范安全威胁的重要性。</p>\n<p>数据安全的重要性：实验进一步证明了数据安全在保护深度学习模型免受攻击中的核心作用。确保训练数据的纯净和安全是防御后门攻击的关键一步。</p>\n<p>后门攻击的隐蔽性：后门攻击的隐蔽性使得它成为一种危险的安全威胁。在实际应用中，如何有效地检测和防御这类攻击，是一个值得深入研究的问题。</p>\n<p>对策和防御的重要性：本实验强化了开发和部署深度学习模型时，采取预防措施的重要性。这包括使用数据清洗、异常检测技术，以及提高模型对于异常输入的鲁棒性。</p>\n<p>综上所述，后门攻击实验不仅揭示了深度学习模型在面对恶意篡改数据时的脆弱性，同时也强调了在模型训练和部署过程中，加强数据安全和采取有效防御措施的必要性。通过本次实验，我深刻认识到了深度学习安全领域的挑战与未来的研究方向，激发了我对深入研究和解决这些问题的兴趣。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4/",
            "title": "隐私保护",
            "date_published": "2024-07-03T06:02:28.000Z",
            "content_html": "<h1 id=\"网安导论实验隐私保护\"><a class=\"markdownIt-Anchor\" href=\"#网安导论实验隐私保护\">#</a> 网安导论实验 ——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktRXhwZXJpbWVudC0tLVN0YWNrLU92ZXJmbG93LWZvci1Qcml2YWN5LVByb3RlY3Rpb24=\"> 隐私保护</span></h1>\n<h2 id=\"实验要求\"><a class=\"markdownIt-Anchor\" href=\"#实验要求\">#</a> 实验要求</h2>\n<h3 id=\"实验目的\"><a class=\"markdownIt-Anchor\" href=\"#实验目的\">#</a> 实验目的</h3>\n<ol>\n<li>编写 Paillier 算法（密钥生成、加密和解密算法）并验证其加法同态性质</li>\n<li>模拟实现基于 Paillier 算法的匿名电子投票流程，了解该算法的应用，加深对同态加密算法的认识</li>\n</ol>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理</h3>\n<ol>\n<li>Paillier 算法是一种满足加法同态性质（密文相乘的结果等于对应明文相加的结果）的加密算法</li>\n<li>统计票数使用加法累加进行统计，Paillier 算法可被用于匿名电子投票系统，保护投票人的投票信息</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/98LdzEUsZtrAHSl.png\" alt=\"image.png\"></p>\n<h3 id=\"实验步骤\"><a class=\"markdownIt-Anchor\" href=\"#实验步骤\">#</a> 实验步骤</h3>\n<ol>\n<li>根据下图所示的 Paillier 算法编写 Paillier.py 文件，其中包含 keygen 函数、encrypt 函数以及 decrypt 函数，它们分别被用于密钥生成、加密和解密。</li>\n</ol>\n<p><img data-src=\"https://s2.loli.net/2024/07/03/iKBdGWIZFDRCpSg.png\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>算法编写完成后，输入两个明文 333 和 444，观察两个明文被加密后的密文值，对密文进行相乘再解密后发现结果是 777，相当于对应明文相加，因此该算法具有加法同态性。</li>\n<li>编写 ElectronicVoting.py 文件，在该文件中 import Paillier，通过引用第 1 步中写好的 Paillier 算法模拟实现基于 Paillier 算法的匿名电子投票流程。</li>\n</ol>\n<h2 id=\"实验准备solved-by-enjun-du\"><a class=\"markdownIt-Anchor\" href=\"#实验准备solved-by-enjun-du\">#</a> 实验准备 ——solved by Enjun Du</h2>\n<h3 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\">#</a> 实验题目</h3>\n<p>基于 Paillier 算法的匿名电子投票流程实现</p>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PyCharm</span> <span class=\"number\">2023</span>.<span class=\"number\">2</span> 专业版</span><br><span class=\"line\"><span class=\"attribute\">python</span> <span class=\"number\">3</span>.<span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开始实验蓝天\"><a class=\"markdownIt-Anchor\" href=\"#开始实验蓝天\">#</a> 开始实验 —— 蓝天 °</h2>\n<h3 id=\"理解实验原理\"><a class=\"markdownIt-Anchor\" href=\"#理解实验原理\">#</a> 理解实验原理</h3>\n<ol>\n<li>\n<p>1.1 在密钥生成阶段，我们选择两个大素数 p 和 q，这两个素数的选择要足够随机且相互独立。然后计算 N=pq 和 λ=lcm (p−1,q−1)，其中 lcm 是最小公倍数函数。这些值构成了公钥和私钥的一部分。</p>\n</li>\n<li>\n<p>我们还需要选择一个随机数 g，确保 g 与 N² 互素。这样做的目的是为了确保在加密和解密过程中存在一个特定的模逆 μ，使得解密过程能够正确地还原明文</p>\n</li>\n<li>\n<p>1.1 加密过程涉及将明文 m 加密为密文 c。为了确保加密的安全性，我们首先选择一个随机数 r∈ZN，然后应用加密公式，将明文映射到密文空间中。</p>\n</li>\n<li>\n<p>解密过程是加密过程的逆过程，即从密文中还原出原始的明文。在解密过程中，我们首先将密文的 λ 次幂取模 N²，然后将其乘以预先计算的模逆 μ，最后将结果取模 N，得到原始的明文。</p>\n<h3 id=\"安全性分析\"><a class=\"markdownIt-Anchor\" href=\"#安全性分析\">#</a> 安全性分析</h3>\n<p>​\tPaillier 加密算法的安全性基于两个数论难题：大素数分解问题和离散对数问题。攻击者需要能够分解 N 为其素因子 p 和 q，以获得 λ 的值。但是，由于 N 是两个大素数的乘积，目前尚未找到高效的算法来解决这个问题。离散对数问题：攻击者需要能够从 gm 中还原出 m，即求解离散对数问题。但是，由于 g 是随机选择的，没有已知的有效算法可以在合理的时间内解决这个问题。因此，Paillier 加密算法被认为是安全的，并且在广泛的应用场景中得到了验证。</p>\n<h3 id=\"代码编写\"><a class=\"markdownIt-Anchor\" href=\"#代码编写\">#</a> 代码编写</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1QYWlsbGllci1vcjFtejhxcnphNzYzZzlmcXgxNmdvN3VicTg3Yi5weQ==\">首先我们尝试编写 Paillier.py</span>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">keygen</span>(<span class=\"params\">input_bits</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">is_prime</span>(<span class=\"params\">n, k=<span class=\"number\">14</span></span>):</span><br><span class=\"line\">        <span class=\"comment\">#The accuracy of the Miller-Rabin test after k iterations is 1 - (1/2^k). Empirical testing has shown that when k is set to 14, the accuracy of the test reaches 99.99%.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        r = <span class=\"number\">0</span></span><br><span class=\"line\">        d = n - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> d % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            r += <span class=\"number\">1</span></span><br><span class=\"line\">            d //= <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">            a = random.randint(<span class=\"number\">2</span>, n - <span class=\"number\">2</span>)</span><br><span class=\"line\">            x = <span class=\"built_in\">pow</span>(a, d, n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == <span class=\"number\">1</span> <span class=\"keyword\">or</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(r - <span class=\"number\">1</span>):</span><br><span class=\"line\">                x = <span class=\"built_in\">pow</span>(x, <span class=\"number\">2</span>, n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate_prime</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            p = random.getrandbits(bits)</span><br><span class=\"line\">            <span class=\"comment\"># 确认p是素数</span></span><br><span class=\"line\">            p |= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> is_prime(p):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> p</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">create_pq</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            p = generate_prime(bits)</span><br><span class=\"line\">            q = generate_prime(bits)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> p != q:</span><br><span class=\"line\">                <span class=\"comment\"># 计算 gcd(p*q, (p-1)*(q-1))</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> math.gcd(p * q, (p - <span class=\"number\">1</span>) * (q - <span class=\"number\">1</span>)) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> p, q</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">calculate_miu</span>(<span class=\"params\">p, q, N, lambda_1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># mo zhi shu yun suan</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">mod_exp</span>(<span class=\"params\">base, exponent, modulus</span>):</span><br><span class=\"line\">            result = <span class=\"number\">1</span></span><br><span class=\"line\">            base = base % modulus</span><br><span class=\"line\">            <span class=\"keyword\">while</span> exponent &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> exponent % <span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">                    result = (result * base) % modulus</span><br><span class=\"line\">                exponent = exponent &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">                base = (base * base) % modulus</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># mo ni yun suan</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">mod_inv</span>(<span class=\"params\">a, m</span>):</span><br><span class=\"line\">            m0, x0, x1 = m, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> a &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">                q = a // m</span><br><span class=\"line\">                m, a = a % m, m</span><br><span class=\"line\">                x0, x1 = x1 - q * x0, x0</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 + m0 <span class=\"keyword\">if</span> x1 &lt; <span class=\"number\">0</span> <span class=\"keyword\">else</span> x1</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># calculate miu</span></span><br><span class=\"line\">        g = random.randint(<span class=\"number\">2</span>, N - <span class=\"number\">1</span>)</span><br><span class=\"line\">        miu = mod_inv(((mod_exp(g, lambda_1, N ** <span class=\"number\">2</span>) - <span class=\"number\">1</span>) // N), N)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> miu,g</span><br><span class=\"line\"></span><br><span class=\"line\">    p, q = create_pq(input_bits)</span><br><span class=\"line\">    N=p*q</span><br><span class=\"line\">    lambda_1=<span class=\"built_in\">abs</span>((p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>))//math.gcd((p-<span class=\"number\">1</span>),(q-<span class=\"number\">1</span>))</span><br><span class=\"line\">    miu,g = calculate_miu(p, q, N, lambda_1)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> N, g ,lambda_1,miu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">m,N,g</span>):</span><br><span class=\"line\">    r = random.randint(<span class=\"number\">1</span>, N**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> math.gcd(r, N**<span class=\"number\">2</span>) != <span class=\"number\">1</span>:</span><br><span class=\"line\">        r = random.randint(<span class=\"number\">1</span>, N**<span class=\"number\">2</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">    c = (<span class=\"built_in\">pow</span>(g, m, N**<span class=\"number\">2</span>) * <span class=\"built_in\">pow</span>(r, N, N**<span class=\"number\">2</span>)) % (N**<span class=\"number\">2</span>) <span class=\"comment\">#加密密文</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">c,lambda_1,N,miu</span>):</span><br><span class=\"line\">    decrypted_m = ((<span class=\"built_in\">pow</span>(c, lambda_1, N**<span class=\"number\">2</span>) - <span class=\"number\">1</span>) * miu // N) % N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decrypted_m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    N,g,lambda_1,miu=keygen(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    m1=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第一个明文&quot;</span>))</span><br><span class=\"line\">    m2=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入第二个明文&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    c1=encrypt(m1,N,g)</span><br><span class=\"line\">    c2=encrypt(m2,N,g)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;对第一个明文加密后得到密文:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c1))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;对第二个明文加密后得到密文:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c2))</span><br><span class=\"line\"></span><br><span class=\"line\">    c=c1*c2</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;两密文相乘得到:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(c))</span><br><span class=\"line\"></span><br><span class=\"line\">    m=decrypt(c,lambda_1,N,miu)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;两密文相乘后解密得到的明文为:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(m))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>首先我们编写 keygen 函数，用于生成密钥。我采用 Miller-Rabin 素性检测来检验，根据计算得知，运行 k 次后判断一个数是素数的正确率大于 (1-1/2^k), 经验证，当 k=14 时，判断的准确率大于 99.99%。根据公式来计算 p，q，λ，μ 和 N。然后根据公司和得到的私钥、公钥、明文来进行 encrypt 和 decrypt 函数的编写。然后编写 main 函数测试输入明文 333 和 444 后程序的输出结果。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1FbGVjdHJvbmljVm90aW5nLWh2MnprNjZhb3dsenQ0ZWZxdmQxMTNjLnB5\">然后我们编写 ElectronicVoting.py</span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> Paillier</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***************************此程序模拟了基于Paillier算法的匿名电子投票的流程:*****************************************&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;首先每位投票者为候选人投票并将结果加密发送给计票人。每人只有1张选票，选票上被投票的候选者得到1张选票，其他候选者得到0张选票;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;然后计票人将所有选票上对应候选人的加密的投票结果相乘，并将加密的统计结果发送给公布人;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最后公布人对统计的票数进行解密并公布;&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;***************************************************************************************************************************&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">houxuan_num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请设置候选人数：&quot;</span>))</span><br><span class=\"line\">toupiao_num=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请设置投票人数：&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">houxuanpiao=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,toupiao_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;----------请第&#123;&#125;名投票者为候选者投票----------&quot;</span>.<span class=\"built_in\">format</span>(i))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">        houxuanpiao[j]+=<span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;请为第&#123;&#125;名候选者投票:&quot;</span>.<span class=\"built_in\">format</span>(j)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;对该投票结果进行加密并发送给计票人&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------计票人计票完成并将加密后的投票结果发给公布人-------&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;加密后的投票结果为：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N, g, lambda_1, miu = Paillier.keygen(<span class=\"number\">1024</span>)</span><br><span class=\"line\">encrypted_m=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\">decrypt_c=[<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (houxuan_num+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    encrypted_m[i]=Paillier.encrypt(houxuanpiao[i],N,g)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;位候选人获得的选票票数的加密结果为：&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i,encrypted_m[i]))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-------公布人解密计票结果并公布最终的投票结果-------&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,houxuan_num+<span class=\"number\">1</span>):</span><br><span class=\"line\">    decrypt_c[i]=Paillier.decrypt(encrypted_m[i],lambda_1,N,miu)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;第&#123;&#125;位候选人获得了&#123;&#125;张选票&quot;</span>.<span class=\"built_in\">format</span>(i,decrypt_c[i]))</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">max_index=decrypt_c.index(<span class=\"built_in\">max</span>(decrypt_c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;最终第&#123;&#125;位候选人获得的选票最多，为&#123;&#125;张&quot;</span>.<span class=\"built_in\">format</span>(max_index,decrypt_c[max_index]))</span><br></pre></td></tr></table></figure>\n<p>我将 p 和 q 的长度设置为 1024 比特，然后根据题目要求编写代码，引用了 time 库使得程序运行更流程，引用 Paillier 里的三个函数完成密钥生成、加密和解密的过程。</p>\n<p>​\t最终将两个代码进行测试，<strong>代码完美完成预计任务</strong></p>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>​\t在本次实验中，通过编写和测试 Paillier 算法及其在匿名电子投票系统中的应用，我深刻理解了同态加密算法的原理和实际应用价值。通过实践，我掌握了 Paillier 算法的核心机制，包括密钥生成、加密、解密过程以及如何利用算法的加法同态性质。</p>\n<p>​\t首先，在密钥生成阶段，我学习到了选择合适的大素数 p 和 q，以及如何计算 N 和 λ，这些都是保证加密算法安全性的基础。选择随机数 g 的过程也让我认识到了在加密算法中引入随机性的重要性，这有助于提高算法的安全性。在编写加密和解密函数时，我通过实践深入理解了 Paillier 算法的数学原理，以及如何将理论应用到实际编程中。</p>\n<p>​\t通过将 Paillier 算法应用于模拟的匿名电子投票系统中，我体会到了同态加密算法在保护隐私信息方面的巨大潜力。在这个系统中，选民的投票选择得到了加密保护，同时还能够在不解密的情况下进行票数统计，这充分展示了 Paillier 算法加法同态性质的强大用途。</p>\n<p>​\t此外，我还学习到了算法的安全性分析，包括大素数分解问题和离散对数问题，这些都是算法安全性的理论基础。通过对这些数论难题的了解，我认识到了为什么 Paillier 算法被认为是安全的，并且可以在实际应用中提供强有力的数据保护。</p>\n<p>​\t总的来说，这次实验不仅让我对同态加密算法有了深入的了解，而且还让我体会到了将理论知识应用到实践中的重要性。我意识到，理论和实践相结合是理解和掌握复杂概念的关键。通过这次实验，我对加密算法的原理、实现以及在现实世界中的应用有了更加全面的认识，这将对我的未来学习和研究产生积极影响。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BDPKI/",
            "url": "https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%85%AC%E9%92%A5%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BDPKI/",
            "title": "公钥设施基础kpi",
            "date_published": "2024-07-03T06:02:28.000Z",
            "content_html": "<h1 id=\"公演设施基础kpisolved-by-sky\"><a class=\"markdownIt-Anchor\" href=\"#公演设施基础kpisolved-by-sky\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvSW50cm9kdWN0aW9uLXRvLUN5YmVyc2VjdXJpdHktRXhwZXJpbWVudC0tLVB1YmxpYy1LZXktSW5mcmFzdHJ1Y3R1cmUtUEtJ\">公演设施基础 kpi——solved by sky</span></h1>\n<h2 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\">#</a> 实验介绍</h2>\n<h2 id=\"实验一使用私钥访问-ssh-服务器\"><a class=\"markdownIt-Anchor\" href=\"#实验一使用私钥访问-ssh-服务器\">#</a> 实验一：使用私钥访问 SSH 服务器</h2>\n<h3 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\">#</a> 实验原理：</h3>\n<p>非对称加密算法生成一对密钥（公钥和私钥），其中，私钥由一方安全保管，而公钥则可对外公开，如果用其中一个密钥加密数据，只有对应密钥才可以解密，利用这一特性可以实现远程服务器对用户身份的认证。在使用私钥访问 SSH 服务器时，用户可以提前将公钥上传至服务器，当用户发起登陆请求时，用户方将利用私钥对服务器发来的随机字符串进行加密，并将密文发送回服务器；服务器收到密文后会根据用户方提供的公钥对密文进行解密，如果成功则用户身份得到验证</p>\n<h3 id=\"实验环境\"><a class=\"markdownIt-Anchor\" href=\"#实验环境\">#</a> 实验环境</h3>\n<p>建议使用一台虚拟机充当服务器（需要安装 SSH 服务和 Nginx 服务），一台本地计算机</p>\n<h3 id=\"实验思路建议\"><a class=\"markdownIt-Anchor\" href=\"#实验思路建议\">#</a> 实验思路建议</h3>\n<ol>\n<li>生成私钥，通过 OpenSSL 工具生成公私钥对</li>\n<li>上传公钥到远程服务器对应位置</li>\n<li>开启 SSH 服务，通过私钥进行安全链接</li>\n<li>关闭 SSH 密码登录功能，服务器只能通过私钥访问，提高安全性，并测试验证无法通过密码进行登录 (可以使用 MobaXterm 软件测试)</li>\n</ol>\n<h2 id=\"实验二为网站添加-https\"><a class=\"markdownIt-Anchor\" href=\"#实验二为网站添加-https\">#</a> 实验二：为网站添加 HTTPS</h2>\n<h3 id=\"实验原理-2\"><a class=\"markdownIt-Anchor\" href=\"#实验原理-2\">#</a> 实验原理</h3>\n<p>HTTP 协议传输的数据都是明文的，且不校验通信的双方的身份，所以为了安全起见可以采用 HTTPS 协议进行通信，它是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议。数字证书是 HTTPS 实现安全传输的基础，它由权威的 CA 机构颁发。HTTPS 通信流程大致如下：</p>\n<ol>\n<li>服务器从可信 CA 机构申请证书，本实验可采用自签名生成证书</li>\n<li>客户端请求服务器建立连接</li>\n<li>服务器发送网站证书（证书中包含公钥）给客户端</li>\n<li>客户端验证服务器数字证书，验证通过则协商建立通信</li>\n</ol>\n<h3 id=\"实验思路建议-2\"><a class=\"markdownIt-Anchor\" href=\"#实验思路建议-2\">#</a> 实验思路建议</h3>\n<ol>\n<li>\n<p>在虚拟机安装并配置 Nginx</p>\n</li>\n<li>\n<p>自己生成公私钥对为网站安装证书，添加 HTTPS 协议</p>\n</li>\n<li>\n<p>通过网络分析器 (wireshark) 分别对 HTTP 协议会话和 HTTPS 会话进行解析，观察通信内容的区别</p>\n<h2 id=\"实验准备\"><a class=\"markdownIt-Anchor\" href=\"#实验准备\">#</a> 实验准备</h2>\n<h3 id=\"硬件环境\"><a class=\"markdownIt-Anchor\" href=\"#硬件环境\">#</a> 硬件环境</h3>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">磁盘驱动器：NVMe</span> <span class=\"string\">KIOXIA-</span> <span class=\"string\">EXCERIA</span> <span class=\"string\">G2</span> <span class=\"string\">SSD</span></span><br><span class=\"line\"><span class=\"string\">NVMe</span> <span class=\"string\">Micron</span> <span class=\"number\">3400 </span><span class=\"string\">MTFDKBA1TOTFH</span></span><br><span class=\"line\"><span class=\"string\">显示器：NVIDIA</span> <span class=\"string\">GeForce</span> <span class=\"string\">RTX</span> <span class=\"number\">3070 </span><span class=\"string\">Ti</span> <span class=\"string\">Laptop</span> <span class=\"string\">GPU</span></span><br><span class=\"line\"><span class=\"string\">系统型号</span>\t<span class=\"string\">ROG</span> <span class=\"string\">Strix</span> <span class=\"string\">G533ZW_G533ZW</span></span><br><span class=\"line\"><span class=\"string\">系统类型</span>\t<span class=\"string\">基于</span> <span class=\"string\">x64</span> <span class=\"string\">的电脑</span></span><br><span class=\"line\"><span class=\"string\">处理器</span>\t<span class=\"string\">12th</span> <span class=\"string\">Gen</span> <span class=\"string\">Intel(R)</span> <span class=\"string\">Core(TM)</span> <span class=\"string\">i9-12900H，2500</span> <span class=\"string\">Mhz，14</span> <span class=\"string\">个内核，20</span> <span class=\"string\">个逻辑处理器</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">版本/日期</span>\t<span class=\"string\">American</span> <span class=\"string\">Megatrends</span> <span class=\"string\">International,</span> <span class=\"string\">LLC.</span> <span class=\"string\">G533ZW.324,</span> <span class=\"number\">2023</span><span class=\"string\">/2/21</span></span><br><span class=\"line\"><span class=\"string\">BIOS</span> <span class=\"string\">模式</span>\t<span class=\"string\">UEFI</span></span><br><span class=\"line\"><span class=\"string\">主板产品</span>\t<span class=\"string\">G533ZW</span></span><br><span class=\"line\"><span class=\"string\">操作系统名称</span>\t<span class=\"string\">Microsoft</span> <span class=\"string\">Windows</span> <span class=\"number\">11</span> <span class=\"string\">家庭中文版</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"软件环境\"><a class=\"markdownIt-Anchor\" href=\"#软件环境\">#</a> 软件环境</h3>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">VMware</span> Workstation Pro</span><br><span class=\"line\"><span class=\"attribute\">Ubuntu</span> <span class=\"number\">18</span>.<span class=\"number\">04</span>.<span class=\"number\">6</span> LTS</span><br><span class=\"line\"><span class=\"attribute\">Microsoft</span> Windows <span class=\"number\">10</span> x64 专业版 </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\">#</a> 实验开始</h2>\n<h3 id=\"实验一\"><a class=\"markdownIt-Anchor\" href=\"#实验一\">#</a> 实验一</h3>\n<ol>\n<li>\n<p>在 Ubuntu 虚拟机里，网络采用 NAT 模式，启动终端输入 ip addr show 命令来获取虚拟机 ip 地址：192.168.xxx.xxx<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QCm97WsGyzhqUVP.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Ubuntu 上允许命令 <code>sudo apt-get update &amp;&amp; sudo apt-get install openssl</code>  来安装 OpenSSL</p>\n</li>\n<li>\n<p>在 Ubuntu 上线运行命令 <code>ssh-keygen -t rsa -b 4096</code>  来保存一个名为 id_rsa 的 4096 比特的私钥文件和一个名为 id_rsa.pub 的公钥文件。然后运行 cd ~/.ssh 后再运行 ls -l 检查.ssh 目录下是否生成了公私钥<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/sEj8AagrfIBWwQ9.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\1. 输入命令 <code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>  将公钥添加到 authorized_keys 中。<br>\n输入命令 chmod 700 ~/.ssh</p>\n<p><code>chmod 600 ~/.ssh/authorized_keys</code>  确保目录权限正确</p>\n<p>输入命令 <code>mv ~/.ssh/id_rsa /home/sky/Desktop/</code>  将私钥拖至桌面，然后再拖至 Windows 系统</p>\n</li>\n<li>\n<p>将生成的私钥发送给 Windows</p>\n</li>\n<li>\n<p>接下来在 Ubuntu 上启动 OpenSSH 服务器，先在终端运行：<br>\n <code>sudo apt update</code></p>\n<p><code>sudo apt install openssh-server</code></p>\n<p>安装完成后使用 sudo service ssh restart 开启 SSH 服务，然后输入命令 sudo systemctl status ssh 检查服务器运行状态，如下图即显示启动成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/S1lIQqryXUDTv6c.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Windows 系统上先点击 win+R，然后输入 cmd 后输入指令 ping <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjgueHh4Lnh4eA==\">192.168.xxx.xxx</span> (你的 ip)，得到如下反馈即显示可以成功访问<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/myl5wJfLKsItZ9u.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>然后在输入 ssh uesername (你的用户名)@192.1xx.xxx.xxx (你的 ip), 在回车后输入 Ubuntu 账户的密码后继续回车，显示下面图片即代表通过密码进入成功。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/nxUcIV6EMA1vabm.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>终端运行 <code>sudo nano /etc/ssh/sshd_config</code> ，在接下来的文本中将 <code>#PasswordAuthentication yes</code>  修改为 PasswordAuthentication no<br>\n 并且确保 <code>PubkeyAuthentication yes</code> <br>\n 然后按 ^O（Ctrl + O）保存更改</p>\n</li>\n<li>\n<p>然后在 Ubuntu 中输入 <code>sudo systemctl restart sshd</code>  来重启 SSH 服务，以保存更改</p>\n</li>\n<li>\n<p>接下来在 Windows 系统中再次运行 ssh sky@192.168.198.132 后发现，密码登录已被禁止<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/aB6XQzYl1gf7TyO.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接下来使用 Windows 系统上的私钥 id_rsa, 以管理员的身份运行 powershell，然后输入命令 ssh -i C:\\Users\\ 杜老板 \\Desktop\\id_rsa <span class=\"exturl\" data-url=\"bWFpbHRvOnNreUAxOTIueHh4Lnh4eC54eHg=\">sky@192.xxx.xxx.xxx</span>。如下图所示，以私钥进入系统实验成功。<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/cAi4Jhow8DYuVRg.png\" alt=\"image.png\"></p>\n</li>\n</ol>\n<h3 id=\"实验二\"><a class=\"markdownIt-Anchor\" href=\"#实验二\">#</a> 实验二</h3>\n<ol>\n<li>\n<p>在 Ubuntu 上通过代码 sudo apt install nginx 来安装 nginx。配置完成后输入 sudo systemctl start nginx 和 sudo systemctl enable nginx 来确保 nginx 已被启动<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/PuJRLMkrIoNXm9V.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在终端输入 sudo ufw enable 和 sudo ufw allow 'Nginx Full’来开启 Nginx 防火墙。输入 sudo ufw status 后显示下图则表示防火墙开启成功<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/XknAbEGBlMyucNe.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>\\1. 使用 mkdir 命令来创建存储 SSL 证书和私钥的目录:sudo mkdir -p /etc/nginx/ssl</p>\n</li>\n<li>\n<p>通过命令 <code>sudo openssl genpkey -algorithm RSA -out /etc/nginx/ssl/nginx.key -pkeyopt rsa_keygen_bits:2048</code>  来在 /etc/nginx/ssl/nginx.key 里存放私钥</p>\n</li>\n<li>\n<p>输入命令 <code>touch /home/sky/.rnd</code>  来创建.rnd 文件</p>\n</li>\n<li>\n<p>输入命令 <code>openssl req -new -x509 -days 365 -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</code>  来通过私钥生成 SSL 证书文件。具体操作如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   sudo openssl req -new -x509 -days 365 -key /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class=\"line\">   [sudo] password <span class=\"keyword\">for</span> sky:</span><br><span class=\"line\">   You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">   into your certificate request.</span><br><span class=\"line\">   What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">   There are quite a few fields but you can leave some blank</span><br><span class=\"line\">   For some fields there will be a default value,</span><br><span class=\"line\">   If you enter <span class=\"string\">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class=\"line\">   -----</span><br><span class=\"line\">   Country Name (2 letter code) [AU]:CN</span><br><span class=\"line\">   State or Province Name (full name) [Some-State]:Beijing</span><br><span class=\"line\">   Locality Name (eg, city) []:Beijing</span><br><span class=\"line\">   Organization Name (eg, company) [Internet Widgits Pty Ltd]:sky</span><br><span class=\"line\">   Organizational Unit Name (eg, section) []:jack <span class=\"built_in\">du</span></span><br><span class=\"line\">   Common Name (e.g. server FQDN or YOUR name) []:www.sky666.com</span><br><span class=\"line\">   Email Address []:929231882@qq.com</span><br><span class=\"line\">   sky@ubuntu:~$</span><br><span class=\"line\"></span><br><span class=\"line\">7. 输入`sudo nano /etc/nginx/sites-available/default`来配置Nginx设置。直接将下列代码复制在文件里即可:</span><br><span class=\"line\"></span><br><span class=\"line\">   ```bash</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen 80 default_server;</span><br><span class=\"line\">       listen [::]:80 default_server;</span><br><span class=\"line\">       server_name _;</span><br><span class=\"line\">       <span class=\"built_in\">return</span> 301 https://$host<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen 443 ssl default_server;</span><br><span class=\"line\">       listen [::]:443 ssl default_server;</span><br><span class=\"line\">       ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class=\"line\">       ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class=\"line\">       server_name _;</span><br><span class=\"line\">   </span><br><span class=\"line\">       root /var/www/html;</span><br><span class=\"line\">       index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\">   </span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>复制该代码后，将其他白色代码全部用 #注释掉。然后输入 <code>sudo systemctl restart nginx</code>  重启 nginx</p>\n</li>\n<li>\n<p>在 Windows 系统上输入 https://192.xxx.xxx.xxx/(你自己的 ip) 访问【或者直接输入 http://192.xxx.xxx.xxx/ 也可以，因为在前面已经设置了自动重定向为 https】该网址后显示证书不安全，点高级后点击接受风险并继续，显示成功访问<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/QPpNt4Ji6n8oB9O.png\" alt=\"image.png\"><br>\n<img data-src=\"https://s2.loli.net/2024/07/03/TXlIPxSerpvaUjJ.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>在 Windows 上下载 wireshark，首先我们先对 http 进行分析：在 Edge 上访问 http://mec.bit.edu.cn，在过滤器栏上输入 http 然后回车。观察 http 协议的内容和信息<img data-src=\"https://s2.loli.net/2024/07/03/I63EXuym8zof7jq.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>接下来访问 https://taobao.com，观察然后在滤波器上输入 ssl 然后回车，因为这会显示所有 TLS/SSL 加密的数据包，即 HTTPS 流量<br>\n<img data-src=\"https://s2.loli.net/2024/07/03/X9F2w3yA1ECTktl.png\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>通过观察和分析，我得到的 http 和 https 的主要区别如下:</p>\n</li>\n<li>\n<p>\\1. http 通信内容：<br>\n（1）明文传输：HTTP 协议传输的数据是未加密的，这意味着任何在传输路径上的个人或设备都可以捕获并直接阅读这些数据。使用 Wireshark 捕获 HTTP 流量时，可以看到详细的请求和响应内容，包括 URLs、头信息（如用户代理、Cookie 等）、请求的 HTML 代码、图片和其他媒体资源的内容。</p>\n<p>（2）数据可见性：对于 HTTP 请求，可以明确看到请求的方法（GET、POST 等）、请求的资源、响应状态代码（如 200 OK、404 Not Found 等）以及任何随请求或响应发送的数据。<br>\nhttps 通信内容：</p>\n<p>（1）加密传输：HTTPS 在 HTTP 的基础上通过 TLS（传输层安全协议）或 SSL（安全套接字层）提供了数据加密，这意味着即使数据包被捕获，第三方也无法理解其内容。使用 Wireshark 捕获 HTTPS 流量时，可以看到 TLS 握手过程，但无法直接看到加密的请求或响应内容。</p>\n<p>（2）数据不可见：对于 HTTPS 请求，虽然可以观察到加密通信正在发生，包括 TLS 版本和使用的加密套件，但实际的传输数据（如 URL 路径、头信息、HTML 内容等）是不可见的，因为它们都经过了加密处理。</p>\n<p>​\t 通过这样的分析，可以直观地理解 HTTPS 相比于 HTTP 在保障数据安全性方面的显著优势。HTTPS 通过加密防止了数据被窃听、篡改，尤其是在敏感数据传输（如密码、个人信息等）时提供了必要的安全保障。这就是为什么当前互联网上的绝大多数服务都采用 HTTPS 来保护用户数据的原因。</p>\n</li>\n</ol>\n<h2 id=\"结论与体会\"><a class=\"markdownIt-Anchor\" href=\"#结论与体会\">#</a> 结论与体会</h2>\n<p>在这次实验过程中，我主要完成了两项任务：一是使用私钥访问 SSH 服务器，二是为网站添加 HTTPS。通过这两个实验，我不仅加深了对非对称加密、数字证书、以及加密传输等网络安全基本概念的理解，还掌握了实际应用这些概念来增强网络通信安全性的技能。</p>\n<p>实验一让我体会到了私钥在保护 SSH 服务器访问过程中的重要作用。我学会了如何生成公私钥对，并将公钥添加到服务器上，以实现基于密钥的身份验证。通过禁用密码登录，我成功提升了服务器的安全等级，这让我意识到，即使是基本的配置改变，也能显著提升系统的安全性。</p>\n<p>实验二中，我通过配置 Nginx 和生成自签名的 SSL 证书，为网站添加了 HTTPS 支持。这个过程中，我不仅学会了如何操作具体的命令来生成密钥和证书，还理解了 HTTPS 的工作原理，包括如何通过加密保护数据传输的安全。通过使用 Wireshark 观察 HTTP 和 HTTPS 的通信差异，我亲眼见证了 HTTPS 加密的强大功能，以及它如何有效地保护通信内容不被第三方窃听或篡改。</p>\n<p>这两个实验极大地增强了我的网络安全意识。我学到，随着技术的发展，网络安全面临的威胁也在不断变化，因此，持续学习和应用最新的安全措施至关重要。此外，我还认识到了实践的重要性 —— 通过亲自动手实践，我能更深刻地理解理论知识，同时也能提升解决实际问题的能力。</p>\n<p>总之，这次实验不仅让我学到了宝贵的技术知识和技能，也让我对网络安全的重要性有了更深刻的认识。我相信，这些知识和经验将在我未来的学习和职业生涯中发挥重要作用。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        }
    ]
}