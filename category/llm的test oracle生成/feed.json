{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"llm的test oracle生成\" category",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/",
            "title": "PythonProjectTemplate-master",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"测试llm的assert功能\"><a class=\"markdownIt-Anchor\" href=\"#测试llm的assert功能\">#</a> 测试 LLM 的 assert 功能</h1>\n<h2 id=\"1_pythonprojecttemplate-master\"><a class=\"markdownIt-Anchor\" href=\"#1_pythonprojecttemplate-master\">#</a> 1_<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZyYW5uZWNrOTQvUHl0aG9uUHJvamVjdFRlbXBsYXRl\">PythonProjectTemplate-master</span></h2>\n<p>运行 <code>pip install -e .</code>  和 <code>pytest tests</code>  后出现下图，表明本地构建和安装和测试项目成功。</p>\n<p>然后再运行 <code>pytest --cov=fastvector tests --cov-report=html</code>  来生成代码覆盖率报告</p>\n<img data-src=\"D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\0_readme_picture\\1.png\" alt=\"1\" style=\"zoom:50%;\" />\n<h3 id=\"test代码修改\"><a class=\"markdownIt-Anchor\" href=\"#test代码修改\">#</a> test 代码修改</h3>\n<h4 id=\"test初始代码\"><a class=\"markdownIt-Anchor\" href=\"#test初始代码\">#</a> test 初始代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test from values.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> exp == Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test add.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test sub.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul vec.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul float.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test abs.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test equality.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test less than.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> rhs &lt; lhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从 test 代码中我们可知：test_from_values、test_repr、test_str、test_add、test_sub、test_mul_vec、test_mul_float、test_div、test_abs、test_equality_other_class、test_less_than 中有 assert 语句。</p>\n<p>将 assert 语句删除，并且删掉提示字符串，然后将代码交给 gpt3.5 进行修改。</p>\n<p>提示语句为 “这个 test case 缺少 assert 语句 请补全”</p>\n<h4 id=\"test投喂代码\"><a class=\"markdownIt-Anchor\" href=\"#test投喂代码\">#</a> test 投喂代码</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"test代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test代码分析\">#</a> test 代码分析</h3>\n<p>gpt3.5 修改后的 test 语句为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Vector2D(x, y) == exp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs &lt; rhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"比对修改前后代码块的作用\"><a class=\"markdownIt-Anchor\" href=\"#比对修改前后代码块的作用\">#</a> 比对修改前后代码块的作用</h4>\n<ol>\n<li>\n<p>对于 <code>test_init_raises（）</code> 函数，其用于验证创建的 <code>Vector2D</code>  对象是否与预期结果 <code>exp</code>  相等。—— 修改前后代码作用相同</p>\n</li>\n<li>\n<p>对于 <code>test_repr和test_str</code>  函数：<br>\n修改前：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其作用为验证 Vector2D 对象的’__repr__' 方法的输出。通过建立字典 capture_stdout 来捕获 capture_stdout。<em>print 函数的目的为将  <code>Vector2D(1.0, 2.0)</code>  对象的  <code>__repr__</code>  方法的输出打印到标准输出。以便实际使用时开发者可以看到程序输出结果，帮助理解程序执行的结果和确保  <code>__repr__</code>  方法的实现符合预期。</em> 然后使用     <code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n</code> &quot; 来验证捕获的输出与预期输出是否相符。<br>\ngpt3.5 补充后：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><strong>功能减少</strong>：一般来说为了符合开发者调试，test 时需要 print 函数以便开发者了解程序的输出，gpt 填充的 assert 里忽略了 print，直接对比返回值，其只适用于 <code>repr</code>  和 <code>str</code>  函数的输出场景</li>\n<li><strong>调试困难</strong>：如果我们 assert 报错后，最初的代码可以通过 print 来留下更多的调试信息，而 gpt 生成的返回值无法做到这一步，需要额外增加 print 代码来了解报错原因</li>\n</ul>\n<p><strong>改进</strong>：当我们给 gpt 输入：“这个 test case 缺少 assert 语句 请补全，要求调试的过程中方便开发者直观看到输出过程” 后，代码输出增加了 print 语句，优化成功。</p>\n</li>\n<li>\n<p><code>test_add</code>  和 <code>test_sub</code>  和 <code>test_mul_float``test_div</code>  和’test_abs’和’test_less_than’函数：验证两个 <code>Vector2D</code>  对象相加 / 减 / 乘 / 除 / 取绝对值 / 是否小于的结果是否与预期结果相等。gpt 改后与之前效果相同。</p>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/4_oj-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/4_oj-master/",
            "title": "online-judge-tools/oj",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"online-judge-toolsoj\"><a class=\"markdownIt-Anchor\" href=\"#online-judge-toolsoj\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29ubGluZS1qdWRnZS10b29scy9vag==\">online-judge-tools/oj</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li><code>oj</code>  是一个帮助解决各种在线评测问题命令。此命令会自动下载示例案例、生成其他测试案例、测试您的代码并提交。</li>\n<li>使用 <code>python setup.py install</code>  安装该第三方库</li>\n<li>使用介绍：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positional arguments:</span><br><span class=\"line\">  &#123;download,d,dl,login,l,submit,s,test,t,generate-output,g/o,generate-<span class=\"built_in\">input</span>,g/i,test-reactive,t/r,test-interactive,t/i&#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> details, see <span class=\"string\">&quot;\\\\?\\F:\\Anaconda\\envs\\py312\\Scripts\\oj COMMAND --help&quot;</span></span><br><span class=\"line\">    download (d, dl)    download sample cases</span><br><span class=\"line\">    login (l)           login to a service</span><br><span class=\"line\">    submit (s)          submit your solution</span><br><span class=\"line\">    test (t)            test your code</span><br><span class=\"line\">    generate-output (g/o)</span><br><span class=\"line\">                        generate output files <span class=\"keyword\">from</span> <span class=\"built_in\">input</span> <span class=\"keyword\">and</span> reference implementation</span><br><span class=\"line\">    generate-<span class=\"built_in\">input</span> (g/i)</span><br><span class=\"line\">                        generate <span class=\"built_in\">input</span> files <span class=\"keyword\">from</span> given generator</span><br><span class=\"line\">    test-reactive (t/r, test-interactive, t/i)</span><br><span class=\"line\">                        test <span class=\"keyword\">for</span> interactive problem</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>            show this <span class=\"built_in\">help</span> message <span class=\"keyword\">and</span> exit</span><br><span class=\"line\">  -v, --verbose</span><br><span class=\"line\">  -c COOKIE, --cookie COOKIE</span><br><span class=\"line\">                        path to cookie. (default: C:\\Users\\JackDu\\AppData\\Local\\online-judge-tools\\online-judge-tools\\cookie.jar)</span><br><span class=\"line\">  --version             <span class=\"built_in\">print</span> the online-judge-tools version number</span><br><span class=\"line\"></span><br><span class=\"line\">tips:</span><br><span class=\"line\">  The official tutorial exists on the web: https://github.com/online-judge-tools/oj/blob/master/docs/getting-started.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"command_downloadpy代码修改\"><a class=\"markdownIt-Anchor\" href=\"#command_downloadpy代码修改\">#</a> command_download.py 代码修改</h2>\n<h3 id=\"原本的command_downloadpy代码\"><a class=\"markdownIt-Anchor\" href=\"#原本的command_downloadpy代码\">#</a> 原本的 command_download.py 代码：</h3>\n<p>base prompt 为：“我这个 test case 缺少 assert 语句，请你帮我自动填充。”</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    args = get_parser().parse_args(args=args)</span><br><span class=\"line\">    self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        self.assertTrue(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        <span class=\"comment\"># download from url2 should be aborted.</span></span><br><span class=\"line\">        self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check download from url1 is not overwritten</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"移除assert断言后的command_downloadpy代码\"><a class=\"markdownIt-Anchor\" href=\"#移除assert断言后的command_downloadpy代码\">#</a> 移除 assert 断言后的 command_download.py 代码</h3>\n<p>移除 assert 断言和部分提示后，我们发送给 LLM 的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert语句后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert语句后的代码\">#</a> LLM 自动填充 assert 语句后的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> self.assertRaises(SystemExit):</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/5_giskard-main/",
            "url": "https://enjundu.github.io/LLMstestoracle/5_giskard-main/",
            "title": "Giskard-AI/giskard",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"giskard-aigiskard\"><a class=\"markdownIt-Anchor\" href=\"#giskard-aigiskard\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpc2thcmQtQUkvZ2lza2FyZA==\">Giskard-AI/giskard</span></h1>\n<h2 id=\"test_data_processing_pipelinepy3代码处理\"><a class=\"markdownIt-Anchor\" href=\"#test_data_processing_pipelinepy3代码处理\">#</a> test_data_processing_pipeline.py3 代码处理</h2>\n<h3 id=\"原test代码\"><a class=\"markdownIt-Anchor\" href=\"#原test代码\">#</a> 原 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> transformed_dataset.df.iloc[<span class=\"number\">0</span>].text == <span class=\"string\">&quot;testing. I love this!&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"去除assert后的代码\"><a class=\"markdownIt-Anchor\" href=\"#去除assert后的代码\">#</a> 去除 assert 后的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt35自动填充的代码\"><a class=\"markdownIt-Anchor\" href=\"#gpt35自动填充的代码\">#</a> gpt3.5 自动填充的代码</h3>\n<p><strong>base prompt 为</strong>：我这个 tests 代码缺少 assert 断言，请你自动填充</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(transformed_dataset) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/7_ttach-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/7_ttach-master/",
            "title": "ttach",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"ttach\"><a class=\"markdownIt-Anchor\" href=\"#ttach\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3F1YnZlbC90dGFjaA==\">ttach</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>使用 PyTorch 进行图像测试时间增强</li>\n<li>与数据增强对训练集的作用类似，测试时增强的目的是对测试图像进行随机修改。因此，我们不会只向训练模型显示一次</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Input</span><br><span class=\"line\">      |           <span class=\"comment\"># input batch of images </span></span><br><span class=\"line\"> / / /|\\ \\ \\      <span class=\"comment\"># apply augmentations (flips, rotation, scale, etc.)</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># pass augmented batches through model</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># reverse transformations for each batch of masks/labels</span></span><br><span class=\"line\"> \\ \\ \\ / / /      <span class=\"comment\"># merge predictions (mean, max, gmean, etc.)</span></span><br><span class=\"line\">      |           <span class=\"comment\"># output batch of masks/labels</span></span><br><span class=\"line\">    Output</span><br></pre></td></tr></table></figure>\n<h2 id=\"test_transformspy代码填充分析\"><a class=\"markdownIt-Anchor\" href=\"#test_transformspy代码填充分析\">#</a> test_transforms.py 代码填充分析</h2>\n<h3 id=\"test_transformspy原码\"><a class=\"markdownIt-Anchor\" href=\"#test_transformspy原码\">#</a> test_transforms.py 原码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a + p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a * p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert断言给llm分析的代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert断言给llm分析的代码\">#</a> 删除 assert 断言给 LLM 分析的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape == deaug.shape, <span class=\"string\">f&quot;Shape mismatch after augmentation-deaugmentation for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a[<span class=\"number\">0</span>, <span class=\"number\">0</span>], aug[<span class=\"number\">0</span>, <span class=\"number\">0</span>]), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">    transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape[<span class=\"number\">2</span>:] == p, <span class=\"string\">f&quot;Augmented image shape does not match expected shape <span class=\"subst\">&#123;p&#125;</span> for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/",
            "title": "robotframework-webservice",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"robotframework-webservice\"><a class=\"markdownIt-Anchor\" href=\"#robotframework-webservice\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtldFNxdWFyZS9yb2JvdGZyYW1ld29yay13ZWJzZXJ2aWNl\">robotframework-webservice</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>一个管理 Robot Framework 任务 / 测试的 Web 服务。</li>\n<li>该 Web 服务应启动 Robot Framework 的任务 / 测试，并返回并缓存相应的报告。</li>\n<li>运行：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install robotframework-webservice</span><br><span class=\"line\">python -m RobotFrameworkService.main -p <span class=\"number\">5003</span> -t path_to_my_taskfolder</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:5003/robotframework/run/mytask //调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask?myVariable1=42&amp;anotherVariable=Mustermann //带变量调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接在任务/测试的持续时间内保持打开状态</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask</span><br><span class=\"line\"></span><br><span class=\"line\"># 立即关闭连接 - 结果必须使用 x-request-id 请求</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask/async</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>调用 Robot 测试</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;test&quot;: &quot;Demonstration Test&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调用 Robot 任务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Demonstration Task&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>带变量调用 Robot 任务</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Task with more variables&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;variables&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;firstname&quot;: &quot;Max&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;lastname&quot;: &quot;Mustermann&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>启动本地 Web 服务：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> <span class=\"attr\">--help</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> -<span class=\"selector-tag\">p</span> <span class=\"number\">5003</span> -t path_to_my_taskfolder <span class=\"comment\">// example</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"test_apppy修改操作\"><a class=\"markdownIt-Anchor\" href=\"#test_apppy修改操作\">#</a> test_app.py 修改操作</h2>\n<h3 id=\"原本的testpy代码\"><a class=\"markdownIt-Anchor\" href=\"#原本的testpy代码\">#</a> 原本的 test.py 代码:</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, logs_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, report_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">400</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;Options test and task cannot be both specified&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;paths&quot;</span>: [<span class=\"string\">&quot;examples&quot;</span>], <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">&quot;/robotframework/logs/not_existing&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">404</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;The logs not_existing not existing or being generating&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">f&quot;/robotframework/logs/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">204</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        self.assertEqual(expected_response_code, response.status_code, response.text)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertNotIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, msg=msg)</span><br><span class=\"line\">        self.assertIn(</span><br><span class=\"line\">            <span class=\"string\">&quot;PASS&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains neither PASS nor FAIL&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains FAIL&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"投喂给gpt35的test代码\"><a class=\"markdownIt-Anchor\" href=\"#投喂给gpt35的test代码\">#</a> 投喂给 gpt3.5 的 test 代码：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt自动填充后的testpy\"><a class=\"markdownIt-Anchor\" href=\"#gpt自动填充后的testpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1ncHR0ZXN0LWpiOWs2Nmhsd2U5OXAxNTFneTc0YS5weQ==\">gpt 自动填充后的 test.py</span></h3>\n<p><strong>将上述代码喂给 chatgpt3.5，并附加 base prompt: 该 tests case 缺少 assert 断言 请你自动补充</strong></p>\n<p>生成的 test.py 如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTests</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Service is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为400</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">400</span>, <span class=\"string\">&quot;Expected response code 400&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with variables failed&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> logs_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> report_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Report is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 尚未实现</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            delete_response = client.delete(<span class=\"string\">f&quot;/robotframework/delete_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> delete_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not deleted&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为预期的状态码</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> response.status_code == expected_response_code, <span class=\"string\">f&quot;Expected response code <span class=\"subst\">&#123;expected_response_code&#125;</span>, got <span class=\"subst\">&#123;response.status_code&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否成功（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;passed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not pass&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否失败（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;failed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not fail&quot;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/2_cronex-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/2_cronex-master/",
            "title": "cronex",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"cronex\"><a class=\"markdownIt-Anchor\" href=\"#cronex\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VyaWNwcnVpdHQvY3JvbmV4\">cronex</span></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>用于类 corn 任务调度的 Python 模块，提供一个接口用于评估和触发 corn 表达式。</p>\n<ul>\n<li>类 corn 任务：Cron 是一种时间表驱动的任务调度程序，用于在特定的时间和日期执行任务。</li>\n<li><strong>Corn</strong> 表达式：由 5~6 个字段组成，分别表示分钟、小时、日、月、星期和可选的年份</li>\n</ul>\n<p>其表达式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *  command to be executed</span><br><span class=\"line\">- - - - -</span><br><span class=\"line\">| | | | |</span><br><span class=\"line\">| | | | ----- 星期 (<span class=\"number\">0</span> - <span class=\"number\">7</span>) (星期日 = <span class=\"number\">0</span> 或 <span class=\"number\">7</span>)</span><br><span class=\"line\">| | | ------- 月份 (<span class=\"number\">1</span> - <span class=\"number\">12</span>)</span><br><span class=\"line\">| | --------- 月中的日期 (<span class=\"number\">1</span> - <span class=\"number\">31</span>)</span><br><span class=\"line\">| ----------- 小时 (<span class=\"number\">0</span> - <span class=\"number\">23</span>)</span><br><span class=\"line\">------------- 分钟 (<span class=\"number\">0</span> - <span class=\"number\">59</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> * * * /path/to/command <span class=\"comment\">#表示每天凌晨1点执行某个命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"cronex功能\"><a class=\"markdownIt-Anchor\" href=\"#cronex功能\">#</a> cronex 功能</h3>\n<ul>\n<li>支持 Java Quartz 的特殊字符，如 &quot;L&quot;、“W&quot;和”#&quot;。</li>\n<li>允许设定任意间隔的触发器，例如每 9 小时，每 11 分钟等。</li>\n<li>示例代码：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job = CronExpression(<span class=\"string\">&quot;0 0 * * 1-5/2 find /var/log -delete&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2012</span>, <span class=\"number\">12</span>, <span class=\"number\">21</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure>\n<p>这里的 CronExpression (“0 0 * * 1-5/2 find /var/log -delete”) 创建了一个  <code>CronExpression</code>  对象，其 cron 表达式为 <code>0 0 * * 1-5/2</code></p>\n<ul>\n<li><code>0 0</code> ：每天的 00:00</li>\n<li><code>* *</code> : 每个月的每一天</li>\n<li><code>1-5/2</code> : 星期一到星期五中每隔一天</li>\n<li><code>find /var/log -delete</code> ：命令部分</li>\n</ul>\n<p>当给这个 job 传递参数 job.check_trigger ((2010, 11, 17, 0, 0)) 时：</p>\n<ul>\n<li>日期时间：2010 年 11 月 17 日 00:00</li>\n<li>星期三符合周一～周五间隔一天</li>\n<li>符合 corn 表达式条件，输出 True</li>\n</ul>\n<h2 id=\"testspy代码处理\"><a class=\"markdownIt-Anchor\" href=\"#testspy代码处理\">#</a> tests.py 代码处理</h2>\n<h3 id=\"更正说明\"><a class=\"markdownIt-Anchor\" href=\"#更正说明\">#</a> 更正说明</h3>\n<p>由于本人的 python 版本是 3.12，直接运行 tests.py 会报错</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\20_cronex-master\\cronex-master\\cronex\\tests.py&quot;</span>, line <span class=\"number\">397</span>, <span class=\"keyword\">in</span> test_catches_bad_L</span><br><span class=\"line\">    self.failUnlessRaises(ValueError,</span><br><span class=\"line\">    ^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\">AttributeError: <span class=\"string\">&#x27;test_testedmodule&#x27;</span> <span class=\"built_in\">object</span> has no attribute <span class=\"string\">&#x27;failUnlessRaises&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>原因是 <code>unittest.TestCase</code>  类中没有名为  <code>failUnlessRaises</code>  的方法</p>\n<p>这是由于该代码使用了旧版本  <code>unittest</code>  中的方法名称，现在应该使用  <code>assertRaises</code>  方法。</p>\n<p>更正后的 tests.py 代码如下：</p>\n<h3 id=\"debug后的tests\"><a class=\"markdownIt-Anchor\" href=\"#debug后的tests\">#</a> debug 后的 tests</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            obj = cronex.CronExpression(a)</span><br><span class=\"line\">            self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that calling compute_numtab after modifying the string-version</span></span><br><span class=\"line\"><span class=\"string\">        of an expression results in the static trigger-value cache being</span></span><br><span class=\"line\"><span class=\"string\">        updated.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the day-of-the-month field</span></span><br><span class=\"line\"><span class=\"string\">        work as expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the hours field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the minutes field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the month field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected. More specifically, it verifies that the repeaters are</span></span><br><span class=\"line\"><span class=\"string\">        triggered every &quot;N&quot; calendar months regardless of the day for triggers</span></span><br><span class=\"line\"><span class=\"string\">        set to go offer every 1 month, ever 2 months, etc... through 18 months</span></span><br><span class=\"line\"><span class=\"string\">        from 1970 through 1980.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(should_trigger, triggered,</span><br><span class=\"line\">                            <span class=\"string\">&quot;%s: expected trigger to be %r for %r&quot;</span> %</span><br><span class=\"line\">                            (description, should_trigger, time_tuple)</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that parsing atoms returns sets containing all of the expected</span></span><br><span class=\"line\"><span class=\"string\">        values.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(want_from_function,</span><br><span class=\"line\">                cronex.parse_atom(*give_the_function))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the __repr__ and __str__ return values can be passed to</span></span><br><span class=\"line\"><span class=\"string\">        eval to generate an identical CronExpression.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.comment, testex2.comment)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">str</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened month names are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened days-of-the-week are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that combining day of-the-month field and day-of-the-week field</span></span><br><span class=\"line\"><span class=\"string\">        triggers on either condition matching the current day and that using a</span></span><br><span class=\"line\"><span class=\"string\">        wild-card day of the month with a day of the week entry doesn&#x27;t trigger</span></span><br><span class=\"line\"><span class=\"string\">        every single day.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> e <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">22</span>, <span class=\"number\">29</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"comment\"># In July of 2014, every Wednesday just happens to be on a day of</span></span><br><span class=\"line\">            <span class=\"comment\"># the month that&#x27;s a multiple of 7.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(d % <span class=\"number\">7</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-week field with a number always</span></span><br><span class=\"line\"><span class=\"string\">        triggers on last occurrence of the corresponding day of the week in any</span></span><br><span class=\"line\"><span class=\"string\">        given month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">12</span>):</span><br><span class=\"line\">            self.assertTrue((testex.check_trigger((<span class=\"number\">2010</span>, v+<span class=\"number\">1</span>, tv[v], <span class=\"number\">0</span>, <span class=\"number\">0</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-month field always triggers on</span></span><br><span class=\"line\"><span class=\"string\">        the last day of the month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> d &lt; lastdom:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        self.assertTrue(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that a periodic trigger for the day of the month is based on</span></span><br><span class=\"line\"><span class=\"string\">        calendar days, not 24-hour days.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time, -<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that asterisk cannot be combined with other atoms.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* *,1-9 * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that using &quot;#&quot; to find the Nth occurrence of a given day of the</span></span><br><span class=\"line\"><span class=\"string\">        week works correctly.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># There can never be more than 5 occurrences of a given day</span></span><br><span class=\"line\">                    <span class=\"comment\"># of the week in one month.</span></span><br><span class=\"line\">                    self.assertRaises(ValueError, cronex.CronExpression,</span><br><span class=\"line\">                                      expression)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(</span><br><span class=\"line\">                        (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day - <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day + <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having numbers outside of the reasonable ranges for each</span></span><br><span class=\"line\"><span class=\"string\">        field raises an exception. Tests both upper and lower bounds.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;1000 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* 1000 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 1000 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 1000 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * 1000&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;-1 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* -1 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 0 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 0 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * -1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a trigger with an invalid repetition period raises</span></span><br><span class=\"line\"><span class=\"string\">        an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;W&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;L&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;#&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that an exception is thrown when the cron expression has too few</span></span><br><span class=\"line\"><span class=\"string\">        fields.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError, cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在去除所有 assert 语句，并将去除 assert 后的 tests 代码补全逻辑后，得到</p>\n<h3 id=\"去除assert及相关提示后的tests_code\"><a class=\"markdownIt-Anchor\" href=\"#去除assert及相关提示后的tests_code\">#</a> 去除 assert 及相关提示后的 tests_code</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            cronex.parse_atom(*give_the_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"gpt35生成补全后的tests\"><a class=\"markdownIt-Anchor\" href=\"#gpt35生成补全后的tests\">#</a> gpt3.5 生成补全后的 tests</h3>\n<p>将 tests_code 投喂给 gpt3.5，并且附上 prompt 该 tests case 缺少 assert 语句，请你自动补全</p>\n<p>补全后的代码为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">            self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(triggered, should_trigger)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(cronex.parse_atom(*give_the_function), want_from_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (now[<span class=\"number\">2</span>] == <span class=\"number\">5</span> <span class=\"keyword\">or</span> time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Mon&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Wed&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, day <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tv):</span><br><span class=\"line\">            now = (<span class=\"number\">2010</span>, i + <span class=\"number\">1</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 and verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at least</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    now = (y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (d == lastdom))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * * * *&quot;</span>)</span><br><span class=\"line\">        now = time.gmtime()</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertFalse(testex.check_trigger(now))</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (day &lt;= calendar.monthrange(<span class=\"number\">2024</span>, <span class=\"number\">7</span>)[-<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">            cronex.CronExpression(<span class=\"string\">&quot;*/61 * * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h2 id=\"gpt自动填充后assert的优缺点分析\"><a class=\"markdownIt-Anchor\" href=\"#gpt自动填充后assert的优缺点分析\">#</a> gpt 自动填充后 assert 的优缺点分析</h2>\n<h3 id=\"填充优秀部分\"><a class=\"markdownIt-Anchor\" href=\"#填充优秀部分\">#</a> 填充优秀部分：</h3>\n<h4 id=\"1test_substitution\"><a class=\"markdownIt-Anchor\" href=\"#1test_substitution\">#</a> 1.test_substitution()</h4>\n<p><strong>tests 原代码块函数</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        obj = cronex.CronExpression(a)</span><br><span class=\"line\">        self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br></pre></td></tr></table></figure>\n<p><strong>gpt3.5 自动填充的代码</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原本的 test 代码中使用 assertTrue 来验证特殊替换后的字符串是否在 <code>obj</code>  的 <code>repr</code>  中存在，通过检查 <code>repr(obj)</code>  的输出来间接验证该特殊替换是否正确</li>\n<li>而 gpt 填充的代码直接使用 assertEqual 来验证 <code>cron_expression</code>  对象的 <code>str()</code>  方法是否生成了预期的替换后的 cron 表达式。使用 asserEqual 来判断两个值是否相等</li>\n<li>gpt 自动填充的代码更优秀 —— 其使用 special 和 expected 来作为变量名，更直观和可读。并且它不依赖于间接验证  <code>repr</code>  的输出是否包含特定字符串，而是直接检查  <code>str()</code>  方法生成的输出是否符合预期。通过直接比较字符串可以更清晰地表达测试的意图和预期结果，使得测试代码更易于理解和维护。</li>\n<li>综上所述，在 <code>test_substitution</code>  函数上，gpt 生成的代码更加优秀。</li>\n</ul>\n<h3 id=\"填充后不足有缺陷部分\"><a class=\"markdownIt-Anchor\" href=\"#填充后不足有缺陷部分\">#</a> 填充后不足 / 有缺陷部分</h3>\n<h4 id=\"1-test_compute_numtab\"><a class=\"markdownIt-Anchor\" href=\"#1-test_compute_numtab\">#</a> 1. test_compute_numtab（）</h4>\n<p><strong>tests 原代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br></pre></td></tr></table></figure>\n<p><strong>gpt3.5 自动填充代码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原代码验证在修改表达式的字符串版本后调用 compute_numtab 是否会更新静态触发器值缓存。</li>\n<li>原代码在最开始先通过两个 <code>assertNotEqual</code>  确保 <code>testex1</code>  和 <code>testex2</code>  在初始化时候的  <code>string_tab</code>  属性和 <code>numerical_tab</code>  属性是不同的，然后再将  <code>testex1</code>  的  <code>string_tab</code>  属性设置为  <code>testex2</code>  的  <code>string_tab</code>  属性，人为的使  <code>testex1</code>  和  <code>testex2</code>  在字符串表示上相同。然后再来测试 <code>compute_numtab</code>  的效果，即重新计算 <code>testex1</code>  的数值表示，然后再验证 <code>testex1</code>  和 <code>testex2</code>  在修改后的属性是相同的</li>\n<li>gpt3.5 填充的代码相较而言只考虑到了 testex1=testex2 后调用 compute_numtab 函数后两个 testex 的 string_tab 是否相同</li>\n<li>LLM 自动生成的代码相较而言考虑的并不全面，虽然其足以验证基本的功能，但是没有考虑到验证 <code>testex1</code>  和  <code>testex2</code>  的字符串表和数值表不相等，和验证验证 <code>testex1</code>  和  <code>testex2</code>  修改后字符表相等，并不全面</li>\n<li><strong>修改建议</strong>：给 gpt3.5 增加更详细的 prompt，比如告诉 gpt 需要在自动填充 assert 的时候考虑得更全面，充分的考虑到所有情况，避免出现因为过度考虑性能而忽视设计周密的情况。</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/9_sumeval-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/9_sumeval-master/",
            "title": "sumeval",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"sumeval\"><a class=\"markdownIt-Anchor\" href=\"#sumeval\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFs\">sumeval</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>不仅支持英文，还支持日文和中文，其他语言也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFsI3dlbGNvbWUtY29udHJpYnV0aW9uLXRhZGE=\">轻松</span>扩展</li>\n<li>使用方法 <code>pip install sumeval</code></li>\n</ul>\n<h2 id=\"test_rougepy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_rougepy代码分析\">#</a> test_rouge.py 代码分析</h2>\n<h3 id=\"test_rougepy原代码\"><a class=\"markdownIt-Anchor\" href=\"#test_rougepy原代码\">#</a> test_rouge.py 原代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-L-F&quot;</span>] - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"去掉assert断言和一些辅助说明后喂给llm的test代码\"><a class=\"markdownIt-Anchor\" href=\"#去掉assert断言和一些辅助说明后喂给llm的test代码\">#</a> 去掉 assert 断言和一些辅助说明后喂给 LLM 的 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/",
            "title": "artificial-adversary",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"artificial-adversary\"><a class=\"markdownIt-Anchor\" href=\"#artificial-adversary\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9hcnRpZmljaWFsLWFkdmVyc2FyeQ==\">artificial-adversary</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>在对用户生成的文本进行分类时，用户可以通过多种方式修改其内容以避免被检测到。这些方法通常是对文本进行表面修改，即更改所使用的原始字符或单词，但保留足够明显的原始含义以供人类读者理解。这些方法包括用相似的字符替换字符、删除或添加标点和空格以及交换单词中的字母。例如，这 <code>please wire me 10,000 US DOLLARS to bank of scamland</code>  可能是一条明显的诈骗信息，但 <code>pl3@se.wire me 10000 US DoLars to,BANK of ScamIand</code>  可以欺骗许多分类器。</li>\n<li>安装：</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> Adversary</span><br><span class=\"line\">python -m textblob.download_corpora</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>用于数据集增强</strong></li>\n<li><strong>对于性能界限</strong></li>\n</ul>\n<h2 id=\"test_allpy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_allpy代码分析\">#</a> test_all.py 代码分析</h2>\n<h3 id=\"test_allpy源码\"><a class=\"markdownIt-Anchor\" href=\"#test_allpy源码\">#</a> test_all.py 源码</h3>\n<p><strong>将 <code>test_adversary.py</code> 、 <code>test_attacks.py</code> 、 <code>test_utils.py</code>  三个代码三合一后，我创建了 test_all.py 代码，源码如下：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (<span class=\"built_in\">len</span>(g) == <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;1&#x27;</span>) == <span class=\"string\">&#x27;one&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;dog&#x27;</span>) == <span class=\"string\">&#x27;dog&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(flatten_unique(l) == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(combinations_of_len(l, <span class=\"number\">2</span>) == [(<span class=\"number\">1</span>,), (<span class=\"number\">2</span>,), (<span class=\"number\">3</span>,), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(fancy_titles(cols) == [<span class=\"string\">&#x27;Change Case&#x27;</span>, <span class=\"string\">&#x27;Insert Duplicate Characters&#x27;</span>, <span class=\"string\">&#x27;Synonym&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert语句的test代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert语句的test代码\">#</a> 删除 assert 语句的 test 代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert语句后的test代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert语句后的test代码\">#</a> LLM 自动填充 assert 语句后的 test 代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  <span class=\"comment\"># Add assertions when implemented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    flat_list = flatten_unique(l)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flat_list) == <span class=\"number\">5</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    combs = combinations_of_len(l, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(combs) == <span class=\"number\">3</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    titles = fancy_titles(cols)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(titles) == <span class=\"built_in\">len</span>(cols)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/",
            "title": "pytorch-lr-finder",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"pytorch-lr-finder\"><a class=\"markdownIt-Anchor\" href=\"#pytorch-lr-finder\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkdHZzL3B5dG9yY2gtbHItZmluZGVy\">pytorch-lr-finder</span></strong></h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>\n<p>该项目为 PyTorch 学习率查找器</p>\n</li>\n<li>\n<p>学习率范围测试是一种提供有关最佳学习率的宝贵信息的测试。在预训练运行期间，学习率在两个边界之间线性或指数增加。较低的初始学习率允许网络开始收敛，随着学习率的增加，它最终会变得太大，网络会发散。</p>\n</li>\n<li>\n<p>来自 fastai 的调整版本：以指数方式增加学习率并计算每个学习率的训练损失。 <code>lr_finder.plot()</code>  绘制训练损失与对数学习率的关系。</p>\n</li>\n<li>\n<p>Leslie Smith 的方法：线性增加学习率并计算每个学习率的评估损失。 <code>lr_finder.plot()</code>  绘制评估损失与学习率的关系图。这种方法通常会产生更精确的曲线，因为评估损失更容易发散，但执行测试所需的时间会更长，尤其是在评估数据集很大的情况下。</p>\n<h2 id=\"test_lr_finderpy代码分析\"><a class=\"markdownIt-Anchor\" href=\"#test_lr_finderpy代码分析\">#</a> test_lr_finder.py 代码分析</h2>\n<h3 id=\"该test原代码\"><a class=\"markdownIt-Anchor\" href=\"#该test原代码\">#</a> 该 test 原代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Run a `DataLoaderIter` object for specific times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Arguments:</span></span><br><span class=\"line\"><span class=\"string\">        loader_iter (torch_lr_finder.DataLoaderIter): the iterator to test.</span></span><br><span class=\"line\"><span class=\"string\">        desired_runs (int, optional): times that iterator should be iterated.</span></span><br><span class=\"line\"><span class=\"string\">            If it&#x27;s not given, `len(loader_iter.data_loader)` will be used.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        is_achieved (bool): False if `loader_iter` cannot be iterated specific</span></span><br><span class=\"line\"><span class=\"string\">            times. It usually means `loader_iter` has raised `StopIteration`.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(loader_iter, DataLoaderIter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> init_lrs == restored_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">2e-5</span>, <span class=\"number\">3e-5</span>, <span class=\"number\">4e-5</span>, <span class=\"number\">5e-5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">1e-4</span>, <span class=\"number\">1e-3</span>, <span class=\"number\">1e-2</span>, <span class=\"number\">0.1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> We are using smaller batch size to simulate a large batch.</span></span><br><span class=\"line\">        <span class=\"comment\"># So that the actual times of model/criterion called should be</span></span><br><span class=\"line\">        <span class=\"comment\"># `(desired_bs/real_bs) * num_iter` == `accum_steps * num_iter`</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">hasattr</span>(task.optimizer, <span class=\"string\">&quot;_amp_stash&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `TrainDataLoaderIter` can reset itself, so that it&#x27;s ok to reuse it</span></span><br><span class=\"line\">        <span class=\"comment\"># directly and iterate it more than `len(dataloader)` times.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t reset itself, so this should be False if</span></span><br><span class=\"line\">        <span class=\"comment\"># we re-run it without resetting it.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Reset it by `iter()`</span></span><br><span class=\"line\">        loader_iter = <span class=\"built_in\">iter</span>(loader_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t be iterated more than `len(dataloader)` times</span></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"删除assert和必要提示后上传llm的代码\"><a class=\"markdownIt-Anchor\" href=\"#删除assert和必要提示后上传llm的代码\">#</a> 删除 assert 和必要提示后上传 LLM 的代码</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"llm自动填充assert后的代码\"><a class=\"markdownIt-Anchor\" href=\"#llm自动填充assert后的代码\">#</a> LLM 自动填充 assert 后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> restored_lrs == init_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecisionWithTorchAMP</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"keyword\">not</span> mod_task.use_cuda(<span class=\"params\"></span>), reason=<span class=\"string\">&quot;CUDA GPU is required to run these tests.&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMultiPhase</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_multi_phase</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Simulate a change in LR and perform another phase of LR range test</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> param_group <span class=\"keyword\">in</span> task.optimizer.param_groups:</span><br><span class=\"line\">            param_group[<span class=\"string\">&quot;lr&quot;</span>] *= <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>, reset_lr=<span class=\"literal\">False</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1/",
            "url": "https://enjundu.github.io/LLMstestoracle/1/",
            "title": "研究方法",
            "date_published": "2024-07-02T18:07:35.000Z",
            "content_html": "<h3 id=\"分析和理解步骤\"><a class=\"markdownIt-Anchor\" href=\"#分析和理解步骤\">#</a> 分析和理解步骤</h3>\n<h4 id=\"第一步找10个项目每个随机选10个左右的test-case包含assert\"><a class=\"markdownIt-Anchor\" href=\"#第一步找10个项目每个随机选10个左右的test-case包含assert\">#</a> 第一步：找 10 个项目每个随机选 10 个左右的 test case（包含 assert）</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>找 10 个项目</strong>：我们需要选择 10 个开源项目，这些项目应该包含单元测试，并且测试用例使用了 assert 语句。</li>\n<li><strong>随机选 10 个左右的 test case</strong>：从每个项目中随机选择大约 10 个测试用例。每个测试用例必须包含至少一个 assert 语句。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>在 GitHub 等平台上寻找 10 个开源项目。</li>\n<li>确保这些项目有单元测试（通常在 <code>tests</code>  目录下）。</li>\n<li>在每个项目中随机选择 10 个包含 assert 语句的测试用例。</li>\n</ul>\n<h4 id=\"第二步把test-case中的assert去掉\"><a class=\"markdownIt-Anchor\" href=\"#第二步把test-case中的assert去掉\">#</a> 第二步：把 test case 中的 assert 去掉</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>去掉 assert 语句</strong>：编辑选中的测试用例，删除其中的 assert 语句。这意味着我们要修改测试用例，使其保留其他逻辑，但去除验证部分。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>打开每个测试用例文件，找到 assert 语句。</li>\n<li>删除 assert 语句，保留其他代码。</li>\n</ul>\n<h4 id=\"第三步用llm补全assert\"><a class=\"markdownIt-Anchor\" href=\"#第三步用llm补全assert\">#</a> 第三步：用 LLM 补全 assert</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>用 LLM 补全</strong>：将去掉 assert 语句的测试用例输入到大语言模型（LLM）中，让它自动补全缺失的 assert 语句。这里的 LLM 可以是一个经过训练的自然语言处理模型，例如 GPT-4。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>将去掉 assert 语句的测试用例逐个输入到 LLM 中。</li>\n<li>让 LLM 根据上下文补全 assert 语句。</li>\n</ul>\n<h4 id=\"第四步看看结果是什么样子\"><a class=\"markdownIt-Anchor\" href=\"#第四步看看结果是什么样子\">#</a> 第四步：看看结果是什么样子</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>查看结果</strong>：获取 LLM 补全后的测试用例，并对比原始测试用例，查看 LLM 补全的 assert 语句的正确性和合理性。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>比较 LLM 补全的 assert 语句和原始 assert 语句。</li>\n<li>记录 LLM 补全效果好的地方和不足之处。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><strong>完整过程</strong>：</p>\n<ol>\n<li>找 10 个开源项目，每个项目中随机选 10 个包含 assert 语句的测试用例。</li>\n<li>去掉这些测试用例中的 assert 语句，保留其他代码。</li>\n<li>使用 LLM 对去掉 assert 语句的测试用例进行补全，让 LLM 自动生成 assert 语句。</li>\n<li>对比 LLM 补全的结果与原始测试用例，分析 LLM 的表现。</li>\n</ol>\n<p>这个过程将帮助我们评估 LLM 在自动补全测试用例中 assert 语句的能力，并找出其优缺点，以便进一步改进和优化。</p>\n<h3 id=\"示例具体操作假设性示例\"><a class=\"markdownIt-Anchor\" href=\"#示例具体操作假设性示例\">#</a> 示例具体操作（假设性示例）</h3>\n<p>假设我们从一个项目中选取了以下测试用例：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"attribute\">assert</span> result == <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>去掉 assert 语句后：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># assert result == 12</span></span><br></pre></td></tr></table></figure>\n<p>输入 LLM 进行补全后，假设 LLM 生成的结果是：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"built_in\">result</span> = <span class=\"built_in\">multiply</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    assert <span class=\"built_in\">result</span> == <span class=\"number\">12</span>  <span class=\"comment\"># LLM补全</span></span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><strong>正确性</strong>：LLM 正确地补全了 assert 语句，与原始测试用例一致。</li>\n<li><strong>上下文理解</strong>：LLM 理解了测试函数的意图，并生成了合理的 assert 语句。</li>\n</ul>\n<p>通过这样的操作，我们可以评估 LLM 在处理各种测试用例时的表现，并找出改进方向。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        }
    ]
}