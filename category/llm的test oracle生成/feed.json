{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"llm的test oracle生成\" category",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/LLMstestoracle/01_conductor-main/",
            "url": "https://enjundu.github.io/LLMstestoracle/01_conductor-main/",
            "title": "01_conductor",
            "date_published": "2024-07-18T18:07:35.000Z",
            "content_html": "<h1 id=\"conductor\"><a class=\"anchor\" href=\"#conductor\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbmR1Y3Rvci1vc3MvY29uZHVjdG9y\">conductor</span></h1>\n<h1 id=\"原代码\"><a class=\"anchor\" href=\"#原代码\">#</a> 原代码</h1>\n<p>地址: <code>\\conductor-main\\es7-persistence\\src\\test\\java\\com\\netflix\\conductor\\es7\\dao\\query\\parser\\TestExpression.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2023 Conductor Authors.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License. You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on</span></span><br><span class=\"line\"><span class=\"comment\"> * an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertFalse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27;&quot;;</span></span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;(metadata.type = &#x27;IMAGE&#x27;)&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">        assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">        assertNotNull(expr.getNameValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">        assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">        assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">        assertNotNull(expr.getNameValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">        assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\">        assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNull(ge);</span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);</span><br><span class=\"line\">        assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);</span><br><span class=\"line\">        assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"投喂代码\"><a class=\"anchor\" href=\"#投喂代码\">#</a> 投喂代码</h1>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2023 Conductor Authors.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License. You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on</span></span><br><span class=\"line\"><span class=\"comment\"> * an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertFalse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subTy\tpe\t=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27;&quot;;</span></span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;(metadata.type = &#x27;IMAGE&#x27;)&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        </span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"llm生成代码\"><a class=\"anchor\" href=\"#llm生成代码\">#</a> LLM 生成代码</h1>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertFalse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertTrue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Author: Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\"></span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">        assertNull(cv);  <span class=\"comment\">// Assuming null due to &#x27;description IS null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);  <span class=\"comment\">// Assuming not null due to &#x27;description IS not null&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"代码分析\"><a class=\"anchor\" href=\"#代码分析\">#</a> 代码分析</h1>\n<h2 id=\"原代码含义\"><a class=\"anchor\" href=\"#原代码含义\">#</a> 原代码含义：</h2>\n<h3 id=\"test-方法中的断言\"><a class=\"anchor\" href=\"#test-方法中的断言\">#</a>  <code>test</code>  方法中的断言</h3>\n<ol>\n<li><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式被解析为二元表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式没有包含组表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(expr.getNameValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  的  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式包含一个  <code>NameValue</code>  时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的名称是否为  <code>&quot;type&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为  <code>NameValue</code>  的名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的值是否为  <code>&quot;IMAGE&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须被解析为二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;subType&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否为  <code>&quot;sdp&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式的操作符是否为  <code>&quot;AND&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不是二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(ge);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧组表达式  <code>ge</code>  是否为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;description&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;description&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;IS&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(cv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的系统常量值是否为  <code>ConstValue.SystemConsts.NULL</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"testwithsysconstants-方法中的断言\"><a class=\"anchor\" href=\"#testwithsysconstants-方法中的断言\">#</a>  <code>testWithSysConstants</code>  方法中的断言</h3>\n<ol>\n<li><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式被解析为二元表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式没有包含组表达式时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(expr.getNameValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>expr</code>  的  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为只有在输入表达式包含一个  <code>NameValue</code>  时，这个断言才会通过。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的名称是否为  <code>&quot;type&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为  <code>NameValue</code>  的名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的值是否为  <code>&quot;IMAGE&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须被解析为二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式是否没有组表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;subType&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;=&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否为  <code>&quot;sdp&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式的操作符是否为  <code>&quot;AND&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(rhs);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧表达式  <code>rhs</code>  是否不是一个二元表达式。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须不是二元表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNull(ge);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧组表达式  <code>ge</code>  是否为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式不包含组表达式。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为右侧表达式必须包含一个  <code>NameValue</code> 。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;description&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的名称是否为  <code>&quot;description&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的操作符是否为  <code>&quot;IS&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(cv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的值是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查右侧  <code>NameValue</code>  的系统常量值是否为  <code>ConstValue.SystemConsts.NULL</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(nv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为  <code>NameValue</code>  必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;description&quot;, nv.getName().getName());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的名称是否为  <code>&quot;description&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为名称必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的操作符是否为  <code>&quot;IS&quot;</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为操作符必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n<li><strong> <code>assertNotNull(cv);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的值是否不为  <code>null</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为值必须存在。</li>\n</ul>\n</li>\n<li><strong> <code>assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</code> </strong>\n<ul>\n<li><strong>验证内容</strong>：检查  <code>NameValue</code>  的系统常量值是否为  <code>ConstValue.SystemConsts.NOT_NULL</code> 。</li>\n<li><strong>依赖性</strong>：依赖于具体的 SUT 输出，因为系统常量值必须与输入表达式的内容一致。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"相似率\"><a class=\"anchor\" href=\"#相似率\">#</a> 相似率</h2>\n<h3 id=\"原代码和填充后代码相同\"><a class=\"anchor\" href=\"#原代码和填充后代码相同\">#</a> 原代码和填充后代码相同</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(ge);</span><br><span class=\"line\">assertNotNull(expr);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(cv);</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertNotNull(cv);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原代码有填充后无\"><a class=\"anchor\" href=\"#原代码有填充后无\">#</a> 原代码有，填充后无</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原代码和填充后不同\"><a class=\"anchor\" href=\"#原代码和填充后不同\">#</a> 原代码和填充后不同</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**原代码**：</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\">        assertNull(ge);☆</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**填充后的代码**</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertNotNull(ge);☆</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"相似率-2\"><a class=\"anchor\" href=\"#相似率-2\">#</a> 相似率</h3>\n<p>原代码共<strong> 58</strong> 个 assert 语句，填充后的代码与原代码测试语句相同的部分占<strong> 16</strong> 项，不同的部分占<strong> 7</strong> 项，其中填充后与原代码含义相反的代码<strong> 1</strong> 项（已用☆标出），原代码有而填充后代码缺失的语句占<strong> 35</strong> 项。填充正确率为<strong> 27.58%</strong>。</p>\n<h2 id=\"具体分析\"><a class=\"anchor\" href=\"#具体分析\">#</a> 具体分析</h2>\n<h3 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> 1</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  是否为二元表达式。这确保了表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其类型。</li>\n</ul>\n<p><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认表达式  <code>expr</code>  的分组表达式为空。确保表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertNotNull(expr.getNameValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  的名称和值对象是否存在。确保表达式包含有效的名称和值。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并返回名称和值对象。</li>\n</ul>\n<p><strong>LLM 填充后：</strong> 没有填充这些 assert 语句。</p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>isBinaryExpr</code>  和  <code>getGroupedExpression</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 提供的代码中缺少关于  <code>Expression</code>  类的具体信息，使得 LLM 无法生成与这些方法相关的断言。</li>\n</ul>\n<h3 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> 2</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;type&quot;。确保名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;IMAGE&quot;</code> 。确保值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有描述  <code>NameValue</code>  类的  <code>getName</code> 、 <code>getOp</code>  和  <code>getValue</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少  <code>NameValue</code>  类的详细信息，导致 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"3\"><a class=\"anchor\" href=\"#3\">#</a> 3</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为二元表达式。确保右侧表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"4\"><a class=\"anchor\" href=\"#4\">#</a> 4</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认右侧表达式  <code>rhs</code>  的分组表达式为空。确保右侧表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;subType&quot;。确保右侧表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;sdp&quot;</code> 。确保右侧表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;AND&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并返回操作符字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li>\n<p><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  和  <code>Expression</code>  类的相关方法。LLM 无法推断这些方法的存在和它们的预期行为。</p>\n</li>\n<li>\n<p><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</p>\n</li>\n</ul>\n<h3 id=\"5\"><a class=\"anchor\" href=\"#5\">#</a> 5</h3>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为非二元表达式。确保右侧表达式不是二元表达式，可能是其他类型的表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"6\"><a class=\"anchor\" href=\"#6\">#</a> 6</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p><strong>验证内容：</strong> 验证分组表达式  <code>ge</code>  是否存在。确保右侧表达式中包含有效的分组表达式。</p>\n</li>\n<li>\n<p><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>GroupedExpression</code>  对象。<strong>LLM 填充后：</strong></p>\n</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>成功原因：</strong></p>\n<ul>\n<li><strong>方法名称和返回类型明确：</strong>  <code>getGroupedExpression</code>  方法名称和返回类型明确，容易被 LLM 推断和理解。</li>\n<li><strong>存在性检查：</strong>  <code>assertNotNull</code>  是基本的存在性检查，容易生成。</li>\n</ul>\n<h3 id=\"7\"><a class=\"anchor\" href=\"#7\">#</a> 7</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr = ge.getExpression();</span><br><span class=\"line\">assertNotNull(expr);</span><br><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(expr);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证嵌套表达式  <code>expr</code>  是否存在。确保分组表达式中包含有效的嵌套表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>GroupedExpression</code>  类正确解析并返回  <code>Expression</code>  对象。</li>\n</ul>\n<p><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证嵌套表达式  <code>expr</code>  是否为二元表达式。确保嵌套表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析嵌套表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr = ge.getExpression();</span><br><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>GroupedExpression</code>  类的  <code>getExpression</code>  方法和  <code>Expression</code>  类的  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>GroupedExpression</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"8\"><a class=\"anchor\" href=\"#8\">#</a> 8</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保嵌套表达式中的名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;metadata.width&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;metadata.width&quot;。确保嵌套表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;&gt;&quot;。确保嵌套表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;50&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为 &quot;50&quot;。确保嵌套表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;OR&quot;, expr.getOperator().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;OR&quot;。确保嵌套表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  和  <code>Expression</code>  类的相关方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"9\"><a class=\"anchor\" href=\"#9\">#</a> 9</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为非二元表达式。确保右侧表达式不是二元表达式，可能是其他类型的表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"10\"><a class=\"anchor\" href=\"#10\">#</a> 10</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保右侧表达式中的名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;metadata.height&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;metadata.height&quot;。确保右侧表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;&gt;&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;50&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为 &quot;50&quot;。确保右侧表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  类的  <code>getName</code> 、 <code>getOp</code>  和  <code>getValue</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"11\"><a class=\"anchor\" href=\"#11\">#</a> 11</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br><span class=\"line\">assertNotNull(expr.getNameValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertTrue(expr.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  是否为二元表达式。这确保了表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其类型。</li>\n</ul>\n<p><strong> <code>assertNull(expr.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认表达式  <code>expr</code>  的分组表达式为空。确保表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertNotNull(expr.getNameValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证表达式  <code>expr</code>  的名称和值对象是否存在。确保表达式包含有效的名称和值。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析输入表达式并返回名称和值对象。</li>\n</ul>\n<p><strong>LLM 填充后：</strong> 没有填充这些 assert 语句。</p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>isBinaryExpr</code>  和  <code>getGroupedExpression</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 提供的代码中缺少关于  <code>Expression</code>  类的具体信息，使得 LLM 无法生成与这些方法相关的断言。</li>\n</ul>\n<h3 id=\"12\"><a class=\"anchor\" href=\"#12\">#</a> 12</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertEquals(&quot;type&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;type&quot;。确保名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;IMAGE\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;IMAGE&quot;</code> 。确保值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有描述  <code>NameValue</code>  类的  <code>getName</code> 、 <code>getOp</code>  和  <code>getValue</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少  <code>NameValue</code>  类的详细信息，导致 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"13\"><a class=\"anchor\" href=\"#13\">#</a> 13</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertTrue(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为二元表达式。确保右侧表达式具有两个操作数和一个操作符。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"14\"><a class=\"anchor\" href=\"#14\">#</a> 14</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv); <span class=\"comment\">// subType = sdp</span></span><br><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(nv);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在。确保名称和值对象正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>NameValue</code>  对象。</li>\n</ul>\n<p><strong> <code>assertNull(rhs.getGroupedExpression());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认右侧表达式  <code>rhs</code>  的分组表达式为空。确保右侧表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其是否包含分组表达式。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;subType&quot;, nv.getName().getName());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证  <code>NameValue</code>  对象的名称是否为 &quot;subType&quot;。确保右侧表达式中的名称字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;=&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;=&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回操作符字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;\\&quot;sdp\\&quot;&quot;, nv.getValue().getValue());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证值是否为  <code>&quot;sdp&quot;</code> 。确保右侧表达式中的值字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回值字段。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证操作符是否为 &quot;AND&quot;。确保右侧表达式中的操作符字段正确解析。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并返回操作符字段。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  和  <code>Expression</code>  类的相关方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  和  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"15\"><a class=\"anchor\" href=\"#15\">#</a> 15</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNotNull(rhs);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否存在。确保表达式正确解析并包含右侧操作数。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回右侧表达式。</li>\n</ul>\n<p><strong> <code>assertFalse(rhs.isBinaryExpr());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证右侧表达式  <code>rhs</code>  是否为非二元表达式。确保右侧表达式不是二元表达式，可能是其他类型的表达式。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析右侧表达式并判断其类型。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rhs = rhs.getRightHandSide();</span><br><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>Expression</code>  类的  <code>getRightHandSide</code>  和  <code>isBinaryExpr</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>Expression</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"16\"><a class=\"anchor\" href=\"#16\">#</a> 16</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong> <code>assertNull(ge);</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 确认分组表达式  <code>ge</code>  为空。确保右侧表达式没有嵌套在其他表达式中。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>Expression</code>  类正确解析并返回  <code>GroupedExpression</code>  对象。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">assertNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>成功原因：</strong></p>\n<ul>\n<li><strong>方法名称和返回类型明确：</strong>  <code>getGroupedExpression</code>  方法名称和返回类型明确，容易被 LLM 推断和理解。</li>\n<li><strong>存在性检查：</strong>  <code>assertNull</code>  是基本的存在性检查，容易生成。</li>\n</ul>\n<h3 id=\"17\"><a class=\"anchor\" href=\"#17\">#</a> 17</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>象。</li>\n</ul>\n<p>** <code>assertNotNull(nv);</code></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在，确保名称字段为 &quot;description&quot;，操作符字段为 &quot;IS&quot;。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称和操作符字段。</li>\n</ul>\n<p>**  <code>assertEquals(cv.getSysConstant()</code> **</p>\n<ul>\n<li><strong>验证内容：</strong> 验证常量值  <code>cv</code>  是否存在，并确保其系统常量为  <code>NULL</code> 。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>ConstValue</code>  类正确解析并返回系统常量。</li>\n</ul>\n<p><strong> <code>assertEquals(&quot;IS&quot;, nv.getOp().getOperator());</code> </strong></p>\n<ul>\n<li><strong>验证内容：</strong> 验证名称和值对象  <code>nv</code>  是否存在，确保名称字段为 &quot;description&quot;，操作符字段为 &quot;IS&quot;。</li>\n<li><strong>依赖性：</strong> 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称和操作符字段。</li>\n</ul>\n<p>** <code>as</code> **<strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = rhs.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  类的  <code>getName</code>  和  <code>getOp</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"18\"><a class=\"anchor\" href=\"#18\">#</a> 18</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">assertNotNull(cv);</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NULL);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>** 验证内容：** 验证常量值  <code>cv</code>  是否存在，并确保其系统常量为  <code>NULL</code> 。</li>\n<li>** 依赖性：** 依赖具体的 SUT 输出。需要  <code>ConstValue</code>  类正确解析并返回系统常量。</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">assertNull(cv);  <span class=\"comment\">// Assuming null due to &#x27;description IS null&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>ConstValue</code>  类的  <code>getSysConstant</code>  方法和  <code>SystemConsts</code>  常量。LLM 无法推断这些方法和常量的存在及其预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>ConstValue</code>  类的详细信息，导致 LLM 生成了错误的断言。</li>\n</ul>\n<h3 id=\"19\"><a class=\"anchor\" href=\"#19\">#</a> 19</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName().getName());</span><br><span class=\"line\">assertEquals(<span class=\"string\">&quot;IS&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>** 验证内容：** 验证名称和值对象  <code>nv</code>  是否存在，确保名称字段为 &quot;description&quot;，操作符字段为 &quot;IS&quot;。</p>\n</li>\n<li>\n<p>** 依赖性：** 依赖具体的 SUT 输出。需要  <code>NameValue</code>  类正确解析并返回名称和操作符字段。</p>\n</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nv = expr.getNameValue();</span><br><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>NameValue</code>  类的  <code>getName</code>  和  <code>getOp</code>  方法。LLM 无法推断这些方法的存在和它们的预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>NameValue</code>  类的详细信息，使得 LLM 仅能生成基本的存在性断言  <code>assertNotNull</code> 。</li>\n</ul>\n<h3 id=\"20\"><a class=\"anchor\" href=\"#20\">#</a> 20</h3>\n<p><strong>原代码：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv = nv.getValue();</span><br><span class=\"line\">assertNotNull(cv);</span><br><span class=\"line\">assertEquals(cv.getSysConstant(), ConstValue.SystemConsts.NOT_NULL);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>** 验证内容：** 验证常量值  <code>cv</code>  是否存在，并确保其系统常量为  <code>NOT_NULL</code> 。</p>\n</li>\n<li>\n<p>** 依赖性：** 依赖具体的 SUT 输出。需要  <code>ConstValue</code>  类正确解析并返回系统常量。</p>\n</li>\n</ul>\n<p><strong>LLM 填充后：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cv = nv.getValue();</span><br><span class=\"line\">assertNotNull(cv);  <span class=\"comment\">// Assuming not null due to &#x27;description IS not null&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>失败原因：</strong></p>\n<ul>\n<li><strong>缺少详细的类定义和方法描述：</strong> 提供的代码没有详细描述  <code>ConstValue</code>  类的  <code>getSysConstant</code>  方法和  <code>SystemConsts</code>  常量。LLM 无法推断这些方法和常量的存在及其预期行为。</li>\n<li><strong>上下文不足：</strong> 缺少对  <code>ConstValue</code>  类的详细信息，导致 LLM 生成了错误的断言。</li>\n</ul>\n<h1 id=\"给出附属代码后的更新版填充分析\"><a class=\"anchor\" href=\"#给出附属代码后的更新版填充分析\">#</a> 给出附属代码后的更新版填充分析</h1>\n<p>当提前给 LLMassert 测试语句的全部所需内容后，再给出去除 assert 语句的填充文件，LLM 生成的代码如下：</p>\n<h2 id=\"llm生成代码-2\"><a class=\"anchor\" href=\"#llm生成代码-2\">#</a> LLM 生成代码</h2>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2023 Conductor Authors.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\"> * the License. You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on</span></span><br><span class=\"line\"><span class=\"comment\"> * an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the</span></span><br><span class=\"line\"><span class=\"comment\"> * specific language governing permissions and limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.netflix.conductor.es7.dao.query.parser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.AbstractParserTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.netflix.conductor.es7.dao.query.parser.internal.ConstValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Viren</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestExpression</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractParserTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subTy\tpe\t=&#x27;sdp&#x27; AND (metadata.width &gt; 50 OR metadata.height &gt; 50)&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27;&quot;;</span></span><br><span class=\"line\">        <span class=\"comment\">// test = &quot;(metadata.type = &#x27;IMAGE&#x27;)&quot;;</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        </span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;IMAGE&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;sdp&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\"></span><br><span class=\"line\">        expr = ge.getExpression();</span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName());</span><br><span class=\"line\">        assertTrue(nv.getValue().getValue() &gt; <span class=\"number\">50</span> || nv.getValue().getValue() &gt; <span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName());</span><br><span class=\"line\">        assertTrue(nv.getValue().getValue() &gt; <span class=\"number\">50</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithSysConstants</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;type=&#x27;IMAGE&#x27; AND subType\t=&#x27;sdp&#x27; AND description IS null&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">expr</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertNotNull(expr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">NameValue</span> <span class=\"variable\">nv</span> <span class=\"operator\">=</span> expr.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;IMAGE&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Expression</span> <span class=\"variable\">rhs</span> <span class=\"operator\">=</span> expr.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName());</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;sdp&quot;</span>, nv.getValue().getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        rhs = rhs.getRightHandSide();</span><br><span class=\"line\">        assertNotNull(rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GroupedExpression</span> <span class=\"variable\">ge</span> <span class=\"operator\">=</span> rhs.getGroupedExpression();</span><br><span class=\"line\">        assertNotNull(ge);</span><br><span class=\"line\"></span><br><span class=\"line\">        nv = rhs.getNameValue();</span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertNull(nv.getValue());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ConstValue</span> <span class=\"variable\">cv</span> <span class=\"operator\">=</span> nv.getValue();</span><br><span class=\"line\">        assertNull(cv);</span><br><span class=\"line\"></span><br><span class=\"line\">        test = <span class=\"string\">&quot;description IS not null&quot;</span>;</span><br><span class=\"line\">        is = <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedInputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(test.getBytes()));</span><br><span class=\"line\">        expr = <span class=\"keyword\">new</span> <span class=\"title class_\">Expression</span>(is);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(expr);</span><br><span class=\"line\">        nv = expr.getNameValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        assertNotNull(nv);</span><br><span class=\"line\">        assertEquals(<span class=\"string\">&quot;description&quot;</span>, nv.getName());</span><br><span class=\"line\">        cv = nv.getValue();</span><br><span class=\"line\">        assertNotNull(cv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"填充代码分析\"><a class=\"anchor\" href=\"#填充代码分析\">#</a> 填充代码分析</h2>\n<h3 id=\"测试功能1测试表达式解析\"><a class=\"anchor\" href=\"#测试功能1测试表达式解析\">#</a> 测试功能 1：测试表达式解析</h3>\n<h4 id=\"asserttrueexprisbinaryexpr\"><a class=\"anchor\" href=\"#asserttrueexprisbinaryexpr\">#</a> assertTrue(expr.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查表达式是否为二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 考虑不够充分，没有考虑到需要检查改 expr 是否为二元表达式，并且上下文提示不够，让 LLM 无法生成。</li>\n</ol>\n<h4 id=\"assertnullexprgetgroupedexpression\"><a class=\"anchor\" href=\"#assertnullexprgetgroupedexpression\">#</a> assertNull(expr.getGroupedExpression());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查表达式是否没有分组表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li>** 分析 LLM 为什么能 / 不能生成该测试语句：**LLM 在生成的时候没有考虑到检测表达式是否有分组表达式，这表明 LLM 可能无法考虑到更深层次的检验。</li>\n</ol>\n<h4 id=\"assertnotnullexprgetnamevalue\"><a class=\"anchor\" href=\"#assertnotnullexprgetnamevalue\">#</a> assertNotNull(expr.getNameValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr.getNameValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li>** 成功 / 失败：** 不足</li>\n<li><strong>原因：</strong> LLM 想要检查检查表达式是否不为空。</li>\n<li><strong>效果：</strong> 原测试代码效果更好，原测试代码是检验 <code>getNameValue()</code>  方法返回结果不为空，而 LLM 生成的代码是检查 <code>expr</code>  对象是否为空，仅在初始化时有效，不能保证表达式各个部分是否解析正确。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 生成该 assert 语句时基本思路是正确的，在很多情况下，首先检查对象是否为空是一个常见的编程模式，这使得 LLM 更容易生成这样的 assert 语句。即<strong>当生成一个表达式 expr 时，LLM 总是想要检查其是否为空</strong></li>\n</ol>\n<h4 id=\"assertequalstype-nvgetnamegetname\"><a class=\"anchor\" href=\"#assertequalstype-nvgetnamegetname\">#</a> assertEquals(&quot;type&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> LLM 想要检查名称值对象的名称，但是没有深入的检查对象返回值是否还有一个返回值。</li>\n<li><strong>效果：</strong> 考虑不周，效果有折扣。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别名称值对象的名称应该是什么。<strong>在许多情况下，直接检查一个方法的返回值是否等于某个值是一个常见的编程模式，因此 LLM 更容易生成这样的 assert 语句。</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator\">#</a> assertEquals(&quot;=&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertequalsimage-nvgetvaluegetvalue\"><a class=\"anchor\" href=\"#assertequalsimage-nvgetvaluegetvalue\">#</a> assertEquals(&quot;&quot;IMAGE&quot;&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;IMAGE&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象的值，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的值。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到值应该是什么。——<strong> 即 LLM 在提前给出的预备代码里知道了名称值对象的预期值</strong></li>\n</ol>\n<h4 id=\"assertnotnullrhs\"><a class=\"anchor\" href=\"#assertnotnullrhs\">#</a> assertNotNull(rhs);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查右侧表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了右侧表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为前序刚生成了 rhs—— <code>rhs = rhs.getRightHandSide();</code> ，<strong>LLM 能够自动识别到下一步应该判断其不为空</strong></li>\n</ol>\n<h4 id=\"asserttruerhsisbinaryexpr\"><a class=\"anchor\" href=\"#asserttruerhsisbinaryexpr\">#</a> assertTrue(rhs.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否为二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断右侧表达式是否为二元表达式。<strong>如上文一样，LLM 可能无法识别生成的 rhs 是一个二元表达式，故 LLM 也没用考虑到需要检验它</strong></li>\n</ol>\n<h4 id=\"assertnotnullnv\"><a class=\"anchor\" href=\"#assertnotnullnv\">#</a> assertNotNull(nv);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到名称值对象应存在的基本逻辑，<strong>即生成一个新的名称时需要检验其是否为空</strong></li>\n</ol>\n<h4 id=\"assertnullrhsgetgroupedexpression\"><a class=\"anchor\" href=\"#assertnullrhsgetgroupedexpression\">#</a> assertNull(rhs.getGroupedExpression());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否没有分组表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它缺乏关于表达式结构的具体信息和背景知识。<strong>LLM 无法判断出该表达式是否为分组表达式，这可能是因为 LLM 无法联想到 getRightHandSide 的具体内容，即 LLM 无法判断一个比较多元递归的函数的属性。因为 <code>rhs.getGroupedExpression()=expr.getRightHandSide().getGroupedExpression()=System.out.println(expr).getRightHandSide().getGroupedExpression()</code> </strong></li>\n</ol>\n<h4 id=\"assertequalssubtype-nvgetnamegetname\"><a class=\"anchor\" href=\"#assertequalssubtype-nvgetnamegetname\">#</a> assertEquals(&quot;subType&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> LLM 想要检查名称值对象的名称，但是没有深入的检查对象返回值是否还有一个返回值。</li>\n<li><strong>效果：</strong> 考虑不周，效果有折扣。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别名称值对象的名称应该是什么。<strong>在许多情况下，直接检查一个方法的返回值是否等于某个值是一个常见的编程模式，因此 LLM 更容易生成这样的 assert 语句。</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-2\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-2\">#</a> assertEquals(&quot;=&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertequalssdp-nvgetvaluegetvalue\"><a class=\"anchor\" href=\"#assertequalssdp-nvgetvaluegetvalue\">#</a> assertEquals(&quot;&quot;sdp&quot;&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;sdp&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象的值，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的值。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到值应该是什么。<strong>即 LLM 能够根据前置代码判断出此处的返回字符串应为 sdp</strong></li>\n</ol>\n<h4 id=\"assertequalsand-rhsgetoperatorgetoperator\"><a class=\"anchor\" href=\"#assertequalsand-rhsgetoperatorgetoperator\">#</a> assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它<strong>没有识别到操作符验证的重要性</strong>。</li>\n</ol>\n<h4 id=\"assertnotnullrhs-2\"><a class=\"anchor\" href=\"#assertnotnullrhs-2\">#</a> assertNotNull(rhs);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查右侧表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了右侧表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到右侧表达式应存在的基本逻辑。<strong>并且意识到生成一个名称后应该验证是否为空</strong></li>\n</ol>\n<h4 id=\"assertfalserhsisbinaryexpr\"><a class=\"anchor\" href=\"#assertfalserhsisbinaryexpr\">#</a> assertFalse(rhs.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否为非二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它<strong>没有足够的上下文信息来判断右侧表达式是否为非二元表达式</strong>。并且 LLM 无法通过前置代码推断出此时的 rhs 一定是二元表达式。</li>\n</ol>\n<h4 id=\"assertnotnullge\"><a class=\"anchor\" href=\"#assertnotnullge\">#</a> assertNotNull(ge);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查分组表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了分组表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到分组表达式应存在的基本逻辑。<strong>并且意识到生成一个名称后应该验证是否为空</strong></li>\n</ol>\n<h4 id=\"assertnotnullexpr\"><a class=\"anchor\" href=\"#assertnotnullexpr\">#</a> assertNotNull(expr);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到表达式应存在的基本逻辑。<strong>并且意识到生成一个名称后应该验证是否为空</strong></li>\n</ol>\n<h4 id=\"asserttrueexprisbinaryexpr-2\"><a class=\"anchor\" href=\"#asserttrueexprisbinaryexpr-2\">#</a> assertTrue(expr.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查表达式是否为二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断表达式是否为二元表达式。<strong>从上述可以看出，LLM 无法根据逻辑判断 <code>getExpression</code>  函数生成的一定是二元表达式，故无法得出此检验</strong></li>\n</ol>\n<h4 id=\"assertnotnullnv-2\"><a class=\"anchor\" href=\"#assertnotnullnv-2\">#</a> assertNotNull(nv);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到名称值对象应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"assertequalsmetadatawidth-nvgetnamegetname\"><a class=\"anchor\" href=\"#assertequalsmetadatawidth-nvgetnamegetname\">#</a> assertEquals(&quot;metadata.width&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> 检查名称值对象的名称，但是只检查了一层，没有判断到 nv 的 getName 返回值还包含一层 getName</li>\n<li><strong>效果：</strong> 效果变差</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别名称值对象的名称应该是什么。<strong>但是 LLM 没有考虑到该函数生成的返回值内还包含返回值</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-3\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-3\">#</a> assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它<strong>没有识别到操作符验证的重要性</strong>。<strong>并且 LLM 误以为要检验的是返回值是否大于 50</strong>.</li>\n</ol>\n<h4 id=\"assertequals50-nvgetvaluegetvalue\"><a class=\"anchor\" href=\"#assertequals50-nvgetvaluegetvalue\">#</a> assertEquals(&quot;50&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查值。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对值的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到值验证的重要性。<strong>并且 LLM 误以为要检验的是返回值是否大于 50</strong>.</li>\n</ol>\n<h4 id=\"assertequalsor-exprgetoperatorgetoperator\"><a class=\"anchor\" href=\"#assertequalsor-exprgetoperatorgetoperator\">#</a> assertEquals(&quot;OR&quot;, expr.getOperator().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。<strong>并且 LLM 误以为要检验的是返回值是否大于 50</strong>.</li>\n</ol>\n<h4 id=\"assertnotnullrhs-3\"><a class=\"anchor\" href=\"#assertnotnullrhs-3\">#</a> assertNotNull(rhs);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查右侧表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了右侧表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到右侧表达式应存在的基本逻辑。<strong>LLM 能在一个名称生成后判断其是否为空。</strong></li>\n</ol>\n<h4 id=\"assertfalserhsisbinaryexpr-2\"><a class=\"anchor\" href=\"#assertfalserhsisbinaryexpr-2\">#</a> assertFalse(rhs.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否为非二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断右侧表达式是否为非二元表达式。<strong>综上，LLM 无法判断它是否为非二元表达式</strong></li>\n</ol>\n<h4 id=\"assertequalsmetadataheight-nvgetnamegetname\"><a class=\"anchor\" href=\"#assertequalsmetadataheight-nvgetnamegetname\">#</a> assertEquals(&quot;metadata.height&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li>** 成功 / 失败：** 不足</li>\n<li><strong>原因：</strong> 检查名称值对象的名称，你层数不够</li>\n<li><strong>效果：</strong> 效果变差，验证名称值对象的名称不够深入。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别名称值对象的名称应该是什么。<strong>没有考虑充分</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-4\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-4\">#</a> assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它<strong>没有识别到操作符验证的重要性</strong>。</li>\n</ol>\n<h4 id=\"assertequals50-nvgetvaluegetvalue-2\"><a class=\"anchor\" href=\"#assertequals50-nvgetvaluegetvalue-2\">#</a> assertEquals(&quot;50&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查值。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对值的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它<strong>没有识别到值验证的重要性</strong>。</li>\n</ol>\n<h3 id=\"测试功能2测试系统常量的表达式解析\"><a class=\"anchor\" href=\"#测试功能2测试系统常量的表达式解析\">#</a> 测试功能 2：测试系统常量的表达式解析</h3>\n<h4 id=\"asserttrueexprisbinaryexpr-3\"><a class=\"anchor\" href=\"#asserttrueexprisbinaryexpr-3\">#</a> assertTrue(expr.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查表达式是否为二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断表达式是否为二元表达式。</li>\n</ol>\n<h4 id=\"assertnullexprgetgroupedexpression-2\"><a class=\"anchor\" href=\"#assertnullexprgetgroupedexpression-2\">#</a> assertNull(expr.getGroupedExpression());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNull(expr.getGroupedExpression());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查表达式是否没有分组表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它缺乏关于表达式结构的具体信息和背景知识。</li>\n</ol>\n<h4 id=\"assertnotnullexprgetnamevalue-2\"><a class=\"anchor\" href=\"#assertnotnullexprgetnamevalue-2\">#</a> assertNotNull(expr.getNameValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr.getNameValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> 都检查了表达式是否为空，但是 LLM 填充的代码没有考虑到表达式是否被正确解析。</li>\n<li><strong>效果：</strong> 效果变差。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> 在许多编程场景中，首先检查对象是否为空是一个常见的模式。因此，<strong>LLM 在没有详细上下文的情况下，更可能生成这种通用的 assert 语句</strong>。</li>\n</ol>\n<h4 id=\"assertequalstype-nvgetnamegetname-2\"><a class=\"anchor\" href=\"#assertequalstype-nvgetnamegetname-2\">#</a> assertEquals(&quot;type&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;type&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> 检查名称值对象的名称，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的名称。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别名称值对象的名称应该是什么。</li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-5\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-5\">#</a> assertEquals(&quot;=&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它<strong>没有识别到操作符验证的重要性</strong>。</li>\n</ol>\n<h4 id=\"assertequalsimage-nvgetvaluegetvalue-2\"><a class=\"anchor\" href=\"#assertequalsimage-nvgetvaluegetvalue-2\">#</a> assertEquals(&quot;&quot;IMAGE&quot;&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;IMAGE\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;IMAGE&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象的值，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的值。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到值应该是什么。</li>\n</ol>\n<h4 id=\"assertnotnullrhs-4\"><a class=\"anchor\" href=\"#assertnotnullrhs-4\">#</a> assertNotNull(rhs);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查右侧表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了右侧表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到右侧表达式应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"asserttruerhsisbinaryexpr-2\"><a class=\"anchor\" href=\"#asserttruerhsisbinaryexpr-2\">#</a> assertTrue(rhs.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否为二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断右侧表达式是否为二元表达式。</li>\n</ol>\n<h4 id=\"assertnotnullnv-3\"><a class=\"anchor\" href=\"#assertnotnullnv-3\">#</a> assertNotNull(nv);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到名称值对象应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"assertnullrhsgetgroupedexpression-2\"><a class=\"anchor\" href=\"#assertnullrhsgetgroupedexpression-2\">#</a> assertNull(rhs.getGroupedExpression());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNull(rhs.getGroupedExpression());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否没有分组表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它缺乏关于表达式结构的具体信息和背景知识。</li>\n</ol>\n<h4 id=\"assertequalssubtype-nvgetnamegetname-2\"><a class=\"anchor\" href=\"#assertequalssubtype-nvgetnamegetname-2\">#</a> assertEquals(&quot;subType&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;subType&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> 检查名称值对象的名称，但是检查没有考虑到返回值还包含返回值</li>\n<li><strong>效果：</strong> 效果变差，考虑不周全。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别名称值对象的名称应该是什么。<strong>当遇到需要检查名称的时候，LLM 往往代入单层，而没有考虑到多层的情况。</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-6\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-6\">#</a> assertEquals(&quot;=&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;=&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertequalssdp-nvgetvaluegetvalue-2\"><a class=\"anchor\" href=\"#assertequalssdp-nvgetvaluegetvalue-2\">#</a> assertEquals(&quot;&quot;sdp&quot;&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;\\&quot;sdp\\&quot;&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;sdp&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象的值，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的值。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到值应该是什么。</li>\n</ol>\n<h4 id=\"assertequalsand-rhsgetoperatorgetoperator-2\"><a class=\"anchor\" href=\"#assertequalsand-rhsgetoperatorgetoperator-2\">#</a> assertEquals(&quot;AND&quot;, rhs.getOperator().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;AND&quot;</span>, rhs.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertnotnullrhs-5\"><a class=\"anchor\" href=\"#assertnotnullrhs-5\">#</a> assertNotNull(rhs);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查右侧表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了右侧表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到右侧表达式应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"assertfalserhsisbinaryexpr-3\"><a class=\"anchor\" href=\"#assertfalserhsisbinaryexpr-3\">#</a> assertFalse(rhs.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否为非二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断右侧表达式是否为非二元表达式。</li>\n</ol>\n<h4 id=\"assertnotnullge-2\"><a class=\"anchor\" href=\"#assertnotnullge-2\">#</a> assertNotNull(ge);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(ge);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查分组表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了分组表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到分组表达式应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"assertnotnullexpr-2\"><a class=\"anchor\" href=\"#assertnotnullexpr-2\">#</a> assertNotNull(expr);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(expr);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到表达式应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"asserttrueexprisbinaryexpr-4\"><a class=\"anchor\" href=\"#asserttrueexprisbinaryexpr-4\">#</a> assertTrue(expr.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertTrue(expr.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查表达式是否为二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断表达式是否为二元表达式。</li>\n</ol>\n<h4 id=\"assertnotnullnv-4\"><a class=\"anchor\" href=\"#assertnotnullnv-4\">#</a> assertNotNull(nv);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(nv);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查名称值对象不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了名称值对象的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到名称值对象应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"assertequalsmetadatawidth-nvgetnamegetname-2\"><a class=\"anchor\" href=\"#assertequalsmetadatawidth-nvgetnamegetname-2\">#</a> assertEquals(&quot;metadata.width&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.width&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li>** 成功 / 失败：** 不足</li>\n<li><strong>原因：</strong> 考虑不全面</li>\n<li><strong>效果：</strong> 效果变差</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> <strong>LLM 只考虑单层</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-7\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-7\">#</a> assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertequals50-nvgetvaluegetvalue-3\"><a class=\"anchor\" href=\"#assertequals50-nvgetvaluegetvalue-3\">#</a> assertEquals(&quot;50&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查值。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对值的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到值验证的重要性。</li>\n</ol>\n<h4 id=\"assertequalsor-exprgetoperatorgetoperator-2\"><a class=\"anchor\" href=\"#assertequalsor-exprgetoperatorgetoperator-2\">#</a> assertEquals(&quot;OR&quot;, expr.getOperator().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;OR&quot;</span>, expr.getOperator().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertnotnullrhs-6\"><a class=\"anchor\" href=\"#assertnotnullrhs-6\">#</a> assertNotNull(rhs);</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertNotNull(rhs);</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 成功</li>\n<li><strong>原因：</strong> 检查右侧表达式不为空，这符合预期。</li>\n<li><strong>效果：</strong> 效果不变，因为都验证了右侧表达式的存在性。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 能够生成该 assert 语句，因为它能够识别到右侧表达式应存在的基本逻辑。</li>\n</ol>\n<h4 id=\"assertfalserhsisbinaryexpr-4\"><a class=\"anchor\" href=\"#assertfalserhsisbinaryexpr-4\">#</a> assertFalse(rhs.isBinaryExpr());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertFalse(rhs.isBinaryExpr());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查右侧表达式是否为非二元表达式。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对表达式结构的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有足够的上下文信息来判断右侧表达式是否为非二元表达式。</li>\n</ol>\n<h4 id=\"assertequalsmetadataheight-nvgetnamegetname-2\"><a class=\"anchor\" href=\"#assertequalsmetadataheight-nvgetnamegetname-2\">#</a> assertEquals(&quot;metadata.height&quot;, nv.getName().getName());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName().getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;metadata.height&quot;</span>, nv.getName());</span><br></pre></td></tr></table></figure></p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 不足</li>\n<li><strong>原因：</strong> 检查的时候没有考虑返回值还有返回值</li>\n<li><strong>效果：</strong> 效果变差，考虑不全面</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> <strong>当遇到需要检查返回值的时候，LLM 往往只考虑单层而没有考虑多层</strong></li>\n</ol>\n<h4 id=\"assertequals-nvgetopgetoperator-8\"><a class=\"anchor\" href=\"#assertequals-nvgetopgetoperator-8\">#</a> assertEquals(&quot;&gt;&quot;, nv.getOp().getOperator());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;&gt;&quot;</span>, nv.getOp().getOperator());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查操作符。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对操作符的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到操作符验证的重要性。</li>\n</ol>\n<h4 id=\"assertequals50-nvgetvaluegetvalue-4\"><a class=\"anchor\" href=\"#assertequals50-nvgetvaluegetvalue-4\">#</a> assertEquals(&quot;50&quot;, nv.getValue().getValue());</h4>\n<p><strong>原代码</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEquals(<span class=\"string\">&quot;50&quot;</span>, nv.getValue().getValue());</span><br></pre></td></tr></table></figure></p>\n<p><strong>填充后的代码</strong> 没有对应的 assert 语句。</p>\n<p><strong>分析：</strong></p>\n<ol>\n<li><strong>成功 / 失败：</strong> 失败</li>\n<li><strong>原因：</strong> 填充后的代码没有检查值。</li>\n<li><strong>效果：</strong> 更坏，因为缺少对值的验证。</li>\n<li><strong>分析 LLM 为什么能 / 不能生成该测试语句：</strong> LLM 不能生成该 assert 语句可能是因为它没有识别到值验证的重要性。</li>\n</ol>\n<h2 id=\"结果统计\"><a class=\"anchor\" href=\"#结果统计\">#</a> 结果统计</h2>\n<h3 id=\"统计\"><a class=\"anchor\" href=\"#统计\">#</a> 统计</h3>\n<ul>\n<li><strong>成功的 assert 语句数：</strong> 18</li>\n<li><strong>不足的 assert 语句数</strong>： 9</li>\n<li><strong>失败的 assert 语句数：</strong> 31</li>\n<li><strong>总数：</strong> 56</li>\n</ul>\n<h3 id=\"正确率计算\"><a class=\"anchor\" href=\"#正确率计算\">#</a> 正确率计算</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>正确率</mtext><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><mtext>成功的assert语句数</mtext><mtext>总数</mtext></mfrac><mo fence=\"true\">)</mo></mrow><mo>×</mo><mn>100</mn><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><mn>18</mn><mn>58</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>×</mo><mn>100</mn><mi mathvariant=\"normal\">%</mi><mo>≈</mo><mn>31.03</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">\\text{正确率} = \\left( \\frac{\\text{成功的assert语句数}}{\\text{总数}} \\right) \\times 100=\\left( \\frac{18}{58} \\right) \\times 100\\% \\approx 31.03\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord cjk_fallback\">正确率</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.222341em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">总数</span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">成功的</span><span class=\"mord mtight\">assert</span><span class=\"mord cjk_fallback mtight\">语句数</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">8</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">%</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">%</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>合格率</mtext><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><mtext>成功的assert语句数+不足的assert语句数</mtext><mtext>总数</mtext></mfrac><mo fence=\"true\">)</mo></mrow><mo>×</mo><mn>100</mn><mo>=</mo><mrow><mo fence=\"true\">(</mo><mfrac><mrow><mn>18</mn><mo>+</mo><mn>90</mn></mrow><mn>58</mn></mfrac><mo fence=\"true\">)</mo></mrow><mo>×</mo><mn>100</mn><mi mathvariant=\"normal\">%</mi><mo>≈</mo><mn>46.55</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">\\text{合格率} = \\left( \\frac{\\text{成功的assert语句数+不足的assert语句数}}{\\text{总数}} \\right) \\times 100=\\left( \\frac{18+90}{58} \\right) \\times 100\\% \\approx 46.55\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord cjk_fallback\">合格率</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.222341em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">总数</span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">成功的</span><span class=\"mord mtight\">assert</span><span class=\"mord cjk_fallback mtight\">语句数</span><span class=\"mord mtight\">+</span><span class=\"mord cjk_fallback mtight\">不足的</span><span class=\"mord mtight\">assert</span><span class=\"mord cjk_fallback mtight\">语句数</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.20001em;vertical-align:-0.35001em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">8</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">9</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">%</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">%</span></span></span></span></p>\n<p><strong>LLM 预测的正确率：</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>31.03</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">31.03\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">%</span></span></span></span></p>\n<p>**LLM 预测的合格率： **<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>46.55</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">46.55\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">%</span></span></span></span></p>\n",
            "tags": [
                "Hexo",
                "LLM",
                "assert"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1_spring-boot-main_Java/",
            "url": "https://enjundu.github.io/LLMstestoracle/1_spring-boot-main_Java/",
            "title": "1_Java_spring-boot-main",
            "date_published": "2024-07-13T18:07:35.000Z",
            "content_html": "<h3 id=\"分析和理解步骤\"><a class=\"anchor\" href=\"#分析和理解步骤\">#</a> 分析和理解步骤</h3>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/00_Java_basic_knowledge/",
            "url": "https://enjundu.github.io/LLMstestoracle/00_Java_basic_knowledge/",
            "title": "0_Java_basic_knowledge",
            "date_published": "2024-07-13T18:07:35.000Z",
            "content_html": "<h1 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<pre><code>## 不同分类\n</code></pre>\n<ul>\n<li>\n<p>JDK：Java 开发包，提供编译、运行 Java 程序所需的各种工具和资源，包括 Java 编译器、Java 运行时环境，以及常用的 Java 类库等。</p>\n</li>\n<li>\n<p>JRE：Java 运行环境，用于解释执行 Java 的字节码文件</p>\n</li>\n<li>\n<p>JVM：Java 虚拟机，是 JRE 的一部分。负责解释执行字节码文件，是可运行 java 字节码文件的虚拟计算机</p>\n</li>\n<li>\n<p>JDK 包含 JRE，JDK 和 JRE 中都包含 JVM。JDK 出了包含 jre 还包含一些常用开发工具和基础类库。JDK 用于开发。</p>\n</li>\n<li>\n<p>JRE 用于运行 java 程序</p>\n</li>\n<li>\n<p>JVM 是 java 编程语言的核心并且具有平台独立性。</p>\n</li>\n</ul>\n<h2 id=\"java的基本语法\"><a class=\"anchor\" href=\"#java的基本语法\">#</a> Java 的基本语法</h2>\n<h3 id=\"方法格式\"><a class=\"anchor\" href=\"#方法格式\">#</a> 方法格式</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">权限修饰符\t返回值声明\t方法名称&#123;参数列表&#125;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t方法中封装的逻辑功能;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t<span class=\"keyword\">return</span> 返回值：</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"权限修饰符\"><a class=\"anchor\" href=\"#权限修饰符\">#</a> 权限修饰符</h3>\n<ol>\n<li>\n<p><code>public</code> ：</p>\n<ul>\n<li>\n<p><strong>说明</strong>:  <code>public</code>  修饰符可以应用于类、接口、方法和变量。</p>\n</li>\n<li>\n<p><strong>访问权限</strong>：任何其他类都可以访问被  <code>public</code>  修饰的成员，不论这些类是否在同一个包内。</p>\n</li>\n<li>\n<p>示例:</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> myPublicVar;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myPublicMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>protected</code> :</p>\n<ul>\n<li>\n<p><strong>说明</strong>:  <code>protected</code>  修饰符可以应用于成员变量和方法，但不能用于类（除非用于内部类）。</p>\n</li>\n<li>\n<p><strong>访问权限</strong>：被  <code>protected</code>  修饰的成员可以被同一个包内的类以及其他包中的子类访问。</p>\n</li>\n<li>\n<p>示例：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span> myProtectedVar;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">myProtectedMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</li>\n<li>\n<p>default（无修饰符）:</p>\n<ul>\n<li>\n<p><strong>说明</strong>：如果没有显式地指定任何访问修饰符，则默认为包访问权限（也称为 “default”）。</p>\n</li>\n<li>\n<p><strong>访问权限</strong>：只有同一个包内的类可以访问被 default 修饰的成员，其他包内的类无法访问。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> myDefaultVar;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">myDefaultMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</li>\n<li>\n<p>private:</p>\n<ul>\n<li>\n<p><strong>说明</strong>:  <code>private</code>  修饰符可以应用于成员变量和方法，但不能用于类（除非用于内部类）。</p>\n</li>\n<li>\n<p><strong>访问权限</strong>：被  <code>private</code>  修饰的成员只能在它所在的类内部访问，其他类不能访问。</p>\n</li>\n<li>\n<p><strong>示例</strong>：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> myDefaultVar;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void myDefaultMethod() &#123;</span><br><span class=\"line\">        // 方法体</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<h3 id=\"1-基本结构\"><a class=\"anchor\" href=\"#1-基本结构\">#</a> 1. 基本结构</h3>\n<p>Java 程序的基本结构包括包声明、导入语句、类声明和方法。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example; <span class=\"comment\">// 包声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; <span class=\"comment\">// 导入语句</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123; <span class=\"comment\">// 类声明</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123; <span class=\"comment\">// 主方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello, World!&quot;</span>); <span class=\"comment\">// 输出语句</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-注释\"><a class=\"anchor\" href=\"#2-注释\">#</a> 2. 注释</h3>\n<p>Java 有三种类型的注释：</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行注释：适用于短的注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">多行注释：适用于较长的注释</span></span><br><span class=\"line\"><span class=\"comment\">可以覆盖多行</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文档注释：用于生成API文档</span></span><br><span class=\"line\"><span class=\"comment\"> * 通常用于类、方法和字段的说明</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-变量和数据类型\"><a class=\"anchor\" href=\"#3-变量和数据类型\">#</a> 3. 变量和数据类型</h3>\n<p>Java 中的变量分为基本数据类型和引用数据类型。</p>\n<h4 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型：</h4>\n<ul>\n<li>整数类型： <code>byte</code>  (8 位),  <code>short</code>  (16 位),  <code>int</code>  (32 位),  <code>long</code>  (64 位)</li>\n<li>浮点类型： <code>float</code>  (32 位),  <code>double</code>  (64 位)</li>\n<li>字符类型： <code>char</code>  (16 位)</li>\n<li>布尔类型： <code>boolean</code>  (true 或 false)</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">price</span> <span class=\"operator\">=</span> <span class=\"number\">19.99</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isJavaFun</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"引用数据类型\"><a class=\"anchor\" href=\"#引用数据类型\">#</a> 引用数据类型：</h4>\n<ul>\n<li>类（包括字符串）、数组、接口等</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">greeting</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, World!&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>[] numbers = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-运算符\"><a class=\"anchor\" href=\"#4-运算符\">#</a> 4. 运算符</h3>\n<p>Java 提供了丰富的运算符，包括：</p>\n<h4 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符：</h4>\n<ul>\n<li><code>+</code>  (加)</li>\n<li><code>-</code>  (减)</li>\n<li><code>*</code>  (乘)</li>\n<li><code>/</code>  (除)</li>\n<li><code>%</code>  (取余)</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> a + b;       <span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">difference</span> <span class=\"operator\">=</span> a - b; <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> a * b;    <span class=\"comment\">// 50</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">quotient</span> <span class=\"operator\">=</span> a / b;   <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">remainder</span> <span class=\"operator\">=</span> a % b;  <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符：</h4>\n<ul>\n<li><code>==</code>  (等于)</li>\n<li><code>!=</code>  (不等于)</li>\n<li><code>&gt;</code>  (大于)</li>\n<li><code>&lt;</code> (小于)</li>\n<li><code>&gt;=</code>  (大于等于)</li>\n<li><code>&lt;=</code>  (小于等于)</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isEqual</span> <span class=\"operator\">=</span> (a == b);   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isNotEqual</span> <span class=\"operator\">=</span> (a != b); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isGreater</span> <span class=\"operator\">=</span> (a &gt; b);   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isLess</span> <span class=\"operator\">=</span> (a &lt; b);      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符：</h4>\n<ul>\n<li><code>&amp;&amp;</code>  (逻辑与)</li>\n<li><code>||</code>  (逻辑或)</li>\n<li><code>!</code>  (逻辑非)</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">andResult</span> <span class=\"operator\">=</span> (a &gt; <span class=\"number\">0</span> &amp;&amp; b &gt; <span class=\"number\">0</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">orResult</span> <span class=\"operator\">=</span> (a &gt; <span class=\"number\">0</span> || b &gt; <span class=\"number\">0</span>);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">notResult</span> <span class=\"operator\">=</span> !(a &gt; <span class=\"number\">0</span>);         <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-控制结构\"><a class=\"anchor\" href=\"#5-控制结构\">#</a> 5. 控制结构</h3>\n<h4 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句：</h4>\n<p>用于根据条件执行不同的代码块。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> <span class=\"number\">85</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Grade: A&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Grade: B&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Grade: C&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句：</h4>\n<p>用于重复执行代码块。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for 循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;i = &quot;</span> + i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// while 循环</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (j &lt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;j = &quot;</span> + j);</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do-while 循环</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;k = &quot;</span> + k);</span><br><span class=\"line\">    k++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (k &lt; <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-数组\"><a class=\"anchor\" href=\"#6-数组\">#</a> 6. 数组</h3>\n<p>数组用于存储相同类型的多个值。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] numbers = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">String[] names = &#123;<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Bob&quot;</span>, <span class=\"string\">&quot;Charlie&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Number: &quot;</span> + numbers[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-方法\"><a class=\"anchor\" href=\"#7-方法\">#</a> 7. 方法</h3>\n<p>方法用于封装一段代码，使其可以被多次调用。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> add(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Sum: &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-面向对象编程-oop-概念\"><a class=\"anchor\" href=\"#8-面向对象编程-oop-概念\">#</a> 8. 面向对象编程 (OOP) 概念</h3>\n<h4 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象：</h4>\n<p>类是对象的模板，对象是类的实例。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Name: &quot;</span> + name + <span class=\"string\">&quot;, Age: &quot;</span> + age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Alice&quot;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">        person1.display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承：</h4>\n<p>类可以继承其他类的属性和方法。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">eat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This animal eats food.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bark</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The dog barks.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">myDog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        myDog.eat();</span><br><span class=\"line\">        myDog.bark();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态：</h4>\n<p>多态允许对象以多种形式出现。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Animal makes a sound&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Cat meows&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sound</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Dog barks&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">myAnimal</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        myAnimal.sound(); <span class=\"comment\">// 输出 &quot;Dog barks&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        myAnimal = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>();</span><br><span class=\"line\">        myAnimal.sound(); <span class=\"comment\">// 输出 &quot;Cat meows&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-异常处理\"><a class=\"anchor\" href=\"#9-异常处理\">#</a> 9. 异常处理</h3>\n<p>Java 中的异常处理机制包括  <code>try-catch-finally</code>  块，用于处理程序运行时的异常。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> / <span class=\"number\">0</span>; <span class=\"comment\">// 会抛出ArithmeticException</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: Division by zero&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;This block is always executed&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-文件io\"><a class=\"anchor\" href=\"#10-文件io\">#</a> 10. 文件 I/O</h3>\n<p>Java 提供了丰富的文件 I/O 类来读写文件。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 写入文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">FileWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;output.txt&quot;</span>);</span><br><span class=\"line\">            writer.write(<span class=\"string\">&quot;Hello, World!&quot;</span>);</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 读取文件</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;output.txt&quot;</span>));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            reader.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"11-枚举\"><a class=\"anchor\" href=\"#11-枚举\">#</a> 11. 枚举</h3>\n<p>枚举是一种特殊的类，用于定义常量集合。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Day</span> &#123;</span><br><span class=\"line\">        SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Day</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> Day.MONDAY;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (day) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> SUNDAY:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;It&#x27;s Sunday&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MONDAY:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;It&#x27;s Monday&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 其他情况...</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Other day&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"12-泛型\"><a class=\"anchor\" href=\"#12-泛型\">#</a> 12. 泛型</h3>\n<p>泛型允许在类、接口和方法中使用类型参数。</p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;World&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String s : list) &#123;</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>这些基本语法和概念涵盖了 Java 编程的主要方面，包括变量、运算符、控制结构、数组、方法、面向对象编程、异常处理、文件 I/O、枚举和泛型。掌握这些内容将帮助你建立坚实的 Java 编程基础，能够编写、调试和维护 Java 应用程序。</p>\n<h1 id=\"assert-介绍\"><a class=\"anchor\" href=\"#assert-介绍\">#</a> Assert 介绍</h1>\n<h2 id=\"orgassertjcoreapi库\"><a class=\"anchor\" href=\"#orgassertjcoreapi库\">#</a>  <code>org.assertj.core.api</code>  库</h2>\n<h3 id=\"通用断言-abstractassert\"><a class=\"anchor\" href=\"#通用断言-abstractassert\">#</a> 通用断言 ( <code>AbstractAssert</code> )</h3>\n<ul>\n<li><code>isEqualTo(Object expected)</code> : 断言对象等于预期值。</li>\n<li><code>isNotEqualTo(Object other)</code> : 断言对象不等于给定值。</li>\n<li><code>isNull()</code> : 断言对象为 null。</li>\n<li><code>isNotNull()</code> : 断言对象不为 null。</li>\n<li><code>isSameAs(Object expected)</code> : 断言对象与预期对象是同一个实例。</li>\n<li><code>isNotSameAs(Object other)</code> : 断言对象与给定对象不是同一个实例。</li>\n<li><code>isInstanceOf(Class&lt;?&gt; type)</code> : 断言对象是给定类型的实例。</li>\n<li><code>isNotInstanceOf(Class&lt;?&gt; type)</code> : 断言对象不是给定类型的实例。</li>\n<li><code>isInstanceOfAny(Class&lt;?&gt;... types)</code> : 断言对象是给定类型中的任意一种的实例。</li>\n<li><code>isNotInstanceOfAny(Class&lt;?&gt;... types)</code> : 断言对象不是给定类型中的任意一种的实例。</li>\n</ul>\n<h3 id=\"数值断言-abstractcomparableassert\"><a class=\"anchor\" href=\"#数值断言-abstractcomparableassert\">#</a> 数值断言 ( <code>AbstractComparableAssert</code> )</h3>\n<ul>\n<li><code>isGreaterThan(Comparable&lt;?&gt; other)</code> : 断言对象大于给定值。</li>\n<li><code>isLessThan(Comparable&lt;?&gt; other)</code> : 断言对象小于给定值。</li>\n<li><code>isGreaterThanOrEqualTo(Comparable&lt;?&gt; other)</code> : 断言对象大于或等于给定值。</li>\n<li><code>isLessThanOrEqualTo(Comparable&lt;?&gt; other)</code> : 断言对象小于或等于给定值。</li>\n<li><code>isBetween(Comparable&lt;?&gt; start, Comparable&lt;?&gt; end)</code> : 断言对象在给定范围内。</li>\n</ul>\n<h3 id=\"字符串断言-abstractcharsequenceassert\"><a class=\"anchor\" href=\"#字符串断言-abstractcharsequenceassert\">#</a> 字符串断言 ( <code>AbstractCharSequenceAssert</code> )</h3>\n<ul>\n<li><code>contains(CharSequence... values)</code> : 断言字符串包含给定值。</li>\n<li><code>doesNotContain(CharSequence... values)</code> : 断言字符串不包含给定值。</li>\n<li><code>startsWith(CharSequence prefix)</code> : 断言字符串以给定前缀开始。</li>\n<li><code>endsWith(CharSequence suffix)</code> : 断言字符串以给定后缀结束。</li>\n<li><code>matches(CharSequence regex)</code> : 断言字符串匹配给定正则表达式。</li>\n<li><code>doesNotMatch(CharSequence regex)</code> : 断言字符串不匹配给定正则表达式。</li>\n</ul>\n<h3 id=\"集合断言-abstractiterableassert\"><a class=\"anchor\" href=\"#集合断言-abstractiterableassert\">#</a> 集合断言 ( <code>AbstractIterableAssert</code> )</h3>\n<ul>\n<li><code>contains(T... values)</code> : 断言集合包含给定元素。</li>\n<li><code>doesNotContain(T... values)</code> : 断言集合不包含给定元素。</li>\n<li><code>containsExactly(T... values)</code> : 断言集合包含且仅包含给定元素，且顺序一致。</li>\n<li><code>containsExactlyInAnyOrder(T... values)</code> : 断言集合包含且仅包含给定元素，但顺序不必一致。</li>\n<li><code>containsAnyOf(T... values)</code> : 断言集合包含给定元素中的任意一个。</li>\n<li><code>isEmpty()</code> : 断言集合为空。</li>\n<li><code>isNotEmpty()</code> : 断言集合不为空。</li>\n<li><code>hasSize(int size)</code> : 断言集合大小为给定值。</li>\n</ul>\n<h3 id=\"map-断言-abstractmapassert\"><a class=\"anchor\" href=\"#map-断言-abstractmapassert\">#</a> Map 断言 ( <code>AbstractMapAssert</code> )</h3>\n<ul>\n<li><code>containsKey(K key)</code> : 断言映射包含给定键。</li>\n<li><code>doesNotContainKey(K key)</code> : 断言映射不包含给定键。</li>\n<li><code>containsValue(V value)</code> : 断言映射包含给定值。</li>\n<li><code>doesNotContainValue(V value)</code> : 断言映射不包含给定值。</li>\n<li><code>containsEntry(K key, V value)</code> : 断言映射包含给定键值对。</li>\n<li><code>doesNotContainEntry(K key, V value)</code> : 断言映射不包含给定键值对。</li>\n<li><code>hasSize(int size)</code> : 断言映射大小为给定值。</li>\n</ul>\n<h3 id=\"异常断言-abstractthrowableassert\"><a class=\"anchor\" href=\"#异常断言-abstractthrowableassert\">#</a> 异常断言 ( <code>AbstractThrowableAssert</code> )</h3>\n<ul>\n<li><code>hasMessage(String message)</code> : 断言异常信息为给定值。</li>\n<li><code>hasMessageContaining(String message)</code> : 断言异常信息包含给定值。</li>\n<li><code>hasCause(Throwable cause)</code> : 断言异常有给定原因。</li>\n<li><code>hasNoCause()</code> : 断言异常没有原因。</li>\n</ul>\n<h3 id=\"文件断言-abstractfileassert\"><a class=\"anchor\" href=\"#文件断言-abstractfileassert\">#</a> 文件断言 ( <code>AbstractFileAssert</code> )</h3>\n<ul>\n<li><code>exists()</code> : 断言文件存在。</li>\n<li><code>doesNotExist()</code> : 断言文件不存在。</li>\n<li><code>isFile()</code> : 断言是文件。</li>\n<li><code>isDirectory()</code> : 断言是目录。</li>\n<li><code>hasContent(String content)</code> : 断言文件内容为给定值。</li>\n<li><code>hasExtension(String extension)</code> : 断言文件扩展名为给定值。</li>\n</ul>\n<h3 id=\"日期时间断言-abstractdateassert-abstractlocaldatetimeassert-abstractlocaltimeassert-abstractzoneddatetimeassert\"><a class=\"anchor\" href=\"#日期时间断言-abstractdateassert-abstractlocaldatetimeassert-abstractlocaltimeassert-abstractzoneddatetimeassert\">#</a> 日期时间断言 ( <code>AbstractDateAssert</code> ,  <code>AbstractLocalDateTimeAssert</code> ,  <code>AbstractLocalTimeAssert</code> ,  <code>AbstractZonedDateTimeAssert</code> )</h3>\n<ul>\n<li><code>isBefore(Date date)</code> : 断言日期早于给定日期。</li>\n<li><code>isAfter(Date date)</code> : 断言日期晚于给定日期。</li>\n<li><code>isEqualTo(Date date)</code> : 断言日期等于给定日期。</li>\n<li><code>isBetween(Date start, Date end)</code> : 断言日期在给定范围内。</li>\n</ul>\n<h3 id=\"其它常用断言\"><a class=\"anchor\" href=\"#其它常用断言\">#</a> 其它常用断言</h3>\n<ul>\n<li><code>OptionalAssert</code> : 用于  <code>Optional</code>  类型的断言。</li>\n<li><code>StreamAssert</code> : 用于  <code>Stream</code>  类型的断言。</li>\n<li><code>FutureAssert</code> : 用于  <code>Future</code>  类型的断言。</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/",
            "title": "PythonProjectTemplate-master",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"测试llm的assert功能\"><a class=\"anchor\" href=\"#测试llm的assert功能\">#</a> 测试 LLM 的 assert 功能</h1>\n<h2 id=\"1_pythonprojecttemplate-master\"><a class=\"anchor\" href=\"#1_pythonprojecttemplate-master\">#</a> 1_<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZyYW5uZWNrOTQvUHl0aG9uUHJvamVjdFRlbXBsYXRl\">PythonProjectTemplate-master</span></h2>\n<p>运行 <code>pip install -e .</code>  和 <code>pytest tests</code>  后出现下图，表明本地构建和安装和测试项目成功。</p>\n<p>然后再运行 <code>pytest --cov=fastvector tests --cov-report=html</code>  来生成代码覆盖率报告</p>\n<p>&lt;img src=&quot;D:\\desktop\\Code_Compiling\\LLM 的 test_oracle 生成 \\0_readme_picture\\1.png&quot; alt=&quot;1&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<h3 id=\"test代码修改\"><a class=\"anchor\" href=\"#test代码修改\">#</a> test 代码修改</h3>\n<h4 id=\"test初始代码\"><a class=\"anchor\" href=\"#test初始代码\">#</a> test 初始代码</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test from values.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> exp == Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test add.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test sub.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul vec.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul float.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test abs.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test equality.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test less than.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> rhs &lt; lhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>从 test 代码中我们可知：test_from_values、test_repr、test_str、test_add、test_sub、test_mul_vec、test_mul_float、test_div、test_abs、test_equality_other_class、test_less_than 中有 assert 语句。</p>\n<p>将 assert 语句删除，并且删掉提示字符串，然后将代码交给 gpt3.5 进行修改。</p>\n<p>提示语句为 “这个 test case 缺少 assert 语句 请补全”</p>\n<h4 id=\"test投喂代码\"><a class=\"anchor\" href=\"#test投喂代码\">#</a> test 投喂代码</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"test代码分析\"><a class=\"anchor\" href=\"#test代码分析\">#</a> test 代码分析</h3>\n<p>gpt3.5 修改后的 test 语句为：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Unit Test Cases &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> <span class=\"type\">Any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> fastvector.vector <span class=\"keyword\">import</span> Vector2D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">V1 = Vector2D(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">V2 = Vector2D(-<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">V3 = Vector2D(<span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#       INIT       #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"literal\">None</span>, -<span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_init_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test init raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        _ = Vector2D(x, y)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;y&quot;</span>, <span class=\"string\">&quot;exp&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span>, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_from_values</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    x: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    y: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> Vector2D(x, y) == exp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#     STRINGS      #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPUTATIONS   #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\">-<span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\"><span class=\"number\">2.5</span>, -<span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">1.5</span>, -<span class=\"number\">1.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs + rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, Vector2D(<span class=\"params\"><span class=\"number\">1</span>, -<span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, Vector2D(<span class=\"params\">-<span class=\"number\">2.5</span>, <span class=\"number\">2.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, Vector2D(<span class=\"params\"><span class=\"number\">3.5</span>, -<span class=\"number\">3.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_sub</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs - rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V2, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, V3, <span class=\"number\">0.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, V2, -<span class=\"number\">5.0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_vec</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">2.0</span>, <span class=\"number\">2.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">5.0</span>, -<span class=\"number\">5.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_float</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs * rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"literal\">None</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), <span class=\"string\">&quot;1&quot;</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_mul_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"type\">Any</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test mul raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs * lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;exp_res&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V1, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V2, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\">-<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">V3, <span class=\"number\">2.0</span>, Vector2D(<span class=\"params\"><span class=\"number\">1.25</span>, -<span class=\"number\">1.25</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\">    exp_res: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs / rhs == exp_res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>), (<span class=\"params\">(<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0.0</span>, <span class=\"number\">0.0</span></span>)</span>),</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_div_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test div raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        lhs / rhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_operators_raises</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test operators raises.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs &lt; lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs + lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(TypeError):</span><br><span class=\"line\">        rhs - lhs  <span class=\"comment\"># pyright: ignore reportUnusedExpression</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;rhs&quot;</span>, <span class=\"string\">&quot;lhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">0</span></span>), <span class=\"number\">0</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>), <span class=\"number\">1</span></span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_abs</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    lhs: <span class=\"built_in\">float</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">abs</span>(rhs) == lhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"><span class=\"comment\">#   COMPARISONS    #</span></span><br><span class=\"line\"><span class=\"comment\">####################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), (<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), [<span class=\"number\">1</span>, <span class=\"number\">1</span>]</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_equality_other_class</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: <span class=\"built_in\">object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs != rhs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"><span class=\"string\">&quot;lhs&quot;</span>, <span class=\"string\">&quot;rhs&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    (<span class=\"params\"></span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">0</span>, <span class=\"number\">1</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">        (<span class=\"params\">Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">1</span></span>), Vector2D(<span class=\"params\"><span class=\"number\">1</span>, <span class=\"number\">0</span></span>)</span>),</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"params\"><span class=\"meta\">    </span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_less_than</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    lhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\">    rhs: Vector2D,</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lhs &lt; rhs</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"比对修改前后代码块的作用\"><a class=\"anchor\" href=\"#比对修改前后代码块的作用\">#</a> 比对修改前后代码块的作用</h4>\n<ol>\n<li>\n<p>对于 <code>test_init_raises（）</code> 函数，其用于验证创建的 <code>Vector2D</code>  对象是否与预期结果 <code>exp</code>  相等。—— 修改前后代码作用相同</p>\n</li>\n<li>\n<p>对于 <code>test_repr和test_str</code>  函数：<br />\n修改前：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test repr.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;vector.Vector2D(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    capture_stdout: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Any</span>],</span></span><br><span class=\"line\"><span class=\"params\"></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Test str.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> capture_stdout[<span class=\"string\">&quot;stdout&quot;</span>] == <span class=\"string\">&quot;(1.0, 2.0)\\n&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>其作用为验证 Vector2D 对象的 '__repr__' 方法的输出。通过建立字典 capture_stdout 来捕获 capture_stdout。<em>print 函数的目的为将  <code>Vector2D(1.0, 2.0)</code>  对象的  <code>__repr__</code>  方法的输出打印到标准输出。以便实际使用时开发者可以看到程序输出结果，帮助理解程序执行的结果和确保  <code>__repr__</code>  方法的实现符合预期。</em> 然后使用     <code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n</code> &quot; 来验证捕获的输出与预期输出是否相符。<br />\ngpt3.5 补充后：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_repr</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">repr</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;Vector2D(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_str</span>() -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">str</span>(Vector2D(<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>)) == <span class=\"string\">&quot;(1.0, 2.0)&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li><strong>功能减少</strong>：一般来说为了符合开发者调试，test 时需要 print 函数以便开发者了解程序的输出，gpt 填充的 assert 里忽略了 print，直接对比返回值，其只适用于 <code>repr</code>  和 <code>str</code>  函数的输出场景</li>\n<li><strong>调试困难</strong>：如果我们 assert 报错后，最初的代码可以通过 print 来留下更多的调试信息，而 gpt 生成的返回值无法做到这一步，需要额外增加 print 代码来了解报错原因</li>\n</ul>\n<p><strong>改进</strong>：当我们给 gpt 输入：“这个 test case 缺少 assert 语句 请补全，要求调试的过程中方便开发者直观看到输出过程” 后，代码输出增加了 print 语句，优化成功。</p>\n</li>\n<li>\n<p><code>test_add</code>  和 <code>test_sub</code>  和 <code>test_mul_float``test_div</code>  和 'test_abs' 和 'test_less_than' 函数：验证两个 <code>Vector2D</code>  对象相加 / 减 / 乘 / 除 / 取绝对值 / 是否小于的结果是否与预期结果相等。gpt 改后与之前效果相同。</p>\n</li>\n</ol>\n<h3 id=\"llm生成代码分析\"><a class=\"anchor\" href=\"#llm生成代码分析\">#</a> LLM 生成代码分析</h3>\n<h4 id=\"llm修改后与原来一致\"><a class=\"anchor\" href=\"#llm修改后与原来一致\">#</a> LLM 修改后与原来一致：</h4>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code></li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)</code></li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code></li>\n<li><code>assert lhs + rhs == exp_res</code></li>\n<li><code>    assert lhs - rhs == exp_res</code></li>\n<li><code>assert lhs * rhs == exp_res</code></li>\n<li><code>assert lhs * rhs == exp_res</code></li>\n<li><code>assert lhs / rhs == exp_res</code></li>\n<li><code>assert abs(rhs) == lhs</code></li>\n<li><code>assert lhs != rhs</code></li>\n<li><code>assert rhs &lt; lhs</code></li>\n</ol>\n<h4 id=\"llm修改后与原来不同\"><a class=\"anchor\" href=\"#llm修改后与原来不同\">#</a> LLM 修改后与原来不同：</h4>\n<p>无</p>\n<h3 id=\"llm生成代码与原代码一致的概率\"><a class=\"anchor\" href=\"#llm生成代码与原代码一致的概率\">#</a> LLM 生成代码与原代码一致的概率</h3>\n<p><strong>100%</strong></p>\n<h3 id=\"分析一断言在验证的东西\"><a class=\"anchor\" href=\"#分析一断言在验证的东西\">#</a> 分析一：断言在验证的东西</h3>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code>\n<ul>\n<li>使用参数化设置，传入不同的 x 和 y 值，以及期望的 Vector2D (x,y) 对象 'exp'</li>\n<li>测试通过创建一个新的 Vector2D 对象并将其与预期的对象进行比较来验证初始化是否正确</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>验证 <code>repr</code>  方法返回的 <code>Vector2D</code>  对象是否用正确字符串表示</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>验证 <code>str</code>  方法返回的 <code>Vector2D</code>  对象是否用正确字符串表示</li>\n</ul>\n</li>\n<li><code>assert lhs + rhs == exp_res</code>\n<ul>\n<li>验证两个 <code>Vector2D</code>  对象相加的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs - rhs == exp_res</code>\n<ul>\n<li>验证两个 <code>Vector2D</code>  对象相减的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code>\n<ul>\n<li>验证两个 <code>Vector2D</code>  对象相乘（点积）的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code> —— <code>test_mul_float</code>\n<ul>\n<li>验证 <code>Vector2D</code>  对象与浮点数相乘的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs / rhs == exp_res</code>\n<ul>\n<li>证 <code>Vector2D</code>  对象与浮点数相除的结果是否正确。</li>\n</ul>\n</li>\n<li><code>assert abs(rhs) == lhs</code>\n<ul>\n<li>验证 <code>Vector2D</code>  对象的绝对值（模）是否正确。</li>\n</ul>\n</li>\n<li><code>assert lhs != rhs</code>\n<ul>\n<li>验证当 <code>Vector2D</code>  对象与不同类对象进行比较时，是否返回 <code>False</code></li>\n</ul>\n</li>\n<li><code>assert rhs &lt; lhs</code>\n<ul>\n<li>验证 <code>Vector2D</code>  对象的 “小于” 比较运算是否正确。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"分析二断言是否依赖于具体的sut-被测软件的输出及原因\"><a class=\"anchor\" href=\"#分析二断言是否依赖于具体的sut-被测软件的输出及原因\">#</a> 分析二：断言是否依赖于具体的 SUT (被测软件) 的输出及原因</h3>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code>\n<ul>\n<li>依赖</li>\n<li>这个测试通过创建  <code>Vector2D</code>  对象来验证其初始化功能</li>\n<li>断言  <code>exp == Vector2D(x, y)</code>  依赖于  <code>Vector2D</code>  的  <code>__eq__</code>  方法是否正确实现。</li>\n<li>如果  <code>Vector2D</code>  类的初始化或  <code>__eq__</code>  方法有问题，这个断言将无法通过。因此，断言依赖于  <code>Vector2D</code>  类的具体实现（即 SUT 的输出）。</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>依赖</li>\n<li>断言  <code>capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>  依赖于  <code>__repr__</code>  方法的具体输出。</li>\n<li>也依赖 Vector2D (1.0,2.0) 的具体输出</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>依赖</li>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__str__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs + rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__add__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs - rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__sub__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__mul__</code> 方法对另一个 <code>Vector2D</code>  对象的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code> —— <code>test_mul_float</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__mul__</code> 方法对浮点数的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs / rhs == exp_res</code>\n<ul>\n<li>依赖</li>\n<li>依赖于 <code>Vector2D</code>  类中 <code>__truediv__</code> 方法的具体实现</li>\n</ul>\n</li>\n<li><code>assert abs(rhs) == lhs</code>\n<ul>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__abs__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert lhs != rhs</code>\n<ul>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__eq__</code> 方法的具体实现。</li>\n</ul>\n</li>\n<li><code>assert rhs &lt; lhs</code>\n<ul>\n<li>它依赖于 <code>Vector2D</code>  类中 <code>__lt__</code> 方法的具体实现。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"分析三断言为何能生成\"><a class=\"anchor\" href=\"#分析三断言为何能生成\">#</a> 分析三：断言为何能生成</h3>\n<ol>\n<li><code>assert exp == Vector2D(x, y)</code>\n<ul>\n<li>函数名：投喂给 LLM 的函数名为 <code>test_from_values</code> ，即从数值上进行比较，而函数中对 x,y 进行初始化，并且定义了一个 exp=Vector2D，故 LLM 可以判断断言为判断 exp 是否和 Vector2D (x,y) 相等</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;vector.Vector2D(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>函数名，投喂给 LLM 的函数名为 <code>test_repr</code> ，即为测试该 Vector2D 的标准字符串表示</li>\n<li>在代码里出现了 capture_stdout，即为捕获标准输出。</li>\n<li>函数里出现 <code>print(repr(Vector2D(1.0, 2.0)))</code> ，即可知道需要对于标准输出和 <code>repr(Vector2D(1.0, 2.0))</code>  进行对比</li>\n<li>故 LLM 可以依此来判定断言</li>\n</ul>\n</li>\n<li><code>assert capture_stdout[&quot;stdout&quot;] == &quot;(1.0, 2.0)\\n&quot;</code>\n<ul>\n<li>函数名，投喂给 LLM 的函数名为 <code>test_str</code> ，即为测试该 Vector2D 的字符串表示</li>\n<li>在代码里出现了 capture_stdout，即为捕获标准输出。</li>\n<li>函数里出现 <code>print(repr(Vector2D(1.0, 2.0)))</code> ，即可知道需要对于标准输出和 <code>str(Vector2D(1.0, 2.0))</code>  进行对比</li>\n<li>故 LLM 可以依此来判定断言</li>\n</ul>\n</li>\n<li><code>assert lhs + rhs == exp_res</code>\n<ul>\n<li>函数名为\t <code>test_add</code> , 即为测试 add 方法</li>\n<li>函数中出现了 lhs,rhs 和 exp_res</li>\n<li>故 LLM 可以判定方法为测试相加是否相等</li>\n</ul>\n</li>\n<li><code>assert lhs - rhs == exp_res</code>\n<ul>\n<li>函数名为\t <code>test_sub</code> , 即为测试 add 方法</li>\n<li>函数中出现了 lhs,rhs 和 exp_res</li>\n<li>故 LLM 可以判定方法为测试相减是否相等</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code>\n<ul>\n<li>函数名为 test_mul_vec，即为测试相乘是否结果一致</li>\n<li>出现了 lhs,rhs,exp_res 的初始化定义</li>\n<li>故 LLM 可以判定方法为测试相乘是否相等</li>\n</ul>\n</li>\n<li><code>assert lhs * rhs == exp_res</code> —— <code>test_mul_float</code>\n<ul>\n<li>函数名为 test_mul_vec，即为测试相乘是否结果一致</li>\n<li>出现了 lhs,rhs,exp_res 的初始化定义</li>\n<li>故 LLM 可以判定方法为测试 Vector2D 与浮点数相乘的结果</li>\n</ul>\n</li>\n<li><code>assert lhs / rhs == exp_res</code>\n<ul>\n<li>函数名为 <code>test_div</code> ，即测试除法</li>\n<li>函数中对 lhs,rhs,exp_res 进行初始化</li>\n<li>即 LLM 可以判定为测试除法是否正确</li>\n</ul>\n</li>\n<li><code>assert abs(rhs) == lhs</code>\n<ul>\n<li>函数名为 <code>test_abs </code> ，即测试绝对值</li>\n<li>函数中对 reh 和 lhs 进行初始化</li>\n<li>故可以判定方法为测试绝对值</li>\n</ul>\n</li>\n<li><code>assert lhs != rhs</code>\n<ul>\n<li>函数名为 <code> test_equality_other_class</code></li>\n<li>函数中定义了 <code>lhs: Vector2D</code>  和 <code>rhs: object</code></li>\n<li>故 LLM 可知方法为测试两个不同类进行比较是否返回 False</li>\n</ul>\n</li>\n<li><code>assert rhs &lt; lhs</code>\n<ul>\n<li>函数名为 <code>test_less_than</code></li>\n<li>初始化定义了两个 Vector2D 类 lhs 和 rhs</li>\n<li>故 LLM 可知该断言应该为判断对象的小于比较是否正确</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/2_cronex-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/2_cronex-master/",
            "title": "cronex",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"cronex\"><a class=\"anchor\" href=\"#cronex\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VyaWNwcnVpdHQvY3JvbmV4\">cronex</span></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>用于类 corn 任务调度的 Python 模块，提供一个接口用于评估和触发 corn 表达式。</p>\n<ul>\n<li>类 corn 任务：Cron 是一种时间表驱动的任务调度程序，用于在特定的时间和日期执行任务。</li>\n<li><strong>Corn</strong> 表达式：由 5~6 个字段组成，分别表示分钟、小时、日、月、星期和可选的年份</li>\n</ul>\n<p>其表达式如下：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *  command to be executed</span><br><span class=\"line\">- - - - -</span><br><span class=\"line\">| | | | |</span><br><span class=\"line\">| | | | ----- 星期 (<span class=\"number\">0</span> - <span class=\"number\">7</span>) (星期日 = <span class=\"number\">0</span> 或 <span class=\"number\">7</span>)</span><br><span class=\"line\">| | | ------- 月份 (<span class=\"number\">1</span> - <span class=\"number\">12</span>)</span><br><span class=\"line\">| | --------- 月中的日期 (<span class=\"number\">1</span> - <span class=\"number\">31</span>)</span><br><span class=\"line\">| ----------- 小时 (<span class=\"number\">0</span> - <span class=\"number\">23</span>)</span><br><span class=\"line\">------------- 分钟 (<span class=\"number\">0</span> - <span class=\"number\">59</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> * * * /path/to/command <span class=\"comment\">#表示每天凌晨1点执行某个命令</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cronex功能\"><a class=\"anchor\" href=\"#cronex功能\">#</a> cronex 功能</h3>\n<ul>\n<li>支持 Java Quartz 的特殊字符，如 &quot;L&quot;、&quot;W&quot; 和 &quot;#&quot;。</li>\n<li>允许设定任意间隔的触发器，例如每 9 小时，每 11 分钟等。</li>\n<li>示例代码：</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">job = CronExpression(<span class=\"string\">&quot;0 0 * * 1-5/2 find /var/log -delete&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">17</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(job.check_trigger((<span class=\"number\">2012</span>, <span class=\"number\">12</span>, <span class=\"number\">21</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))  <span class=\"comment\"># False</span></span><br></pre></td></tr></table></figure></p>\n<p>这里的 CronExpression (&quot;0 0 * * 1-5/2 find /var/log -delete&quot;) 创建了一个  <code>CronExpression</code>  对象，其 cron 表达式为 <code>0 0 * * 1-5/2</code></p>\n<ul>\n<li><code>0 0</code> ：每天的 00:00</li>\n<li><code>* *</code> : 每个月的每一天</li>\n<li><code>1-5/2</code> : 星期一到星期五中每隔一天</li>\n<li><code>find /var/log -delete</code> ：命令部分</li>\n</ul>\n<p>当给这个 job 传递参数 job.check_trigger ((2010, 11, 17, 0, 0)) 时：</p>\n<ul>\n<li>日期时间：2010 年 11 月 17 日 00:00</li>\n<li>星期三符合周一～周五间隔一天</li>\n<li>符合 corn 表达式条件，输出 True</li>\n</ul>\n<h2 id=\"testspy代码处理\"><a class=\"anchor\" href=\"#testspy代码处理\">#</a> tests.py 代码处理</h2>\n<h3 id=\"更正说明\"><a class=\"anchor\" href=\"#更正说明\">#</a> 更正说明</h3>\n<p>由于本人的 python 版本是 3.12，直接运行 tests.py 会报错</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;D:\\desktop\\Code_Compiling\\LLM的test_oracle生成\\20_cronex-master\\cronex-master\\cronex\\tests.py&quot;</span>, line <span class=\"number\">397</span>, <span class=\"keyword\">in</span> test_catches_bad_L</span><br><span class=\"line\">    self.failUnlessRaises(ValueError,</span><br><span class=\"line\">    ^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\">AttributeError: <span class=\"string\">&#x27;test_testedmodule&#x27;</span> <span class=\"built_in\">object</span> has no attribute <span class=\"string\">&#x27;failUnlessRaises&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>原因是 <code>unittest.TestCase</code>  类中没有名为  <code>failUnlessRaises</code>  的方法</p>\n<p>这是由于该代码使用了旧版本  <code>unittest</code>  中的方法名称，现在应该使用  <code>assertRaises</code>  方法。</p>\n<p>更正后的 tests.py 代码如下：</p>\n<h3 id=\"debug后的tests\"><a class=\"anchor\" href=\"#debug后的tests\">#</a> debug 后的 tests</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            obj = cronex.CronExpression(a)</span><br><span class=\"line\">            self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that calling compute_numtab after modifying the string-version</span></span><br><span class=\"line\"><span class=\"string\">        of an expression results in the static trigger-value cache being</span></span><br><span class=\"line\"><span class=\"string\">        updated.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the day-of-the-month field</span></span><br><span class=\"line\"><span class=\"string\">        work as expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the hours field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the minutes field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertFalse(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple[:<span class=\"number\">5</span>]))</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(then[:<span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that arbitrary-period repeaters in the month field work as</span></span><br><span class=\"line\"><span class=\"string\">        expected. More specifically, it verifies that the repeaters are</span></span><br><span class=\"line\"><span class=\"string\">        triggered every &quot;N&quot; calendar months regardless of the day for triggers</span></span><br><span class=\"line\"><span class=\"string\">        set to go offer every 1 month, ever 2 months, etc... through 18 months</span></span><br><span class=\"line\"><span class=\"string\">        from 1970 through 1980.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(should_trigger, triggered,</span><br><span class=\"line\">                            <span class=\"string\">&quot;%s: expected trigger to be %r for %r&quot;</span> %</span><br><span class=\"line\">                            (description, should_trigger, time_tuple)</span><br><span class=\"line\">                        )</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that parsing atoms returns sets containing all of the expected</span></span><br><span class=\"line\"><span class=\"string\">        values.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(want_from_function,</span><br><span class=\"line\">                cronex.parse_atom(*give_the_function))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the __repr__ and __str__ return values can be passed to</span></span><br><span class=\"line\"><span class=\"string\">        eval to generate an identical CronExpression.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">        self.assertEqual(testex1.comment, testex2.comment)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">str</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened month names are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that shortened days-of-the-week are correctly translated numeric</span></span><br><span class=\"line\"><span class=\"string\">        indexes.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">repr</span>(testex1), <span class=\"built_in\">repr</span>(testex2))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that combining day of-the-month field and day-of-the-week field</span></span><br><span class=\"line\"><span class=\"string\">        triggers on either condition matching the current day and that using a</span></span><br><span class=\"line\"><span class=\"string\">        wild-card day of the month with a day of the week entry doesn&#x27;t trigger</span></span><br><span class=\"line\"><span class=\"string\">        every single day.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> e <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">15</span>, <span class=\"number\">22</span>, <span class=\"number\">29</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">11</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"comment\"># In July of 2014, every Wednesday just happens to be on a day of</span></span><br><span class=\"line\">            <span class=\"comment\"># the month that&#x27;s a multiple of 7.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span>(d % <span class=\"number\">7</span>):</span><br><span class=\"line\">                self.assertTrue(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.assertFalse(testex.check_trigger((<span class=\"number\">2010</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-week field with a number always</span></span><br><span class=\"line\"><span class=\"string\">        triggers on last occurrence of the corresponding day of the week in any</span></span><br><span class=\"line\"><span class=\"string\">        given month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">12</span>):</span><br><span class=\"line\">            self.assertTrue((testex.check_trigger((<span class=\"number\">2010</span>, v+<span class=\"number\">1</span>, tv[v], <span class=\"number\">0</span>, <span class=\"number\">0</span>))))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having L in the day-of-the-month field always triggers on</span></span><br><span class=\"line\"><span class=\"string\">        the last day of the month.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> d &lt; lastdom:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        self.assertTrue(testex.check_trigger((y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that a periodic trigger for the day of the month is based on</span></span><br><span class=\"line\"><span class=\"string\">        calendar days, not 24-hour days.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time, -<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that asterisk cannot be combined with other atoms.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* *,1-9 * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that using &quot;#&quot; to find the Nth occurrence of a given day of the</span></span><br><span class=\"line\"><span class=\"string\">        week works correctly.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># There can never be more than 5 occurrences of a given day</span></span><br><span class=\"line\">                    <span class=\"comment\"># of the week in one month.</span></span><br><span class=\"line\">                    self.assertRaises(ValueError, cronex.CronExpression,</span><br><span class=\"line\">                                      expression)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(</span><br><span class=\"line\">                        (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day - <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        self.assertFalse(testex.check_trigger(</span><br><span class=\"line\">                            (<span class=\"number\">2011</span>, <span class=\"number\">5</span>, <span class=\"built_in\">max</span>(day + <span class=\"number\">7</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having numbers outside of the reasonable ranges for each</span></span><br><span class=\"line\"><span class=\"string\">        field raises an exception. Tests both upper and lower bounds.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;1000 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* 1000 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 1000 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 1000 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * 1000&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;-1 * * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* -1 * * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * 0 * *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * 0 *&quot;</span>)</span><br><span class=\"line\">        self.assertRaises(ValueError,</span><br><span class=\"line\">                          cronex.CronExpression, <span class=\"string\">&quot;* * * * -1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a trigger with an invalid repetition period raises</span></span><br><span class=\"line\"><span class=\"string\">        an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;W&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;L&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that having a syntactically invalid &quot;#&quot; raises an exception.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError,</span><br><span class=\"line\">                              cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that an exception is thrown when the cron expression has too few</span></span><br><span class=\"line\"><span class=\"string\">        fields.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            self.assertRaises(ValueError, cronex.CronExpression, <span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>现在去除所有 assert 语句，并将去除 assert 后的 tests 代码补全逻辑后，得到</p>\n<h3 id=\"去除assert及相关提示后的tests_code\"><a class=\"anchor\" href=\"#去除assert及相关提示后的tests_code\">#</a> 去除 assert 及相关提示后的 tests_code</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            cronex.parse_atom(*give_the_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 an verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at leas</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> day &gt; <span class=\"number\">8</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gpt35生成补全后的tests\"><a class=\"anchor\" href=\"#gpt35生成补全后的tests\">#</a> gpt3.5 生成补全后的 tests</h3>\n<p>将 tests_code 投喂给 gpt3.5，并且附上 prompt 该 tests case 缺少 assert 语句，请你自动补全</p>\n<p>补全后的代码为：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> calendar</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> site</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\">MINUTE = <span class=\"number\">60</span></span><br><span class=\"line\">HOUR = <span class=\"number\">60</span> * MINUTE</span><br><span class=\"line\">DAY = <span class=\"number\">24</span> * HOUR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Python 3 compatibility</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(<span class=\"built_in\">map</span>, <span class=\"built_in\">type</span>):</span><br><span class=\"line\">    xrange = <span class=\"built_in\">range</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add the parent directory relative to the test case because we assume the</span></span><br><span class=\"line\"><span class=\"comment\"># test will be in a subdirectory relative to the main code base.</span></span><br><span class=\"line\">sys.path.insert(<span class=\"number\">0</span>, os.path.join(</span><br><span class=\"line\">    os.path.dirname(os.path.realpath(__file__)), os.pardir))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cronex</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">test_testedmodule</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">        expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">            (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">            self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">        testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">        testex1.compute_numtab()</span><br><span class=\"line\">        self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">491</span> * DAY)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * %491 * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_hours</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">9001</span> * HOUR)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* %9001 * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_minutes</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        now = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">        then = time.gmtime(now - <span class=\"number\">814075</span> * MINUTE)</span><br><span class=\"line\">        now_tuple = time.gmtime(now)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;%814075 * * * *&quot;</span>)</span><br><span class=\"line\">        testex.epoch = <span class=\"built_in\">tuple</span>(<span class=\"built_in\">list</span>(then[:<span class=\"number\">5</span>]) + [<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now_tuple))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_periodics_month</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> period <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">18</span>):</span><br><span class=\"line\">            calendar_months = <span class=\"number\">0</span></span><br><span class=\"line\">            description = <span class=\"string\">&quot;* * * %%%i *&quot;</span> % period</span><br><span class=\"line\">            cron_expression = cronex.CronExpression(description)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> year <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1970</span>, <span class=\"number\">1980</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> month <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                    days_in_month = calendar.monthrange(year, month)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    should_trigger = <span class=\"keyword\">not</span> (calendar_months % period)</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> day <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, days_in_month + <span class=\"number\">1</span>):</span><br><span class=\"line\">                        time_tuple = (year, month, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                        triggered = cron_expression.check_trigger(time_tuple)</span><br><span class=\"line\">                        self.assertEqual(triggered, should_trigger)</span><br><span class=\"line\"></span><br><span class=\"line\">                    calendar_months += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_parse_atom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        input_expect = [</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5-10/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">20</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/2&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">12</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;10-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">11</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;11-5/3&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">14</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">11</span>, <span class=\"number\">14</span>, <span class=\"number\">3</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;*/5&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">100</span>)), <span class=\"built_in\">set</span>(xrange(<span class=\"number\">1</span>, <span class=\"number\">101</span>, <span class=\"number\">5</span>))),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;666&#x27;</span>, (<span class=\"number\">1</span>, <span class=\"number\">1000</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">666</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;21-1&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;5/15&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">60</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">35</span>, <span class=\"number\">50</span>])),</span><br><span class=\"line\">            ((<span class=\"string\">&#x27;1/4&#x27;</span>, (<span class=\"number\">0</span>, <span class=\"number\">23</span>)), <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">21</span>])),</span><br><span class=\"line\">        ]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> give_the_function, want_from_function <span class=\"keyword\">in</span> input_expect:</span><br><span class=\"line\">            self.assertEqual(cronex.parse_atom(*give_the_function), want_from_function)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_str_and_repr</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        CronExpression = cronex.CronExpression</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/15 4 1-7 * * TEST___TEST&quot;</span>)</span><br><span class=\"line\">        testex2 = <span class=\"built_in\">eval</span>(<span class=\"built_in\">repr</span>(testex1))</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex1 = cronex.CronExpression(<span class=\"string\">&quot;* * * * sun,mon,tue,wed,thu,fri,sat&quot;</span>)</span><br><span class=\"line\">        testex2 = cronex.CronExpression(<span class=\"string\">&quot;* * * * 0,1,2,3,4,5,6&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(testex1, testex2)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dom_either_or_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 5 * mon&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">30</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, e, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (now[<span class=\"number\">2</span>] == <span class=\"number\">5</span> <span class=\"keyword\">or</span> time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Mon&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Trigger should fire every Wednesday at midnight.</span></span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * wed&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">32</span>):</span><br><span class=\"line\">            now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now) == (time.strftime(<span class=\"string\">&quot;%a&quot;</span>, time.gmtime(time.mktime(now))) == <span class=\"string\">&quot;Wed&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dow</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 * * 6L&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># The numbers are the dates of the last Saturday in each month of the</span></span><br><span class=\"line\">        <span class=\"comment\"># year 2010.</span></span><br><span class=\"line\">        tv = [<span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">27</span>, <span class=\"number\">24</span>, <span class=\"number\">29</span>, <span class=\"number\">26</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">25</span>, <span class=\"number\">30</span>, <span class=\"number\">27</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, day <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tv):</span><br><span class=\"line\">            now = (<span class=\"number\">2010</span>, i + <span class=\"number\">1</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_L_in_dom</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 L * *&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> xrange(<span class=\"number\">2000</span>, <span class=\"number\">2009</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, <span class=\"number\">13</span>):</span><br><span class=\"line\">                <span class=\"comment\"># Checks every day from January 1st 2000 through December 31st</span></span><br><span class=\"line\">                <span class=\"comment\"># 2008 and verifies that the trigger only activates on the last</span></span><br><span class=\"line\">                <span class=\"comment\"># day of the month. The year range was chosen to ensure at least</span></span><br><span class=\"line\">                <span class=\"comment\"># one leap year would be included in the test.</span></span><br><span class=\"line\">                lastdom = calendar.monthrange(y, v)[-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, lastdom + <span class=\"number\">1</span>):</span><br><span class=\"line\">                    now = (y, v, d, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (d == lastdom))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_calendar_change_vs_hour_change</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># epoch and local differ by &lt; 48 hours but it should be reported based</span></span><br><span class=\"line\">        <span class=\"comment\"># on calendar days, not 24 hour days</span></span><br><span class=\"line\">        epoch = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, <span class=\"number\">23</span>, <span class=\"number\">59</span>)</span><br><span class=\"line\">        local_time = (<span class=\"number\">2010</span>, <span class=\"number\">11</span>, <span class=\"number\">18</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;0 0 %2 * *&quot;</span>, epoch, -<span class=\"number\">6</span>)</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(local_time))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_asterisk_is_loney</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        testex = cronex.CronExpression(<span class=\"string\">&quot;* * * * *&quot;</span>)</span><br><span class=\"line\">        now = time.gmtime()</span><br><span class=\"line\">        self.assertTrue(testex.check_trigger(now))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_dow_occurence</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> dow <span class=\"keyword\">in</span> xrange(<span class=\"number\">0</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> occurence <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">6</span>):</span><br><span class=\"line\">                day = (<span class=\"number\">7</span> * (occurence - <span class=\"number\">1</span>)) + dow + <span class=\"number\">1</span></span><br><span class=\"line\">                expression = <span class=\"string\">&quot;0 0 * * %i#%i&quot;</span> % (dow, occurence)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> occurence &gt; <span class=\"number\">5</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertFalse(testex.check_trigger(now))</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> day &lt; <span class=\"number\">32</span>:</span><br><span class=\"line\">                    testex = cronex.CronExpression(expression)</span><br><span class=\"line\">                    now = (<span class=\"number\">2024</span>, <span class=\"number\">7</span>, day, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">                    self.assertTrue(testex.check_trigger(now) == (day &lt;= calendar.monthrange(<span class=\"number\">2024</span>, <span class=\"number\">7</span>)[-<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_strict_range_bounds</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">            cronex.CronExpression(<span class=\"string\">&quot;*/61 * * * *&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_modulus</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %-1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%1 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %1 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %1 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %1 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %1&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;%0 * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* %0 * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * %0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * %0 *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * %0&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_W</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;5W * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* 5W * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0W * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * W0 * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * 5W *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 5W&quot;</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_L</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;L * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* L * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 99L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * 0L * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * L *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9L&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * -9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_catches_bad_Pound</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [</span><br><span class=\"line\">            <span class=\"string\">&quot;# * * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* # * * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * # * *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * # *&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;* * * * 9#9L&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_fail_on_not_enough_fields</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        badstuff = [<span class=\"string\">&quot;*&quot;</span>, <span class=\"string\">&quot;* *&quot;</span>, <span class=\"string\">&quot;* * *&quot;</span>, <span class=\"string\">&quot;* * * *&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"keyword\">case</span> <span class=\"keyword\">in</span> badstuff:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.assertRaises(ValueError):</span><br><span class=\"line\">                cronex.CronExpression(<span class=\"keyword\">case</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gpt自动填充后assert的优缺点分析\"><a class=\"anchor\" href=\"#gpt自动填充后assert的优缺点分析\">#</a> gpt 自动填充后 assert 的优缺点分析</h2>\n<h3 id=\"填充优秀部分\"><a class=\"anchor\" href=\"#填充优秀部分\">#</a> 填充优秀部分：</h3>\n<h4 id=\"1test_substitution\"><a class=\"anchor\" href=\"#1test_substitution\">#</a> 1.test_substitution()</h4>\n<p><strong>tests 原代码块函数</strong>：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a, b <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        obj = cronex.CronExpression(a)</span><br><span class=\"line\">        self.assertTrue(b <span class=\"keyword\">in</span> <span class=\"built_in\">repr</span>(obj))</span><br></pre></td></tr></table></figure></p>\n<p><strong>gpt3.5 自动填充的代码</strong>：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_substitution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Verify that the special substitutions are replaced by the correct,</span></span><br><span class=\"line\"><span class=\"string\">    expanded cron expressions.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    testcases = [(<span class=\"string\">&quot;@yearly&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@annually&quot;</span>, <span class=\"string\">&quot;0 0 1 1 *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@monthly&quot;</span>, <span class=\"string\">&quot;0 0 1 * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@weekly&quot;</span>, <span class=\"string\">&quot;0 0 * * 0&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@daily&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@midnight&quot;</span>, <span class=\"string\">&quot;0 0 * * *&quot;</span>),</span><br><span class=\"line\">        (<span class=\"string\">&quot;@hourly&quot;</span>, <span class=\"string\">&quot;0 * * * *&quot;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> special, expected <span class=\"keyword\">in</span> testcases:</span><br><span class=\"line\">        cron_expression = cronex.CronExpression(special)</span><br><span class=\"line\">        self.assertEqual(<span class=\"built_in\">str</span>(cron_expression), expected)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>原本的 test 代码中使用 assertTrue 来验证特殊替换后的字符串是否在 <code>obj</code>  的 <code>repr</code>  中存在，通过检查 <code>repr(obj)</code>  的输出来间接验证该特殊替换是否正确</li>\n<li>而 gpt 填充的代码直接使用 assertEqual 来验证 <code>cron_expression</code>  对象的 <code>str()</code>  方法是否生成了预期的替换后的 cron 表达式。使用 asserEqual 来判断两个值是否相等</li>\n<li>gpt 自动填充的代码更优秀 —— 其使用 special 和 expected 来作为变量名，更直观和可读。并且它不依赖于间接验证  <code>repr</code>  的输出是否包含特定字符串，而是直接检查  <code>str()</code>  方法生成的输出是否符合预期。通过直接比较字符串可以更清晰地表达测试的意图和预期结果，使得测试代码更易于理解和维护。</li>\n<li>综上所述，在 <code>test_substitution</code>  函数上，gpt 生成的代码更加优秀。</li>\n</ul>\n<h3 id=\"填充后不足有缺陷部分\"><a class=\"anchor\" href=\"#填充后不足有缺陷部分\">#</a> 填充后不足 / 有缺陷部分</h3>\n<ol>\n<li>test_compute_numtab（）</li>\n</ol>\n<p><strong>tests 原代码：</strong></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    self.assertNotEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br><span class=\"line\">    self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)</span><br></pre></td></tr></table></figure></p>\n<p><strong>gpt3.5 自动填充代码</strong></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_compute_numtab</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">    testex1 = cronex.CronExpression(<span class=\"string\">&quot;*/7 5-10 5 * *&quot;</span>)</span><br><span class=\"line\">    testex2 = cronex.CronExpression(<span class=\"string\">&quot;*/5 23-2 5 8 *&quot;</span>)</span><br><span class=\"line\">    testex1.string_tab = testex2.string_tab</span><br><span class=\"line\">    testex1.compute_numtab()</span><br><span class=\"line\">    self.assertEqual(testex1.string_tab, testex2.string_tab)</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>原代码验证在修改表达式的字符串版本后调用 compute_numtab 是否会更新静态触发器值缓存。</li>\n<li>原代码在最开始先通过两个 <code>assertNotEqual</code>  确保 <code>testex1</code>  和 <code>testex2</code>  在初始化时候的  <code>string_tab</code>  属性和 <code>numerical_tab</code>  属性是不同的，然后再将  <code>testex1</code>  的  <code>string_tab</code>  属性设置为  <code>testex2</code>  的  <code>string_tab</code>  属性，人为的使  <code>testex1</code>  和  <code>testex2</code>  在字符串表示上相同。然后再来测试 <code>compute_numtab</code>  的效果，即重新计算 <code>testex1</code>  的数值表示，然后再验证 <code>testex1</code>  和 <code>testex2</code>  在修改后的属性是相同的</li>\n<li>gpt3.5 填充的代码相较而言只考虑到了 testex1=testex2 后调用 compute_numtab 函数后两个 testex 的 string_tab 是否相同</li>\n<li>LLM 自动生成的代码相较而言考虑的并不全面，虽然其足以验证基本的功能，但是没有考虑到验证 <code>testex1</code>  和  <code>testex2</code>  的字符串表和数值表不相等，和验证验证 <code>testex1</code>  和  <code>testex2</code>  修改后字符表相等，并不全面</li>\n<li><strong>修改建议</strong>：给 gpt3.5 增加更详细的 prompt，比如告诉 gpt 需要在自动填充 assert 的时候考虑得更全面，充分的考虑到所有情况，避免出现因为过度考虑性能而忽视设计周密的情况。</li>\n</ul>\n<h1 id=\"llm生成代码分析\"><a class=\"anchor\" href=\"#llm生成代码分析\">#</a> LLM 生成代码分析</h1>\n<p>定义：</p>\n<ul>\n<li>\n<p><strong>分析一：断言在验证的东西</strong></p>\n</li>\n<li>\n<p><strong>分析二：断言是否依赖于具体的 SUT (被测软件) 的输出及原因</strong></p>\n</li>\n<li>\n<p><strong>分析三：断言为何能生成</strong></p>\n</li>\n</ul>\n<ol>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> testcases<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            obj <span class=\"token operator\">=</span> cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>b <span class=\"token keyword\">in</span> <span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span> 分析一：验证在修改表达式的字符串版本后，调用 `compute_numtab` 是否会更新静态触发值缓存。源代码在赋值和调用 `compute_numtab` 前后对 `string_tab` 和 `numerical_tab` 进行了检查，确保了这两个属性在修改和计算后的一致性。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span> 分析二：依赖——断言依赖于 `cronex<span class=\"token punctuation\">.</span>CronExpression` 对象的 `string_tab` 和 `numerical_tab` 属性。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> 分析三：LLM只生成了`self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>testex1<span class=\"token punctuation\">.</span>string_tab<span class=\"token punctuation\">,</span> testex2<span class=\"token punctuation\">.</span>string_tab<span class=\"token punctuation\">)</span>`，只验证了 `string_tab` 的一致性，没有检查 `numerical_tab` 的一致性。并且没有在赋值前检查 `string_tab` 和 `numerical_tab` 的初始状态是否不同，这可能会导致误判。LLM可能在生成过程中忽略了一些细节，没有充分理解 `numerical_tab` 属性在测试中的重要性。</pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span>now_tuple<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        testex<span class=\"token punctuation\">.</span>epoch <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>then<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span>now_tuple<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span>then<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span> 分析一：验证在“小时”字段中的任意周期重复是否按预期工作。源代码通过 `self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span>now_tuple<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>` 确保在设置 `epoch` 之前，当前时间戳不会触发 cron 表达式，这验证了初始状态的正确性，还验证了 `then<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>`，确保在设置 `epoch` 后，两个不同时间点都能正确触发。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> 分析二：断言依赖程序的输出，因为断言依赖于 `cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">.</span>check_trigger` 的返回值。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span> 分析三：LLM可能未充分理解 cron 表达式与时间字段的关系，忽略了对 `now_tuple<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>` 和 `then<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>` 的精确验证。只知道验证分钟。</pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> day <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> days_in_month <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        time_tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        triggered <span class=\"token operator\">=</span> cron_expression<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span>time_tuple<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>should_trigger<span class=\"token punctuation\">,</span> triggered<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                            <span class=\"token string\">\"%s: expected trigger to be %r for %r\"</span> <span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                            <span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">,</span> should_trigger<span class=\"token punctuation\">,</span> time_tuple<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span> 分析一：验证解析原子表达式是否返回包含所有预期值的集合。即验证解析原子是否返回包含所有预期值的集合</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">*</span> 分析二：依赖，断言依赖于 `cronex<span class=\"token punctuation\">.</span>parse_atom` 的返回值。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">*</span> 分析三：LLM通过函数名`test_parse_atom`和注释`Verify that parsing atoms returns sets containing <span class=\"token builtin\">all</span> of the expected values<span class=\"token punctuation\">.</span>`分析得到该代码要求判断院子表达式与预期是否一致，从而生成准确的断言</pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>testex1<span class=\"token punctuation\">.</span>string_tab<span class=\"token punctuation\">,</span> testex2<span class=\"token punctuation\">.</span>string_tab<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>testex1<span class=\"token punctuation\">.</span>numerical_tab<span class=\"token punctuation\">,</span> testex2<span class=\"token punctuation\">.</span>numerical_tab<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>testex1<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">,</span> testex2<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>testex1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>testex1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">13</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span> 分析一：验证缩写的月份名称是否正确翻译为数字索引。通过 `<span class=\"token builtin\">repr</span>` 方法进行比较，确保对象在<span class=\"token operator\">**</span>字符串<span class=\"token operator\">**</span>表示上的一致性。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> 分析二：依赖，断言依赖于 `cronex<span class=\"token punctuation\">.</span>CronExpression` 的 `<span class=\"token builtin\">repr</span>` 方法的输出。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">*</span> 分析三：LLM从函数名`test_dom_substitution`知道是要分析名称是否被正确化为索引，但是LLM生成的代码直接比较两个对象而不是比较其字符串表示，并不准确。</pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_dom_either_or_dow</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Verify that combining day of-the-month field and day-of-the-week field</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        triggers on either condition matching the current day and that using a</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        wild-card day of the month with a day of the week entry doesn't trigger</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        every single day.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># Trigger should fire every Monday or on the 5th day of the month.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        testex <span class=\"token operator\">=</span> cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">(</span><span class=\"token string\">\"0 0 5 * mon\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> <span class=\"token builtin\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> e <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># Trigger should fire every Wednesday at midnight.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        testex <span class=\"token operator\">=</span> cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">(</span><span class=\"token string\">\"0 0 * * wed\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> <span class=\"token builtin\">xrange</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\"># In July of 2014, every Wednesday just happens to be on a day of</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\"># the month that's a multiple of 7.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">%</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                self<span class=\"token punctuation\">.</span>assertTrue<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                self<span class=\"token punctuation\">.</span>assertFalse<span class=\"token punctuation\">(</span>testex<span class=\"token punctuation\">.</span>check_trigger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">14</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">*</span> 分析一：验证在“星期几”字段中使用 `L` 是否总是在给定月份中相应星期的最后一次出现时触发。使用具体的年份和月份组合进行检查，确保逻辑覆盖所有可能的情况，包括每个月的最后一个星期六。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">*</span> 分析二：依赖，断言依赖于 `cronex<span class=\"token punctuation\">.</span>CronExpression<span class=\"token punctuation\">.</span>check_trigger` 的返回值。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">*</span> 分析三：LLM通过函数名`test_L_in_dow`知道了要验证的断言内容，但是LLM生成的代码使用`<span class=\"token builtin\">enumerate</span>`和`tv`列表进行检查，虽然代码更简洁，但可能在一些边界情况下未能捕捉到潜在的问题。</pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"一致率统计结果\"><a class=\"anchor\" href=\"#一致率统计结果\">#</a> 一致率统计结果</h4>\n<p>共统计了<strong> 35</strong> 个断言，其中逻辑完全一致的 assert 共<strong> 8</strong> 个，不一致的 27 个，一致率为<strong> 22.9%</strong>。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/4_oj-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/4_oj-master/",
            "title": "online-judge-tools/oj",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"online-judge-toolsoj\"><a class=\"anchor\" href=\"#online-judge-toolsoj\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29ubGluZS1qdWRnZS10b29scy9vag==\">online-judge-tools/oj</span></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li><code>oj</code>  是一个帮助解决各种在线评测问题命令。此命令会自动下载示例案例、生成其他测试案例、测试您的代码并提交。</li>\n<li>使用 <code>python setup.py install</code>  安装该第三方库</li>\n<li>使用介绍：</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">positional arguments:</span><br><span class=\"line\">  &#123;download,d,dl,login,l,submit,s,test,t,generate-output,g/o,generate-<span class=\"built_in\">input</span>,g/i,test-reactive,t/r,test-interactive,t/i&#125;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> details, see <span class=\"string\">&quot;\\\\?\\F:\\Anaconda\\envs\\py312\\Scripts\\oj COMMAND --help&quot;</span></span><br><span class=\"line\">    download (d, dl)    download sample cases</span><br><span class=\"line\">    login (l)           login to a service</span><br><span class=\"line\">    submit (s)          submit your solution</span><br><span class=\"line\">    test (t)            test your code</span><br><span class=\"line\">    generate-output (g/o)</span><br><span class=\"line\">                        generate output files <span class=\"keyword\">from</span> <span class=\"built_in\">input</span> <span class=\"keyword\">and</span> reference implementation</span><br><span class=\"line\">    generate-<span class=\"built_in\">input</span> (g/i)</span><br><span class=\"line\">                        generate <span class=\"built_in\">input</span> files <span class=\"keyword\">from</span> given generator</span><br><span class=\"line\">    test-reactive (t/r, test-interactive, t/i)</span><br><span class=\"line\">                        test <span class=\"keyword\">for</span> interactive problem</span><br><span class=\"line\"></span><br><span class=\"line\">options:</span><br><span class=\"line\">  -h, --<span class=\"built_in\">help</span>            show this <span class=\"built_in\">help</span> message <span class=\"keyword\">and</span> exit</span><br><span class=\"line\">  -v, --verbose</span><br><span class=\"line\">  -c COOKIE, --cookie COOKIE</span><br><span class=\"line\">                        path to cookie. (default: C:\\Users\\JackDu\\AppData\\Local\\online-judge-tools\\online-judge-tools\\cookie.jar)</span><br><span class=\"line\">  --version             <span class=\"built_in\">print</span> the online-judge-tools version number</span><br><span class=\"line\"></span><br><span class=\"line\">tips:</span><br><span class=\"line\">  The official tutorial exists on the web: https://github.com/online-judge-tools/oj/blob/master/docs/getting-started.md</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"command_downloadpy代码修改\"><a class=\"anchor\" href=\"#command_downloadpy代码修改\">#</a> command_download.py 代码修改</h2>\n<h3 id=\"原本的command_downloadpy代码\"><a class=\"anchor\" href=\"#原本的command_downloadpy代码\">#</a> 原本的 command_download.py 代码：</h3>\n<p>base prompt 为：“我这个 test case 缺少 assert 语句，请你帮我自动填充。”</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    args = get_parser().parse_args(args=args)</span><br><span class=\"line\">    self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">type</span> <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;files&#x27;</span>, <span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        self.assertTrue(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        args = get_parser().parse_args(args=args)</span><br><span class=\"line\">        <span class=\"comment\"># download from url2 should be aborted.</span></span><br><span class=\"line\">        self.assertFalse(subcommand_download.run(args))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check download from url1 is not overwritten</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(files, result)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"移除assert断言后的command_downloadpy代码\"><a class=\"anchor\" href=\"#移除assert断言后的command_downloadpy代码\">#</a> 移除 assert 断言后的 command_download.py 代码</h3>\n<p>移除 assert 断言和部分提示后，我们发送给 LLM 的代码如下：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"llm自动填充assert语句后的代码\"><a class=\"anchor\" href=\"#llm自动填充assert语句后的代码\">#</a> LLM 自动填充 assert 语句后的代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> onlinejudge_command.subcommand.download <span class=\"keyword\">as</span> subcommand_download</span><br><span class=\"line\"><span class=\"keyword\">import</span> tests.utils</span><br><span class=\"line\"><span class=\"keyword\">from</span> onlinejudge_command.main <span class=\"keyword\">import</span> get_parser</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_files_from_json</span>(<span class=\"params\">samples</span>):</span><br><span class=\"line\">    files = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, sample <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(samples):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ext <span class=\"keyword\">in</span> (<span class=\"string\">&#x27;in&#x27;</span>, <span class=\"string\">&#x27;out&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> sample:</span><br><span class=\"line\">                name = sample[<span class=\"string\">&#x27;name&#x27;</span>] + <span class=\"string\">&#x27;.&#x27;</span> + ext</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                name = <span class=\"string\">&#x27;sample-&#123;&#125;.&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(i + <span class=\"number\">1</span>, ext)</span><br><span class=\"line\">            files[name] = hashlib.md5(sample[ext + <span class=\"string\">&#x27;put&#x27;</span>].encode()).hexdigest()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> files</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, url, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, url, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    args = [<span class=\"string\">&quot;download&quot;</span>, url]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--system&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">        args.append(<span class=\"string\">&quot;--silent&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> self.assertRaises(SystemExit):</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, url1, url2, files, is_system=<span class=\"literal\">False</span>, is_silent=<span class=\"literal\">False</span>, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;files&#x27;</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&#x27;json&#x27;</span>:</span><br><span class=\"line\">        files = get_files_from_json(files)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tests.utils.sandbox([]):</span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url1]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        args = [<span class=\"string\">&#x27;download&#x27;</span>, url2]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_system:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--system&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_silent:</span><br><span class=\"line\">            args += [<span class=\"string\">&#x27;--silent&#x27;</span>]</span><br><span class=\"line\">        tests.utils.run(args, check=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> os.listdir(<span class=\"string\">&#x27;test&#x27;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(<span class=\"string\">&#x27;test&#x27;</span>, name)) <span class=\"keyword\">as</span> fh:</span><br><span class=\"line\">                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()</span><br><span class=\"line\">        self.assertEqual(result, files)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;DownloadTest is a class to test `download` subcommand itself. Don&#x27;t try to test sample parsers.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc114_c</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_atcoder_abc003_4</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3 2\\n2 2\\n2 2\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;12\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;4 5\\n3 1\\n3 0\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;10\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;23 18\\n15 13\\n100 95\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;364527243\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;30 30\\n24 22\\n145 132\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;976668549\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid_url</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_413</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># This task is not supported.</span></span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DownloadInvalidTest</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_failure</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">snippet_call_download_twice</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_invalid</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://not_exist_contest.jp/tasks/001_a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_no_sample_found</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&#x27;</span>)</span><br><span class=\"line\">        self.snippet_call_download_failure(<span class=\"string\">&#x27;https://open.kattis.com/problems/hello&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_call_download_twice</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.snippet_call_download_twice(<span class=\"string\">&#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&#x27;</span>, <span class=\"string\">&#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&#x27;</span>, [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;575\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;4\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;3600\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;13\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;input&quot;</span>: <span class=\"string\">&quot;999999999\\n&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;output&quot;</span>: <span class=\"string\">&quot;26484\\n&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;json&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/5_giskard-main/",
            "url": "https://enjundu.github.io/LLMstestoracle/5_giskard-main/",
            "title": "Giskard-AI/giskard",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"giskard-aigiskard\"><a class=\"anchor\" href=\"#giskard-aigiskard\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0dpc2thcmQtQUkvZ2lza2FyZA==\">Giskard-AI/giskard</span></h1>\n<h2 id=\"test_data_processing_pipelinepy3代码处理\"><a class=\"anchor\" href=\"#test_data_processing_pipelinepy3代码处理\">#</a> test_data_processing_pipeline.py3 代码处理</h2>\n<h3 id=\"原test代码\"><a class=\"anchor\" href=\"#原test代码\">#</a> 原 test 代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(filter_with_parenthesis, SlicingFunction), <span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"built_in\">type</span>(filter_with_parenthesis)&#125;</span>&quot;</span></span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">884</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">568</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> np.<span class=\"built_in\">all</span>(ds.df.credit_amount == -<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df.credit_amount.unique()) &gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(german_credit_data.df) == <span class=\"number\">1000</span></span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds.df) == <span class=\"number\">188</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> transformed_dataset.df.iloc[<span class=\"number\">0</span>].text == <span class=\"string\">&quot;testing. I love this!&quot;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"去除assert后的代码\"><a class=\"anchor\" href=\"#去除assert后的代码\">#</a> 去除 assert 后的代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gpt35自动填充的代码\"><a class=\"anchor\" href=\"#gpt35自动填充的代码\">#</a> gpt3.5 自动填充的代码</h3>\n<p><strong>base prompt 为</strong>：我这个 tests 代码缺少 assert 断言，请你自动填充</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard <span class=\"keyword\">import</span> Dataset, SlicingFunction, slicing_function</span><br><span class=\"line\"><span class=\"keyword\">from</span> giskard.registry.transformation_function <span class=\"keyword\">import</span> transformation_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;slice cell level&quot;</span>, cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_cell_level</span>(<span class=\"params\">amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount &gt; <span class=\"number\">1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@slicing_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">filter_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.credit_amount &gt; <span class=\"number\">2000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">name=<span class=\"string\">&quot;transform with parenthesis&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_with_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_parenthesis</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by_five</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">    x.credit_amount /= <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@transformation_function(<span class=\"params\">cell_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">column_level_divide</span>(<span class=\"params\">nb: <span class=\"built_in\">float</span>, amount: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nb / amount</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_using_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> x: x.credit_amount &gt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_slicing_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.<span class=\"built_in\">slice</span>(filter_cell_level, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = ds.<span class=\"built_in\">slice</span>(<span class=\"keyword\">lambda</span> amount: amount &gt; <span class=\"number\">2000</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_without_parenthesis)</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by_five)</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_with_parenthesis)</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(amount=<span class=\"number\">5</span>), column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_parameterized</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(column_level_divide(column_name=<span class=\"string\">&quot;credit_amount&quot;</span>, amount=<span class=\"number\">5</span>))</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transform_cell_level_lambda</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = (</span><br><span class=\"line\">        german_credit_data.<span class=\"built_in\">slice</span>(filter_without_parenthesis)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">lambda</span> i: i / <span class=\"number\">5</span>, cell_level=<span class=\"literal\">True</span>, column_name=<span class=\"string\">&quot;credit_amount&quot;</span>)</span><br><span class=\"line\">        .<span class=\"built_in\">slice</span>(filter_with_parenthesis)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_with_parenthesis)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_annotation</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_without_annotation</span>(<span class=\"params\">x: pd.Series</span>) -&gt; pd.Series:</span><br><span class=\"line\">        x.credit_amount = -<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    ds = german_credit_data.transform(transform_without_annotation)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_missing_arg_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but none was defined&quot;</span></span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_wrong_type_slicing_function</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(</span><br><span class=\"line\">        TypeError,</span><br><span class=\"line\">        <span class=\"keyword\">match</span>=<span class=\"string\">&quot;Required arg 0 of slice_fn to be &lt;class &#x27;pandas.core.series.Series&#x27;&gt;, but &lt;class &#x27;int&#x27;&gt; was defined&quot;</span>,</span><br><span class=\"line\">    ):</span><br><span class=\"line\"><span class=\"meta\">        @slicing_function</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">slice_fn</span>(<span class=\"params\">row: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> row &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        slice_fn(<span class=\"string\">&quot;str&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_chain_with_parameters</span>(<span class=\"params\">german_credit_data: Dataset</span>):</span><br><span class=\"line\"><span class=\"meta\">    @slicing_function(<span class=\"params\">name=<span class=\"string\">&quot;row greater than&quot;</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">filter_greater_than</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, threshold: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[row] &gt; threshold</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @transformation_function</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">transform_divide_by</span>(<span class=\"params\">x: pd.Series, row: <span class=\"built_in\">str</span>, divider: <span class=\"built_in\">int</span></span>) -&gt; pd.Series:</span><br><span class=\"line\">        x[row] /= divider</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">2000</span>))</span><br><span class=\"line\">    german_credit_data.add_transformation_function(transform_divide_by(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    german_credit_data.add_slicing_function(filter_greater_than(<span class=\"string\">&quot;credit_amount&quot;</span>, <span class=\"number\">1000</span>))</span><br><span class=\"line\">    ds = german_credit_data.process()</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ds) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_transformation_without_type</span>():</span><br><span class=\"line\"><span class=\"meta\">    @transformation_function(<span class=\"params\">row_level=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_positive_sentence</span>(<span class=\"params\">row</span>):</span><br><span class=\"line\">        row = row.copy()</span><br><span class=\"line\">        row.text += <span class=\"string\">&quot; I love this!&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> row</span><br><span class=\"line\"></span><br><span class=\"line\">    df = pd.DataFrame([&#123;<span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;testing.&quot;</span>&#125;])</span><br><span class=\"line\">    dataset = Dataset(df, cat_columns=[])</span><br><span class=\"line\">    transformed_dataset = dataset.transform(add_positive_sentence)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(transformed_dataset) &gt; <span class=\"number\">0</span>  <span class=\"comment\"># Example assertion</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/7_ttach-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/7_ttach-master/",
            "title": "ttach",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"ttach\"><a class=\"anchor\" href=\"#ttach\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3F1YnZlbC90dGFjaA==\">ttach</span></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>使用 PyTorch 进行图像测试时间增强</li>\n<li>与数据增强对训练集的作用类似，测试时增强的目的是对测试图像进行随机修改。因此，我们不会只向训练模型显示一次</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    Input</span><br><span class=\"line\">      |           <span class=\"comment\"># input batch of images </span></span><br><span class=\"line\"> / / /|\\ \\ \\      <span class=\"comment\"># apply augmentations (flips, rotation, scale, etc.)</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># pass augmented batches through model</span></span><br><span class=\"line\">| | | | | | |     <span class=\"comment\"># reverse transformations for each batch of masks/labels</span></span><br><span class=\"line\"> \\ \\ \\ / / /      <span class=\"comment\"># merge predictions (mean, max, gmean, etc.)</span></span><br><span class=\"line\">      |           <span class=\"comment\"># output batch of masks/labels</span></span><br><span class=\"line\">    Output</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"test_transformspy代码填充分析\"><a class=\"anchor\" href=\"#test_transformspy代码填充分析\">#</a> test_transforms.py 代码填充分析</h2>\n<h3 id=\"test_transformspy原码\"><a class=\"anchor\" href=\"#test_transformspy原码\">#</a> test_transforms.py 原码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a + p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(aug, a * p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.item() == output[i]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除assert断言给llm分析的代码\"><a class=\"anchor\" href=\"#删除assert断言给llm分析的代码\">#</a> 删除 assert 断言给 LLM 分析的代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">     transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">     a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">     <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> ttach <span class=\"keyword\">as</span> tta</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>)], original_size=(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_aug_deaug_mask</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_mask(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape == deaug.shape, <span class=\"string\">f&quot;Shape mismatch after augmentation-deaugmentation for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Scale(<span class=\"params\">scales=[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Add(<span class=\"params\">values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Multiply(<span class=\"params\">factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.FiveCrops(<span class=\"params\">crop_height=<span class=\"number\">3</span>, crop_width=<span class=\"number\">5</span></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Resize(<span class=\"params\">sizes=[(<span class=\"params\"><span class=\"number\">4</span>, <span class=\"number\">5</span></span>), (<span class=\"params\"><span class=\"number\">8</span>, <span class=\"number\">10</span></span>), (<span class=\"params\"><span class=\"number\">2</span>, <span class=\"number\">2</span></span>)], interpolation=<span class=\"string\">&quot;nearest&quot;</span></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_label_is_same</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_label(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a, deaug), <span class=\"string\">f&quot;Original tensor does not match deaugmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.HorizontalFlip(<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.VerticalFlip(<span class=\"params\"></span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flip_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"string\">&quot;transform&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    [</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        tta.Rotate90(<span class=\"params\">angles=[<span class=\"number\">0</span>, <span class=\"number\">90</span>, <span class=\"number\">180</span>, <span class=\"number\">270</span>]</span>)</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    ],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_rotate90_keypoints</span>(<span class=\"params\">transform</span>):</span><br><span class=\"line\">    keypoints = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.9</span>, <span class=\"number\">0.9</span>], [<span class=\"number\">0.4</span>, <span class=\"number\">0.3</span>]])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        deaug = transform.apply_deaug_keypoints(aug, **&#123;transform.pname: -p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(keypoints, deaug), <span class=\"string\">f&quot;Original keypoints do not match deaugmented keypoints for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_add_transform</span>():</span><br><span class=\"line\">    transform = tta.Add(values=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_multiply_transform</span>():</span><br><span class=\"line\">    transform = tta.Multiply(factors=[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">20</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> transform.params:</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.allclose(a, aug), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fivecrop_transform</span>():</span><br><span class=\"line\">    transform = tta.FiveCrops(crop_height=<span class=\"number\">1</span>, crop_width=<span class=\"number\">1</span>)</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    output = [<span class=\"number\">0</span>, <span class=\"number\">20</span>, <span class=\"number\">24</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> torch.equal(a[<span class=\"number\">0</span>, <span class=\"number\">0</span>], aug[<span class=\"number\">0</span>, <span class=\"number\">0</span>]), <span class=\"string\">f&quot;Original tensor does not match augmented tensor for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_resize_transform</span>():</span><br><span class=\"line\">    transform = tta.Resize(sizes=[(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">5</span>, <span class=\"number\">5</span>)], original_size=(<span class=\"number\">5</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">    a = torch.arange(<span class=\"number\">25</span>).reshape(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, p <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(transform.params):</span><br><span class=\"line\">        aug = transform.apply_aug_image(a, **&#123;transform.pname: p&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> aug.shape[<span class=\"number\">2</span>:] == p, <span class=\"string\">f&quot;Augmented image shape does not match expected shape <span class=\"subst\">&#123;p&#125;</span> for <span class=\"subst\">&#123;transform&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/9_sumeval-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/9_sumeval-master/",
            "title": "sumeval",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"sumeval\"><a class=\"anchor\" href=\"#sumeval\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFs\">sumeval</span></strong></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>不仅支持英文，还支持日文和中文，其他语言也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFsI3dlbGNvbWUtY29udHJpYnV0aW9uLXRhZGE=\">轻松</span>扩展</li>\n<li>使用方法 <code>pip install sumeval</code></li>\n</ul>\n<h2 id=\"test_rougepy代码分析\"><a class=\"anchor\" href=\"#test_rougepy代码分析\">#</a> test_rouge.py 代码分析</h2>\n<h3 id=\"test_rougepy原代码\"><a class=\"anchor\" href=\"#test_rougepy原代码\">#</a> test_rouge.py 原代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                    self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;-F&quot;</span>.<span class=\"built_in\">format</span>(n)] - v), <span class=\"number\">1e-5</span>) <span class=\"comment\"># noqa</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b2_v - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\">                self.assertLess(<span class=\"built_in\">abs</span>(b1_v[<span class=\"string\">&quot;ROUGE-L-F&quot;</span>] - v), <span class=\"number\">1e-5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"去掉assert断言和一些辅助说明后喂给llm的test代码\"><a class=\"anchor\" href=\"#去掉assert断言和一些辅助说明后喂给llm的test代码\">#</a> 去掉 assert 断言和一些辅助说明后喂给 LLM 的 test 代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"llm自动填充assert断言后的代码\"><a class=\"anchor\" href=\"#llm自动填充assert断言后的代码\">#</a> LLM 自动填充 assert 断言后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> rougescore <span class=\"keyword\">import</span> rouge_n, rouge_l</span><br><span class=\"line\"><span class=\"keyword\">from</span> pythonrouge.pythonrouge <span class=\"keyword\">import</span> Pythonrouge</span><br><span class=\"line\"><span class=\"keyword\">from</span> sumeval.metrics.rouge <span class=\"keyword\">import</span> RougeCalculator</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRouge</span>(unittest.TestCase):</span><br><span class=\"line\">    DATA_DIR = os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;data/rouge&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_test_data</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        test_file = os.path.join(self.DATA_DIR, <span class=\"string\">&quot;ROUGE-test.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(test_file, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = json.load(f)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">False</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_stop_word</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_length_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, length_limit=<span class=\"number\">50</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_with_word_limit</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>, word_limit=<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                    baseline = Pythonrouge(</span><br><span class=\"line\">                                summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                summary=[[s]],</span><br><span class=\"line\">                                reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                                n_gram=n, recall_only=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">5</span>,</span><br><span class=\"line\">                                word_level=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                    b1_v = baseline.calc_score()</span><br><span class=\"line\">                    b2_v = rouge_n(rouge.tokenize(s),</span><br><span class=\"line\">                                   [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                                   n, <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                    v = rouge.rouge_n(s, references, n)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                    self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(n)], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_rouge_l</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        data = self.load_test_data()</span><br><span class=\"line\">        rouge = RougeCalculator(stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> eval_id <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">            summaries = data[eval_id][<span class=\"string\">&quot;summaries&quot;</span>]</span><br><span class=\"line\">            references = data[eval_id][<span class=\"string\">&quot;references&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> summaries:</span><br><span class=\"line\">                baseline = Pythonrouge(</span><br><span class=\"line\">                            summary_file_exist=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                            summary=[[s]],</span><br><span class=\"line\">                            reference=[[[r] <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references]],</span><br><span class=\"line\">                            n_gram=<span class=\"number\">1</span>, recall_only=<span class=\"literal\">False</span>, ROUGE_L=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                            length_limit=<span class=\"literal\">True</span>, length=<span class=\"number\">50</span>,</span><br><span class=\"line\">                            stemming=<span class=\"literal\">False</span>, stopwords=<span class=\"literal\">True</span>)</span><br><span class=\"line\">                b1_v = baseline.calc_score()</span><br><span class=\"line\">                b2_v = rouge_l(rouge.tokenize(s),</span><br><span class=\"line\">                               [rouge.tokenize(r) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> references],</span><br><span class=\"line\">                               <span class=\"number\">0.5</span>)</span><br><span class=\"line\">                v = rouge.rouge_l(s, references)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], b2_v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\">                self.assertAlmostEqual(b1_v[<span class=\"string\">&quot;ROUGE-L&quot;</span>], v, places=<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/",
            "title": "robotframework-webservice",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"robotframework-webservice\"><a class=\"anchor\" href=\"#robotframework-webservice\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtldFNxdWFyZS9yb2JvdGZyYW1ld29yay13ZWJzZXJ2aWNl\">robotframework-webservice</span></strong></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>一个管理 Robot Framework 任务 / 测试的 Web 服务。</li>\n<li>该 Web 服务应启动 Robot Framework 的任务 / 测试，并返回并缓存相应的报告。</li>\n<li>运行：</li>\n</ul>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install robotframework-webservice</span><br><span class=\"line\">python -m RobotFrameworkService.main -p <span class=\"number\">5003</span> -t path_to_my_taskfolder</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>测试</li>\n</ul>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:5003/robotframework/run/mytask //调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask?myVariable1=42&amp;anotherVariable=Mustermann //带变量调用 Robot 任务/测试</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接在任务/测试的持续时间内保持打开状态</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask</span><br><span class=\"line\"></span><br><span class=\"line\"># 立即关闭连接 - 结果必须使用 x-request-id 请求</span><br><span class=\"line\">http://localhost:5003/robotframework/run/mytask/async</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>\n<p>调用 Robot 测试</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;test&quot;: &quot;Demonstration Test&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>调用 Robot 任务</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Demonstration Task&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>带变量调用 Robot 任务</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -X <span class=\"string\">&#x27;POST&#x27;</span> \\</span><br><span class=\"line\">  <span class=\"string\">&#x27;http://localhost:5003/robotframework/run&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;accept: application/json&#x27;</span> \\</span><br><span class=\"line\">  -H <span class=\"string\">&#x27;Content-Type: application/json&#x27;</span> \\</span><br><span class=\"line\">  -d <span class=\"string\">&#x27;&#123;</span></span><br><span class=\"line\"><span class=\"string\">  &quot;paths&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">    &quot;examples&quot;</span></span><br><span class=\"line\"><span class=\"string\">  ],</span></span><br><span class=\"line\"><span class=\"string\">  &quot;task&quot;: &quot;Task with more variables&quot;,</span></span><br><span class=\"line\"><span class=\"string\">  &quot;variables&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &quot;firstname&quot;: &quot;Max&quot;,</span></span><br><span class=\"line\"><span class=\"string\">    &quot;lastname&quot;: &quot;Mustermann&quot;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>启动本地 Web 服务：</p>\n<p><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> <span class=\"attr\">--help</span></span><br><span class=\"line\">python -m RobotFrameworkService<span class=\"selector-class\">.main</span> -<span class=\"selector-tag\">p</span> <span class=\"number\">5003</span> -t path_to_my_taskfolder <span class=\"comment\">// example</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"test_apppy修改操作\"><a class=\"anchor\" href=\"#test_apppy修改操作\">#</a> test_app.py 修改操作</h2>\n<h3 id=\"原本的testpy代码\"><a class=\"anchor\" href=\"#原本的testpy代码\">#</a> 原本的 test.py 代码:</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;PASS&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, logs_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">200</span>, report_response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">400</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;Options test and task cannot be both specified&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;task&quot;</span>: <span class=\"string\">&quot;Another task&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">            response = client.post(<span class=\"string\">&quot;/robotframework/run&quot;</span>, json=&#123;<span class=\"string\">&quot;paths&quot;</span>: [<span class=\"string\">&quot;examples&quot;</span>], <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;Demonstration Test&quot;</span>, <span class=\"string\">&quot;sync&quot;</span>: <span class=\"literal\">True</span>&#125;)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">200</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">&quot;/robotframework/logs/not_existing&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">404</span>, response.status_code)</span><br><span class=\"line\">            self.assertEqual(<span class=\"string\">&quot;The logs not_existing not existing or being generating&quot;</span>, response.text)</span><br><span class=\"line\"></span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            response = client.delete(<span class=\"string\">f&quot;/robotframework/logs/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            self.assertEqual(<span class=\"number\">204</span>, response.status_code)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        self.assertEqual(expected_response_code, response.status_code, response.text)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertNotIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, msg=msg)</span><br><span class=\"line\">        self.assertIn(</span><br><span class=\"line\">            <span class=\"string\">&quot;PASS&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains neither PASS nor FAIL&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&quot;FAIL&quot;</span>, response.text, <span class=\"string\">&quot;Test result contains FAIL&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"投喂给gpt35的test代码\"><a class=\"anchor\" href=\"#投喂给gpt35的test代码\">#</a> 投喂给 gpt3.5 的 test 代码：</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTesttest_s</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"gpt自动填充后的testpy\"><a class=\"anchor\" href=\"#gpt自动填充后的testpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1ncHR0ZXN0LWpiOWs2Nmhsd2U5OXAxNTFneTc0YS5weQ==\">gpt 自动填充后的 test.py</span></h3>\n<p><strong>将上述代码喂给 chatgpt3.5，并附加 base prompt: 该 tests case 缺少 assert 断言 请你自动补充</strong></p>\n<p>生成的 test.py 如下：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> fastapi.testclient <span class=\"keyword\">import</span> TestClient</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> RobotFrameworkService.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EndpointTests</span>(unittest.TestCase):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_service_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/status&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Service is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/all&quot;</span>, expected_response_code=<span class=\"number\">400</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_failed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为400</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">400</span>, <span class=\"string\">&quot;Expected response code 400&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/all/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">        self.__is_robot_passed(response=response)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_async_startable</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(<span class=\"string\">&quot;/robotframework/run/anotherTask/async&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Async task is not startable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_robottask_with_variables</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run/Task with variable?input=qwerty&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        self.__is_robot_passed(response=response, msg=<span class=\"string\">&quot;Testing with variables failed&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with variables failed&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_logs_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show/anotherTask?art=tests&amp;description=EreichbarkeitsTestMitLogs&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with logs and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robottask_available_with_reports_and_arguments</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        response = self.__get_robot_webservice(</span><br><span class=\"line\">            <span class=\"string\">&quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;description=FunktionsTestMitReports&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Task with reports and arguments is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotlog_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            logs_response = client.get(<span class=\"string\">f&quot;/robotframework/show_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> logs_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robotreport_available</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            report_response = client.get(<span class=\"string\">f&quot;/robotframework/show_report/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> report_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Report is not available&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_is_robot_run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 尚未实现</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_delete_robotlogs</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            run_response = client.get(<span class=\"string\">&quot;/robotframework/run/anotherTask&quot;</span>)</span><br><span class=\"line\">            execution_id = run_response.headers[<span class=\"string\">&quot;x-request-id&quot;</span>]</span><br><span class=\"line\">            delete_response = client.delete(<span class=\"string\">f&quot;/robotframework/delete_log/<span class=\"subst\">&#123;execution_id&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为200</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> delete_response.status_code == <span class=\"number\">200</span>, <span class=\"string\">&quot;Logs are not deleted&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__get_robot_webservice</span>(<span class=\"params\">self, endpoint, expected_response_code=<span class=\"number\">200</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">with</span> TestClient(app) <span class=\"keyword\">as</span> client:</span><br><span class=\"line\">            response = client.get(endpoint)</span><br><span class=\"line\">            <span class=\"comment\"># 断言响应状态码为预期的状态码</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> response.status_code == expected_response_code, <span class=\"string\">f&quot;Expected response code <span class=\"subst\">&#123;expected_response_code&#125;</span>, got <span class=\"subst\">&#123;response.status_code&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_passed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否成功（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;passed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not pass&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__is_robot_failed</span>(<span class=\"params\">self, response, msg=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 检查任务是否失败（具体实现取决于服务的响应格式）</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> response.json().get(<span class=\"string\">&#x27;status&#x27;</span>) == <span class=\"string\">&#x27;failed&#x27;</span>, msg <span class=\"keyword\">or</span> <span class=\"string\">&quot;Robot task did not fail&quot;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/",
            "title": "pytorch-lr-finder",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"pytorch-lr-finder\"><a class=\"anchor\" href=\"#pytorch-lr-finder\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkdHZzL3B5dG9yY2gtbHItZmluZGVy\">pytorch-lr-finder</span></strong></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>\n<p>该项目为 PyTorch 学习率查找器</p>\n</li>\n<li>\n<p>学习率范围测试是一种提供有关最佳学习率的宝贵信息的测试。在预训练运行期间，学习率在两个边界之间线性或指数增加。较低的初始学习率允许网络开始收敛，随着学习率的增加，它最终会变得太大，网络会发散。</p>\n</li>\n<li>\n<p>来自 fastai 的调整版本：以指数方式增加学习率并计算每个学习率的训练损失。 <code>lr_finder.plot()</code>  绘制训练损失与对数学习率的关系。</p>\n</li>\n<li>\n<p>Leslie Smith 的方法：线性增加学习率并计算每个学习率的评估损失。 <code>lr_finder.plot()</code>  绘制评估损失与学习率的关系图。这种方法通常会产生更精确的曲线，因为评估损失更容易发散，但执行测试所需的时间会更长，尤其是在评估数据集很大的情况下。</p>\n<h2 id=\"test_lr_finderpy代码分析\"><a class=\"anchor\" href=\"#test_lr_finderpy代码分析\">#</a> test_lr_finder.py 代码分析</h2>\n<h3 id=\"该test原代码\"><a class=\"anchor\" href=\"#该test原代码\">#</a> 该 test 原代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Run a `DataLoaderIter` object for specific times.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Arguments:</span></span><br><span class=\"line\"><span class=\"string\">        loader_iter (torch_lr_finder.DataLoaderIter): the iterator to test.</span></span><br><span class=\"line\"><span class=\"string\">        desired_runs (int, optional): times that iterator should be iterated.</span></span><br><span class=\"line\"><span class=\"string\">            If it&#x27;s not given, `len(loader_iter.data_loader)` will be used.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Returns:</span></span><br><span class=\"line\"><span class=\"string\">        is_achieved (bool): False if `loader_iter` cannot be iterated specific</span></span><br><span class=\"line\"><span class=\"string\">            times. It usually means `loader_iter` has raised `StopIteration`.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">isinstance</span>(loader_iter, DataLoaderIter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># check whether lr is actually changed</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">max</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt;= init_lrs[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> init_lrs == restored_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">2e-5</span>, <span class=\"number\">3e-5</span>, <span class=\"number\">4e-5</span>, <span class=\"number\">5e-5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) == <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] == pytest.approx([<span class=\"number\">1e-5</span>, <span class=\"number\">1e-4</span>, <span class=\"number\">1e-3</span>, <span class=\"number\">1e-2</span>, <span class=\"number\">0.1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> We are using smaller batch size to simulate a large batch.</span></span><br><span class=\"line\">        <span class=\"comment\"># So that the actual times of model/criterion called should be</span></span><br><span class=\"line\">        <span class=\"comment\"># `(desired_bs/real_bs) * num_iter` == `accum_steps * num_iter`</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == accum_steps * num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">hasattr</span>(task.optimizer, <span class=\"string\">&quot;_amp_stash&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `TrainDataLoaderIter` can reset itself, so that it&#x27;s ok to reuse it</span></span><br><span class=\"line\">        <span class=\"comment\"># directly and iterate it more than `len(dataloader)` times.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t reset itself, so this should be False if</span></span><br><span class=\"line\">        <span class=\"comment\"># we re-run it without resetting it.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Reset it by `iter()`</span></span><br><span class=\"line\">        loader_iter = <span class=\"built_in\">iter</span>(loader_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> run_loader_iter(loader_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># `ValDataLoaderIter` can&#x27;t be iterated more than `len(dataloader)` times</span></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> run_loader_iter(loader_iter, desired_runs=<span class=\"built_in\">len</span>(dataloader) + <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除assert和必要提示后上传llm的代码\"><a class=\"anchor\" href=\"#删除assert和必要提示后上传llm的代码\">#</a> 删除 assert 和必要提示后上传 LLM 的代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp.scale_loss` should equal to `num_iter`.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestDataLoaderIter</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_traindataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_valdataloaderiter</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        batch_size, data_length = <span class=\"number\">32</span>, <span class=\"number\">256</span></span><br><span class=\"line\">        dataset = mod_dataset.RandomDataset(data_length)</span><br><span class=\"line\">        dataloader = DataLoader(dataset, batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = ValDataLoaderIter(dataloader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_traindataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        spy = mocker.spy(loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valdataloaderiter</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = ValDataLoaderIter(task.val_loader)</span><br><span class=\"line\">        spy_train = mocker.spy(train_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\">        spy_val = mocker.spy(val_loader_iter, <span class=\"string\">&quot;inputs_labels_from_batch&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_train.call_count == num_iter</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy_val.call_count == num_iter * <span class=\"built_in\">len</span>(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_trainloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        loader_iter = CustomLoaderIter(task.train_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`train_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(loader_iter, num_iter=num_iter)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_range_test_with_valloaderiter_without_subclassing</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        num_iter = <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">        train_loader_iter = TrainDataLoaderIter(task.train_loader)</span><br><span class=\"line\">        val_loader_iter = CustomLoaderIter(task.val_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;`val_loader` has unsupported type&quot;</span>):</span><br><span class=\"line\">            lr_finder.range_test(</span><br><span class=\"line\">                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter</span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CustomLoaderIter</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;This class does not inherit from `DataLoaderIter`, should be used to</span></span><br><span class=\"line\"><span class=\"string\">    trigger exceptions related to type checking.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, loader</span>):</span><br><span class=\"line\">        self.loader = loader</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">iter</span>(self.loader)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;num_iter&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;scheduler&quot;</span>, [<span class=\"string\">&quot;exp&quot;</span>, <span class=\"string\">&quot;linear&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_scheduler_and_num_iter</span>(<span class=\"params\">num_iter, scheduler</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> pytest.raises(ValueError, <span class=\"keyword\">match</span>=<span class=\"string\">&quot;num_iter&quot;</span>):</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;suggest_lr&quot;</span>, [<span class=\"literal\">False</span>, <span class=\"literal\">True</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_start&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;skip_end&quot;</span>, [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_plot_with_skip_and_suggest_lr</span>(<span class=\"params\">suggest_lr, skip_start, skip_end</span>):</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    num_iter = <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">    lr_finder.range_test(</span><br><span class=\"line\">        task.train_loader, num_iter=num_iter, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    results = lr_finder.plot(</span><br><span class=\"line\">        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num_iter - skip_start - skip_end &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle data with one or zero lr</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> results <span class=\"keyword\">is</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># handle different suggest_lr</span></span><br><span class=\"line\">        <span class=\"comment\"># for &#x27;steepest&#x27;: the point with steepest gradient (minimal gradient)</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.lines) == <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(ax.collections) == <span class=\"built_in\">int</span>(suggest_lr)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> results <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> ax:</span><br><span class=\"line\">            <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(results) == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_suggest_lr</span>():</span><br><span class=\"line\">    task = mod_task.XORTask()</span><br><span class=\"line\">    lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\"></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the first element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Loss with minimal gradient is the last element in history</span></span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>] = <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    fig, ax = plt.subplots()</span><br><span class=\"line\">    ax, lr = lr_finder.plot(skip_start=<span class=\"number\">0</span>, skip_end=<span class=\"number\">0</span>, suggest_lr=<span class=\"literal\">True</span>, ax=ax)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> lr == <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) - <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"llm自动填充assert后的代码\"><a class=\"anchor\" href=\"#llm自动填充assert后的代码\">#</a> LLM 自动填充 assert 后的代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils.data <span class=\"keyword\">import</span> DataLoader</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder <span class=\"keyword\">import</span> LRFinder</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch_lr_finder.lr_finder <span class=\"keyword\">import</span> (</span><br><span class=\"line\">    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> task <span class=\"keyword\">as</span> mod_task</span><br><span class=\"line\"><span class=\"keyword\">import</span> dataset <span class=\"keyword\">as</span> mod_dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check available backends for mixed precision training</span></span><br><span class=\"line\">AVAILABLE_AMP_BACKENDS = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> apex.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> torch.amp</span><br><span class=\"line\">    AVAILABLE_AMP_BACKENDS.append(<span class=\"string\">&quot;torch&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_task_classes</span>():</span><br><span class=\"line\">    names = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> <span class=\"built_in\">dir</span>(mod_task) <span class=\"keyword\">if</span> v.endswith(<span class=\"string\">&quot;Task&quot;</span>) <span class=\"keyword\">and</span> v != <span class=\"string\">&quot;BaseTask&quot;</span>]</span><br><span class=\"line\">    attrs = [<span class=\"built_in\">getattr</span>(mod_task, v) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">    classes = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> attrs <span class=\"keyword\">if</span> <span class=\"built_in\">issubclass</span>(v, mod_task.BaseTask)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">prepare_lr_finder</span>(<span class=\"params\">task, **kwargs</span>):</span><br><span class=\"line\">    model = task.model</span><br><span class=\"line\">    optimizer = task.optimizer</span><br><span class=\"line\">    criterion = task.criterion</span><br><span class=\"line\">    config = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;device&quot;</span>: kwargs.get(<span class=\"string\">&quot;device&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;memory_cache&quot;</span>: kwargs.get(<span class=\"string\">&quot;memory_cache&quot;</span>, <span class=\"literal\">True</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;cache_dir&quot;</span>: kwargs.get(<span class=\"string\">&quot;cache_dir&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_backend&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_backend&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;amp_config&quot;</span>: kwargs.get(<span class=\"string\">&quot;amp_config&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">        <span class=\"string\">&quot;grad_scaler&quot;</span>: kwargs.get(<span class=\"string\">&quot;grad_scaler&quot;</span>, <span class=\"literal\">None</span>),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lr_finder = LRFinder(model, optimizer, criterion, **config)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lr_finder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_optim_lr</span>(<span class=\"params\">optimizer</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [grp[<span class=\"string\">&quot;lr&quot;</span>] <span class=\"keyword\">for</span> grp <span class=\"keyword\">in</span> optimizer.param_groups]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">run_loader_iter</span>(<span class=\"params\">loader_iter, desired_runs=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desired_runs <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        desired_runs = <span class=\"built_in\">len</span>(loader_iter.data_loader)</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(desired_runs):</span><br><span class=\"line\">            <span class=\"built_in\">next</span>(loader_iter)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> StopIteration:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> desired_runs == count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestRangeTest</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, collect_task_classes(<span class=\"params\"></span>)</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.SimplePOSTaggerTask]</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_run_non_tensor_dataset_with_val_loader</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task(validate=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestReset</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_reset</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        lr_finder.reset()</span><br><span class=\"line\"></span><br><span class=\"line\">        restored_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> restored_lrs == init_lrs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLRHistory</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_linear_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;linear&quot;</span>, end_lr=<span class=\"number\">5e-5</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_exponential_lr_history</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        task = mod_task.XORTask()</span><br><span class=\"line\">        <span class=\"comment\"># prepare_lr_finder sets the starting lr to 1e-5</span></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=<span class=\"number\">5</span>, step_mode=<span class=\"string\">&quot;exp&quot;</span>, end_lr=<span class=\"number\">0.1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestGradientAccumulation</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        spy = mocker.spy(lr_finder, <span class=\"string\">&quot;criterion&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`apex` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_apex_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run this test.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_gradient_accumulation_with_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        desired_bs, accum_steps = <span class=\"number\">32</span>, <span class=\"number\">4</span></span><br><span class=\"line\">        real_bs = desired_bs // accum_steps</span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=real_bs)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == num_iter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;apex&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`apex` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecision</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_apex</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires</span></span><br><span class=\"line\">        <span class=\"comment\"># CUDA GPU. So we have to move model to GPU first.</span></span><br><span class=\"line\">        model, optimizer, device = task.model, task.optimizer, task.device</span><br><span class=\"line\">        model = model.to(device)</span><br><span class=\"line\">        task.model, task.optimizer = apex.amp.initialize(model, optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task, amp_backend=<span class=\"string\">&quot;apex&quot;</span>)</span><br><span class=\"line\">        spy = mocker.spy(apex.amp, <span class=\"string\">&quot;scale_loss&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    <span class=\"keyword\">not</span> (<span class=\"params\">(<span class=\"params\"><span class=\"string\">&quot;torch&quot;</span> <span class=\"keyword\">in</span> AVAILABLE_AMP_BACKENDS</span>) <span class=\"keyword\">and</span> mod_task.use_cuda(<span class=\"params\"></span>)</span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    reason=<span class=\"string\">&quot;`torch.amp` module and gpu is required to run these tests.&quot;</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\"></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMixedPrecisionWithTorchAMP</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_mixed_precision_torch_amp</span>(<span class=\"params\">self, mocker</span>):</span><br><span class=\"line\">        batch_size = <span class=\"number\">32</span></span><br><span class=\"line\">        num_iter = <span class=\"number\">10</span></span><br><span class=\"line\">        task = mod_task.XORTask(batch_size=batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Config for `torch.amp`. Though `torch.amp.autocast` supports various</span></span><br><span class=\"line\">        <span class=\"comment\"># device types, we test it with CUDA only.</span></span><br><span class=\"line\">        amp_config = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;device_type&quot;</span>: <span class=\"string\">&quot;cuda&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;dtype&quot;</span>: torch.float16,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grad_scaler = torch.cuda.amp.GradScaler()</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(</span><br><span class=\"line\">            task, amp_backend=<span class=\"string\">&quot;torch&quot;</span>, amp_config=amp_config, grad_scaler=grad_scaler</span><br><span class=\"line\">        )</span><br><span class=\"line\">        spy = mocker.spy(grad_scaler, <span class=\"string\">&quot;scale&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, num_iter=num_iter)</span><br><span class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> Here we did not perform gradient accumulation, so that call count</span></span><br><span class=\"line\">        <span class=\"comment\"># of `amp` could be only one in any situation.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> spy.call_count == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.skipif(<span class=\"params\"><span class=\"keyword\">not</span> mod_task.use_cuda(<span class=\"params\"></span>), reason=<span class=\"string\">&quot;CUDA GPU is required to run these tests.&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestMultiPhase</span>:</span><br><span class=\"line\"><span class=\"meta\">    @pytest.mark.parametrize(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">        <span class=\"string\">&quot;cls_task&quot;</span>, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"meta\">    </span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_multi_phase</span>(<span class=\"params\">self, cls_task</span>):</span><br><span class=\"line\">        task = cls_task()</span><br><span class=\"line\">        init_lrs = get_optim_lr(task.optimizer)</span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder = prepare_lr_finder(task)</span><br><span class=\"line\">        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Simulate a change in LR and perform another phase of LR range test</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> param_group <span class=\"keyword\">in</span> task.optimizer.param_groups:</span><br><span class=\"line\">            param_group[<span class=\"string\">&quot;lr&quot;</span>] *= <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        lr_finder.range_test(</span><br><span class=\"line\">            task.train_loader, val_loader=task.val_loader, num_iter=<span class=\"number\">10</span>, reset_lr=<span class=\"literal\">False</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Assert statements</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;lr&quot;</span>]) &gt; <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(lr_finder.history[<span class=\"string\">&quot;loss&quot;</span>]) &gt; <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/",
            "url": "https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/",
            "title": "artificial-adversary",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"artificial-adversary\"><a class=\"anchor\" href=\"#artificial-adversary\">#</a> <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9hcnRpZmljaWFsLWFkdmVyc2FyeQ==\">artificial-adversary</span></strong></h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>在对用户生成的文本进行分类时，用户可以通过多种方式修改其内容以避免被检测到。这些方法通常是对文本进行表面修改，即更改所使用的原始字符或单词，但保留足够明显的原始含义以供人类读者理解。这些方法包括用相似的字符替换字符、删除或添加标点和空格以及交换单词中的字母。例如，这 <code>please wire me 10,000 US DOLLARS to bank of scamland</code>  可能是一条明显的诈骗信息，但 <code>pl3@se.wire me 10000 US DoLars to,BANK of ScamIand</code>  可以欺骗许多分类器。</li>\n<li>安装：</li>\n</ul>\n<p><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> Adversary</span><br><span class=\"line\">python -m textblob.download_corpora</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>用于数据集增强</strong></li>\n<li><strong>对于性能界限</strong></li>\n</ul>\n<h2 id=\"test_allpy代码分析\"><a class=\"anchor\" href=\"#test_allpy代码分析\">#</a> test_all.py 代码分析</h2>\n<h3 id=\"test_allpy源码\"><a class=\"anchor\" href=\"#test_allpy源码\">#</a> test_all.py 源码</h3>\n<p><strong>将 <code>test_adversary.py</code> 、 <code>test_attacks.py</code> 、 <code>test_utils.py</code>  三个代码三合一后，我创建了 test_all.py 代码，源码如下：</strong></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(<span class=\"built_in\">len</span>(g) == <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (<span class=\"built_in\">len</span>(g) == <span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> (df_s <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> df_m <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;1&#x27;</span>) == <span class=\"string\">&#x27;one&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(num_to_word(<span class=\"string\">&#x27;dog&#x27;</span>) == <span class=\"string\">&#x27;dog&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(flatten_unique(l) == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(combinations_of_len(l, <span class=\"number\">2</span>) == [(<span class=\"number\">1</span>,), (<span class=\"number\">2</span>,), (<span class=\"number\">3</span>,), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(fancy_titles(cols) == [<span class=\"string\">&#x27;Change Case&#x27;</span>, <span class=\"string\">&#x27;Insert Duplicate Characters&#x27;</span>, <span class=\"string\">&#x27;Synonym&#x27;</span>])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除assert语句的test代码\"><a class=\"anchor\" href=\"#删除assert语句的test代码\">#</a> 删除 assert 语句的 test 代码</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"llm自动填充assert语句后的test代码\"><a class=\"anchor\" href=\"#llm自动填充assert语句后的test代码\">#</a> LLM 自动填充 assert 语句后的 test 代码</h3>\n<p>**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Adversary.adversary <span class=\"keyword\">import</span> Adversary</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.attacks <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> Adversary.utils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_single_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_generate_many_iter</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts, text_sample_rate=<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(g) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">u&#x27;happy happy happy happy dog dog dog dog dog&#x27;</span>,</span><br><span class=\"line\">          <span class=\"string\">u&#x27;okay okay yeah here&#x27;</span>, <span class=\"string\">&#x27;tell me awful things&#x27;</span>]</span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_attack_large</span>():</span><br><span class=\"line\">    m = Adversary(verbose=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    og_texts = [<span class=\"string\">&#x27;tell me awful things&#x27;</span>] * <span class=\"number\">1000</span></span><br><span class=\"line\">    g = m.generate(og_texts)</span><br><span class=\"line\">    df_s, df_m = m.attack(og_texts, g, <span class=\"keyword\">lambda</span> x: <span class=\"number\">1</span> <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> og_texts <span class=\"keyword\">else</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_s) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(df_m) == <span class=\"built_in\">len</span>(og_texts)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_num_to_word</span>():</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>  <span class=\"comment\"># Add assertions when implemented</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_flatten_unique</span>():</span><br><span class=\"line\">    l = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>]]</span><br><span class=\"line\">    flat_list = flatten_unique(l)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(flat_list) == <span class=\"number\">5</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_combinations_of_len</span>():</span><br><span class=\"line\">    l = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    combs = combinations_of_len(l, <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(combs) == <span class=\"number\">3</span>  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_fancy_titles</span>():</span><br><span class=\"line\">    cols = [<span class=\"string\">&#x27;change_case&#x27;</span>, <span class=\"string\">&#x27;insert_duplicate_characters&#x27;</span>, <span class=\"string\">&#x27;synonym&#x27;</span>]</span><br><span class=\"line\">    titles = fancy_titles(cols)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(titles) == <span class=\"built_in\">len</span>(cols)  <span class=\"comment\"># Example assertion, adjust as needed</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/%E7%BB%9F%E8%AE%A1%E7%BB%93%E6%9E%9C/",
            "url": "https://enjundu.github.io/LLMstestoracle/%E7%BB%9F%E8%AE%A1%E7%BB%93%E6%9E%9C/",
            "title": "a_统计结果",
            "date_published": "2024-07-02T18:08:35.000Z",
            "content_html": "<h1 id=\"llm对于test-oracle生成\"><a class=\"anchor\" href=\"#llm对于test-oracle生成\">#</a> LLM 对于 test oracle 生成</h1>\n<h2 id=\"生成结果\"><a class=\"anchor\" href=\"#生成结果\">#</a> 生成结果</h2>\n<h3 id=\"一致率分析\"><a class=\"anchor\" href=\"#一致率分析\">#</a> 一致率分析</h3>\n<h4 id=\"pythonprojecttemplate-master\"><a class=\"anchor\" href=\"#pythonprojecttemplate-master\">#</a> PythonProjectTemplate-master</h4>\n<p>生成的 assert 和原来的一致的为 100%</p>\n<h4 id=\"cronex-master\"><a class=\"anchor\" href=\"#cronex-master\">#</a> cronex-master</h4>\n<p>共统计了<strong> 35</strong> 个断言，其中逻辑完全一致的 assert 共<strong> 8</strong> 个，不一致的 27 个，一致率为<strong> 22.9%</strong>。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/1/",
            "url": "https://enjundu.github.io/LLMstestoracle/1/",
            "title": "研究方法",
            "date_published": "2024-07-02T18:07:35.000Z",
            "content_html": "<h3 id=\"分析和理解步骤\"><a class=\"anchor\" href=\"#分析和理解步骤\">#</a> 分析和理解步骤</h3>\n<h4 id=\"第一步找10个项目每个随机选10个左右的test-case包含assert\"><a class=\"anchor\" href=\"#第一步找10个项目每个随机选10个左右的test-case包含assert\">#</a> 第一步：找 10 个项目每个随机选 10 个左右的 test case（包含 assert）</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>找 10 个项目</strong>：我们需要选择 10 个开源项目，这些项目应该包含单元测试，并且测试用例使用了 assert 语句。</li>\n<li><strong>随机选 10 个左右的 test case</strong>：从每个项目中随机选择大约 10 个测试用例。每个测试用例必须包含至少一个 assert 语句。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>在 GitHub 等平台上寻找 10 个开源项目。</li>\n<li>确保这些项目有单元测试（通常在 <code>tests</code>  目录下）。</li>\n<li>在每个项目中随机选择 10 个包含 assert 语句的测试用例。</li>\n</ul>\n<h4 id=\"第二步把test-case中的assert去掉\"><a class=\"anchor\" href=\"#第二步把test-case中的assert去掉\">#</a> 第二步：把 test case 中的 assert 去掉</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>去掉 assert 语句</strong>：编辑选中的测试用例，删除其中的 assert 语句。这意味着我们要修改测试用例，使其保留其他逻辑，但去除验证部分。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>打开每个测试用例文件，找到 assert 语句。</li>\n<li>删除 assert 语句，保留其他代码。</li>\n</ul>\n<h4 id=\"第三步用llm补全assert\"><a class=\"anchor\" href=\"#第三步用llm补全assert\">#</a> 第三步：用 LLM 补全 assert</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>用 LLM 补全</strong>：将去掉 assert 语句的测试用例输入到大语言模型（LLM）中，让它自动补全缺失的 assert 语句。这里的 LLM 可以是一个经过训练的自然语言处理模型，例如 GPT-4。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>将去掉 assert 语句的测试用例逐个输入到 LLM 中。</li>\n<li>让 LLM 根据上下文补全 assert 语句。</li>\n</ul>\n<h4 id=\"第四步看看结果是什么样子\"><a class=\"anchor\" href=\"#第四步看看结果是什么样子\">#</a> 第四步：看看结果是什么样子</h4>\n<p><strong>分析和理解</strong>：</p>\n<ol>\n<li><strong>查看结果</strong>：获取 LLM 补全后的测试用例，并对比原始测试用例，查看 LLM 补全的 assert 语句的正确性和合理性。</li>\n</ol>\n<p><strong>具体操作</strong>：</p>\n<ul>\n<li>比较 LLM 补全的 assert 语句和原始 assert 语句。</li>\n<li>记录 LLM 补全效果好的地方和不足之处。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><strong>完整过程</strong>：</p>\n<ol>\n<li>找 10 个开源项目，每个项目中随机选 10 个包含 assert 语句的测试用例。</li>\n<li>去掉这些测试用例中的 assert 语句，保留其他代码。</li>\n<li>使用 LLM 对去掉 assert 语句的测试用例进行补全，让 LLM 自动生成 assert 语句。</li>\n<li>对比 LLM 补全的结果与原始测试用例，分析 LLM 的表现。</li>\n</ol>\n<p>这个过程将帮助我们评估 LLM 在自动补全测试用例中 assert 语句的能力，并找出其优缺点，以便进一步改进和优化。</p>\n<h3 id=\"示例具体操作假设性示例\"><a class=\"anchor\" href=\"#示例具体操作假设性示例\">#</a> 示例具体操作（假设性示例）</h3>\n<p>假设我们从一个项目中选取了以下测试用例：</p>\n<p><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"attribute\">assert</span> result == <span class=\"number\">12</span></span><br></pre></td></tr></table></figure></p>\n<p>去掉 assert 语句后：</p>\n<p><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">python</span>复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"attribute\">result</span> = multiply(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"comment\"># assert result == 12</span></span><br></pre></td></tr></table></figure></p>\n<p>输入 LLM 进行补全后，假设 LLM 生成的结果是：</p>\n<p><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python复制代码def test_multiplication():</span><br><span class=\"line\">    <span class=\"built_in\">result</span> = <span class=\"built_in\">multiply</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">    assert <span class=\"built_in\">result</span> == <span class=\"number\">12</span>  <span class=\"comment\"># LLM补全</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><strong>正确性</strong>：LLM 正确地补全了 assert 语句，与原始测试用例一致。</li>\n<li><strong>上下文理解</strong>：LLM 理解了测试函数的意图，并生成了合理的 assert 语句。</li>\n</ul>\n<p>通过这样的操作，我们可以评估 LLM 在处理各种测试用例时的表现，并找出改进方向。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/LLMstestoracle/00_spring_boot/",
            "url": "https://enjundu.github.io/LLMstestoracle/00_spring_boot/",
            "title": "01_spring_boot",
            "date_published": "2024-07-02T18:07:35.000Z",
            "content_html": "<h1 id=\"代码测试\"><a class=\"anchor\" href=\"#代码测试\">#</a> 代码测试</h1>\n<h2 id=\"原测试代码\"><a class=\"anchor\" href=\"#原测试代码\">#</a> 原测试代码</h2>\n<p>地址： <code>spring-boot-main\\spring-boot-main\\spring-boot-tests\\spring-boot-smoke-tests\\spring-boot-smoke-test-data-jpa\\src\\main\\java\\smoketest\\data\\jpa\\service\\CityServiceImpl.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.data.jpa.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.City;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.HotelSummary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;cityService&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CityServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CityService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CityRepository cityRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HotelRepository hotelRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCityServiceImpl(CityRepository cityRepository, HotelRepository hotelRepository) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.cityRepository = cityRepository;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.hotelRepository = hotelRepository;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;City&gt; <span class=\"title function_\">findCities</span><span class=\"params\">(CitySearchCriteria criteria, Pageable pageable)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAssert.notNull(criteria, <span class=\"string\">&quot;Criteria must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> criteria.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!StringUtils.hasLength(name)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findAll(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">splitPos</span> <span class=\"operator\">=</span> name.lastIndexOf(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (splitPos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcountry = name.substring(splitPos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tname = name.substring(<span class=\"number\">0</span>, splitPos);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findByNameContainingAndCountryContainingAllIgnoringCase(name.trim(), country.trim(),</span><br><span class=\"line\">\t\t\t\tpageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> City <span class=\"title function_\">getCity</span><span class=\"params\">(String name, String country)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(name, <span class=\"string\">&quot;Name must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(country, <span class=\"string\">&quot;Country must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findByNameAndCountryAllIgnoringCase(name, country);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;HotelSummary&gt; <span class=\"title function_\">getHotels</span><span class=\"params\">(City city, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hotelRepository.findByCity(city, pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>spring-boot-main\\spring-boot-main\\spring-boot-tests\\spring-boot-smoke-tests\\spring-boot-smoke-test-data-jpa\\src\\main\\java\\smoketest\\data\\jpa\\service\\HotelServiceImpl.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.data.jpa.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.City;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Hotel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Rating;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.RatingCount;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Review;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.ReviewDetails;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;hotelService&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HotelServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HotelService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HotelRepository hotelRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReviewRepository reviewRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHotelServiceImpl(HotelRepository hotelRepository, ReviewRepository reviewRepository) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.hotelRepository = hotelRepository;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.reviewRepository = reviewRepository;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Hotel <span class=\"title function_\">getHotel</span><span class=\"params\">(City city, String name)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.hasLength(name, <span class=\"string\">&quot;Name must not be empty&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hotelRepository.findByCityAndName(city, name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;Review&gt; <span class=\"title function_\">getReviews</span><span class=\"params\">(Hotel hotel, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.findByHotel(hotel, pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Review <span class=\"title function_\">getReview</span><span class=\"params\">(Hotel hotel, <span class=\"type\">int</span> reviewNumber)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.findByHotelAndIndex(hotel, reviewNumber);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Review <span class=\"title function_\">addReview</span><span class=\"params\">(Hotel hotel, ReviewDetails details)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Review</span> <span class=\"variable\">review</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Review</span>(hotel, <span class=\"number\">1</span>, details);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.save(review);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ReviewsSummary <span class=\"title function_\">getReviewSummary</span><span class=\"params\">(Hotel hotel)</span> &#123;</span><br><span class=\"line\">\t\tList&lt;RatingCount&gt; ratingCounts = <span class=\"built_in\">this</span>.hotelRepository.findRatingCounts(hotel);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReviewsSummaryImpl</span>(ratingCounts);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReviewsSummaryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ReviewsSummary</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Rating, Long&gt; ratingCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tReviewsSummaryImpl(List&lt;RatingCount&gt; ratingCounts) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.ratingCount = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (RatingCount ratingCount : ratingCounts) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.ratingCount.put(ratingCount.getRating(), ratingCount.getCount());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getNumberOfReviewsWithRating</span><span class=\"params\">(Rating rating)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.ratingCount.get(rating);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (count != <span class=\"literal\">null</span>) ? count : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>spring-boot-main\\spring-boot-main\\spring-boot-system-tests\\spring-boot-image-tests\\src\\systemTest\\java\\org\\springframework\\boot\\image\\assertions\\ImageAssert.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2024 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.image.assertions;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.compress.archivers.tar.TarArchiveEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.compress.archivers.tar.TarArchiveInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.compress.utils.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.assertj.core.api.AbstractAssert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.assertj.core.api.Assertions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.assertj.core.api.ListAssert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.buildpack.platform.docker.DockerApi;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.buildpack.platform.docker.type.ImageReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.buildpack.platform.docker.type.Layer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.json.JsonContentAssert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AssertJ &#123;<span class=\"doctag\">@link</span> org.assertj.core.api.Assert&#125; for Docker image contents.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Scott Frederick</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageAssert</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractAssert</span>&lt;ImageAssert, ImageReference&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashMap&lt;String, Layer&gt; layers = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\tImageAssert(ImageReference imageReference) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">super</span>(imageReference, ImageAssert.class);</span><br><span class=\"line\">\t\tgetLayers();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">layer</span><span class=\"params\">(String layerDigest, Consumer&lt;LayerContentAssert&gt; assertConsumer)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.layers.containsKey(layerDigest)) &#123;</span><br><span class=\"line\">\t\t\tfailWithMessage(<span class=\"string\">&quot;Layer with digest &#x27;%s&#x27; not found in image&quot;</span>, layerDigest);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tassertConsumer.accept(<span class=\"keyword\">new</span> <span class=\"title class_\">LayerContentAssert</span>(<span class=\"built_in\">this</span>.layers.get(layerDigest)));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getLayers</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">DockerApi</span>().image().exportLayers(<span class=\"built_in\">this</span>.actual, (id, tarArchive) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Layer</span> <span class=\"variable\">layer</span> <span class=\"operator\">=</span> Layer.fromTarArchive(tarArchive);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.layers.put(layer.getId().toString(), layer);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Asserts for image layers.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LayerContentAssert</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractAssert</span>&lt;LayerContentAssert, Layer&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">LayerContentAssert</span><span class=\"params\">(Layer layer)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">super</span>(layer, LayerContentAssert.class);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> ListAssert&lt;String&gt; <span class=\"title function_\">entries</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;String&gt; entryNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.actual.writeTo(out);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> (<span class=\"type\">TarArchiveInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TarArchiveInputStream</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(out.toByteArray()))) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">TarArchiveEntry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> in.getNextEntry();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (entry != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!entry.isDirectory()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tentryNames.add(entry.getName().replaceFirst(<span class=\"string\">&quot;^/workspace/&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tentry = in.getNextEntry();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t\tfailWithMessage(<span class=\"string\">&quot;IOException while reading image layer archive: &#x27;%s&#x27;&quot;</span>, ex.getMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Assertions.assertThat(entryNames);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jsonEntry</span><span class=\"params\">(String name, Consumer&lt;JsonContentAssert&gt; assertConsumer)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.actual.writeTo(out);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> (<span class=\"type\">TarArchiveInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TarArchiveInputStream</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(out.toByteArray()))) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">TarArchiveEntry</span> <span class=\"variable\">entry</span> <span class=\"operator\">=</span> in.getNextEntry();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (entry != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (entry.getName().equals(name)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">entryOut</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">\t\t\t\t\t\t\tIOUtils.copy(in, entryOut);</span><br><span class=\"line\">\t\t\t\t\t\t\tassertConsumer.accept(<span class=\"keyword\">new</span> <span class=\"title class_\">JsonContentAssert</span>(LayerContentAssert.class, entryOut.toString()));</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tentry = in.getNextEntry();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfailWithMessage(<span class=\"string\">&quot;Expected JSON entry &#x27;%s&#x27; in layer with digest &#x27;%s&#x27;&quot;</span>, name, <span class=\"built_in\">this</span>.actual.getId());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t\tfailWithMessage(<span class=\"string\">&quot;IOException while reading image layer archive: &#x27;%s&#x27;&quot;</span>, ex.getMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>地址: <code>spring-boot-main\\spring-boot-main\\spring-boot-tests\\spring-boot-smoke-tests\\spring-boot-smoke-test-web-freemarker\\src\\test\\java\\smoketest\\freemarker\\SampleWebFreeMarkerApplicationTests.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.freemarker;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest.WebEnvironment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.ResponseEntity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.assertj.core.api.Assertions.assertThat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Basic integration tests for FreeMarker application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Wilkinson</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SampleWebFreeMarkerApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TestRestTemplate testRestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testFreeMarkerTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tResponseEntity&lt;String&gt; entity = <span class=\"built_in\">this</span>.testRestTemplate.getForEntity(<span class=\"string\">&quot;/&quot;</span>, String.class);</span><br><span class=\"line\">\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);</span><br><span class=\"line\">\t\tassertThat(entity.getBody()).contains(<span class=\"string\">&quot;Hello, Andy&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testFreeMarkerErrorTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpHeaders</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>();</span><br><span class=\"line\">\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));</span><br><span class=\"line\">\t\tHttpEntity&lt;String&gt; requestEntity = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpEntity</span>&lt;&gt;(headers);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResponseEntity&lt;String&gt; responseEntity = <span class=\"built_in\">this</span>.testRestTemplate.exchange(<span class=\"string\">&quot;/does-not-exist&quot;</span>, HttpMethod.GET,</span><br><span class=\"line\">\t\t\t\trequestEntity, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tassertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);</span><br><span class=\"line\">\t\tassertThat(responseEntity.getBody()).contains(<span class=\"string\">&quot;Something went wrong: 404 Not Found&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>地址:  <code>spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2023 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.devtools.filewatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Duration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Watches specific directories for file changes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Clement</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> FileChangeListener</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileSystemWatcher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Duration</span> <span class=\"variable\">DEFAULT_POLL_INTERVAL</span> <span class=\"operator\">=</span> Duration.ofMillis(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Duration</span> <span class=\"variable\">DEFAULT_QUIET_PERIOD</span> <span class=\"operator\">=</span> Duration.ofMillis(<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;FileChangeListener&gt; listeners = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> daemon;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> pollInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> quietPeriod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SnapshotStateRepository snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">remainingScans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;File, DirectorySnapshot&gt; directories = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Thread watchThread;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FileFilter triggerFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">monitor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(<span class=\"literal\">true</span>, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> daemon if a daemon thread used to monitor changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pollInterval the amount of time to wait between checking for changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> quietPeriod the amount of time required after a change has been detected to</span></span><br><span class=\"line\"><span class=\"comment\">\t * ensure that updates have completed</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">(<span class=\"type\">boolean</span> daemon, Duration pollInterval, Duration quietPeriod)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(daemon, pollInterval, quietPeriod, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> daemon if a daemon thread used to monitor changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pollInterval the amount of time to wait between checking for changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> quietPeriod the amount of time required after a change has been detected to</span></span><br><span class=\"line\"><span class=\"comment\">\t * ensure that updates have completed</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> snapshotStateRepository the snapshot state repository</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.4.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">(<span class=\"type\">boolean</span> daemon, Duration pollInterval, Duration quietPeriod,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tSnapshotStateRepository snapshotStateRepository)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(pollInterval, <span class=\"string\">&quot;PollInterval must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(quietPeriod, <span class=\"string\">&quot;QuietPeriod must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(pollInterval.toMillis() &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;PollInterval must be positive&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(quietPeriod.toMillis() &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;QuietPeriod must be positive&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(pollInterval.toMillis() &gt; quietPeriod.toMillis(),</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;PollInterval must be greater than QuietPeriod&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.daemon = daemon;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pollInterval = pollInterval.toMillis();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.quietPeriod = quietPeriod.toMillis();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.snapshotStateRepository = (snapshotStateRepository != <span class=\"literal\">null</span>) ? snapshotStateRepository</span><br><span class=\"line\">\t\t\t\t: SnapshotStateRepository.NONE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add listener for file change events. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fileChangeListener the listener to add</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addListener</span><span class=\"params\">(FileChangeListener fileChangeListener)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(fileChangeListener, <span class=\"string\">&quot;FileChangeListener must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcheckNotStarted();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.listeners.add(fileChangeListener);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add source directories to monitor. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> directories the directories to monitor</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSourceDirectories</span><span class=\"params\">(Iterable&lt;File&gt; directories)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(directories, <span class=\"string\">&quot;Directories must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tdirectories.forEach(<span class=\"built_in\">this</span>::addSourceDirectory);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add a source directory to monitor. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> directory the directory to monitor</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSourceDirectory</span><span class=\"params\">(File directory)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(directory, <span class=\"string\">&quot;Directory must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(!directory.isFile(), () -&gt; <span class=\"string\">&quot;Directory &#x27;&quot;</span> + directory + <span class=\"string\">&quot;&#x27; must not be a file&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcheckNotStarted();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories.put(directory, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Set an optional &#123;<span class=\"doctag\">@link</span> FileFilter&#125; used to limit the files that trigger a change.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> triggerFilter a trigger filter or null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTriggerFilter</span><span class=\"params\">(FileFilter triggerFilter)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.triggerFilter = triggerFilter;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkNotStarted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tAssert.state(<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>, <span class=\"string\">&quot;FileSystemWatcher already started&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Start monitoring the source directory for changes.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcreateOrRestoreInitialSnapshots();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tMap&lt;File, DirectorySnapshot&gt; localDirectories = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"built_in\">this</span>.directories);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Watcher</span> <span class=\"variable\">watcher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(<span class=\"built_in\">this</span>.remainingScans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"built_in\">this</span>.listeners), <span class=\"built_in\">this</span>.triggerFilter,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">this</span>.pollInterval, <span class=\"built_in\">this</span>.quietPeriod, localDirectories, <span class=\"built_in\">this</span>.snapshotStateRepository);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(watcher);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.setName(<span class=\"string\">&quot;File Watcher&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.setDaemon(<span class=\"built_in\">this</span>.daemon);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.start();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createOrRestoreInitialSnapshots</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tMap&lt;File, DirectorySnapshot&gt; restored = (Map&lt;File, DirectorySnapshot&gt;) <span class=\"built_in\">this</span>.snapshotStateRepository.restore();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.directories.replaceAll((f, v) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">restoredSnapshot</span> <span class=\"operator\">=</span> (restored != <span class=\"literal\">null</span>) ? restored.get(f) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (restoredSnapshot != <span class=\"literal\">null</span>) ? restoredSnapshot : <span class=\"keyword\">new</span> <span class=\"title class_\">DirectorySnapshot</span>(f);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Stop monitoring the source directories.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tstopAfter(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Stop monitoring the source directories.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> remainingScans the number of remaining scans</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">stopAfter</span><span class=\"params\">(<span class=\"type\">int</span> remainingScans)</span> &#123;</span><br><span class=\"line\">\t\tThread thread;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tthread = <span class=\"built_in\">this</span>.watchThread;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.remainingScans.set(remainingScans);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remainingScans &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tthread.interrupt();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.watchThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span> &amp;&amp; Thread.currentThread() != thread) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tthread.join();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException ex) &#123;</span><br><span class=\"line\">\t\t\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger remainingScans;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;FileChangeListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FileFilter triggerFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> pollInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> quietPeriod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;File, DirectorySnapshot&gt; directories;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SnapshotStateRepository snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"title function_\">Watcher</span><span class=\"params\">(AtomicInteger remainingScans, List&lt;FileChangeListener&gt; listeners, FileFilter triggerFilter,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">long</span> pollInterval, <span class=\"type\">long</span> quietPeriod, Map&lt;File, DirectorySnapshot&gt; directories,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tSnapshotStateRepository snapshotStateRepository)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.remainingScans = remainingScans;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.listeners = listeners;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.triggerFilter = triggerFilter;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.pollInterval = pollInterval;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.quietPeriod = quietPeriod;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories = directories;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.snapshotStateRepository = snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">remainingScans</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.remainingScans.get();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (remainingScans &gt; <span class=\"number\">0</span> || remainingScans == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (remainingScans &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">this</span>.remainingScans.decrementAndGet();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tscan();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (InterruptedException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tremainingScans = <span class=\"built_in\">this</span>.remainingScans.get();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scan</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"built_in\">this</span>.pollInterval - <span class=\"built_in\">this</span>.quietPeriod);</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; previous;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; current = <span class=\"built_in\">this</span>.directories;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\t\tprevious = current;</span><br><span class=\"line\">\t\t\t\tcurrent = getCurrentSnapshots();</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"built_in\">this</span>.quietPeriod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (isDifferent(previous, current));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDifferent(<span class=\"built_in\">this</span>.directories, current)) &#123;</span><br><span class=\"line\">\t\t\t\tupdateSnapshots(current.values());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isDifferent</span><span class=\"params\">(Map&lt;File, DirectorySnapshot&gt; previous, Map&lt;File, DirectorySnapshot&gt; current)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!previous.keySet().equals(current.keySet())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;File, DirectorySnapshot&gt; entry : previous.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">previousDirectory</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">currentDirectory</span> <span class=\"operator\">=</span> current.get(entry.getKey());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!previousDirectory.equals(currentDirectory, <span class=\"built_in\">this</span>.triggerFilter)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;File, DirectorySnapshot&gt; <span class=\"title function_\">getCurrentSnapshots</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; snapshots = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (File directory : <span class=\"built_in\">this</span>.directories.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\tsnapshots.put(directory, <span class=\"keyword\">new</span> <span class=\"title class_\">DirectorySnapshot</span>(directory));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> snapshots;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSnapshots</span><span class=\"params\">(Collection&lt;DirectorySnapshot&gt; snapshots)</span> &#123;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; updated = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\tSet&lt;ChangedFiles&gt; changeSet = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (DirectorySnapshot snapshot : snapshots) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">previous</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.directories.get(snapshot.getDirectory());</span><br><span class=\"line\">\t\t\t\tupdated.put(snapshot.getDirectory(), snapshot);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ChangedFiles</span> <span class=\"variable\">changedFiles</span> <span class=\"operator\">=</span> previous.getChangedFiles(snapshot, <span class=\"built_in\">this</span>.triggerFilter);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!changedFiles.getFiles().isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\tchangeSet.add(changedFiles);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories = updated;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.snapshotStateRepository.save(updated);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!changeSet.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tfireListeners(Collections.unmodifiableSet(changeSet));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fireListeners</span><span class=\"params\">(Set&lt;ChangedFiles&gt; changeSet)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (FileChangeListener listener : <span class=\"built_in\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\t\tlistener.onChange(changeSet);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>地址: <code>spring-boot-project/spring-boot-tools/spring-boot-buildpack-platform/src/main/java/org/springframework/boot/buildpack/platform/build/LifecycleVersion.java</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2023 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.buildpack.platform.build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A lifecycle version number comprised of a major, minor and patch value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleVersion</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;LifecycleVersion&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;LifecycleVersion&gt; COMPARATOR = Comparator.comparingInt(LifecycleVersion::getMajor)</span><br><span class=\"line\">\t\t.thenComparingInt(LifecycleVersion::getMinor)</span><br><span class=\"line\">\t\t.thenComparing(LifecycleVersion::getPatch);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> major;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> minor;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> patch;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLifecycleVersion(<span class=\"type\">int</span> major, <span class=\"type\">int</span> minor, <span class=\"type\">int</span> patch) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.major = major;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.minor = minor;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.patch = patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span> || getClass() != obj.getClass()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">LifecycleVersion</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> (LifecycleVersion) obj;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.major == other.major;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.minor == other.minor;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.patch == other.patch;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">prime</span> <span class=\"operator\">=</span> <span class=\"number\">31</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.major;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.minor;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;v&quot;</span> + <span class=\"built_in\">this</span>.major + <span class=\"string\">&quot;.&quot;</span> + <span class=\"built_in\">this</span>.minor + <span class=\"string\">&quot;.&quot;</span> + <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return if this version is greater than or equal to the specified version.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> other the version to compare</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this version is greater than or equal to the specified</span></span><br><span class=\"line\"><span class=\"comment\">\t * version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEqualOrGreaterThan</span><span class=\"params\">(LifecycleVersion other)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> compareTo(other) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(LifecycleVersion other)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> COMPARATOR.compare(<span class=\"built_in\">this</span>, other);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the major version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the major version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getMajor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the minor version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the minor version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getMinor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.minor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the patch version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the patch version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getPatch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Factory method to parse a string into a &#123;<span class=\"doctag\">@link</span> LifecycleVersion&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value the value to parse.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the corresponding &#123;<span class=\"doctag\">@link</span> LifecycleVersion&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> IllegalArgumentException if the value could not be parsed</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> LifecycleVersion <span class=\"title function_\">parse</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">\t\tAssert.hasText(value, <span class=\"string\">&quot;Value must not be empty&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value.startsWith(<span class=\"string\">&quot;v&quot;</span>) || value.startsWith(<span class=\"string\">&quot;V&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tvalue = value.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] components = value.split(<span class=\"string\">&quot;\\\\.&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(components.length &lt;= <span class=\"number\">3</span>, <span class=\"string\">&quot;Malformed version number &#x27;&quot;</span> + value + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] versions = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; components.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tversions[i] = Integer.parseInt(components[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (NumberFormatException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Malformed version number &#x27;&quot;</span> + value + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleVersion</span>(versions[<span class=\"number\">0</span>], versions[<span class=\"number\">1</span>], versions[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"投喂给llm的代码以chatgpt35为例\"><a class=\"anchor\" href=\"#投喂给llm的代码以chatgpt35为例\">#</a> 投喂给 LLM 的代码，以 chatgpt3.5 为例</h2>\n<h3 id=\"cityservicelmpl\"><a class=\"anchor\" href=\"#cityservicelmpl\">#</a> CityServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.data.jpa.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.City;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.HotelSummary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;cityService&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CityServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CityService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CityRepository cityRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HotelRepository hotelRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCityServiceImpl(CityRepository cityRepository, HotelRepository hotelRepository) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.cityRepository = cityRepository;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.hotelRepository = hotelRepository;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;City&gt; <span class=\"title function_\">findCities</span><span class=\"params\">(CitySearchCriteria criteria, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> criteria.getName();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!StringUtils.hasLength(name)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findAll(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">splitPos</span> <span class=\"operator\">=</span> name.lastIndexOf(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (splitPos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcountry = name.substring(splitPos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tname = name.substring(<span class=\"number\">0</span>, splitPos);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findByNameContainingAndCountryContainingAllIgnoringCase(name.trim(), country.trim(),</span><br><span class=\"line\">\t\t\t\tpageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> City <span class=\"title function_\">getCity</span><span class=\"params\">(String name, String country)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findByNameAndCountryAllIgnoringCase(name, country);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;HotelSummary&gt; <span class=\"title function_\">getHotels</span><span class=\"params\">(City city, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hotelRepository.findByCity(city, pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"hotelservicelmpl\"><a class=\"anchor\" href=\"#hotelservicelmpl\">#</a> HotelServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.data.jpa.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.City;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Hotel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Rating;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.RatingCount;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Review;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.ReviewDetails;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;hotelService&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HotelServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HotelService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HotelRepository hotelRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReviewRepository reviewRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHotelServiceImpl(HotelRepository hotelRepository, ReviewRepository reviewRepository) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.hotelRepository = hotelRepository;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.reviewRepository = reviewRepository;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Hotel <span class=\"title function_\">getHotel</span><span class=\"params\">(City city, String name)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hotelRepository.findByCityAndName(city, name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;Review&gt; <span class=\"title function_\">getReviews</span><span class=\"params\">(Hotel hotel, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.findByHotel(hotel, pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Review <span class=\"title function_\">getReview</span><span class=\"params\">(Hotel hotel, <span class=\"type\">int</span> reviewNumber)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.findByHotelAndIndex(hotel, reviewNumber);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Review <span class=\"title function_\">addReview</span><span class=\"params\">(Hotel hotel, ReviewDetails details)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Review</span> <span class=\"variable\">review</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Review</span>(hotel, <span class=\"number\">1</span>, details);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.save(review);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ReviewsSummary <span class=\"title function_\">getReviewSummary</span><span class=\"params\">(Hotel hotel)</span> &#123;</span><br><span class=\"line\">\t\tList&lt;RatingCount&gt; ratingCounts = <span class=\"built_in\">this</span>.hotelRepository.findRatingCounts(hotel);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReviewsSummaryImpl</span>(ratingCounts);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReviewsSummaryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ReviewsSummary</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Rating, Long&gt; ratingCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tReviewsSummaryImpl(List&lt;RatingCount&gt; ratingCounts) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.ratingCount = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (RatingCount ratingCount : ratingCounts) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.ratingCount.put(ratingCount.getRating(), ratingCount.getCount());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getNumberOfReviewsWithRating</span><span class=\"params\">(Rating rating)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.ratingCount.get(rating);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (count != <span class=\"literal\">null</span>) ? count : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"samplewebfreemarkerapplicationtests\"><a class=\"anchor\" href=\"#samplewebfreemarkerapplicationtests\">#</a> SampleWebFreeMarkerApplicationTests</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.freemarker;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest.WebEnvironment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.ResponseEntity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.assertj.core.api.Assertions.assertThat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Basic integration tests for FreeMarker application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Wilkinson</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SampleWebFreeMarkerApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TestRestTemplate testRestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testFreeMarkerTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tResponseEntity&lt;String&gt; entity = <span class=\"built_in\">this</span>.testRestTemplate.getForEntity(<span class=\"string\">&quot;/&quot;</span>, String.class);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testFreeMarkerErrorTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpHeaders</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>();</span><br><span class=\"line\">\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));</span><br><span class=\"line\">\t\tHttpEntity&lt;String&gt; requestEntity = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpEntity</span>&lt;&gt;(headers);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResponseEntity&lt;String&gt; responseEntity = <span class=\"built_in\">this</span>.testRestTemplate.exchange(<span class=\"string\">&quot;/does-not-exist&quot;</span>, HttpMethod.GET,</span><br><span class=\"line\">\t\t\t\trequestEntity, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"hotelserviceimpl\"><a class=\"anchor\" href=\"#hotelserviceimpl\">#</a> HotelServiceImpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2023 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.devtools.filewatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Duration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Watches specific directories for file changes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Clement</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> FileChangeListener</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileSystemWatcher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Duration</span> <span class=\"variable\">DEFAULT_POLL_INTERVAL</span> <span class=\"operator\">=</span> Duration.ofMillis(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Duration</span> <span class=\"variable\">DEFAULT_QUIET_PERIOD</span> <span class=\"operator\">=</span> Duration.ofMillis(<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;FileChangeListener&gt; listeners = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> daemon;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> pollInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> quietPeriod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SnapshotStateRepository snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">remainingScans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;File, DirectorySnapshot&gt; directories = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Thread watchThread;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FileFilter triggerFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">monitor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(<span class=\"literal\">true</span>, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> daemon if a daemon thread used to monitor changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pollInterval the amount of time to wait between checking for changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> quietPeriod the amount of time required after a change has been detected to</span></span><br><span class=\"line\"><span class=\"comment\">\t * ensure that updates have completed</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">(<span class=\"type\">boolean</span> daemon, Duration pollInterval, Duration quietPeriod)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(daemon, pollInterval, quietPeriod, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> daemon if a daemon thread used to monitor changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pollInterval the amount of time to wait between checking for changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> quietPeriod the amount of time required after a change has been detected to</span></span><br><span class=\"line\"><span class=\"comment\">\t * ensure that updates have completed</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> snapshotStateRepository the snapshot state repository</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.4.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">(<span class=\"type\">boolean</span> daemon, Duration pollInterval, Duration quietPeriod,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tSnapshotStateRepository snapshotStateRepository)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.daemon = daemon;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pollInterval = pollInterval.toMillis();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.quietPeriod = quietPeriod.toMillis();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.snapshotStateRepository = (snapshotStateRepository != <span class=\"literal\">null</span>) ? snapshotStateRepository</span><br><span class=\"line\">\t\t\t\t: SnapshotStateRepository.NONE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add listener for file change events. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fileChangeListener the listener to add</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addListener</span><span class=\"params\">(FileChangeListener fileChangeListener)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcheckNotStarted();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.listeners.add(fileChangeListener);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add source directories to monitor. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> directories the directories to monitor</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSourceDirectories</span><span class=\"params\">(Iterable&lt;File&gt; directories)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tdirectories.forEach(<span class=\"built_in\">this</span>::addSourceDirectory);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add a source directory to monitor. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> directory the directory to monitor</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSourceDirectory</span><span class=\"params\">(File directory)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcheckNotStarted();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories.put(directory, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Set an optional &#123;<span class=\"doctag\">@link</span> FileFilter&#125; used to limit the files that trigger a change.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> triggerFilter a trigger filter or null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTriggerFilter</span><span class=\"params\">(FileFilter triggerFilter)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.triggerFilter = triggerFilter;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkNotStarted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tAssert.state(<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>, <span class=\"string\">&quot;FileSystemWatcher already started&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Start monitoring the source directory for changes.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcreateOrRestoreInitialSnapshots();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tMap&lt;File, DirectorySnapshot&gt; localDirectories = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"built_in\">this</span>.directories);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Watcher</span> <span class=\"variable\">watcher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(<span class=\"built_in\">this</span>.remainingScans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"built_in\">this</span>.listeners), <span class=\"built_in\">this</span>.triggerFilter,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">this</span>.pollInterval, <span class=\"built_in\">this</span>.quietPeriod, localDirectories, <span class=\"built_in\">this</span>.snapshotStateRepository);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(watcher);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.setName(<span class=\"string\">&quot;File Watcher&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.setDaemon(<span class=\"built_in\">this</span>.daemon);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.start();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createOrRestoreInitialSnapshots</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tMap&lt;File, DirectorySnapshot&gt; restored = (Map&lt;File, DirectorySnapshot&gt;) <span class=\"built_in\">this</span>.snapshotStateRepository.restore();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.directories.replaceAll((f, v) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">restoredSnapshot</span> <span class=\"operator\">=</span> (restored != <span class=\"literal\">null</span>) ? restored.get(f) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (restoredSnapshot != <span class=\"literal\">null</span>) ? restoredSnapshot : <span class=\"keyword\">new</span> <span class=\"title class_\">DirectorySnapshot</span>(f);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Stop monitoring the source directories.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tstopAfter(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Stop monitoring the source directories.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> remainingScans the number of remaining scans</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">stopAfter</span><span class=\"params\">(<span class=\"type\">int</span> remainingScans)</span> &#123;</span><br><span class=\"line\">\t\tThread thread;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tthread = <span class=\"built_in\">this</span>.watchThread;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.remainingScans.set(remainingScans);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remainingScans &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tthread.interrupt();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.watchThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span> &amp;&amp; Thread.currentThread() != thread) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tthread.join();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException ex) &#123;</span><br><span class=\"line\">\t\t\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger remainingScans;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;FileChangeListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FileFilter triggerFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> pollInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> quietPeriod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;File, DirectorySnapshot&gt; directories;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SnapshotStateRepository snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"title function_\">Watcher</span><span class=\"params\">(AtomicInteger remainingScans, List&lt;FileChangeListener&gt; listeners, FileFilter triggerFilter,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">long</span> pollInterval, <span class=\"type\">long</span> quietPeriod, Map&lt;File, DirectorySnapshot&gt; directories,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tSnapshotStateRepository snapshotStateRepository)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.remainingScans = remainingScans;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.listeners = listeners;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.triggerFilter = triggerFilter;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.pollInterval = pollInterval;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.quietPeriod = quietPeriod;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories = directories;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.snapshotStateRepository = snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">remainingScans</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.remainingScans.get();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (remainingScans &gt; <span class=\"number\">0</span> || remainingScans == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (remainingScans &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">this</span>.remainingScans.decrementAndGet();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tscan();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (InterruptedException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tremainingScans = <span class=\"built_in\">this</span>.remainingScans.get();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scan</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"built_in\">this</span>.pollInterval - <span class=\"built_in\">this</span>.quietPeriod);</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; previous;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; current = <span class=\"built_in\">this</span>.directories;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\t\tprevious = current;</span><br><span class=\"line\">\t\t\t\tcurrent = getCurrentSnapshots();</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"built_in\">this</span>.quietPeriod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (isDifferent(previous, current));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDifferent(<span class=\"built_in\">this</span>.directories, current)) &#123;</span><br><span class=\"line\">\t\t\t\tupdateSnapshots(current.values());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isDifferent</span><span class=\"params\">(Map&lt;File, DirectorySnapshot&gt; previous, Map&lt;File, DirectorySnapshot&gt; current)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!previous.keySet().equals(current.keySet())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;File, DirectorySnapshot&gt; entry : previous.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">previousDirectory</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">currentDirectory</span> <span class=\"operator\">=</span> current.get(entry.getKey());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!previousDirectory.equals(currentDirectory, <span class=\"built_in\">this</span>.triggerFilter)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;File, DirectorySnapshot&gt; <span class=\"title function_\">getCurrentSnapshots</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; snapshots = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (File directory : <span class=\"built_in\">this</span>.directories.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\tsnapshots.put(directory, <span class=\"keyword\">new</span> <span class=\"title class_\">DirectorySnapshot</span>(directory));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> snapshots;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSnapshots</span><span class=\"params\">(Collection&lt;DirectorySnapshot&gt; snapshots)</span> &#123;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; updated = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\tSet&lt;ChangedFiles&gt; changeSet = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (DirectorySnapshot snapshot : snapshots) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">previous</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.directories.get(snapshot.getDirectory());</span><br><span class=\"line\">\t\t\t\tupdated.put(snapshot.getDirectory(), snapshot);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ChangedFiles</span> <span class=\"variable\">changedFiles</span> <span class=\"operator\">=</span> previous.getChangedFiles(snapshot, <span class=\"built_in\">this</span>.triggerFilter);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!changedFiles.getFiles().isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\tchangeSet.add(changedFiles);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories = updated;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.snapshotStateRepository.save(updated);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!changeSet.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tfireListeners(Collections.unmodifiableSet(changeSet));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fireListeners</span><span class=\"params\">(Set&lt;ChangedFiles&gt; changeSet)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (FileChangeListener listener : <span class=\"built_in\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\t\tlistener.onChange(changeSet);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"lifecycleversion\"><a class=\"anchor\" href=\"#lifecycleversion\">#</a> LifecycleVersion</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2023 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.buildpack.platform.build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A lifecycle version number comprised of a major, minor and patch value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleVersion</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;LifecycleVersion&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;LifecycleVersion&gt; COMPARATOR = Comparator.comparingInt(LifecycleVersion::getMajor)</span><br><span class=\"line\">\t\t.thenComparingInt(LifecycleVersion::getMinor)</span><br><span class=\"line\">\t\t.thenComparing(LifecycleVersion::getPatch);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> major;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> minor;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> patch;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLifecycleVersion(<span class=\"type\">int</span> major, <span class=\"type\">int</span> minor, <span class=\"type\">int</span> patch) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.major = major;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.minor = minor;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.patch = patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span> || getClass() != obj.getClass()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">LifecycleVersion</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> (LifecycleVersion) obj;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.major == other.major;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.minor == other.minor;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.patch == other.patch;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">prime</span> <span class=\"operator\">=</span> <span class=\"number\">31</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.major;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.minor;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;v&quot;</span> + <span class=\"built_in\">this</span>.major + <span class=\"string\">&quot;.&quot;</span> + <span class=\"built_in\">this</span>.minor + <span class=\"string\">&quot;.&quot;</span> + <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return if this version is greater than or equal to the specified version.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> other the version to compare</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this version is greater than or equal to the specified</span></span><br><span class=\"line\"><span class=\"comment\">\t * version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEqualOrGreaterThan</span><span class=\"params\">(LifecycleVersion other)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> compareTo(other) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(LifecycleVersion other)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> COMPARATOR.compare(<span class=\"built_in\">this</span>, other);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the major version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the major version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getMajor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the minor version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the minor version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getMinor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.minor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the patch version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the patch version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getPatch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Factory method to parse a string into a &#123;<span class=\"doctag\">@link</span> LifecycleVersion&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value the value to parse.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the corresponding &#123;<span class=\"doctag\">@link</span> LifecycleVersion&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> IllegalArgumentException if the value could not be parsed</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> LifecycleVersion <span class=\"title function_\">parse</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value.startsWith(<span class=\"string\">&quot;v&quot;</span>) || value.startsWith(<span class=\"string\">&quot;V&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tvalue = value.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] components = value.split(<span class=\"string\">&quot;\\\\.&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] versions = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; components.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tversions[i] = Integer.parseInt(components[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (NumberFormatException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Malformed version number &#x27;&quot;</span> + value + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleVersion</span>(versions[<span class=\"number\">0</span>], versions[<span class=\"number\">1</span>], versions[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"llm产出的代码\"><a class=\"anchor\" href=\"#llm产出的代码\">#</a> LLM 产出的代码</h2>\n<h3 id=\"cityservicelmpl-2\"><a class=\"anchor\" href=\"#cityservicelmpl-2\">#</a> CityServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.data.jpa.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.City;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.HotelSummary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;cityService&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CityServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CityService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CityRepository cityRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HotelRepository hotelRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCityServiceImpl(CityRepository cityRepository, HotelRepository hotelRepository) &#123;</span><br><span class=\"line\">\t\tAssert.notNull(cityRepository, <span class=\"string\">&quot;CityRepository must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(hotelRepository, <span class=\"string\">&quot;HotelRepository must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.cityRepository = cityRepository;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.hotelRepository = hotelRepository;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;City&gt; <span class=\"title function_\">findCities</span><span class=\"params\">(CitySearchCriteria criteria, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(criteria, <span class=\"string\">&quot;CitySearchCriteria must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(pageable, <span class=\"string\">&quot;Pageable must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> criteria.getName();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!StringUtils.hasLength(name)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findAll(<span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">splitPos</span> <span class=\"operator\">=</span> name.lastIndexOf(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (splitPos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tcountry = name.substring(splitPos + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tname = name.substring(<span class=\"number\">0</span>, splitPos);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findByNameContainingAndCountryContainingAllIgnoringCase(name.trim(), country.trim(), pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> City <span class=\"title function_\">getCity</span><span class=\"params\">(String name, String country)</span> &#123;</span><br><span class=\"line\">\t\tAssert.hasLength(name, <span class=\"string\">&quot;Name must not be empty&quot;</span>);</span><br><span class=\"line\">\t\tAssert.hasLength(country, <span class=\"string\">&quot;Country must not be empty&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.cityRepository.findByNameAndCountryAllIgnoringCase(name, country);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;HotelSummary&gt; <span class=\"title function_\">getHotels</span><span class=\"params\">(City city, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(pageable, <span class=\"string\">&quot;Pageable must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hotelRepository.findByCity(city, pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"hotelservicelmpl-2\"><a class=\"anchor\" href=\"#hotelservicelmpl-2\">#</a> HotelServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.data.jpa.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.City;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Hotel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Rating;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.RatingCount;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.Review;</span><br><span class=\"line\"><span class=\"keyword\">import</span> smoketest.data.jpa.domain.ReviewDetails;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Page;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.domain.Pageable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;hotelService&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HotelServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HotelService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HotelRepository hotelRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReviewRepository reviewRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHotelServiceImpl(HotelRepository hotelRepository, ReviewRepository reviewRepository) &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotelRepository, <span class=\"string\">&quot;HotelRepository must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(reviewRepository, <span class=\"string\">&quot;ReviewRepository must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.hotelRepository = hotelRepository;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.reviewRepository = reviewRepository;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Hotel <span class=\"title function_\">getHotel</span><span class=\"params\">(City city, String name)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.hasLength(name, <span class=\"string\">&quot;Name must not be empty&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.hotelRepository.findByCityAndName(city, name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Page&lt;Review&gt; <span class=\"title function_\">getReviews</span><span class=\"params\">(Hotel hotel, Pageable pageable)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(pageable, <span class=\"string\">&quot;Pageable must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.findByHotel(hotel, pageable);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Review <span class=\"title function_\">getReview</span><span class=\"params\">(Hotel hotel, <span class=\"type\">int</span> reviewNumber)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(reviewNumber &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;Review number must be greater than 0&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.findByHotelAndIndex(hotel, reviewNumber);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Review <span class=\"title function_\">addReview</span><span class=\"params\">(Hotel hotel, ReviewDetails details)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">\t\tAssert.notNull(details, <span class=\"string\">&quot;ReviewDetails must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">Review</span> <span class=\"variable\">review</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Review</span>(hotel, <span class=\"number\">1</span>, details);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.reviewRepository.save(review);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ReviewsSummary <span class=\"title function_\">getReviewSummary</span><span class=\"params\">(Hotel hotel)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;RatingCount&gt; ratingCounts = <span class=\"built_in\">this</span>.hotelRepository.findRatingCounts(hotel);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReviewsSummaryImpl</span>(ratingCounts);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReviewsSummaryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ReviewsSummary</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Rating, Long&gt; ratingCount;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tReviewsSummaryImpl(List&lt;RatingCount&gt; ratingCounts) &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(ratingCounts, <span class=\"string\">&quot;RatingCounts must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.ratingCount = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (RatingCount ratingCount : ratingCounts) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.ratingCount.put(ratingCount.getRating(), ratingCount.getCount());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getNumberOfReviewsWithRating</span><span class=\"params\">(Rating rating)</span> &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(rating, <span class=\"string\">&quot;Rating must not be null&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">Long</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.ratingCount.get(rating);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (count != <span class=\"literal\">null</span>) ? count : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"samplewebfreemarkerapplicationtests-2\"><a class=\"anchor\" href=\"#samplewebfreemarkerapplicationtests-2\">#</a> SampleWebFreeMarkerApplicationTests</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2019 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> smoketest.freemarker;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest.WebEnvironment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.web.client.TestRestTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpHeaders;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.MediaType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.ResponseEntity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.assertj.core.api.Assertions.assertThat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Basic integration tests for FreeMarker application.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Wilkinson</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SampleWebFreeMarkerApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> TestRestTemplate testRestTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testFreeMarkerTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tResponseEntity&lt;String&gt; entity = <span class=\"built_in\">this</span>.testRestTemplate.getForEntity(<span class=\"string\">&quot;/&quot;</span>, String.class);</span><br><span class=\"line\">\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);</span><br><span class=\"line\">\t\tassertThat(entity.getBody()).contains(<span class=\"string\">&quot;Expected Content&quot;</span>); <span class=\"comment\">// Replace with expected content</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">testFreeMarkerErrorTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpHeaders</span> <span class=\"variable\">headers</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>();</span><br><span class=\"line\">\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));</span><br><span class=\"line\">\t\tHttpEntity&lt;String&gt; requestEntity = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpEntity</span>&lt;&gt;(headers);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResponseEntity&lt;String&gt; responseEntity = <span class=\"built_in\">this</span>.testRestTemplate.exchange(<span class=\"string\">&quot;/does-not-exist&quot;</span>, HttpMethod.GET,</span><br><span class=\"line\">\t\t\t\trequestEntity, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tassertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);</span><br><span class=\"line\">\t\tassertThat(responseEntity.getBody()).contains(<span class=\"string\">&quot;Error Page Content&quot;</span>); <span class=\"comment\">// Replace with expected error content</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filesystemwatcher\"><a class=\"anchor\" href=\"#filesystemwatcher\">#</a> FileSystemWatcher</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2023 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.devtools.filewatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.Duration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedHashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Watches specific directories for file changes.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Clement</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.3.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> FileChangeListener</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileSystemWatcher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Duration</span> <span class=\"variable\">DEFAULT_POLL_INTERVAL</span> <span class=\"operator\">=</span> Duration.ofMillis(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Duration</span> <span class=\"variable\">DEFAULT_QUIET_PERIOD</span> <span class=\"operator\">=</span> Duration.ofMillis(<span class=\"number\">400</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;FileChangeListener&gt; listeners = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> daemon;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> pollInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> quietPeriod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SnapshotStateRepository snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">remainingScans</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;File, DirectorySnapshot&gt; directories = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Thread watchThread;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> FileFilter triggerFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">monitor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(<span class=\"literal\">true</span>, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> daemon if a daemon thread used to monitor changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pollInterval the amount of time to wait between checking for changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> quietPeriod the amount of time required after a change has been detected to</span></span><br><span class=\"line\"><span class=\"comment\">\t * ensure that updates have completed</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">(<span class=\"type\">boolean</span> daemon, Duration pollInterval, Duration quietPeriod)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>(daemon, pollInterval, quietPeriod, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Create a new &#123;<span class=\"doctag\">@link</span> FileSystemWatcher&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> daemon if a daemon thread used to monitor changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pollInterval the amount of time to wait between checking for changes</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> quietPeriod the amount of time required after a change has been detected to</span></span><br><span class=\"line\"><span class=\"comment\">\t * ensure that updates have completed</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> snapshotStateRepository the snapshot state repository</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 2.4.0</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">FileSystemWatcher</span><span class=\"params\">(<span class=\"type\">boolean</span> daemon, Duration pollInterval, Duration quietPeriod,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tSnapshotStateRepository snapshotStateRepository)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.daemon = daemon;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pollInterval = pollInterval.toMillis();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.quietPeriod = quietPeriod.toMillis();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.snapshotStateRepository = (snapshotStateRepository != <span class=\"literal\">null</span>) ? snapshotStateRepository</span><br><span class=\"line\">\t\t\t\t: SnapshotStateRepository.NONE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add listener for file change events. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fileChangeListener the listener to add</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addListener</span><span class=\"params\">(FileChangeListener fileChangeListener)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcheckNotStarted();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.listeners.add(fileChangeListener);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add source directories to monitor. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> directories the directories to monitor</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSourceDirectories</span><span class=\"params\">(Iterable&lt;File&gt; directories)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(directories, <span class=\"string\">&quot;Directories must not be null&quot;</span>);</span><br><span class=\"line\">\t\t\tdirectories.forEach(<span class=\"built_in\">this</span>::addSourceDirectory);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Add a source directory to monitor. Cannot be called after the watcher has been</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> #start() started&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> directory the directory to monitor</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSourceDirectory</span><span class=\"params\">(File directory)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(directory, <span class=\"string\">&quot;Directory must not be null&quot;</span>);</span><br><span class=\"line\">\t\t\tAssert.isTrue(directory.isDirectory(), <span class=\"string\">&quot;Directory &#x27;&quot;</span> + directory + <span class=\"string\">&quot;&#x27; must exist and be a directory&quot;</span>);</span><br><span class=\"line\">\t\t\tcheckNotStarted();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories.put(directory, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Set an optional &#123;<span class=\"doctag\">@link</span> FileFilter&#125; used to limit the files that trigger a change.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> triggerFilter a trigger filter or null</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTriggerFilter</span><span class=\"params\">(FileFilter triggerFilter)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.triggerFilter = triggerFilter;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkNotStarted</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tAssert.state(<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>, <span class=\"string\">&quot;FileSystemWatcher already started&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Start monitoring the source directory for changes.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tcreateOrRestoreInitialSnapshots();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tMap&lt;File, DirectorySnapshot&gt; localDirectories = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(<span class=\"built_in\">this</span>.directories);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Watcher</span> <span class=\"variable\">watcher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(<span class=\"built_in\">this</span>.remainingScans, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"built_in\">this</span>.listeners), <span class=\"built_in\">this</span>.triggerFilter,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">this</span>.pollInterval, <span class=\"built_in\">this</span>.quietPeriod, localDirectories, <span class=\"built_in\">this</span>.snapshotStateRepository);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(watcher);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.setName(<span class=\"string\">&quot;File Watcher&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.setDaemon(<span class=\"built_in\">this</span>.daemon);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.watchThread.start();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createOrRestoreInitialSnapshots</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tMap&lt;File, DirectorySnapshot&gt; restored = (Map&lt;File, DirectorySnapshot&gt;) <span class=\"built_in\">this</span>.snapshotStateRepository.restore();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.directories.replaceAll((f, v) -&gt; &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">restoredSnapshot</span> <span class=\"operator\">=</span> (restored != <span class=\"literal\">null</span>) ? restored.get(f) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (restoredSnapshot != <span class=\"literal\">null</span>) ? restoredSnapshot : <span class=\"keyword\">new</span> <span class=\"title class_\">DirectorySnapshot</span>(f);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Stop monitoring the source directories.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\tstopAfter(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Stop monitoring the source directories.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> remainingScans the number of remaining scans</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">stopAfter</span><span class=\"params\">(<span class=\"type\">int</span> remainingScans)</span> &#123;</span><br><span class=\"line\">\t\tThread thread;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">\t\t\tthread = <span class=\"built_in\">this</span>.watchThread;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.remainingScans.set(remainingScans);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (remainingScans &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tthread.interrupt();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.watchThread = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (thread != <span class=\"literal\">null</span> &amp;&amp; Thread.currentThread() != thread) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tthread.join();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException ex) &#123;</span><br><span class=\"line\">\t\t\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger remainingScans;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;FileChangeListener&gt; listeners;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FileFilter triggerFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> pollInterval;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> quietPeriod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;File, DirectorySnapshot&gt; directories;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SnapshotStateRepository snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"title function_\">Watcher</span><span class=\"params\">(AtomicInteger remainingScans, List&lt;FileChangeListener&gt; listeners, FileFilter triggerFilter,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">long</span> pollInterval, <span class=\"type\">long</span> quietPeriod, Map&lt;File, DirectorySnapshot&gt; directories,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tSnapshotStateRepository snapshotStateRepository)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.remainingScans = remainingScans;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.listeners = listeners;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.triggerFilter = triggerFilter;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.pollInterval = pollInterval;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.quietPeriod = quietPeriod;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories = directories;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.snapshotStateRepository = snapshotStateRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">remainingScans</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.remainingScans.get();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (remainingScans &gt; <span class=\"number\">0</span> || remainingScans == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (remainingScans &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">this</span>.remainingScans.decrementAndGet();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tscan();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (InterruptedException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\tThread.currentThread().interrupt();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tremainingScans = <span class=\"built_in\">this</span>.remainingScans.get();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scan</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">\t\t\tThread.sleep(<span class=\"built_in\">this</span>.pollInterval - <span class=\"built_in\">this</span>.quietPeriod);</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; previous;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; current = <span class=\"built_in\">this</span>.directories;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\t\tprevious = current;</span><br><span class=\"line\">\t\t\t\tcurrent = getCurrentSnapshots();</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"built_in\">this</span>.quietPeriod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (isDifferent(previous, current));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDifferent(<span class=\"built_in\">this</span>.directories, current)) &#123;</span><br><span class=\"line\">\t\t\t\tupdateSnapshots(current.values());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isDifferent</span><span class=\"params\">(Map&lt;File, DirectorySnapshot&gt; previous, Map&lt;File, DirectorySnapshot&gt; current)</span> &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(previous, <span class=\"string\">&quot;Previous snapshots must not be null&quot;</span>);</span><br><span class=\"line\">\t\t\tAssert.notNull(current, <span class=\"string\">&quot;Current snapshots must not be null&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!previous.keySet().equals(current.keySet())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;File, DirectorySnapshot&gt; entry : previous.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">previousDirectory</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">currentDirectory</span> <span class=\"operator\">=</span> current.get(entry.getKey());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!previousDirectory.equals(currentDirectory, <span class=\"built_in\">this</span>.triggerFilter)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;File, DirectorySnapshot&gt; <span class=\"title function_\">getCurrentSnapshots</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; snapshots = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (File directory : <span class=\"built_in\">this</span>.directories.keySet()) &#123;</span><br><span class=\"line\">\t\t\t\tsnapshots.put(directory, <span class=\"keyword\">new</span> <span class=\"title class_\">DirectorySnapshot</span>(directory));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> snapshots;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateSnapshots</span><span class=\"params\">(Collection&lt;DirectorySnapshot&gt; snapshots)</span> &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(snapshots, <span class=\"string\">&quot;Snapshots must not be null&quot;</span>);</span><br><span class=\"line\">\t\t\tMap&lt;File, DirectorySnapshot&gt; updated = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\tSet&lt;ChangedFiles&gt; changeSet = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (DirectorySnapshot snapshot : snapshots) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">DirectorySnapshot</span> <span class=\"variable\">previous</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.directories.get(snapshot.getDirectory());</span><br><span class=\"line\">\t\t\t\tupdated.put(snapshot.getDirectory(), snapshot);</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">ChangedFiles</span> <span class=\"variable\">changedFiles</span> <span class=\"operator\">=</span> previous.getChangedFiles(snapshot, <span class=\"built_in\">this</span>.triggerFilter);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!changedFiles.getFiles().isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\tchangeSet.add(changedFiles);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.directories = updated;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.snapshotStateRepository.save(updated);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!changeSet.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tfireListeners(Collections.unmodifiableSet(changeSet));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fireListeners</span><span class=\"params\">(Set&lt;ChangedFiles&gt; changeSet)</span> &#123;</span><br><span class=\"line\">\t\t\tAssert.notNull(changeSet, <span class=\"string\">&quot;Change set must not be null&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (FileChangeListener listener : <span class=\"built_in\">this</span>.listeners) &#123;</span><br><span class=\"line\">\t\t\t\tlistener.onChange(changeSet);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"lifecycleversion-2\"><a class=\"anchor\" href=\"#lifecycleversion-2\">#</a> LifecycleVersion</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright 2012-2023 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\"> * you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"> * You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"> * See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"> * limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.boot.buildpack.platform.build;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A lifecycle version number comprised of a major, minor and patch value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Phillip Webb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LifecycleVersion</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Comparable</span>&lt;LifecycleVersion&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Comparator&lt;LifecycleVersion&gt; COMPARATOR = Comparator.comparingInt(LifecycleVersion::getMajor)</span><br><span class=\"line\">\t\t.thenComparingInt(LifecycleVersion::getMinor)</span><br><span class=\"line\">\t\t.thenComparing(LifecycleVersion::getPatch);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> major;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> minor;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> patch;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLifecycleVersion(<span class=\"type\">int</span> major, <span class=\"type\">int</span> minor, <span class=\"type\">int</span> patch) &#123;</span><br><span class=\"line\">\t\tAssert.isTrue(major &gt;= <span class=\"number\">0</span>, <span class=\"string\">&quot;Major version must be non-negative&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(minor &gt;= <span class=\"number\">0</span>, <span class=\"string\">&quot;Minor version must be non-negative&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(patch &gt;= <span class=\"number\">0</span>, <span class=\"string\">&quot;Patch version must be non-negative&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.major = major;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.minor = minor;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.patch = patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == obj) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span> || getClass() != obj.getClass()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">LifecycleVersion</span> <span class=\"variable\">other</span> <span class=\"operator\">=</span> (LifecycleVersion) obj;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.major == other.major;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.minor == other.minor;</span><br><span class=\"line\">\t\tresult = result &amp;&amp; <span class=\"built_in\">this</span>.patch == other.patch;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">prime</span> <span class=\"operator\">=</span> <span class=\"number\">31</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.major;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.minor;</span><br><span class=\"line\">\t\tresult = prime * result + <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;v&quot;</span> + <span class=\"built_in\">this</span>.major + <span class=\"string\">&quot;.&quot;</span> + <span class=\"built_in\">this</span>.minor + <span class=\"string\">&quot;.&quot;</span> + <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return if this version is greater than or equal to the specified version.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> other the version to compare</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if this version is greater than or equal to the specified</span></span><br><span class=\"line\"><span class=\"comment\">\t * version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEqualOrGreaterThan</span><span class=\"params\">(LifecycleVersion other)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(other, <span class=\"string\">&quot;Other version must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> compareTo(other) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(LifecycleVersion other)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(other, <span class=\"string\">&quot;Other version must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> COMPARATOR.compare(<span class=\"built_in\">this</span>, other);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the major version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the major version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getMajor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the minor version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the minor version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getMinor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.minor;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Return the patch version number.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the patch version</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getPatch</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.patch;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Factory method to parse a string into a &#123;<span class=\"doctag\">@link</span> LifecycleVersion&#125; instance.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> value the value to parse.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the corresponding &#123;<span class=\"doctag\">@link</span> LifecycleVersion&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@throws</span> IllegalArgumentException if the value could not be parsed</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> LifecycleVersion <span class=\"title function_\">parse</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">\t\tAssert.notNull(value, <span class=\"string\">&quot;Value must not be null&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value.startsWith(<span class=\"string\">&quot;v&quot;</span>) || value.startsWith(<span class=\"string\">&quot;V&quot;</span>)) &#123;</span><br><span class=\"line\">\t\t\tvalue = value.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString[] components = value.split(<span class=\"string\">&quot;\\\\.&quot;</span>);</span><br><span class=\"line\">\t\tAssert.isTrue(components.length == <span class=\"number\">3</span>, <span class=\"string\">&quot;Value must have major, minor, and patch components&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span>[] versions = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; components.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tversions[i] = Integer.parseInt(components[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (NumberFormatException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Malformed version number &#x27;&quot;</span> + value + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleVersion</span>(versions[<span class=\"number\">0</span>], versions[<span class=\"number\">1</span>], versions[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h1>\n<h2 id=\"原代码\"><a class=\"anchor\" href=\"#原代码\">#</a> 原代码</h2>\n<h3 id=\"cityservicelmpl-3\"><a class=\"anchor\" href=\"#cityservicelmpl-3\">#</a> CityServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(criteria, <span class=\"string\">&quot;Criteria must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(name, <span class=\"string\">&quot;Name must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(country, <span class=\"string\">&quot;Country must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>分别断言 <code>criteria</code> 、 <code>name</code> 、 <code>country</code> 、 <code>city</code>  不为 null, 如果为 null 则抛出警告</li>\n<li><strong>依赖性分析</strong>：不依赖具体的 SUT 输出，因为这是对输入参数的检查。</li>\n</ul>\n<h3 id=\"hotelservicelmpl-3\"><a class=\"anchor\" href=\"#hotelservicelmpl-3\">#</a> HotelServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>断言 <code>city</code>  和 <code>hotel</code>  不能为 null</li>\n<li><strong>依赖性分析</strong>：不依赖具体的 SUT 输出，因为这是对输入参数的检查。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.hasLength(name, <span class=\"string\">&quot;Name must not be empty&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>Assert.hasLength(name, &quot;Name must not be empty&quot;)</code> : 断言  <code>name</code>  字符串不为空且长度大于 0。如果  <code>name</code>  为空或长度为 0，则抛出  <code>IllegalArgumentException</code> ，并显示消息 &quot;Name must not be empty&quot;。</li>\n<li><strong>依赖性分析</strong>：依赖输入值但不依赖具体的 SUT 输出，因为这是对输入参数的检查。</li>\n</ul>\n<h2 id=\"llm生成\"><a class=\"anchor\" href=\"#llm生成\">#</a> LLM 生成</h2>\n<h3 id=\"cityservicelmpl-4\"><a class=\"anchor\" href=\"#cityservicelmpl-4\">#</a> CityServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(cityRepository, <span class=\"string\">&quot;CityRepository must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotelRepository, <span class=\"string\">&quot;HotelRepository must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(criteria, <span class=\"string\">&quot;CitySearchCriteria must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(pageable, <span class=\"string\">&quot;Pageable must not be null&quot;</span>);</span><br><span class=\"line\">Assert.hasLength(name, <span class=\"string\">&quot;Name must not be empty&quot;</span>);</span><br><span class=\"line\">Assert.hasLength(country, <span class=\"string\">&quot;Country must not be empty&quot;</span>);</span><br><span class=\"line\">Assert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(pageable, <span class=\"string\">&quot;Pageable must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"hotelservicelmpl-4\"><a class=\"anchor\" href=\"#hotelservicelmpl-4\">#</a> HotelServicelmpl</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(hotelRepository, <span class=\"string\">&quot;HotelRepository must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(reviewRepository, <span class=\"string\">&quot;ReviewRepository must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(city, <span class=\"string\">&quot;City must not be null&quot;</span>);</span><br><span class=\"line\">Assert.hasLength(name, <span class=\"string\">&quot;Name must not be empty&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(pageable, <span class=\"string\">&quot;Pageable must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(reviewNumber &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;Review number must be greater than 0&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(details, <span class=\"string\">&quot;ReviewDetails must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(hotel, <span class=\"string\">&quot;Hotel must not be null&quot;</span>);</span><br><span class=\"line\">\tAssert.notNull(ratingCounts, <span class=\"string\">&quot;RatingCounts must not be null&quot;</span>);</span><br><span class=\"line\">\tAssert.notNull(rating, <span class=\"string\">&quot;Rating must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"llm生成代码分析\"><a class=\"anchor\" href=\"#llm生成代码分析\">#</a> LLM 生成代码分析</h3>\n<p><strong>CityServiceImpl</strong></p>\n<ul>\n<li><code>Assert.notNull(cityRepository, &quot;CityRepository must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保构造函数中的依赖项  <code>cityRepository</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：这是一个好的实践，确保依赖项的非空检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(hotelRepository, &quot;HotelRepository must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保构造函数中的依赖项  <code>hotelRepository</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：这是一个好的实践，确保依赖项的非空检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(criteria, &quot;CitySearchCriteria must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>criteria</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，因为原代码中也有类似的检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(pageable, &quot;Pageable must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>pageable</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，因为  <code>pageable</code>  是分页功能的关键参数。</li>\n</ul>\n</li>\n<li><code>Assert.hasLength(name, &quot;Name must not be empty&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保  <code>name</code>  字符串不为空且长度大于 0。</li>\n<li><strong>生成评价</strong>：符合预期，这是对字符串参数的常见检查。</li>\n</ul>\n</li>\n<li><code>Assert.hasLength(country, &quot;Country must not be empty&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保  <code>country</code>  字符串不为空且长度大于 0。</li>\n<li><strong>生成评价</strong>：符合预期，这是对字符串参数的常见检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(city, &quot;City must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>city</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n</ul>\n<p><strong>HotelServiceImpl</strong></p>\n<ul>\n<li><code>Assert.notNull(hotelRepository, &quot;HotelRepository must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保构造函数中的依赖项  <code>hotelRepository</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：这是一个好的实践，确保依赖项的非空检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(reviewRepository, &quot;ReviewRepository must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保构造函数中的依赖项  <code>reviewRepository</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：这是一个好的实践，确保依赖项的非空检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(city, &quot;City must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>city</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n<li><code>Assert.hasLength(name, &quot;Name must not be empty&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保  <code>name</code>  字符串不为空且长度大于 0。</li>\n<li><strong>生成评价</strong>：符合预期，这是对字符串参数的常见检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(hotel, &quot;Hotel must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>hotel</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(pageable, &quot;Pageable must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>pageable</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，因为  <code>pageable</code>  是分页功能的关键参数。</li>\n</ul>\n</li>\n<li><code>Assert.isTrue(reviewNumber &gt; 0, &quot;Review number must be greater than 0&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保  <code>reviewNumber</code>  参数大于 0。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(details, &quot;ReviewDetails must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>details</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(ratingCounts, &quot;RatingCounts must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>ratingCounts</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n<li><code>Assert.notNull(rating, &quot;Rating must not be null&quot;);</code>\n<ul>\n<li><strong>生成原因</strong>：确保方法参数  <code>rating</code>  不为  <code>null</code> 。</li>\n<li><strong>生成评价</strong>：符合预期，原代码中也有类似的检查。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"samplewebfreemarkerapplicationtests-3\"><a class=\"anchor\" href=\"#samplewebfreemarkerapplicationtests-3\">#</a> SampleWebFreeMarkerApplicationTests</h2>\n<ol>\n<li>\n<p><strong>断言 1：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>验证内容:</strong> 此断言验证 <code>/</code>  端点返回的 HTTP 状态码是否为 <code>200 OK</code> 。</li>\n<li><strong>是否依赖具体的 SUT 输出:</strong> 此断言依赖于被测软件（SUT）的具体输出，因为它检查的是返回的 HTTP 状态码，这是 web 应用程序的直接输出。</li>\n</ul>\n</li>\n<li>\n<p><strong>断言 2：</strong></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertThat(entity.getBody()).contains(<span class=\"string\">&quot;Expected Content&quot;</span>); <span class=\"comment\">// Replace with expected content</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>验证内容:</strong> 此断言验证响应体中是否包含 “预期内容”。</li>\n<li><strong>是否依赖具体的 SUT 输出:</strong> 此断言也依赖于具体的 SUT 输出，因为它检查的是响应体的内容，这是 web 应用程序返回的具体数据。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"方法2-testfreemarkererrortemplate\"><a class=\"anchor\" href=\"#方法2-testfreemarkererrortemplate\">#</a> 方法 2：  <code>testFreeMarkerErrorTemplate</code></h4>\n<ol>\n<li>\n<p><strong>断言 1：</strong></p>\n<p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assertThat</span>(responseEntity.getStatusCode())<span class=\"selector-class\">.isEqualTo</span>(HttpStatus.NOT_FOUND);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>验证内容:</strong> 此断言验证 <code>/does-not-exist</code>  端点返回的 HTTP 状态码是否为 <code>404 Not Found</code> 。</li>\n<li><strong>是否依赖具体的 SUT 输出:</strong> 此断言依赖于具体的 SUT 输出，因为它检查的是返回的 HTTP 状态码，这是 web 应用程序的直接输出。</li>\n</ul>\n</li>\n<li>\n<p><strong>断言 2：</strong></p>\n<p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assertThat</span>(responseEntity.getBody())<span class=\"selector-class\">.contains</span>(&quot;Error Page Content&quot;); <span class=\"comment\">// Replace with expected error content</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>验证内容:</strong> 此断言验证响应体中是否包含 “错误页面内容”。</li>\n<li><strong>是否依赖具体的 SUT 输出:</strong> 此断言也依赖于具体的 SUT 输出，因为它检查的是响应体的内容，这是 web 应用程序返回的具体数据。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"llm生成代码断言分析\"><a class=\"anchor\" href=\"#llm生成代码断言分析\">#</a> LLM 生成代码断言分析</h3>\n<p>对比 <code>原代码</code> 和 <code>LLM生成代码</code> 中的断言，分析每个断言为什么能生成或不能生成，以及它们验证的内容：</p>\n<h4 id=\"方法1-testfreemarkertemplate\"><a class=\"anchor\" href=\"#方法1-testfreemarkertemplate\">#</a> 方法 1：  <code>testFreeMarkerTemplate</code></h4>\n<ol>\n<li>\n<p><strong>断言 1：</strong></p>\n<p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assertThat</span>(entity.getStatusCode())<span class=\"selector-class\">.isEqualTo</span>(HttpStatus.OK);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因:</strong> 此断言检查 HTTP 状态码，这是一个合理且常见的检查点。</li>\n<li><strong>验证内容:</strong> 验证 HTTP 状态码是否为 <code>200 OK</code> 。</li>\n<li><strong>是否依赖具体 SUT 输出:</strong> 依赖，因为检查的是具体的 HTTP 响应。</li>\n</ul>\n</li>\n<li>\n<p><strong>断言 2：</strong></p>\n<p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assertThat</span>(entity.getBody())<span class=\"selector-class\">.contains</span>(&quot;Expected Content&quot;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因:</strong> 此断言检查响应体内容，验证返回的页面是否包含预期的内容。</li>\n<li><strong>验证内容:</strong> 验证响应体中是否包含 “预期内容”。</li>\n<li><strong>是否依赖具体 SUT 输出:</strong> 依赖，因为检查的是具体的响应体内容。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"方法2-testfreemarkererrortemplate-2\"><a class=\"anchor\" href=\"#方法2-testfreemarkererrortemplate-2\">#</a> 方法 2：  <code>testFreeMarkerErrorTemplate</code></h4>\n<ol>\n<li>\n<p><strong>断言 1：</strong></p>\n<p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assertThat</span>(responseEntity.getStatusCode())<span class=\"selector-class\">.isEqualTo</span>(HttpStatus.NOT_FOUND);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因:</strong> 此断言检查 HTTP 状态码，这是一个合理且常见的检查点。</li>\n<li><strong>验证内容:</strong> 验证 HTTP 状态码是否为 <code>404 Not Found</code> 。</li>\n<li><strong>是否依赖具体 SUT 输出:</strong> 依赖，因为检查的是具体的 HTTP 响应。</li>\n</ul>\n</li>\n<li>\n<p><strong>断言 2：</strong></p>\n<p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">assertThat</span>(responseEntity.getBody())<span class=\"selector-class\">.contains</span>(&quot;Error Page Content&quot;);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因:</strong> 此断言检查响应体内容，验证返回的页面是否包含错误页面内容。</li>\n<li><strong>验证内容:</strong> 验证响应体中是否包含 “错误页面内容”。</li>\n<li><strong>是否依赖具体 SUT 输出:</strong> 依赖，因为检查的是具体的响应体内容。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"filesystemwatcher-2\"><a class=\"anchor\" href=\"#filesystemwatcher-2\">#</a> FileSystemWatcher</h2>\n<h3 id=\"原代码断言分析\"><a class=\"anchor\" href=\"#原代码断言分析\">#</a> 原代码断言分析</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(pollInterval, <span class=\"string\">&quot;PollInterval must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(quietPeriod, <span class=\"string\">&quot;QuietPeriod must not be null&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(pollInterval.toMillis() &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;PollInterval must be positive&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(quietPeriod.toMillis() &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;QuietPeriod must be positive&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(pollInterval.toMillis() &gt; quietPeriod.toMillis(), <span class=\"string\">&quot;PollInterval must be greater than QuietPeriod&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：这些断言确保 <code>pollInterval</code>  和 <code>quietPeriod</code>  的参数不为 null 且为正值，并且 <code>pollInterval</code>  大于 <code>quietPeriod</code> 。</li>\n<li><strong>依赖性</strong>：这些断言依赖于传入的参数，而非 SUT 的具体输出，因为它们仅验证构造函数参数的正确性。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(fileChangeListener, <span class=\"string\">&quot;FileChangeListener must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保传入的 <code>fileChangeListener</code>  不为 null。</li>\n<li><strong>依赖性</strong>：依赖于传入的参数，而非 SUT 的具体输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(directories, <span class=\"string\">&quot;Directories must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保传入的 <code>directories</code>  不为 null。</li>\n<li><strong>依赖性</strong>：依赖于传入的参数，而非 SUT 的具体输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(directory, <span class=\"string\">&quot;Directory must not be null&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(!directory.isFile(), () -&gt; <span class=\"string\">&quot;Directory &#x27;&quot;</span> + directory + <span class=\"string\">&quot;&#x27; must not be a file&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保传入的 <code>directory</code>  不为 null 且不是文件。</li>\n<li><strong>依赖性</strong>：依赖于传入的参数，而非 SUT 的具体输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.state(<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>, <span class=\"string\">&quot;FileSystemWatcher already started&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保在 <code>watchThread</code>  未启动的状态下调用某些方法。</li>\n<li><strong>依赖性</strong>：依赖于 SUT 的内部状态，即 <code>watchThread</code>  的状态。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(previous, <span class=\"string\">&quot;Previous snapshots must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(current, <span class=\"string\">&quot;Current snapshots must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保传入的 <code>previous</code>  和 <code>current</code>  快照不为 null。</li>\n<li><strong>依赖性</strong>：依赖于传入的参数，而非 SUT 的具体输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(snapshots, <span class=\"string\">&quot;Snapshots must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保传入的 <code>snapshots</code>  不为 null。</li>\n<li><strong>依赖性</strong>：依赖于传入的参数，而非 SUT 的具体输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(changeSet, <span class=\"string\">&quot;Change set must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>作用</strong>：确保传入的 <code>changeSet</code>  不为 null。</li>\n<li><strong>依赖性</strong>：依赖于传入的参数，而非 SUT 的具体输出。</li>\n</ul>\n<h3 id=\"llm生成的断言\"><a class=\"anchor\" href=\"#llm生成的断言\">#</a> LLM 生成的断言</h3>\n<p><code>FileSystemWatcher(boolean daemon, Duration pollInterval, Duration quietPeriod, SnapshotStateRepository snapshotStateRepository)</code></p>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(pollInterval, <span class=\"string\">&quot;PollInterval must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(quietPeriod, <span class=\"string\">&quot;QuietPeriod must not be null&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(pollInterval.toMillis() &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;PollInterval must be positive&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(quietPeriod.toMillis() &gt; <span class=\"number\">0</span>, <span class=\"string\">&quot;QuietPeriod must be positive&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(pollInterval.toMillis() &gt; quietPeriod.toMillis(), <span class=\"string\">&quot;PollInterval must be greater than QuietPeriod&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 能正确识别出需要对构造函数参数进行检查以确保其有效性，并生成了与原代码一致的断言。</li>\n<li><strong>分析</strong>：这些断言确保了输入参数的有效性和合理性，不依赖于具体的 SUT 输出，因此生成是正确和必要的。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(fileChangeListener, <span class=\"string\">&quot;FileChangeListener must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保传入的监听器不为 null。</li>\n<li><strong>分析</strong>：这是一个合理的生成，确保了参数有效性，不依赖于具体的 SUT 输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(directories, <span class=\"string\">&quot;Directories must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保传入的目录集合不为 null。</li>\n<li><strong>分析</strong>：这是一个合理的生成，确保了参数有效性，不依赖于具体的 SUT 输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(directory, <span class=\"string\">&quot;Directory must not be null&quot;</span>);</span><br><span class=\"line\">Assert.isTrue(directory.isDirectory(), <span class=\"string\">&quot;Directory &#x27;&quot;</span> + directory + <span class=\"string\">&quot;&#x27; must exist and be a directory&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保传入的目录不为 null 且为目录。</li>\n<li><strong>分析</strong>：这个生成合理，确保了参数的有效性，并且相比原代码更严格地验证了目录的存在性和类型，这样生成是更好的。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.state(<span class=\"built_in\">this</span>.watchThread == <span class=\"literal\">null</span>, <span class=\"string\">&quot;FileSystemWatcher already started&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保在调用某些方法前，监视线程未启动。</li>\n<li><strong>分析</strong>：合理生成，依赖于 SUT 的内部状态。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(previous, <span class=\"string\">&quot;Previous snapshots must not be null&quot;</span>);</span><br><span class=\"line\">Assert.notNull(current, <span class=\"string\">&quot;Current snapshots must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保传入的快照参数不为 null。</li>\n<li><strong>分析</strong>：合理生成，确保了参数有效性，不依赖于具体的 SUT 输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(snapshots, <span class=\"string\">&quot;Snapshots must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保传入的快照集合不为 null。</li>\n<li><strong>分析</strong>：合理生成，确保了参数有效性，不依赖于具体的 SUT 输出。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.notNull(changeSet, <span class=\"string\">&quot;Change set must not be null&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 识别到需要确保传入的更改集不为 null。</li>\n<li><strong>分析</strong>：合理生成，确保了参数有效性，不依赖于具体的 SUT 输出。</li>\n</ul>\n<h3 id=\"新增的断言\"><a class=\"anchor\" href=\"#新增的断言\">#</a> 新增的断言</h3>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assert.isTrue(directory.isDirectory(), <span class=\"string\">&quot;Directory &#x27;&quot;</span> + directory + <span class=\"string\">&quot;&#x27; must exist and be a directory&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>生成原因</strong>：LLM 可能认为需要进一步验证目录的存在性和类型。</li>\n<li><strong>分析</strong>：这个断言比原代码更严格，确保了传入的参数不仅不为 null 且为目录。这是一个合理且改进的生成，有助于提高代码的健壮性。</li>\n</ul>\n<h2 id=\"lifecycleversion-3\"><a class=\"anchor\" href=\"#lifecycleversion-3\">#</a> LifecycleVersion</h2>\n<h3 id=\"原代码-2\"><a class=\"anchor\" href=\"#原代码-2\">#</a> 原代码</h3>\n<p><strong> <code>Assert.hasText(value, &quot;Value must not be empty&quot;)</code> </strong></p>\n<ul>\n<li><strong>断言解释：</strong> 确保传入的字符串  <code>value</code>  非空且包含非空白字符。</li>\n<li><strong>依赖性分析：</strong> 该断言只依赖于传入的字符串  <code>value</code> ，与具体的 SUT 无关。</li>\n</ul>\n<p><strong> <code>Assert.isTrue(components.length &lt;= 3, &quot;Malformed version number '&quot; + value + &quot;'&quot;)</code> </strong></p>\n<ul>\n<li><strong>断言解释：</strong> 确保版本号格式正确，即由最多三个部分组成（主版本号、次版本号、补丁版本号）。</li>\n<li><strong>依赖性分析：</strong> 该断言只依赖于传入的字符串  <code>value</code>  的格式，与具体的 SUT 无关。</li>\n</ul>\n<h3 id=\"llm生成代码\"><a class=\"anchor\" href=\"#llm生成代码\">#</a> LLM 生成代码</h3>\n<p><strong>断言解释：</strong></p>\n<ul>\n<li><code>Assert.isTrue(major &gt;= 0, &quot;Major version must be non-negative&quot;)</code> : 确保主版本号非负。</li>\n<li><code>Assert.isTrue(minor &gt;= 0, &quot;Minor version must be non-negative&quot;)</code> : 确保次版本号非负。</li>\n<li><code>Assert.isTrue(patch &gt;= 0, &quot;Patch version must be non-negative&quot;)</code> : 确保补丁版本号非负。</li>\n</ul>\n<p><strong>为什么能生成或不能生成：</strong></p>\n<ul>\n<li>这些断言生成的原因是因为它们是合理的输入验证，以确保版本号的各个部分都是有效的非负整数。</li>\n</ul>\n<p><strong>断言解释：</strong></p>\n<ul>\n<li><code>Assert.notNull(other, &quot;Other version must not be null&quot;)</code> : 确保比较的  <code>other</code>  对象非空。</li>\n</ul>\n<p><strong>为什么能生成或不能生成：</strong></p>\n<ul>\n<li>生成这些断言是为了确保传入的  <code>other</code>  对象非空，避免  <code>NullPointerException</code> 。</li>\n</ul>\n<p><strong>断言解释：</strong></p>\n<ul>\n<li><code>Assert.notNull(other, &quot;Other version must not be null&quot;)</code> : 确保比较的  <code>other</code>  对象非空。</li>\n</ul>\n<p><strong>为什么能生成或不能生成：</strong></p>\n<ul>\n<li>生成这些断言是为了确保传入的  <code>other</code>  对象非空，避免  <code>NullPointerException</code> 。</li>\n</ul>\n<p><strong>断言解释：</strong></p>\n<ul>\n<li><code>Assert.notNull(value, &quot;Value must not be null&quot;)</code> : 确保传入的字符串  <code>value</code>  非空。</li>\n<li><code>Assert.isTrue(components.length == 3, &quot;Value must have major, minor, and patch components&quot;)</code> : 确保版本号由三个部分组成。</li>\n</ul>\n<p><strong>为什么能生成或不能生成：</strong></p>\n<ul>\n<li><code>Assert.notNull(value, &quot;Value must not be null&quot;)</code> : 生成该断言是为了确保传入的字符串非空。</li>\n<li><code>Assert.isTrue(components.length == 3, &quot;Value must have major, minor, and patch components&quot;)</code> : 生成该断言是为了确保版本号格式正确，包含主版本号、次版本号和补丁版本号。</li>\n</ul>\n<h3 id=\"比较分析\"><a class=\"anchor\" href=\"#比较分析\">#</a> 比较分析</h3>\n<ol>\n<li><strong>原代码和 LLM 生成代码在 <code>LifecycleVersion.parse</code>  方法中的断言：</strong>\n<ul>\n<li>相同点：\n<ul>\n<li>都有确保传入字符串非空和格式正确的断言。</li>\n</ul>\n</li>\n<li>不同点：\n<ul>\n<li>LLM 生成的代码增加了 <code>Assert.notNull(value, &quot;Value must not be null&quot;)</code> ，而不是 <code>Assert.hasText(value, &quot;Value must not be empty&quot;)</code> 。这两者的差异在于 <code>hasText</code>  不仅检查非空，还检查是否包含非空白字符。</li>\n<li>LLM 生成的代码断言版本号必须包含主版本号、次版本号和补丁版本号，而不是最多三个部分。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>原代码没有但 LLM 生成的断言：</strong>\n<ul>\n<li>构造函数中的断言：\n<ul>\n<li>原代码没有对传入参数进行验证，而 LLM 生成的代码对  <code>major</code> 、 <code>minor</code>  和  <code>patch</code>  参数进行了非负验证。</li>\n<li><strong>好处：</strong> 增强了输入参数的验证，防止无效数据进入对象。</li>\n</ul>\n</li>\n<li><code>isEqualOrGreaterThan</code>  和  <code>compareTo</code>  方法中的断言：\n<ul>\n<li>原代码没有对传入的  <code>other</code>  对象进行空检查，而 LLM 生成的代码添加了  <code>Assert.notNull</code>  检查。</li>\n<li><strong>好处：</strong> 防止在比较操作中传入空值，避免潜在的  <code>NullPointerException</code> 。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        }
    ]
}