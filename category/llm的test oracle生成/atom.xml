<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://enjundu.github.io</id>
    <title>Hexo • Posts by &#34;llm的test oracle生成&#34; category</title>
    <link href="https://enjundu.github.io" />
    <updated>2024-07-02T18:08:35.000Z</updated>
    <category term="Hexo" />
    <category term="Front Matter" />
    <category term="code" />
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/</id>
        <title>robotframework-webservice</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/3_robotframework-webservice-master/"/>
        <content type="html">&lt;h1 id=&#34;robotframework-webservice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#robotframework-webservice&#34;&gt;#&lt;/a&gt; &lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL01hcmtldFNxdWFyZS9yb2JvdGZyYW1ld29yay13ZWJzZXJ2aWNl&#34;&gt;robotframework-webservice&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个管理 Robot Framework 任务 / 测试的 Web 服务。&lt;/li&gt;
&lt;li&gt;该 Web 服务应启动 Robot Framework 的任务 / 测试，并返回并缓存相应的报告。&lt;/li&gt;
&lt;li&gt;运行：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install robotframework-webservice&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python -m RobotFrameworkService.main -p &lt;span class=&#34;number&#34;&gt;5003&lt;/span&gt; -t path_to_my_taskfolder&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;http://localhost:5003/robotframework/run/mytask //调用 Robot 任务/测试&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;http://localhost:5003/robotframework/run/mytask?myVariable1=42&amp;amp;anotherVariable=Mustermann //带变量调用 Robot 任务/测试&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 连接在任务/测试的持续时间内保持打开状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;http://localhost:5003/robotframework/run/mytask&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 立即关闭连接 - 结果必须使用 x-request-id 请求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;http://localhost:5003/robotframework/run/mytask/async&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调用 Robot 测试&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl -X &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost:5003/robotframework/run&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;accept: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -d &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;paths&amp;quot;: [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;examples&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;test&amp;quot;: &amp;quot;Demonstration Test&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用 Robot 任务&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl -X &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost:5003/robotframework/run&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;accept: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -d &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;paths&amp;quot;: [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;examples&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;task&amp;quot;: &amp;quot;Demonstration Task&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带变量调用 Robot 任务&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl -X &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost:5003/robotframework/run&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;accept: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -H &lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: application/json&amp;#x27;&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -d &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;paths&amp;quot;: [&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;examples&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  ],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;task&amp;quot;: &amp;quot;Task with more variables&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;variables&amp;quot;: &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;firstname&amp;quot;: &amp;quot;Max&amp;quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;lastname&amp;quot;: &amp;quot;Mustermann&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动本地 Web 服务：&lt;/p&gt;
&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python -m RobotFrameworkService&lt;span class=&#34;selector-class&#34;&gt;.main&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python -m RobotFrameworkService&lt;span class=&#34;selector-class&#34;&gt;.main&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;--help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python -m RobotFrameworkService&lt;span class=&#34;selector-class&#34;&gt;.main&lt;/span&gt; -&lt;span class=&#34;selector-tag&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;5003&lt;/span&gt; -t path_to_my_taskfolder &lt;span class=&#34;comment&#34;&gt;// example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;test_apppy修改操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_apppy修改操作&#34;&gt;#&lt;/a&gt; test_app.py 修改操作&lt;/h2&gt;
&lt;h3 id=&#34;原本的testpy代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原本的testpy代码&#34;&gt;#&lt;/a&gt; 原本的 test.py 代码:&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastapi.testclient &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; TestClient&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; RobotFrameworkService.main &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EndpointTesttest_s&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_service_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/all&amp;quot;&lt;/span&gt;, expected_response_code=&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_failed(response=response)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_async_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/all/async&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_passed(response=response)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_async_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask/async&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_robottask_with_variables&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/Task with variable?input=qwerty&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_passed(response=response, msg=&lt;span class=&#34;string&#34;&gt;&amp;quot;Testing with variables failed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_logs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show/anotherTask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertIn(&lt;span class=&#34;string&#34;&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_reports&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show_report/anotherTask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertIn(&lt;span class=&#34;string&#34;&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_logs_and_arguments&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show/anotherTask?art=tests&amp;amp;description=EreichbarkeitsTestMitLogs&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertIn(&lt;span class=&#34;string&#34;&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_reports_and_arguments&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;amp;description=FunktionsTestMitReports&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertIn(&lt;span class=&#34;string&#34;&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robotlog_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            logs_response = client.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/show_log/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, logs_response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robotreport_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            report_response = client.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/show_report/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, report_response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robot_run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.post(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run&amp;quot;&lt;/span&gt;, json=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Another task&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Demonstration Test&amp;quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;, response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;string&#34;&gt;&amp;quot;Options test and task cannot be both specified&amp;quot;&lt;/span&gt;, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.post(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run&amp;quot;&lt;/span&gt;, json=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Another task&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.post(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run&amp;quot;&lt;/span&gt;, json=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;paths&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;quot;examples&amp;quot;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;Demonstration Test&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_delete_robotlogs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.delete(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/logs/not_existing&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;number&#34;&gt;404&lt;/span&gt;, response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;string&#34;&gt;&amp;quot;The logs not_existing not existing or being generating&amp;quot;&lt;/span&gt;, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.delete(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/logs/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;number&#34;&gt;204&lt;/span&gt;, response.status_code)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__get_robot_webservice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, endpoint, expected_response_code=&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.get(endpoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(expected_response_code, response.status_code, response.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__is_robot_passed&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, response, msg=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertNotIn(&lt;span class=&#34;string&#34;&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt;, response.text, msg=msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertIn(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;PASS&amp;quot;&lt;/span&gt;, response.text, &lt;span class=&#34;string&#34;&gt;&amp;quot;Test result contains neither PASS nor FAIL&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__is_robot_failed&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, response, msg=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertIn(&lt;span class=&#34;string&#34;&gt;&amp;quot;FAIL&amp;quot;&lt;/span&gt;, response.text, &lt;span class=&#34;string&#34;&gt;&amp;quot;Test result contains FAIL&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;投喂给gpt35的test代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#投喂给gpt35的test代码&#34;&gt;#&lt;/a&gt; 投喂给 gpt3.5 的 test 代码：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastapi.testclient &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; TestClient&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; RobotFrameworkService.main &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EndpointTesttest_s&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_service_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/all&amp;quot;&lt;/span&gt;, expected_response_code=&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_failed(response=response)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_async_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/all/async&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_passed(response=response)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_async_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask/async&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_robottask_with_variables&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/Task with variable?input=qwerty&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_passed(response=response, msg=&lt;span class=&#34;string&#34;&gt;&amp;quot;Testing with variables failed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_logs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show/anotherTask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_reports&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show_report/anotherTask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_logs_and_arguments&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show/anotherTask?art=tests&amp;amp;description=EreichbarkeitsTestMitLogs&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_reports_and_arguments&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;amp;description=FunktionsTestMitReports&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robotlog_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            logs_response = client.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/show_log/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robotreport_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            report_response = client.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/show_report/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robot_run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_delete_robotlogs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__get_robot_webservice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, endpoint, expected_response_code=&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.get(endpoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__is_robot_passed&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, response, msg=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__is_robot_failed&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, response, msg=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;gpt自动填充后的testpy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gpt自动填充后的testpy&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1ncHR0ZXN0LWpiOWs2Nmhsd2U5OXAxNTFneTc0YS5weQ==&#34;&gt;gpt 自动填充后的 test.py&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;将上述代码喂给 chatgpt3.5，并附加 base prompt: 该 tests case 缺少 assert 断言 请你自动补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生成的 test.py 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastapi.testclient &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; TestClient&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; RobotFrameworkService.main &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; app&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EndpointTests&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_service_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/status&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Service is not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/all&amp;quot;&lt;/span&gt;, expected_response_code=&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_failed(response=response)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为400&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Expected response code 400&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_async_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/all/async&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Async task is not startable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_passed(response=response)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Task is not startable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_async_startable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask/async&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Async task is not startable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_robottask_with_variables&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/Task with variable?input=qwerty&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.__is_robot_passed(response=response, msg=&lt;span class=&#34;string&#34;&gt;&amp;quot;Testing with variables failed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Task with variables failed&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_logs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show/anotherTask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Task with logs is not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_reports&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show_report/anotherTask&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Task with reports is not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_logs_and_arguments&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show/anotherTask?art=tests&amp;amp;description=EreichbarkeitsTestMitLogs&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Task with logs and arguments is not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robottask_available_with_reports_and_arguments&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        response = self.__get_robot_webservice(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run_and_show_report/anotherTask?art=tests&amp;amp;description=FunktionsTestMitReports&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Task with reports and arguments is not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robotlog_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            logs_response = client.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/show_log/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; logs_response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Logs are not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robotreport_available&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            report_response = client.get(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/show_report/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; report_response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Report is not available&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_is_robot_run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 尚未实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_delete_robotlogs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            run_response = client.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;/robotframework/run/anotherTask&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            execution_id = run_response.headers[&lt;span class=&#34;string&#34;&gt;&amp;quot;x-request-id&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            delete_response = client.delete(&lt;span class=&#34;string&#34;&gt;f&amp;quot;/robotframework/delete_log/&lt;span class=&#34;subst&#34;&gt;&amp;#123;execution_id&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; delete_response.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Logs are not deleted&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__get_robot_webservice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, endpoint, expected_response_code=&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; TestClient(app) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; client:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            response = client.get(endpoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# 断言响应状态码为预期的状态码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.status_code == expected_response_code, &lt;span class=&#34;string&#34;&gt;f&amp;quot;Expected response code &lt;span class=&#34;subst&#34;&gt;&amp;#123;expected_response_code&amp;#125;&lt;/span&gt;, got &lt;span class=&#34;subst&#34;&gt;&amp;#123;response.status_code&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; response&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__is_robot_passed&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, response, msg=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 检查任务是否成功（具体实现取决于服务的响应格式）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.json().get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;status&amp;#x27;&lt;/span&gt;) == &lt;span class=&#34;string&#34;&gt;&amp;#x27;passed&amp;#x27;&lt;/span&gt;, msg &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Robot task did not pass&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__is_robot_failed&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, response, msg=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 检查任务是否失败（具体实现取决于服务的响应格式）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; response.json().get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;status&amp;#x27;&lt;/span&gt;) == &lt;span class=&#34;string&#34;&gt;&amp;#x27;failed&amp;#x27;&lt;/span&gt;, msg &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Robot task did not fail&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/</id>
        <title>PythonProjectTemplate-master</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/1_PythonProjectTemplate-master/"/>
        <content type="html">&lt;h1 id=&#34;测试llm的assert功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试llm的assert功能&#34;&gt;#&lt;/a&gt; 测试 LLM 的 assert 功能&lt;/h1&gt;
&lt;h2 id=&#34;1_pythonprojecttemplate-master&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1_pythonprojecttemplate-master&#34;&gt;#&lt;/a&gt; 1_&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZyYW5uZWNrOTQvUHl0aG9uUHJvamVjdFRlbXBsYXRl&#34;&gt;PythonProjectTemplate-master&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;运行 &lt;code&gt;pip install -e .&lt;/code&gt;  和 &lt;code&gt;pytest tests&lt;/code&gt;  后出现下图，表明本地构建和安装和测试项目成功。&lt;/p&gt;
&lt;p&gt;然后再运行 &lt;code&gt;pytest --cov=fastvector tests --cov-report=html&lt;/code&gt;  来生成代码覆盖率报告&lt;/p&gt;
&lt;img data-src=&#34;D:\desktop\Code_Compiling\LLM的test_oracle生成\0_readme_picture\1.png&#34; alt=&#34;1&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;h3 id=&#34;test代码修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test代码修改&#34;&gt;#&lt;/a&gt; test 代码修改&lt;/h3&gt;
&lt;h4 id=&#34;test初始代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test初始代码&#34;&gt;#&lt;/a&gt; test 初始代码&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot; Unit Test Cases &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; typing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastvector.vector &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Vector2D&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V1 = Vector2D(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V2 = Vector2D(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V3 = Vector2D(&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#       INIT       #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_init_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    x: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    y: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test init raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _ = Vector2D(x, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_from_values&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    x: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    y: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test from values.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; exp == Vector2D(x, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     STRINGS      #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test repr.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; capture_stdout[&lt;span class=&#34;string&#34;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;vector.Vector2D(1.0, 2.0)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test str.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; capture_stdout[&lt;span class=&#34;string&#34;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;(1.0, 2.0)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   COMPUTATIONS   #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test add.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs + rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_sub&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test sub.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs - rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, -&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_vec&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test mul vec.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs * rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V2, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_float&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test mul float.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs * rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test mul raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs * lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V2, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.25&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.25&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_div&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test div.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs / rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_div_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test div raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lhs / rhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_operators_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test operators raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs &amp;lt; lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs + lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs - lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_abs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test abs.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(rhs) == lhs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   COMPARISONS    #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_equality_other_class&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test equality.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs != rhs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_less_than&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test less than.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; rhs &amp;lt; lhs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从 test 代码中我们可知：test_from_values、test_repr、test_str、test_add、test_sub、test_mul_vec、test_mul_float、test_div、test_abs、test_equality_other_class、test_less_than 中有 assert 语句。&lt;/p&gt;
&lt;p&gt;将 assert 语句删除，并且删掉提示字符串，然后将代码交给 gpt3.5 进行修改。&lt;/p&gt;
&lt;p&gt;提示语句为 “这个 test case 缺少 assert 语句 请补全”&lt;/p&gt;
&lt;h4 id=&#34;test投喂代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test投喂代码&#34;&gt;#&lt;/a&gt; test 投喂代码&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot; Unit Test Cases &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; typing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastvector.vector &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Vector2D&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V1 = Vector2D(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V2 = Vector2D(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V3 = Vector2D(&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#       INIT       #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_init_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    x: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    y: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test init raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _ = Vector2D(x, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_from_values&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    x: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    y: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     STRINGS      #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   COMPUTATIONS   #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_sub&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, -&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_vec&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V2, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_float&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test mul raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs * lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V2, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.25&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.25&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_div&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_div_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test div raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lhs / rhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_operators_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test operators raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs &amp;lt; lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs + lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs - lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_abs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   COMPARISONS    #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_equality_other_class&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_less_than&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;test代码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test代码分析&#34;&gt;#&lt;/a&gt; test 代码分析&lt;/h3&gt;
&lt;p&gt;gpt3.5 修改后的 test 语句为：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot; Unit Test Cases &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; typing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; fastvector.vector &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Vector2D&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V1 = Vector2D(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V2 = Vector2D(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;V3 = Vector2D(&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#       INIT       #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_init_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    x: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    y: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test init raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _ = Vector2D(x, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_from_values&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    x: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    y: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; Vector2D(x, y) == exp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     STRINGS      #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)) == &lt;span class=&#34;string&#34;&gt;&amp;quot;Vector2D(1.0, 2.0)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)) == &lt;span class=&#34;string&#34;&gt;&amp;quot;(1.0, 2.0)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   COMPUTATIONS   #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs + rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;3.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_sub&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs - rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V2, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, V3, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, V2, -&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_vec&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs * rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V2, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;5.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_float&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs * rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mul_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test mul raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs * lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;exp_res&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V1, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V2, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;-&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;V3, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;, Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.25&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1.25&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_div&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    exp_res: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs / rhs == exp_res&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_div_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test div raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lhs / rhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_operators_raises&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test operators raises.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs &amp;lt; lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs + lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(TypeError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rhs - lhs  &lt;span class=&#34;comment&#34;&gt;# pyright: ignore reportUnusedExpression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_abs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(rhs) == lhs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#   COMPARISONS    #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;####################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_equality_other_class&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs != rhs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;lhs&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;rhs&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        (&lt;span class=&#34;params&#34;&gt;Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;), Vector2D(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_less_than&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    lhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    rhs: Vector2D,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lhs &amp;lt; rhs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;比对修改前后代码块的作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比对修改前后代码块的作用&#34;&gt;#&lt;/a&gt; 比对修改前后代码块的作用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于 &lt;code&gt;test_init_raises（）&lt;/code&gt; 函数，其用于验证创建的 &lt;code&gt;Vector2D&lt;/code&gt;  对象是否与预期结果 &lt;code&gt;exp&lt;/code&gt;  相等。—— 修改前后代码作用相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 &lt;code&gt;test_repr和test_str&lt;/code&gt;  函数：&lt;br&gt;
修改前：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test repr.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; capture_stdout[&lt;span class=&#34;string&#34;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;vector.Vector2D(1.0, 2.0)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;    capture_stdout: &lt;span class=&#34;built_in&#34;&gt;dict&lt;/span&gt;[&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Test str.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; capture_stdout[&lt;span class=&#34;string&#34;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;(1.0, 2.0)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其作用为验证 Vector2D 对象的’__repr__&#39; 方法的输出。通过建立字典 capture_stdout 来捕获 capture_stdout。&lt;em&gt;print 函数的目的为将  &lt;code&gt;Vector2D(1.0, 2.0)&lt;/code&gt;  对象的  &lt;code&gt;__repr__&lt;/code&gt;  方法的输出打印到标准输出。以便实际使用时开发者可以看到程序输出结果，帮助理解程序执行的结果和确保  &lt;code&gt;__repr__&lt;/code&gt;  方法的实现符合预期。&lt;/em&gt; 然后使用     &lt;code&gt;assert capture_stdout[&amp;quot;stdout&amp;quot;] == &amp;quot;vector.Vector2D(1.0, 2.0)\n&lt;/code&gt; &amp;quot; 来验证捕获的输出与预期输出是否相符。&lt;br&gt;
gpt3.5 补充后：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_repr&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)) == &lt;span class=&#34;string&#34;&gt;&amp;quot;Vector2D(1.0, 2.0)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str&lt;/span&gt;() -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(Vector2D(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.0&lt;/span&gt;)) == &lt;span class=&#34;string&#34;&gt;&amp;quot;(1.0, 2.0)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能减少&lt;/strong&gt;：一般来说为了符合开发者调试，test 时需要 print 函数以便开发者了解程序的输出，gpt 填充的 assert 里忽略了 print，直接对比返回值，其只适用于 &lt;code&gt;repr&lt;/code&gt;  和 &lt;code&gt;str&lt;/code&gt;  函数的输出场景&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调试困难&lt;/strong&gt;：如果我们 assert 报错后，最初的代码可以通过 print 来留下更多的调试信息，而 gpt 生成的返回值无法做到这一步，需要额外增加 print 代码来了解报错原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;改进&lt;/strong&gt;：当我们给 gpt 输入：“这个 test case 缺少 assert 语句 请补全，要求调试的过程中方便开发者直观看到输出过程” 后，代码输出增加了 print 语句，优化成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;test_add&lt;/code&gt;  和 &lt;code&gt;test_sub&lt;/code&gt;  和 &lt;code&gt;test_mul_float``test_div&lt;/code&gt;  和’test_abs’和’test_less_than’函数：验证两个 &lt;code&gt;Vector2D&lt;/code&gt;  对象相加 / 减 / 乘 / 除 / 取绝对值 / 是否小于的结果是否与预期结果相等。gpt 改后与之前效果相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/2_cronex-master/</id>
        <title>cronex</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/2_cronex-master/"/>
        <content type="html">&lt;h1 id=&#34;cronex&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cronex&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2VyaWNwcnVpdHQvY3JvbmV4&#34;&gt;cronex&lt;/span&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;用于类 corn 任务调度的 Python 模块，提供一个接口用于评估和触发 corn 表达式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类 corn 任务：Cron 是一种时间表驱动的任务调度程序，用于在特定的时间和日期执行任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Corn&lt;/strong&gt; 表达式：由 5~6 个字段组成，分别表示分钟、小时、日、月、星期和可选的年份&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其表达式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;* * * * *  command to be executed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;- - - - -&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| | | | |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| | | | ----- 星期 (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;) (星期日 = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; 或 &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| | | ------- 月份 (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| | --------- 月中的日期 (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| ----------- 小时 (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;------------- 分钟 (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;59&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; * * * /path/to/command &lt;span class=&#34;comment&#34;&gt;#表示每天凌晨1点执行某个命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;cronex功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cronex功能&#34;&gt;#&lt;/a&gt; cronex 功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持 Java Quartz 的特殊字符，如 &amp;quot;L&amp;quot;、“W&amp;quot;和”#&amp;quot;。&lt;/li&gt;
&lt;li&gt;允许设定任意间隔的触发器，例如每 9 小时，每 11 分钟等。&lt;/li&gt;
&lt;li&gt;示例代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;job = CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 1-5/2 find /var/log -delete&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(job.check_trigger((&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))  &lt;span class=&#34;comment&#34;&gt;# True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(job.check_trigger((&lt;span class=&#34;number&#34;&gt;2012&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))  &lt;span class=&#34;comment&#34;&gt;# False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 CronExpression (“0 0 * * 1-5/2 find /var/log -delete”) 创建了一个  &lt;code&gt;CronExpression&lt;/code&gt;  对象，其 cron 表达式为 &lt;code&gt;0 0 * * 1-5/2&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0 0&lt;/code&gt; ：每天的 00:00&lt;/li&gt;
&lt;li&gt;&lt;code&gt;* *&lt;/code&gt; : 每个月的每一天&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1-5/2&lt;/code&gt; : 星期一到星期五中每隔一天&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find /var/log -delete&lt;/code&gt; ：命令部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当给这个 job 传递参数 job.check_trigger ((2010, 11, 17, 0, 0)) 时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日期时间：2010 年 11 月 17 日 00:00&lt;/li&gt;
&lt;li&gt;星期三符合周一～周五间隔一天&lt;/li&gt;
&lt;li&gt;符合 corn 表达式条件，输出 True&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testspy代码处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#testspy代码处理&#34;&gt;#&lt;/a&gt; tests.py 代码处理&lt;/h2&gt;
&lt;h3 id=&#34;更正说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更正说明&#34;&gt;#&lt;/a&gt; 更正说明&lt;/h3&gt;
&lt;p&gt;由于本人的 python 版本是 3.12，直接运行 tests.py 会报错&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Error&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  File &lt;span class=&#34;string&#34;&gt;&amp;quot;D:\desktop\Code_Compiling\LLM的test_oracle生成\20_cronex-master\cronex-master\cronex\tests.py&amp;quot;&lt;/span&gt;, line &lt;span class=&#34;number&#34;&gt;397&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; test_catches_bad_L&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.failUnlessRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ^^^^^^^^^^^^^^^^^^^^^&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AttributeError: &lt;span class=&#34;string&#34;&gt;&amp;#x27;test_testedmodule&amp;#x27;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;object&lt;/span&gt; has no attribute &lt;span class=&#34;string&#34;&gt;&amp;#x27;failUnlessRaises&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原因是 &lt;code&gt;unittest.TestCase&lt;/code&gt;  类中没有名为  &lt;code&gt;failUnlessRaises&lt;/code&gt;  的方法&lt;/p&gt;
&lt;p&gt;这是由于该代码使用了旧版本  &lt;code&gt;unittest&lt;/code&gt;  中的方法名称，现在应该使用  &lt;code&gt;assertRaises&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;更正后的 tests.py 代码如下：&lt;/p&gt;
&lt;h3 id=&#34;debug后的tests&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#debug后的tests&#34;&gt;#&lt;/a&gt; debug 后的 tests&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;392&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;393&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;394&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;395&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;396&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; calendar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; site&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MINUTE = &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HOUR = &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt; * MINUTE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DAY = &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt; * HOUR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Python 3 compatibility&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isinstance&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xrange = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Add the parent directory relative to the test case because we assume the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# test will be in a subdirectory relative to the main code base.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sys.path.insert(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, os.path.join(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.path.dirname(os.path.realpath(__file__)), os.pardir))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cronex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;test_testedmodule&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that the special substitutions are replaced by the correct,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        expanded cron expressions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testcases = [(&lt;span class=&#34;string&#34;&gt;&amp;quot;@yearly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@annually&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@monthly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@weekly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 0&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@midnight&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@hourly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; a, b &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; testcases:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            obj = cronex.CronExpression(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertTrue(b &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(obj))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_compute_numtab&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that calling compute_numtab after modifying the string-version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        of an expression results in the static trigger-value cache being&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        updated.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/7 5-10 5 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/5 23-2 5 8 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertNotEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1.string_tab = testex2.string_tab&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1.compute_numtab()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_dom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that arbitrary-period repeaters in the day-of-the-month field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        work as expected.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;491&lt;/span&gt; * DAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * %491 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertFalse(testex.check_trigger(now_tuple[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now_tuple[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_hours&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that arbitrary-period repeaters in the hours field work as&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        expected.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;9001&lt;/span&gt; * HOUR)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* %9001 * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertFalse(testex.check_trigger(now_tuple[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now_tuple[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_minutes&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that arbitrary-period repeaters in the minutes field work as&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        expected.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;814075&lt;/span&gt; * MINUTE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;%814075 * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertFalse(testex.check_trigger(now_tuple[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now_tuple[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_month&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that arbitrary-period repeaters in the month field work as&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        expected. More specifically, it verifies that the repeaters are&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        triggered every &amp;quot;N&amp;quot; calendar months regardless of the day for triggers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        set to go offer every 1 month, ever 2 months, etc... through 18 months&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        from 1970 through 1980.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; period &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            calendar_months = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            description = &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %%%i *&amp;quot;&lt;/span&gt; % period&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cron_expression = cronex.CronExpression(description)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; year &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1970&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1980&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; month &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    days_in_month = calendar.monthrange(year, month)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    should_trigger = &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (calendar_months % period)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; day &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, days_in_month + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        time_tuple = (year, month, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        triggered = cron_expression.check_trigger(time_tuple)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self.assertEqual(should_trigger, triggered,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;string&#34;&gt;&amp;quot;%s: expected trigger to be %r for %r&amp;quot;&lt;/span&gt; %&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            (description, should_trigger, time_tuple)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    calendar_months += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_parse_atom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that parsing atoms returns sets containing all of the expected&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        values.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input_expect = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5-10&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5-10/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;11-5/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5/3&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;11-5/3&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;*/5&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;666&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;666&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;21-1&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5/15&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;1/4&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; give_the_function, want_from_function &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; input_expect:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(want_from_function,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cronex.parse_atom(*give_the_function))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str_and_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that the __repr__ and __str__ return values can be passed to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        eval to generate an identical CronExpression.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CronExpression = cronex.CronExpression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/15 4 1-7 * * TEST___TEST&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = &lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1.comment, testex2.comment)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex1), &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(testex1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dom_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that shortened month names are correctly translated numeric&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        indexes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex1), &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex2))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dow_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that shortened days-of-the-week are correctly translated numeric&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        indexes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * sun,mon,tue,wed,thu,fri,sat&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 0,1,2,3,4,5,6&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex1), &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex2))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dom_either_or_dow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that combining day of-the-month field and day-of-the-week field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        triggers on either condition matching the current day and that using a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        wild-card day of the month with a day of the week entry doesn&amp;#x27;t trigger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        every single day.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Trigger should fire every Monday or on the 5th day of the month.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 5 * mon&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; e &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; e &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertTrue(testex.check_trigger((&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, e, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertFalse(testex.check_trigger((&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, e, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Trigger should fire every Wednesday at midnight.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * wed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# In July of 2014, every Wednesday just happens to be on a day of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;# the month that&amp;#x27;s a multiple of 7.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt;(d % &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertTrue(testex.check_trigger((&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, d, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertFalse(testex.check_trigger((&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, d, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_L_in_dow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having L in the day-of-the-week field with a number always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        triggers on last occurrence of the corresponding day of the week in any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        given month.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 6L&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# The numbers are the dates of the last Saturday in each month of the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# year 2010.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tv = [&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertTrue((testex.check_trigger((&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, v+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, tv[v], &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;))))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_L_in_dom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having L in the day-of-the-month field always triggers on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        the last day of the month.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 L * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2009&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# Checks every day from January 1st 2000 through December 31st&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# 2008 an verifies that the trigger only activates on the last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# day of the month. The year range was chosen to ensure at leas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# one leap year would be included in the test.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lastdom = calendar.monthrange(y, v)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, lastdom + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; d &amp;lt; lastdom:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self.assertFalse(testex.check_trigger((y, v, d, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self.assertTrue(testex.check_trigger((y, v, d, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_calendar_change_vs_hour_change&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that a periodic trigger for the day of the month is based on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        calendar days, not 24-hour days.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# epoch and local differ by &amp;lt; 48 hours but it should be reported based&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# on calendar days, not 24 hour days&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        epoch = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;59&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        local_time = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 %2 * *&amp;quot;&lt;/span&gt;, epoch, -&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(local_time, -&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_asterisk_is_loney&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that asterisk cannot be combined with other atoms.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* *,1-9 * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dow_occurence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that using &amp;quot;#&amp;quot; to find the Nth occurrence of a given day of the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        week works correctly.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; dow &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; occurence &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                day = (&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; * (occurence - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) + dow + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                expression = &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * %i#%i&amp;quot;&lt;/span&gt; % (dow, occurence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; occurence &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;# There can never be more than 5 occurrences of a given day&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;# of the week in one month.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertRaises(ValueError, cronex.CronExpression,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                      expression)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; day &amp;lt; &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    testex = cronex.CronExpression(expression)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertTrue(testex.check_trigger(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        (&lt;span class=&#34;number&#34;&gt;2011&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; day &amp;gt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self.assertFalse(testex.check_trigger(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            (&lt;span class=&#34;number&#34;&gt;2011&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(day - &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; day &amp;lt; &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self.assertFalse(testex.check_trigger(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            (&lt;span class=&#34;number&#34;&gt;2011&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(day + &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_strict_range_bounds&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having numbers outside of the reasonable ranges for each&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        field raises an exception. Tests both upper and lower bounds.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;1000 * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* 1000 * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 1000 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 1000 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 1000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;-1 * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* -1 * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 0 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                          cronex.CronExpression, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * -1&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_modulus&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having a trigger with an invalid repetition period raises&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        an exception.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %-1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;%1 * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* %1 * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * %1 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %1 *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;%0 * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* %0 * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * %0 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %0 *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              cronex.CronExpression, &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_W&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having a syntactically invalid &amp;quot;W&amp;quot; raises an exception.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;5W * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* 5W * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 99W * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0W * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * W0 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 5W *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 5W&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              cronex.CronExpression, &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_L&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having a syntactically invalid &amp;quot;L&amp;quot; raises an exception.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;L * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* L * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 99L * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0L * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * L *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * L&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 9L&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * -9L&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              cronex.CronExpression, &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_Pound&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that having a syntactically invalid &amp;quot;#&amp;quot; raises an exception.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;# * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* # * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * # * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * # *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 9#9L&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertRaises(ValueError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              cronex.CronExpression, &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fail_on_not_enough_fields&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that an exception is thrown when the cron expression has too few&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        fields.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* *&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * *&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * *&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertRaises(ValueError, cronex.CronExpression, &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在去除所有 assert 语句，并将去除 assert 后的 tests 代码补全逻辑后，得到&lt;/p&gt;
&lt;h3 id=&#34;去除assert及相关提示后的tests_code&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#去除assert及相关提示后的tests_code&#34;&gt;#&lt;/a&gt; 去除 assert 及相关提示后的 tests_code&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; calendar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; site&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MINUTE = &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HOUR = &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt; * MINUTE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DAY = &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt; * HOUR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Python 3 compatibility&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isinstance&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xrange = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Add the parent directory relative to the test case because we assume the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# test will be in a subdirectory relative to the main code base.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sys.path.insert(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, os.path.join(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.path.dirname(os.path.realpath(__file__)), os.pardir))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cronex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;test_testedmodule&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that the special substitutions are replaced by the correct,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        expanded cron expressions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testcases = [(&lt;span class=&#34;string&#34;&gt;&amp;quot;@yearly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@annually&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@monthly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@weekly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 0&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@midnight&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@hourly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_compute_numtab&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/7 5-10 5 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/5 23-2 5 8 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1.string_tab = testex2.string_tab&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1.compute_numtab()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_dom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;491&lt;/span&gt; * DAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * %491 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_hours&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;9001&lt;/span&gt; * HOUR)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* %9001 * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_minutes&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;814075&lt;/span&gt; * MINUTE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;%814075 * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_month&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; period &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            calendar_months = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            description = &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %%%i *&amp;quot;&lt;/span&gt; % period&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cron_expression = cronex.CronExpression(description)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; year &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1970&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1980&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; month &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    days_in_month = calendar.monthrange(year, month)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    should_trigger = &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (calendar_months % period)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; day &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, days_in_month + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        time_tuple = (year, month, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        triggered = cron_expression.check_trigger(time_tuple)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    calendar_months += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_parse_atom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input_expect = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5-10&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5-10/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;11-5/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5/3&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;11-5/3&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;*/5&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;666&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;666&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;21-1&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5/15&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;1/4&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; give_the_function, want_from_function &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; input_expect:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cronex.parse_atom(*give_the_function)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str_and_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CronExpression = cronex.CronExpression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/15 4 1-7 * * TEST___TEST&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = &lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dom_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dow_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * sun,mon,tue,wed,thu,fri,sat&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 0,1,2,3,4,5,6&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dom_either_or_dow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Trigger should fire every Monday or on the 5th day of the month.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 5 * mon&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; e &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Trigger should fire every Wednesday at midnight.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * wed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_L_in_dow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 6L&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# The numbers are the dates of the last Saturday in each month of the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# year 2010.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tv = [&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_L_in_dom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 L * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2009&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# Checks every day from January 1st 2000 through December 31st&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# 2008 an verifies that the trigger only activates on the last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# day of the month. The year range was chosen to ensure at leas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# one leap year would be included in the test.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lastdom = calendar.monthrange(y, v)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, lastdom + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_calendar_change_vs_hour_change&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# epoch and local differ by &amp;lt; 48 hours but it should be reported based&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# on calendar days, not 24 hour days&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        epoch = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;59&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        local_time = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 %2 * *&amp;quot;&lt;/span&gt;, epoch, -&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_asterisk_is_loney&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dow_occurence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; dow &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; occurence &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                day = (&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; * (occurence - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) + dow + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                expression = &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * %i#%i&amp;quot;&lt;/span&gt; % (dow, occurence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; occurence &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; day &amp;lt; &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    testex = cronex.CronExpression(expression)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; day &amp;gt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; day &amp;lt; &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_strict_range_bounds&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_modulus&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %-1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;%1 * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* %1 * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * %1 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %1 *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;%0 * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* %0 * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * %0 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %0 *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_W&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;5W * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* 5W * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 99W * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0W * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * W0 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 5W *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 5W&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_L&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;L * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* L * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 99L * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0L * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * L *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * L&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 9L&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * -9L&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_Pound&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;# * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* # * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * # * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * # *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 9#9L&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fail_on_not_enough_fields&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* *&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * *&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * *&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;gpt35生成补全后的tests&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gpt35生成补全后的tests&#34;&gt;#&lt;/a&gt; gpt3.5 生成补全后的 tests&lt;/h3&gt;
&lt;p&gt;将 tests_code 投喂给 gpt3.5，并且附上 prompt 该 tests case 缺少 assert 语句，请你自动补全&lt;/p&gt;
&lt;p&gt;补全后的代码为：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; calendar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; site&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MINUTE = &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HOUR = &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt; * MINUTE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DAY = &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt; * HOUR&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Python 3 compatibility&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isinstance&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xrange = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Add the parent directory relative to the test case because we assume the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# test will be in a subdirectory relative to the main code base.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sys.path.insert(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, os.path.join(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.path.dirname(os.path.realpath(__file__)), os.pardir))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cronex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;test_testedmodule&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        Verify that the special substitutions are replaced by the correct,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        expanded cron expressions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testcases = [(&lt;span class=&#34;string&#34;&gt;&amp;quot;@yearly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@annually&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@monthly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@weekly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 0&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@midnight&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (&lt;span class=&#34;string&#34;&gt;&amp;quot;@hourly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; special, expected &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; testcases:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cron_expression = cronex.CronExpression(special)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(cron_expression), expected)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_compute_numtab&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/7 5-10 5 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/5 23-2 5 8 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1.string_tab = testex2.string_tab&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1.compute_numtab()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_dom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;491&lt;/span&gt; * DAY)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * %491 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now_tuple))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_hours&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;9001&lt;/span&gt; * HOUR)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* %9001 * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now_tuple))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_minutes&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(time.time())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        then = time.gmtime(now - &lt;span class=&#34;number&#34;&gt;814075&lt;/span&gt; * MINUTE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now_tuple = time.gmtime(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;%814075 * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex.epoch = &lt;span class=&#34;built_in&#34;&gt;tuple&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(then[:&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]) + [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now_tuple))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_periodics_month&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; period &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            calendar_months = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            description = &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %%%i *&amp;quot;&lt;/span&gt; % period&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cron_expression = cronex.CronExpression(description)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; year &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1970&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1980&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; month &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    days_in_month = calendar.monthrange(year, month)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    should_trigger = &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (calendar_months % period)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; day &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, days_in_month + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        time_tuple = (year, month, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        triggered = cron_expression.check_trigger(time_tuple)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        self.assertEqual(triggered, should_trigger)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    calendar_months += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_parse_atom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input_expect = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5-10&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5-10/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;11-5/2&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;10-5/3&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;11-5/3&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;*/5&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;101&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;666&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;666&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;21-1&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;5/15&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;1/4&amp;#x27;&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;)), &lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;])),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; give_the_function, want_from_function &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; input_expect:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertEqual(cronex.parse_atom(*give_the_function), want_from_function)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_str_and_repr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CronExpression = cronex.CronExpression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/15 4 1-7 * * TEST___TEST&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = &lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(testex1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1, testex2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dom_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 1,2,3,4,5,6,7,8,9,10,11,12 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1, testex2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dow_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * sun,mon,tue,wed,thu,fri,sat&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 0,1,2,3,4,5,6&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(testex1, testex2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dom_either_or_dow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Trigger should fire every Monday or on the 5th day of the month.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 5 * mon&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; e &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            now = (&lt;span class=&#34;number&#34;&gt;2024&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, e, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertTrue(testex.check_trigger(now) == (now[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; time.strftime(&lt;span class=&#34;string&#34;&gt;&amp;quot;%a&amp;quot;&lt;/span&gt;, time.gmtime(time.mktime(now))) == &lt;span class=&#34;string&#34;&gt;&amp;quot;Mon&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Trigger should fire every Wednesday at midnight.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * wed&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            now = (&lt;span class=&#34;number&#34;&gt;2024&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, d, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertTrue(testex.check_trigger(now) == (time.strftime(&lt;span class=&#34;string&#34;&gt;&amp;quot;%a&amp;quot;&lt;/span&gt;, time.gmtime(time.mktime(now))) == &lt;span class=&#34;string&#34;&gt;&amp;quot;Wed&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_L_in_dow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 6L&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# The numbers are the dates of the last Saturday in each month of the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# year 2010.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tv = [&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;26&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, day &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(tv):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            now = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.assertTrue(testex.check_trigger(now))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_L_in_dom&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 L * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2009&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# Checks every day from January 1st 2000 through December 31st&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# 2008 and verifies that the trigger only activates on the last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# day of the month. The year range was chosen to ensure at least&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;# one leap year would be included in the test.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                lastdom = calendar.monthrange(y, v)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; d &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, lastdom + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    now = (y, v, d, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertTrue(testex.check_trigger(now) == (d == lastdom))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_calendar_change_vs_hour_change&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# epoch and local differ by &amp;lt; 48 hours but it should be reported based&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# on calendar days, not 24 hour days&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        epoch = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;59&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        local_time = (&lt;span class=&#34;number&#34;&gt;2010&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 %2 * *&amp;quot;&lt;/span&gt;, epoch, -&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(local_time))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_asterisk_is_loney&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testex = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = time.gmtime()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(testex.check_trigger(now))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_dow_occurence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; dow &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; xrange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; occurence &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                day = (&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; * (occurence - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) + dow + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                expression = &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * %i#%i&amp;quot;&lt;/span&gt; % (dow, occurence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; occurence &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    testex = cronex.CronExpression(expression)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    now = (&lt;span class=&#34;number&#34;&gt;2024&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertFalse(testex.check_trigger(now))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;elif&lt;/span&gt; day &amp;lt; &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    testex = cronex.CronExpression(expression)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    now = (&lt;span class=&#34;number&#34;&gt;2024&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, day, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertTrue(testex.check_trigger(now) == (day &amp;lt;= calendar.monthrange(&lt;span class=&#34;number&#34;&gt;2024&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_strict_range_bounds&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/61 * * * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_modulus&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %-1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;%1 * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* %1 * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * %1 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %1 *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;%0 * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* %0 * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * %0 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * %0 *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * %0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cronex.CronExpression(&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_W&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;5W * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* 5W * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 99W * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0W * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * W0 * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * 5W *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 5W&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cronex.CronExpression(&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_L&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;L * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* L * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 99L * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * 0L * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * L *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * L&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 9L&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * -9L&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cronex.CronExpression(&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_catches_bad_Pound&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;# * * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* # * * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * # * *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * # *&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * * 9#9L&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cronex.CronExpression(&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fail_on_not_enough_fields&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        badstuff = [&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* *&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * *&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;* * * *&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; badstuff:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(ValueError):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cronex.CronExpression(&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;gpt自动填充后assert的优缺点分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gpt自动填充后assert的优缺点分析&#34;&gt;#&lt;/a&gt; gpt 自动填充后 assert 的优缺点分析&lt;/h2&gt;
&lt;h3 id=&#34;填充优秀部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#填充优秀部分&#34;&gt;#&lt;/a&gt; 填充优秀部分：&lt;/h3&gt;
&lt;h4 id=&#34;1test_substitution&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1test_substitution&#34;&gt;#&lt;/a&gt; 1.test_substitution()&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;tests 原代码块函数&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    Verify that the special substitutions are replaced by the correct,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    expanded cron expressions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testcases = [(&lt;span class=&#34;string&#34;&gt;&amp;quot;@yearly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@annually&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@monthly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@weekly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 0&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@midnight&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@hourly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; a, b &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; testcases:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        obj = cronex.CronExpression(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(b &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;repr&lt;/span&gt;(obj))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;gpt3.5 自动填充的代码&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_substitution&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    Verify that the special substitutions are replaced by the correct,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    expanded cron expressions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testcases = [(&lt;span class=&#34;string&#34;&gt;&amp;quot;@yearly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@annually&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 1 *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@monthly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 1 * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@weekly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * 0&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@daily&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@midnight&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 0 * * *&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (&lt;span class=&#34;string&#34;&gt;&amp;quot;@hourly&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;0 * * * *&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; special, expected &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; testcases:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cron_expression = cronex.CronExpression(special)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(&lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;(cron_expression), expected)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;原本的 test 代码中使用 assertTrue 来验证特殊替换后的字符串是否在 &lt;code&gt;obj&lt;/code&gt;  的 &lt;code&gt;repr&lt;/code&gt;  中存在，通过检查 &lt;code&gt;repr(obj)&lt;/code&gt;  的输出来间接验证该特殊替换是否正确&lt;/li&gt;
&lt;li&gt;而 gpt 填充的代码直接使用 assertEqual 来验证 &lt;code&gt;cron_expression&lt;/code&gt;  对象的 &lt;code&gt;str()&lt;/code&gt;  方法是否生成了预期的替换后的 cron 表达式。使用 asserEqual 来判断两个值是否相等&lt;/li&gt;
&lt;li&gt;gpt 自动填充的代码更优秀 —— 其使用 special 和 expected 来作为变量名，更直观和可读。并且它不依赖于间接验证  &lt;code&gt;repr&lt;/code&gt;  的输出是否包含特定字符串，而是直接检查  &lt;code&gt;str()&lt;/code&gt;  方法生成的输出是否符合预期。通过直接比较字符串可以更清晰地表达测试的意图和预期结果，使得测试代码更易于理解和维护。&lt;/li&gt;
&lt;li&gt;综上所述，在 &lt;code&gt;test_substitution&lt;/code&gt;  函数上，gpt 生成的代码更加优秀。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;填充后不足有缺陷部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#填充后不足有缺陷部分&#34;&gt;#&lt;/a&gt; 填充后不足 / 有缺陷部分&lt;/h3&gt;
&lt;h4 id=&#34;1-test_compute_numtab&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-test_compute_numtab&#34;&gt;#&lt;/a&gt; 1. test_compute_numtab（）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;tests 原代码：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_compute_numtab&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/7 5-10 5 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/5 23-2 5 8 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.assertNotEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.assertNotEqual(testex1.numerical_tab, testex2.numerical_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex1.string_tab = testex2.string_tab&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex1.compute_numtab()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.assertEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.assertEqual(testex1.numerical_tab, testex2.numerical_tab)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;gpt3.5 自动填充代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_compute_numtab&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex1 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/7 5-10 5 * *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex2 = cronex.CronExpression(&lt;span class=&#34;string&#34;&gt;&amp;quot;*/5 23-2 5 8 *&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex1.string_tab = testex2.string_tab&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    testex1.compute_numtab()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.assertEqual(testex1.string_tab, testex2.string_tab)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;原代码验证在修改表达式的字符串版本后调用 compute_numtab 是否会更新静态触发器值缓存。&lt;/li&gt;
&lt;li&gt;原代码在最开始先通过两个 &lt;code&gt;assertNotEqual&lt;/code&gt;  确保 &lt;code&gt;testex1&lt;/code&gt;  和 &lt;code&gt;testex2&lt;/code&gt;  在初始化时候的  &lt;code&gt;string_tab&lt;/code&gt;  属性和 &lt;code&gt;numerical_tab&lt;/code&gt;  属性是不同的，然后再将  &lt;code&gt;testex1&lt;/code&gt;  的  &lt;code&gt;string_tab&lt;/code&gt;  属性设置为  &lt;code&gt;testex2&lt;/code&gt;  的  &lt;code&gt;string_tab&lt;/code&gt;  属性，人为的使  &lt;code&gt;testex1&lt;/code&gt;  和  &lt;code&gt;testex2&lt;/code&gt;  在字符串表示上相同。然后再来测试 &lt;code&gt;compute_numtab&lt;/code&gt;  的效果，即重新计算 &lt;code&gt;testex1&lt;/code&gt;  的数值表示，然后再验证 &lt;code&gt;testex1&lt;/code&gt;  和 &lt;code&gt;testex2&lt;/code&gt;  在修改后的属性是相同的&lt;/li&gt;
&lt;li&gt;gpt3.5 填充的代码相较而言只考虑到了 testex1=testex2 后调用 compute_numtab 函数后两个 testex 的 string_tab 是否相同&lt;/li&gt;
&lt;li&gt;LLM 自动生成的代码相较而言考虑的并不全面，虽然其足以验证基本的功能，但是没有考虑到验证 &lt;code&gt;testex1&lt;/code&gt;  和  &lt;code&gt;testex2&lt;/code&gt;  的字符串表和数值表不相等，和验证验证 &lt;code&gt;testex1&lt;/code&gt;  和  &lt;code&gt;testex2&lt;/code&gt;  修改后字符表相等，并不全面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改建议&lt;/strong&gt;：给 gpt3.5 增加更详细的 prompt，比如告诉 gpt 需要在自动填充 assert 的时候考虑得更全面，充分的考虑到所有情况，避免出现因为过度考虑性能而忽视设计周密的情况。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/4_oj-master/</id>
        <title>online-judge-tools/oj</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/4_oj-master/"/>
        <content type="html">&lt;h1 id=&#34;online-judge-toolsoj&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#online-judge-toolsoj&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29ubGluZS1qdWRnZS10b29scy9vag==&#34;&gt;online-judge-tools/oj&lt;/span&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oj&lt;/code&gt;  是一个帮助解决各种在线评测问题命令。此命令会自动下载示例案例、生成其他测试案例、测试您的代码并提交。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;python setup.py install&lt;/code&gt;  安装该第三方库&lt;/li&gt;
&lt;li&gt;使用介绍：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;positional arguments:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;download,d,dl,login,l,submit,s,test,t,generate-output,g/o,generate-&lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt;,g/i,test-reactive,t/r,test-interactive,t/i&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; details, see &lt;span class=&#34;string&#34;&gt;&amp;quot;\\?\F:\Anaconda\envs\py312\Scripts\oj COMMAND --help&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    download (d, dl)    download sample cases&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    login (l)           login to a service&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    submit (s)          submit your solution&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    test (t)            test your code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    generate-output (g/o)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        generate output files &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; reference implementation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    generate-&lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt; (g/i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        generate &lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt; files &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; given generator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    test-reactive (t/r, test-interactive, t/i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        test &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; interactive problem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;options:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -h, --&lt;span class=&#34;built_in&#34;&gt;help&lt;/span&gt;            show this &lt;span class=&#34;built_in&#34;&gt;help&lt;/span&gt; message &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; exit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -v, --verbose&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  -c COOKIE, --cookie COOKIE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        path to cookie. (default: C:\Users\JackDu\AppData\Local\online-judge-tools\online-judge-tools\cookie.jar)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  --version             &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt; the online-judge-tools version number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tips:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  The official tutorial exists on the web: https://github.com/online-judge-tools/oj/blob/master/docs/getting-started.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;command_downloadpy代码修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#command_downloadpy代码修改&#34;&gt;#&lt;/a&gt; command_download.py 代码修改&lt;/h2&gt;
&lt;h3 id=&#34;原本的command_downloadpy代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原本的command_downloadpy代码&#34;&gt;#&lt;/a&gt; 原本的 command_download.py 代码：&lt;/h3&gt;
&lt;p&gt;base prompt 为：“我这个 test case 缺少 assert 语句，请你帮我自动填充。”&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; hashlib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; onlinejudge_command.subcommand.download &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; subcommand_download&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tests.utils&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; onlinejudge_command.main &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; get_parser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_files_from_json&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    files = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, sample &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(samples):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ext &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;out&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; sample:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                name = sample[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] + &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt; + ext&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;sample-&amp;#123;&amp;#125;.&amp;#123;&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ext)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            files[name] = hashlib.md5(sample[ext + &lt;span class=&#34;string&#34;&gt;&amp;#x27;put&amp;#x27;&lt;/span&gt;].encode()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; files&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url, files, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        files = get_files_from_json(files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tests.utils.sandbox([]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.utils.run(args, check=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; os.path.exists(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, name)) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fh:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(files, result)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args = [&lt;span class=&#34;string&#34;&gt;&amp;quot;download&amp;quot;&lt;/span&gt;, url]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;--system&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;--silent&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args = get_parser().parse_args(args=args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.assertFalse(subcommand_download.run(args))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url1, url2, files, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        files = get_files_from_json(files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tests.utils.sandbox([]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = get_parser().parse_args(args=args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertTrue(subcommand_download.run(args))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = get_parser().parse_args(args=args)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# download from url2 should be aborted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertFalse(subcommand_download.run(args))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# check download from url1 is not overwritten&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; os.path.exists(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, name)) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fh:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(files, result)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DownloadTest&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;DownloadTest is a class to test `download` subcommand itself. Don&amp;#x27;t try to test sample parsers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_atcoder_abc114_c&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;575\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3600\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;13\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;999999999\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;26484\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_atcoder_abc003_4&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3 2\n2 2\n2 2\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;12\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4 5\n3 1\n3 0\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;10\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;23 18\n15 13\n100 95\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;364527243\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;30 30\n24 22\n145 132\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;976668549\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_invalid_url&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_413&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# This task is not supported.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DownloadInvalidTest&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_invalid&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://not_exist_contest.jp/tasks/001_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_no_sample_found&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://open.kattis.com/problems/hello&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_twice(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;575\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3600\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;13\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;999999999\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;26484\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;移除assert断言后的command_downloadpy代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移除assert断言后的command_downloadpy代码&#34;&gt;#&lt;/a&gt; 移除 assert 断言后的 command_download.py 代码&lt;/h3&gt;
&lt;p&gt;移除 assert 断言和部分提示后，我们发送给 LLM 的代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; hashlib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; onlinejudge_command.subcommand.download &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; subcommand_download&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tests.utils&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; onlinejudge_command.main &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; get_parser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_files_from_json&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    files = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, sample &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(samples):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ext &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;out&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; sample:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                name = sample[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] + &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt; + ext&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;sample-&amp;#123;&amp;#125;.&amp;#123;&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ext)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            files[name] = hashlib.md5(sample[ext + &lt;span class=&#34;string&#34;&gt;&amp;#x27;put&amp;#x27;&lt;/span&gt;].encode()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; files&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url, files, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        files = get_files_from_json(files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tests.utils.sandbox([]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.utils.run(args, check=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; os.path.exists(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, name)) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fh:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args = [&lt;span class=&#34;string&#34;&gt;&amp;quot;download&amp;quot;&lt;/span&gt;, url]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;--system&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;--silent&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url1, url2, files, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        files = get_files_from_json(files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tests.utils.sandbox([]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; os.path.exists(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, name)) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fh:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DownloadTest&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;DownloadTest is a class to test `download` subcommand itself. Don&amp;#x27;t try to test sample parsers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_atcoder_abc114_c&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;575\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3600\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;13\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;999999999\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;26484\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_atcoder_abc003_4&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3 2\n2 2\n2 2\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;12\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4 5\n3 1\n3 0\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;10\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;23 18\n15 13\n100 95\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;364527243\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;30 30\n24 22\n145 132\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;976668549\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_invalid_url&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_413&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# This task is not supported.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DownloadInvalidTest&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_invalid&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://not_exist_contest.jp/tasks/001_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_no_sample_found&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://open.kattis.com/problems/hello&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_twice(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;575\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3600\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;13\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;999999999\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;26484\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;llm自动填充assert语句后的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#llm自动填充assert语句后的代码&#34;&gt;#&lt;/a&gt; LLM 自动填充 assert 语句后的代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; hashlib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; onlinejudge_command.subcommand.download &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; subcommand_download&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tests.utils&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; onlinejudge_command.main &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; get_parser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_files_from_json&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    files = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, sample &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(samples):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ext &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;in&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;out&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; sample:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                name = sample[&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;] + &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt; + ext&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;sample-&amp;#123;&amp;#125;.&amp;#123;&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, ext)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            files[name] = hashlib.md5(sample[ext + &lt;span class=&#34;string&#34;&gt;&amp;#x27;put&amp;#x27;&lt;/span&gt;].encode()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; files&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url, files, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        files = get_files_from_json(files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tests.utils.sandbox([]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.utils.run(args, check=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; os.path.exists(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, name)) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fh:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(result, files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    args = [&lt;span class=&#34;string&#34;&gt;&amp;quot;download&amp;quot;&lt;/span&gt;, url]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;--system&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;--silent&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; self.assertRaises(SystemExit):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.utils.run(args, check=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, url1, url2, files, is_system=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, is_silent=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;files&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        files = get_files_from_json(files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tests.utils.sandbox([]):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.utils.run(args, check=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        args = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;download&amp;#x27;&lt;/span&gt;, url2]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_system:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--system&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; is_silent:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            args += [&lt;span class=&#34;string&#34;&gt;&amp;#x27;--silent&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.utils.run(args, check=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; os.path.exists(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; os.listdir(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(os.path.join(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;, name)) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; fh:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    result[name] = hashlib.md5(fh.buffer.read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.assertEqual(result, files)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DownloadTest&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;DownloadTest is a class to test `download` subcommand itself. Don&amp;#x27;t try to test sample parsers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_atcoder_abc114_c&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;575\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3600\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;13\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;999999999\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;26484\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_atcoder_abc003_4&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3 2\n2 2\n2 2\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;12\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4 5\n3 1\n3 0\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;10\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;23 18\n15 13\n100 95\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;364527243\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;30 30\n24 22\n145 132\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;976668549\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_invalid_url&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://abc001.contest.atcoder.jp/tasks/abc001_100&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_413&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# This task is not supported.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://chokudai001.contest.atcoder.jp/tasks/chokudai_001_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DownloadInvalidTest&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_failure&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_failure(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;snippet_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, *args, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tests.command_download.snippet_call_download_twice(self, *args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_invalid&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://not_exist_contest.jp/tasks/001_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_no_sample_found&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/tenka1-2013-quala/tasks/tenka1_2013_qualA_a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_failure(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://open.kattis.com/problems/hello&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_call_download_twice&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.snippet_call_download_twice(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc114/tasks/abc114_c&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://atcoder.jp/contests/abc003/tasks/abc003_4&amp;#x27;&lt;/span&gt;, [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;575\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;3600\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;13\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;999999999\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;26484\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ], &lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/7_ttach-master/</id>
        <title>ttach</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/7_ttach-master/"/>
        <content type="html">&lt;h1 id=&#34;ttach&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ttach&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3F1YnZlbC90dGFjaA==&#34;&gt;ttach&lt;/span&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 PyTorch 进行图像测试时间增强&lt;/li&gt;
&lt;li&gt;与数据增强对训练集的作用类似，测试时增强的目的是对测试图像进行随机修改。因此，我们不会只向训练模型显示一次&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    Input&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      |           &lt;span class=&#34;comment&#34;&gt;# input batch of images &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; / / /|\ \ \      &lt;span class=&#34;comment&#34;&gt;# apply augmentations (flips, rotation, scale, etc.)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| | | | | | |     &lt;span class=&#34;comment&#34;&gt;# pass augmented batches through model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| | | | | | |     &lt;span class=&#34;comment&#34;&gt;# reverse transformations for each batch of masks/labels&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; \ \ \ / / /      &lt;span class=&#34;comment&#34;&gt;# merge predictions (mean, max, gmean, etc.)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      |           &lt;span class=&#34;comment&#34;&gt;# output batch of masks/labels&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Output&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;test_transformspy代码填充分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_transformspy代码填充分析&#34;&gt;#&lt;/a&gt; test_transforms.py 代码填充分析&lt;/h2&gt;
&lt;h3 id=&#34;test_transformspy原码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_transformspy原码&#34;&gt;#&lt;/a&gt; test_transforms.py 原码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ttach &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tta&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Scale(&lt;span class=&#34;params&#34;&gt;scales=[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Resize(&lt;span class=&#34;params&#34;&gt;sizes=[(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;)], original_size=(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_aug_deaug_mask&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_mask(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(a, deaug)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Scale(&lt;span class=&#34;params&#34;&gt;scales=[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Add(&lt;span class=&#34;params&#34;&gt;values=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Multiply(&lt;span class=&#34;params&#34;&gt;factors=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.FiveCrops(&lt;span class=&#34;params&#34;&gt;crop_height=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, crop_width=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Resize(&lt;span class=&#34;params&#34;&gt;sizes=[(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;)], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_label_is_same&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_label(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(aug, deaug)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_flip_keypoints&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keypoints = torch.tensor([[&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_keypoints(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(keypoints, deaug)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rotate90_keypoints&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keypoints = torch.tensor([[&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_keypoints(aug, **&amp;#123;transform.pname: -p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(keypoints, deaug)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_add_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Add(values=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(aug, a + p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_multiply_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Multiply(factors=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(aug, a * p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fivecrop_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.FiveCrops(crop_height=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, crop_width=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    output = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(transform.params):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; aug.item() == output[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_resize_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     transform = tta.Resize(sizes=[(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)], original_size=(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     a = torch.arange(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(transform.params):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; aug.item() == output[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;删除assert断言给llm分析的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除assert断言给llm分析的代码&#34;&gt;#&lt;/a&gt; 删除 assert 断言给 LLM 分析的代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ttach &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tta&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Scale(&lt;span class=&#34;params&#34;&gt;scales=[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Resize(&lt;span class=&#34;params&#34;&gt;sizes=[(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;)], original_size=(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_aug_deaug_mask&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_mask(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Scale(&lt;span class=&#34;params&#34;&gt;scales=[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Add(&lt;span class=&#34;params&#34;&gt;values=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Multiply(&lt;span class=&#34;params&#34;&gt;factors=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.FiveCrops(&lt;span class=&#34;params&#34;&gt;crop_height=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, crop_width=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Resize(&lt;span class=&#34;params&#34;&gt;sizes=[(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;)], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_label_is_same&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_label(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_flip_keypoints&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keypoints = torch.tensor([[&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_keypoints(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rotate90_keypoints&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keypoints = torch.tensor([[&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_keypoints(aug, **&amp;#123;transform.pname: -p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_add_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Add(values=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_multiply_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Multiply(factors=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fivecrop_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.FiveCrops(crop_height=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, crop_width=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    output = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(transform.params):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_resize_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     transform = tta.Resize(sizes=[(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)], original_size=(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     a = torch.arange(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(transform.params):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;llm自动填充assert断言后的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#llm自动填充assert断言后的代码&#34;&gt;#&lt;/a&gt; LLM 自动填充 assert 断言后的代码&lt;/h3&gt;
&lt;p&gt;**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; ttach &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tta&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Scale(&lt;span class=&#34;params&#34;&gt;scales=[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Resize(&lt;span class=&#34;params&#34;&gt;sizes=[(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;)], original_size=(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_aug_deaug_mask&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_mask(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; aug.shape == deaug.shape, &lt;span class=&#34;string&#34;&gt;f&amp;quot;Shape mismatch after augmentation-deaugmentation for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(a, deaug), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original tensor does not match deaugmented tensor for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Scale(&lt;span class=&#34;params&#34;&gt;scales=[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Add(&lt;span class=&#34;params&#34;&gt;values=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Multiply(&lt;span class=&#34;params&#34;&gt;factors=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.FiveCrops(&lt;span class=&#34;params&#34;&gt;crop_height=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, crop_width=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Resize(&lt;span class=&#34;params&#34;&gt;sizes=[(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;), (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;)], interpolation=&lt;span class=&#34;string&#34;&gt;&amp;quot;nearest&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_label_is_same&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_label(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.equal(a, deaug), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original tensor does not match deaugmented tensor for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.HorizontalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.VerticalFlip(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_flip_keypoints&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keypoints = torch.tensor([[&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_keypoints(aug, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(keypoints, deaug), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original keypoints do not match deaugmented keypoints for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;transform&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    [&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        tta.Rotate90(&lt;span class=&#34;params&#34;&gt;angles=[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;180&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;270&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    ],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rotate90_keypoints&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;transform&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    keypoints = torch.tensor([[&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.9&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_deaug_keypoints(keypoints.detach().clone(), **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        deaug = transform.apply_deaug_keypoints(aug, **&amp;#123;transform.pname: -p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(keypoints, deaug), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original keypoints do not match deaugmented keypoints for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_add_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Add(values=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(a, aug), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original tensor does not match augmented tensor for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_multiply_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Multiply(factors=[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; transform.params:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.allclose(a, aug), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original tensor does not match augmented tensor for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fivecrop_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.FiveCrops(crop_height=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, crop_width=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    output = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(transform.params):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; torch.equal(a[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], aug[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]), &lt;span class=&#34;string&#34;&gt;f&amp;quot;Original tensor does not match augmented tensor for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_resize_transform&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transform = tta.Resize(sizes=[(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)], original_size=(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = torch.arange(&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;).reshape(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;).&lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;enumerate&lt;/span&gt;(transform.params):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aug = transform.apply_aug_image(a, **&amp;#123;transform.pname: p&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; aug.shape[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:] == p, &lt;span class=&#34;string&#34;&gt;f&amp;quot;Augmented image shape does not match expected shape &lt;span class=&#34;subst&#34;&gt;&amp;#123;p&amp;#125;&lt;/span&gt; for &lt;span class=&#34;subst&#34;&gt;&amp;#123;transform&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/5_giskard-main/</id>
        <title>Giskard-AI/giskard</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/5_giskard-main/"/>
        <content type="html">&lt;h1 id=&#34;giskard-aigiskard&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#giskard-aigiskard&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0dpc2thcmQtQUkvZ2lza2FyZA==&#34;&gt;Giskard-AI/giskard&lt;/span&gt;&lt;/h1&gt;
&lt;h2 id=&#34;test_data_processing_pipelinepy3代码处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_data_processing_pipelinepy3代码处理&#34;&gt;#&lt;/a&gt; test_data_processing_pipeline.py3 代码处理&lt;/h2&gt;
&lt;h3 id=&#34;原test代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原test代码&#34;&gt;#&lt;/a&gt; 原 test 代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; giskard &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Dataset, SlicingFunction, slicing_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; giskard.registry.transformation_function &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; transformation_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;slice with parenthesis&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_with_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;slice cell level&amp;quot;&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;amount: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_without_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;transform with parenthesis&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_with_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount = -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_without_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount = -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_divide_by_five&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount /= &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function(&lt;span class=&#34;params&#34;&gt;cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;column_level_divide&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;nb: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;, amount: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nb / amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isinstance&lt;/span&gt;(filter_with_parenthesis, SlicingFunction), &lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(filter_with_parenthesis)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;884&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;568&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing_using_lambda&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;884&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;568&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isinstance&lt;/span&gt;(filter_with_parenthesis, SlicingFunction), &lt;span class=&#34;string&#34;&gt;f&amp;quot;&lt;span class=&#34;subst&#34;&gt;&amp;#123;&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;(filter_with_parenthesis)&amp;#125;&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_cell_level, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;884&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; amount: amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;568&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_chain&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_transformation_function(transform_divide_by_five)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.process()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;188&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(column_level_divide(amount=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;188&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level_parameterized&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(column_level_divide(column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, amount=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;188&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level_lambda&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; i: i / &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;188&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; np.&lt;span class=&#34;built_in&#34;&gt;all&lt;/span&gt;(ds.df.credit_amount == -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; np.&lt;span class=&#34;built_in&#34;&gt;all&lt;/span&gt;(ds.df.credit_amount == -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df.credit_amount.unique()) &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation_without_annotation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_without_annotation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x.credit_amount = -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_without_annotation)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; np.&lt;span class=&#34;built_in&#34;&gt;all&lt;/span&gt;(ds.df.credit_amount == -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df.credit_amount.unique()) &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_missing_arg_slicing_function&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TypeError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Required arg 0 of slice_fn to be &amp;lt;class &amp;#x27;pandas.core.series.Series&amp;#x27;&amp;gt;, but none was defined&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        @slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;slice_fn&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_wrong_type_slicing_function&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TypeError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Required arg 0 of slice_fn to be &amp;lt;class &amp;#x27;pandas.core.series.Series&amp;#x27;&amp;gt;, but &amp;lt;class &amp;#x27;int&amp;#x27;&amp;gt; was defined&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        @slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;slice_fn&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;row: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; row &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slice_fn(&lt;span class=&#34;string&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_chain_with_parameters&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;row greater than&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_greater_than&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series, row: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, threshold: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x[row] &amp;gt; threshold&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_divide_by&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series, row: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, divider: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x[row] /= divider&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_greater_than(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_transformation_function(transform_divide_by(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_greater_than(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(german_credit_data.df) == &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.process()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds.df) == &lt;span class=&#34;number&#34;&gt;188&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation_without_type&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @transformation_function(&lt;span class=&#34;params&#34;&gt;row_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add_positive_sentence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;row&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        row = row.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        row.text += &lt;span class=&#34;string&#34;&gt;&amp;quot; I love this!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; row&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df = pd.DataFrame([&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;testing.&amp;quot;&lt;/span&gt;&amp;#125;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dataset = Dataset(df, cat_columns=[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transformed_dataset = dataset.transform(add_positive_sentence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; transformed_dataset.df.iloc[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].text == &lt;span class=&#34;string&#34;&gt;&amp;quot;testing. I love this!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;去除assert后的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#去除assert后的代码&#34;&gt;#&lt;/a&gt; 去除 assert 后的代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; giskard &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Dataset, SlicingFunction, slicing_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; giskard.registry.transformation_function &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; transformation_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;slice with parenthesis&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_with_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;slice cell level&amp;quot;&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;amount: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_without_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;transform with parenthesis&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_with_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount = -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_without_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount = -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_divide_by_five&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount /= &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function(&lt;span class=&#34;params&#34;&gt;cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;column_level_divide&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;nb: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;, amount: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nb / amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing_using_lambda&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_cell_level, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; amount: amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_chain&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_transformation_function(transform_divide_by_five)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.process()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(column_level_divide(amount=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level_parameterized&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(column_level_divide(column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, amount=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level_lambda&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; i: i / &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation_without_annotation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_without_annotation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x.credit_amount = -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_without_annotation)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_missing_arg_slicing_function&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TypeError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Required arg 0 of slice_fn to be &amp;lt;class &amp;#x27;pandas.core.series.Series&amp;#x27;&amp;gt;, but none was defined&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        @slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;slice_fn&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_wrong_type_slicing_function&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TypeError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Required arg 0 of slice_fn to be &amp;lt;class &amp;#x27;pandas.core.series.Series&amp;#x27;&amp;gt;, but &amp;lt;class &amp;#x27;int&amp;#x27;&amp;gt; was defined&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        @slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;slice_fn&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;row: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; row &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slice_fn(&lt;span class=&#34;string&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_chain_with_parameters&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;row greater than&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_greater_than&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series, row: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, threshold: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x[row] &amp;gt; threshold&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_divide_by&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series, row: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, divider: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x[row] /= divider&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_greater_than(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_transformation_function(transform_divide_by(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_greater_than(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.process()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation_without_type&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @transformation_function(&lt;span class=&#34;params&#34;&gt;row_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add_positive_sentence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;row&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        row = row.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        row.text += &lt;span class=&#34;string&#34;&gt;&amp;quot; I love this!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; row&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df = pd.DataFrame([&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;testing.&amp;quot;&lt;/span&gt;&amp;#125;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dataset = Dataset(df, cat_columns=[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transformed_dataset = dataset.transform(add_positive_sentence)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;gpt35自动填充的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gpt35自动填充的代码&#34;&gt;#&lt;/a&gt; gpt3.5 自动填充的代码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;base prompt 为&lt;/strong&gt;：我这个 tests 代码缺少 assert 断言，请你自动填充&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; giskard &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Dataset, SlicingFunction, slicing_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; giskard.registry.transformation_function &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; transformation_function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;slice with parenthesis&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_with_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;slice cell level&amp;quot;&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;amount: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_without_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;transform with parenthesis&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_with_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount = -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_without_parenthesis&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount = -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_divide_by_five&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x.credit_amount /= &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@transformation_function(&lt;span class=&#34;params&#34;&gt;cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;column_level_divide&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;nb: &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;, amount: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;float&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nb / amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing_using_lambda&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: x.credit_amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_slicing_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_cell_level, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = ds.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; amount: amount &amp;gt; &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_chain&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_transformation_function(transform_divide_by_five)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.process()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(column_level_divide(amount=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level_parameterized&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(column_level_divide(column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, amount=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transform_cell_level_lambda&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        german_credit_data.&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .transform(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; i: i / &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, cell_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, column_name=&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;built_in&#34;&gt;slice&lt;/span&gt;(filter_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_without_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_with_parenthesis)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation_without_annotation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_without_annotation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x.credit_amount = -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.transform(transform_without_annotation)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_missing_arg_slicing_function&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TypeError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Required arg 0 of slice_fn to be &amp;lt;class &amp;#x27;pandas.core.series.Series&amp;#x27;&amp;gt;, but none was defined&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        @slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;slice_fn&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_wrong_type_slicing_function&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TypeError,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Required arg 0 of slice_fn to be &amp;lt;class &amp;#x27;pandas.core.series.Series&amp;#x27;&amp;gt;, but &amp;lt;class &amp;#x27;int&amp;#x27;&amp;gt; was defined&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        @slicing_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;slice_fn&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;row: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; row &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        slice_fn(&lt;span class=&#34;string&#34;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_chain_with_parameters&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;german_credit_data: Dataset&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @slicing_function(&lt;span class=&#34;params&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;quot;row greater than&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;filter_greater_than&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series, row: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, threshold: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x[row] &amp;gt; threshold&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @transformation_function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;transform_divide_by&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x: pd.Series, row: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;, divider: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&lt;/span&gt;) -&amp;gt; pd.Series:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x[row] /= divider&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_greater_than(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_transformation_function(transform_divide_by(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    german_credit_data.add_slicing_function(filter_greater_than(&lt;span class=&#34;string&#34;&gt;&amp;quot;credit_amount&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ds = german_credit_data.process()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ds) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_transformation_without_type&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @transformation_function(&lt;span class=&#34;params&#34;&gt;row_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add_positive_sentence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;row&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        row = row.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        row.text += &lt;span class=&#34;string&#34;&gt;&amp;quot; I love this!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; row&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df = pd.DataFrame([&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;testing.&amp;quot;&lt;/span&gt;&amp;#125;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dataset = Dataset(df, cat_columns=[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transformed_dataset = dataset.transform(add_positive_sentence)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(transformed_dataset) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/9_sumeval-master/</id>
        <title>sumeval</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/9_sumeval-master/"/>
        <content type="html">&lt;h1 id=&#34;sumeval&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sumeval&#34;&gt;#&lt;/a&gt; &lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFs&#34;&gt;sumeval&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不仅支持英文，还支持日文和中文，其他语言也可以&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2NoYWtraS13b3Jrcy9zdW1ldmFsI3dlbGNvbWUtY29udHJpYnV0aW9uLXRhZGE=&#34;&gt;轻松&lt;/span&gt;扩展&lt;/li&gt;
&lt;li&gt;使用方法 &lt;code&gt;pip install sumeval&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;test_rougepy代码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_rougepy代码分析&#34;&gt;#&lt;/a&gt; test_rouge.py 代码分析&lt;/h2&gt;
&lt;h3 id=&#34;test_rougepy原代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_rougepy原代码&#34;&gt;#&lt;/a&gt; test_rouge.py 原代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; rougescore &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; rouge_n, rouge_l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pythonrouge.pythonrouge &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Pythonrouge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sumeval.metrics.rouge &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; RougeCalculator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRouge&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DATA_DIR = os.path.join(os.path.dirname(__file__), &lt;span class=&#34;string&#34;&gt;&amp;quot;data/rouge&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load_test_data&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test_file = os.path.join(self.DATA_DIR, &lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-test.json&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(test_file, encoding=&lt;span class=&#34;string&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = json.load(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b2_v - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;-F&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)] - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# noqa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_stop_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b2_v - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;-F&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)] - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# noqa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_length_limit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length_limit=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                word_level=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b2_v - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;-F&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)] - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# noqa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_word_limit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, word_limit=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                word_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b2_v - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;-F&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)] - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;# noqa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_l&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            n_gram=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, ROUGE_L=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b2_v = rouge_l(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                v = rouge.rouge_l(s, references)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b2_v - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertLess(&lt;span class=&#34;built_in&#34;&gt;abs&lt;/span&gt;(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-L-F&amp;quot;&lt;/span&gt;] - v), &lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;去掉assert断言和一些辅助说明后喂给llm的test代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#去掉assert断言和一些辅助说明后喂给llm的test代码&#34;&gt;#&lt;/a&gt; 去掉 assert 断言和一些辅助说明后喂给 LLM 的 test 代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; rougescore &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; rouge_n, rouge_l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pythonrouge.pythonrouge &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Pythonrouge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sumeval.metrics.rouge &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; RougeCalculator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRouge&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DATA_DIR = os.path.join(os.path.dirname(__file__), &lt;span class=&#34;string&#34;&gt;&amp;quot;data/rouge&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load_test_data&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test_file = os.path.join(self.DATA_DIR, &lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-test.json&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(test_file, encoding=&lt;span class=&#34;string&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = json.load(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_stop_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_length_limit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length_limit=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                word_level=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_word_limit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, word_limit=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                word_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_l&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            n_gram=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, ROUGE_L=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b2_v = rouge_l(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                v = rouge.rouge_l(s, references)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;llm自动填充assert断言后的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#llm自动填充assert断言后的代码&#34;&gt;#&lt;/a&gt; LLM 自动填充 assert 断言后的代码&lt;/h3&gt;
&lt;p&gt;**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; unittest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; rougescore &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; rouge_n, rouge_l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pythonrouge.pythonrouge &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Pythonrouge&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sumeval.metrics.rouge &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; RougeCalculator&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRouge&lt;/span&gt;(unittest.TestCase):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DATA_DIR = os.path.join(os.path.dirname(__file__), &lt;span class=&#34;string&#34;&gt;&amp;quot;data/rouge&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;load_test_data&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test_file = os.path.join(self.DATA_DIR, &lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-test.json&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(test_file, encoding=&lt;span class=&#34;string&#34;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            data = json.load(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], b2_v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_stop_word&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], b2_v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_length_limit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length_limit=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                word_level=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], b2_v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_with_word_limit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, word_limit=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                n_gram=n, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                word_level=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    b2_v = rouge_n(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   n, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    v = rouge.rouge_n(s, references, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], b2_v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(n)], v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_rouge_l&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = self.load_test_data()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rouge = RougeCalculator(stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; eval_id &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            summaries = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;summaries&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            references = data[eval_id][&lt;span class=&#34;string&#34;&gt;&amp;quot;references&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; s &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; summaries:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                baseline = Pythonrouge(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            summary_file_exist=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            summary=[[s]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            reference=[[[r] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            n_gram=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, recall_only=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, ROUGE_L=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            length_limit=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, length=&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            stemming=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, stopwords=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b1_v = baseline.calc_score()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b2_v = rouge_l(rouge.tokenize(s),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               [rouge.tokenize(r) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; r &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; references],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                               &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                v = rouge.rouge_l(s, references)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-L&amp;quot;&lt;/span&gt;], b2_v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                self.assertAlmostEqual(b1_v[&lt;span class=&#34;string&#34;&gt;&amp;quot;ROUGE-L&amp;quot;&lt;/span&gt;], v, places=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    unittest.main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/</id>
        <title>artificial-adversary</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/X_artificial-adversary-master/"/>
        <content type="html">&lt;h1 id=&#34;artificial-adversary&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#artificial-adversary&#34;&gt;#&lt;/a&gt; &lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9hcnRpZmljaWFsLWFkdmVyc2FyeQ==&#34;&gt;artificial-adversary&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在对用户生成的文本进行分类时，用户可以通过多种方式修改其内容以避免被检测到。这些方法通常是对文本进行表面修改，即更改所使用的原始字符或单词，但保留足够明显的原始含义以供人类读者理解。这些方法包括用相似的字符替换字符、删除或添加标点和空格以及交换单词中的字母。例如，这 &lt;code&gt;please wire me 10,000 US DOLLARS to bank of scamland&lt;/code&gt;  可能是一条明显的诈骗信息，但 &lt;code&gt;pl3@se.wire me 10000 US DoLars to,BANK of ScamIand&lt;/code&gt;  可以欺骗许多分类器。&lt;/li&gt;
&lt;li&gt;安装：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip &lt;span class=&#34;keyword&#34;&gt;install&lt;/span&gt; Adversary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python -m textblob.download_corpora&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用于数据集增强&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于性能界限&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;test_allpy代码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_allpy代码分析&#34;&gt;#&lt;/a&gt; test_all.py 代码分析&lt;/h2&gt;
&lt;h3 id=&#34;test_allpy源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_allpy源码&#34;&gt;#&lt;/a&gt; test_all.py 源码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;将 &lt;code&gt;test_adversary.py&lt;/code&gt; 、 &lt;code&gt;test_attacks.py&lt;/code&gt; 、 &lt;code&gt;test_utils.py&lt;/code&gt;  三个代码三合一后，我创建了 test_all.py 代码，源码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.adversary &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Adversary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.attacks &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.utils &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_generate_single_iter&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(g) == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_generate_many_iter&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts, text_sample_rate=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(g) == &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_large&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts, text_sample_rate=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(g) == &lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_attack&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df_s, df_m = m.attack(og_texts, g, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; og_texts &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(df_s &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; df_m &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_attack_large&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df_s, df_m = m.attack(og_texts, g, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; og_texts &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; (df_s &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; df_m &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_num_to_word&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(num_to_word(&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;) == &lt;span class=&#34;string&#34;&gt;&amp;#x27;one&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(num_to_word(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dog&amp;#x27;&lt;/span&gt;) == &lt;span class=&#34;string&#34;&gt;&amp;#x27;dog&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_flatten_unique&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = [[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(flatten_unique(l) == [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_combinations_of_len&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(combinations_of_len(l, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) == [(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,), (&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,), (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,), (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), (&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fancy_titles&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cols = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;change_case&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;insert_duplicate_characters&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;synonym&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(fancy_titles(cols) == [&lt;span class=&#34;string&#34;&gt;&amp;#x27;Change Case&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Insert Duplicate Characters&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Synonym&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;删除assert语句的test代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除assert语句的test代码&#34;&gt;#&lt;/a&gt; 删除 assert 语句的 test 代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.adversary &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Adversary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.attacks &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.utils &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_generate_single_iter&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_generate_many_iter&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts, text_sample_rate=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_large&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts, text_sample_rate=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_attack&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df_s, df_m = m.attack(og_texts, g, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; og_texts &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_attack_large&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df_s, df_m = m.attack(og_texts, g, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; og_texts &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_num_to_word&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_flatten_unique&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = [[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_combinations_of_len&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fancy_titles&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cols = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;change_case&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;insert_duplicate_characters&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;synonym&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;llm自动填充assert语句后的test代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#llm自动填充assert语句后的test代码&#34;&gt;#&lt;/a&gt; LLM 自动填充 assert 语句后的 test 代码&lt;/h3&gt;
&lt;p&gt;**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.adversary &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Adversary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.attacks &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; Adversary.utils &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_generate_single_iter&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(g) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_generate_many_iter&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts, text_sample_rate=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(g) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_large&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts, text_sample_rate=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(g) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_attack&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;u&amp;#x27;happy happy happy happy dog dog dog dog dog&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;u&amp;#x27;okay okay yeah here&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df_s, df_m = m.attack(og_texts, g, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; og_texts &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(df_s) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(df_m) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_attack_large&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = Adversary(verbose=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    og_texts = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;tell me awful things&amp;#x27;&lt;/span&gt;] * &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    g = m.generate(og_texts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    df_s, df_m = m.attack(og_texts, g, &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; og_texts &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(df_s) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(df_m) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(og_texts)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_num_to_word&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Add assertions when implemented&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_flatten_unique&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = [[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    flat_list = flatten_unique(l)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(flat_list) == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_combinations_of_len&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    l = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    combs = combinations_of_len(l, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(combs) == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_fancy_titles&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cols = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;change_case&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;insert_duplicate_characters&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;synonym&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    titles = fancy_titles(cols)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(titles) == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(cols)  &lt;span class=&#34;comment&#34;&gt;# Example assertion, adjust as needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/</id>
        <title>pytorch-lr-finder</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/8_pytorch-lr-finder-master/"/>
        <content type="html">&lt;h1 id=&#34;pytorch-lr-finder&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pytorch-lr-finder&#34;&gt;#&lt;/a&gt; &lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RhdmlkdHZzL3B5dG9yY2gtbHItZmluZGVy&#34;&gt;pytorch-lr-finder&lt;/span&gt;&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;该项目为 PyTorch 学习率查找器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习率范围测试是一种提供有关最佳学习率的宝贵信息的测试。在预训练运行期间，学习率在两个边界之间线性或指数增加。较低的初始学习率允许网络开始收敛，随着学习率的增加，它最终会变得太大，网络会发散。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来自 fastai 的调整版本：以指数方式增加学习率并计算每个学习率的训练损失。 &lt;code&gt;lr_finder.plot()&lt;/code&gt;  绘制训练损失与对数学习率的关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leslie Smith 的方法：线性增加学习率并计算每个学习率的评估损失。 &lt;code&gt;lr_finder.plot()&lt;/code&gt;  绘制评估损失与学习率的关系图。这种方法通常会产生更精确的曲线，因为评估损失更容易发散，但执行测试所需的时间会更长，尤其是在评估数据集很大的情况下。&lt;/p&gt;
&lt;h2 id=&#34;test_lr_finderpy代码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#test_lr_finderpy代码分析&#34;&gt;#&lt;/a&gt; test_lr_finder.py 代码分析&lt;/h2&gt;
&lt;h3 id=&#34;该test原代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#该test原代码&#34;&gt;#&lt;/a&gt; 该 test 原代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;392&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;393&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;394&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;395&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;396&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;397&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;398&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;399&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;400&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;401&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;402&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;403&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;404&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;405&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;406&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;407&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;408&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;409&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;410&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;411&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;412&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;413&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;414&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;415&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;416&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;417&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;418&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;419&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;420&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;421&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;422&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;423&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;424&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;425&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;426&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;427&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;428&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;429&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;430&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;431&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;432&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;433&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;434&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;435&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;436&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;437&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;438&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;439&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;440&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;441&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;442&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;443&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;444&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;445&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;446&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;447&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;448&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch.utils.data &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; DataLoader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch_lr_finder &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LRFinder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch_lr_finder.lr_finder &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; task &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; mod_task&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; dataset &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; mod_dataset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Check available backends for mixed precision training&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AVAILABLE_AMP_BACKENDS = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; apex.amp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AVAILABLE_AMP_BACKENDS.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ImportError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch.amp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AVAILABLE_AMP_BACKENDS.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ImportError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;collect_task_classes&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    names = [v &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt;(mod_task) &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.endswith(&lt;span class=&#34;string&#34;&gt;&amp;quot;Task&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; v != &lt;span class=&#34;string&#34;&gt;&amp;quot;BaseTask&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    attrs = [&lt;span class=&#34;built_in&#34;&gt;getattr&lt;/span&gt;(mod_task, v) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; names]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    classes = [v &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; attrs &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;issubclass&lt;/span&gt;(v, mod_task.BaseTask)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; classes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;prepare_lr_finder&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;task, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = task.model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    optimizer = task.optimizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    criterion = task.criterion&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;device&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;device&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;memory_cache&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;memory_cache&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cache_dir&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;cache_dir&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;amp_backend&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;amp_backend&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;amp_config&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;amp_config&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;grad_scaler&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;grad_scaler&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = LRFinder(model, optimizer, criterion, **config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lr_finder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_optim_lr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;optimizer&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [grp[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; grp &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; optimizer.param_groups]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run_loader_iter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;loader_iter, desired_runs=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Run a `DataLoaderIter` object for specific times.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    Arguments:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        loader_iter (torch_lr_finder.DataLoaderIter): the iterator to test.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        desired_runs (int, optional): times that iterator should be iterated.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            If it&amp;#x27;s not given, `len(loader_iter.data_loader)` will be used.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    Returns:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;        is_achieved (bool): False if `loader_iter` cannot be iterated specific&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;            times. It usually means `loader_iter` has raised `StopIteration`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isinstance&lt;/span&gt;(loader_iter, DataLoaderIter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; desired_runs &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_runs = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(loader_iter.data_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    count = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(desired_runs):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            count += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; StopIteration:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; desired_runs == count&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRangeTest&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, collect_task_classes(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# check whether lr is actually changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt;= init_lrs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, collect_task_classes(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_with_val_loader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# check whether lr is actually changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt;= init_lrs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.SimplePOSTaggerTask]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_non_tensor_dataset&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# check whether lr is actually changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt;= init_lrs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.SimplePOSTaggerTask]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_non_tensor_dataset_with_val_loader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# check whether lr is actually changed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;max&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt;= init_lrs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestReset&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_reset&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.reset()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        restored_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; init_lrs == restored_lrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestLRHistory&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_linear_lr_history&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;linear&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;5e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] == pytest.approx([&lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2e-5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3e-5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4e-5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5e-5&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_exponential_lr_history&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] == pytest.approx([&lt;span class=&#34;number&#34;&gt;1e-5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1e-4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1e-3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1e-2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestGradientAccumulation&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(lr_finder, &lt;span class=&#34;string&#34;&gt;&amp;quot;criterion&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# &lt;span class=&#34;doctag&#34;&gt;NOTE:&lt;/span&gt; We are using smaller batch size to simulate a large batch.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# So that the actual times of model/criterion called should be&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# `(desired_bs/real_bs) * num_iter` == `accum_steps * num_iter`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == accum_steps * num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`apex` module and gpu is required to run this test.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation_with_apex_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# CUDA GPU. So we have to move model to GPU first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model, optimizer, device = task.model, task.optimizer, task.device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model = model.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.model, task.optimizer = apex.amp.initialize(model, optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(apex.amp, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale_loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == accum_steps * num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`torch.amp` module and gpu is required to run this test.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation_with_torch_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Config for `torch.amp`. Though `torch.amp.autocast` supports various&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# device types, we test it with CUDA only.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        amp_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;dtype&amp;quot;&lt;/span&gt;: torch.float16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        grad_scaler = torch.cuda.amp.GradScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, amp_config=amp_config, grad_scaler=grad_scaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(grad_scaler, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == accum_steps * num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`apex` module and gpu is required to run these tests.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestMixedPrecision&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mixed_precision_apex&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# CUDA GPU. So we have to move model to GPU first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model, optimizer, device = task.model, task.optimizer, task.device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model = model.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.model, task.optimizer = apex.amp.initialize(model, optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;hasattr&lt;/span&gt;(task.optimizer, &lt;span class=&#34;string&#34;&gt;&amp;quot;_amp_stash&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(apex.amp, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale_loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# &lt;span class=&#34;doctag&#34;&gt;NOTE:&lt;/span&gt; Here we did not perform gradient accumulation, so that call count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# of `amp.scale_loss` should equal to `num_iter`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mixed_precision_torch&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        amp_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;dtype&amp;quot;&lt;/span&gt;: torch.float16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        grad_scaler = torch.cuda.amp.GradScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, amp_config=amp_config, grad_scaler=grad_scaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(grad_scaler, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# &lt;span class=&#34;doctag&#34;&gt;NOTE:&lt;/span&gt; Here we did not perform gradient accumulation, so that call count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# of `amp.scale_loss` should equal to `num_iter`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestDataLoaderIter&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_traindataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size, data_length = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataset = mod_dataset.RandomDataset(data_length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataloader = DataLoader(dataset, batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = TrainDataLoaderIter(dataloader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; run_loader_iter(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# `TrainDataLoaderIter` can reset itself, so that it&amp;#x27;s ok to reuse it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# directly and iterate it more than `len(dataloader)` times.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; run_loader_iter(loader_iter, desired_runs=&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(dataloader) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_valdataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size, data_length = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataset = mod_dataset.RandomDataset(data_length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataloader = DataLoader(dataset, batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = ValDataLoaderIter(dataloader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; run_loader_iter(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# `ValDataLoaderIter` can&amp;#x27;t reset itself, so this should be False if&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# we re-run it without resetting it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; run_loader_iter(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Reset it by `iter()`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = &lt;span class=&#34;built_in&#34;&gt;iter&lt;/span&gt;(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; run_loader_iter(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# `ValDataLoaderIter` can&amp;#x27;t be iterated more than `len(dataloader)` times&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = ValDataLoaderIter(dataloader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; run_loader_iter(loader_iter, desired_runs=&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(dataloader) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_traindataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = TrainDataLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(loader_iter, &lt;span class=&#34;string&#34;&gt;&amp;quot;inputs_labels_from_batch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(loader_iter, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_valdataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        train_loader_iter = TrainDataLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        val_loader_iter = ValDataLoaderIter(task.val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy_train = mocker.spy(train_loader_iter, &lt;span class=&#34;string&#34;&gt;&amp;quot;inputs_labels_from_batch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy_val = mocker.spy(val_loader_iter, &lt;span class=&#34;string&#34;&gt;&amp;quot;inputs_labels_from_batch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy_train.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy_val.call_count == num_iter * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(task.val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_trainloaderiter_without_subclassing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = CustomLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(ValueError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;`train_loader` has unsupported type&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lr_finder.range_test(loader_iter, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_valloaderiter_without_subclassing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        train_loader_iter = TrainDataLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        val_loader_iter = CustomLoaderIter(task.val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(ValueError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;`val_loader` has unsupported type&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CustomLoaderIter&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;This class does not inherit from `DataLoaderIter`, should be used to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    trigger exceptions related to type checking.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, loader&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.loader = loader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__iter__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;iter&lt;/span&gt;(self.loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;num_iter&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;scheduler&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;linear&amp;quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_scheduler_and_num_iter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;num_iter, scheduler&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(ValueError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;num_iter&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=&lt;span class=&#34;number&#34;&gt;5e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;suggest_lr&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;skip_start&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;skip_end&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_plot_with_skip_and_suggest_lr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;suggest_lr, skip_start, skip_end&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    num_iter = &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.train_loader, num_iter=num_iter, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    results = lr_finder.plot(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; num_iter - skip_start - skip_end &amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# handle data with one or zero lr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ax.lines) == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; results &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# handle different suggest_lr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# for &amp;#x27;steepest&amp;#x27;: the point with steepest gradient (minimal gradient)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ax.lines) == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ax.collections) == &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(suggest_lr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; results &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; ax:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(results) == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_suggest_lr&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax, lr = lr_finder.plot(skip_start=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, skip_end=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suggest_lr=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, ax=ax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Loss with minimal gradient is the first element in history&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax, lr = lr_finder.plot(skip_start=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, skip_end=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suggest_lr=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, ax=ax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Loss with minimal gradient is the last element in history&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax, lr = lr_finder.plot(skip_start=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, skip_end=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suggest_lr=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, ax=ax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;删除assert和必要提示后上传llm的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除assert和必要提示后上传llm的代码&#34;&gt;#&lt;/a&gt; 删除 assert 和必要提示后上传 LLM 的代码&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;353&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;354&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;355&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;356&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;357&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;358&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;359&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;360&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;361&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;362&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;363&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;364&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;365&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;366&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;367&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;368&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;369&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;370&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;371&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;372&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;373&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;374&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;375&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;376&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;377&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;378&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;379&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;380&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;381&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;382&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;383&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;384&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;385&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;386&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;387&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;388&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;389&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;390&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;391&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;392&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch.utils.data &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; DataLoader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch_lr_finder &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LRFinder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch_lr_finder.lr_finder &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; task &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; mod_task&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; dataset &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; mod_dataset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Check available backends for mixed precision training&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AVAILABLE_AMP_BACKENDS = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; apex.amp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AVAILABLE_AMP_BACKENDS.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ImportError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch.amp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AVAILABLE_AMP_BACKENDS.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ImportError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;collect_task_classes&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    names = [v &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt;(mod_task) &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.endswith(&lt;span class=&#34;string&#34;&gt;&amp;quot;Task&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; v != &lt;span class=&#34;string&#34;&gt;&amp;quot;BaseTask&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    attrs = [&lt;span class=&#34;built_in&#34;&gt;getattr&lt;/span&gt;(mod_task, v) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; names]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    classes = [v &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; attrs &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;issubclass&lt;/span&gt;(v, mod_task.BaseTask)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; classes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;prepare_lr_finder&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;task, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = task.model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    optimizer = task.optimizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    criterion = task.criterion&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;device&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;device&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;memory_cache&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;memory_cache&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cache_dir&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;cache_dir&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;amp_backend&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;amp_backend&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;amp_config&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;amp_config&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;grad_scaler&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;grad_scaler&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = LRFinder(model, optimizer, criterion, **config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lr_finder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_optim_lr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;optimizer&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [grp[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; grp &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; optimizer.param_groups]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run_loader_iter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;loader_iter, desired_runs=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; desired_runs &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_runs = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(loader_iter.data_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    count = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(desired_runs):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            count += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; StopIteration:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; desired_runs == count&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRangeTest&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, collect_task_classes(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, collect_task_classes(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_with_val_loader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.SimplePOSTaggerTask]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_non_tensor_dataset&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.SimplePOSTaggerTask]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_non_tensor_dataset_with_val_loader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestReset&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_reset&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.reset()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        restored_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestLRHistory&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_linear_lr_history&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;linear&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;5e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_exponential_lr_history&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestGradientAccumulation&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(lr_finder, &lt;span class=&#34;string&#34;&gt;&amp;quot;criterion&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`apex` module and gpu is required to run this test.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation_with_apex_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# CUDA GPU. So we have to move model to GPU first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model, optimizer, device = task.model, task.optimizer, task.device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model = model.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.model, task.optimizer = apex.amp.initialize(model, optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(apex.amp, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale_loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`torch.amp` module and gpu is required to run this test.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation_with_torch_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Config for `torch.amp`. Though `torch.amp.autocast` supports various&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# device types, we test it with CUDA only.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        amp_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;dtype&amp;quot;&lt;/span&gt;: torch.float16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        grad_scaler = torch.cuda.amp.GradScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, amp_config=amp_config, grad_scaler=grad_scaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(grad_scaler, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`apex` module and gpu is required to run these tests.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestMixedPrecision&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mixed_precision_apex&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# CUDA GPU. So we have to move model to GPU first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model, optimizer, device = task.model, task.optimizer, task.device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model = model.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.model, task.optimizer = apex.amp.initialize(model, optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(apex.amp, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale_loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# &lt;span class=&#34;doctag&#34;&gt;NOTE:&lt;/span&gt; Here we did not perform gradient accumulation, so that call count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# of `amp.scale_loss` should equal to `num_iter`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mixed_precision_torch&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        amp_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;dtype&amp;quot;&lt;/span&gt;: torch.float16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        grad_scaler = torch.cuda.amp.GradScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, amp_config=amp_config, grad_scaler=grad_scaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(grad_scaler, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestDataLoaderIter&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_traindataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size, data_length = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataset = mod_dataset.RandomDataset(data_length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataloader = DataLoader(dataset, batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = TrainDataLoaderIter(dataloader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_valdataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size, data_length = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataset = mod_dataset.RandomDataset(data_length)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        dataloader = DataLoader(dataset, batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = ValDataLoaderIter(dataloader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_traindataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = TrainDataLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(loader_iter, &lt;span class=&#34;string&#34;&gt;&amp;quot;inputs_labels_from_batch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(loader_iter, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_valdataloaderiter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        train_loader_iter = TrainDataLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        val_loader_iter = ValDataLoaderIter(task.val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy_train = mocker.spy(train_loader_iter, &lt;span class=&#34;string&#34;&gt;&amp;quot;inputs_labels_from_batch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy_val = mocker.spy(val_loader_iter, &lt;span class=&#34;string&#34;&gt;&amp;quot;inputs_labels_from_batch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy_train.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy_val.call_count == num_iter * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(task.val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_trainloaderiter_without_subclassing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loader_iter = CustomLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(ValueError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;`train_loader` has unsupported type&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lr_finder.range_test(loader_iter, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_range_test_with_valloaderiter_without_subclassing&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        train_loader_iter = TrainDataLoaderIter(task.train_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        val_loader_iter = CustomLoaderIter(task.val_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(ValueError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;`val_loader` has unsupported type&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                train_loader_iter, val_loader=val_loader_iter, num_iter=num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CustomLoaderIter&lt;/span&gt;(&lt;span class=&#34;title class_ inherited__&#34;&gt;object&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;This class does not inherit from `DataLoaderIter`, should be used to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    trigger exceptions related to type checking.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, loader&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.loader = loader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;__iter__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;iter&lt;/span&gt;(self.loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;num_iter&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;scheduler&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;linear&amp;quot;&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_scheduler_and_num_iter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;num_iter, scheduler&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; pytest.raises(ValueError, &lt;span class=&#34;keyword&#34;&gt;match&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;num_iter&amp;quot;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, step_mode=scheduler, end_lr=&lt;span class=&#34;number&#34;&gt;5e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;suggest_lr&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;skip_start&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;skip_end&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_plot_with_skip_and_suggest_lr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;suggest_lr, skip_start, skip_end&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    num_iter = &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.train_loader, num_iter=num_iter, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    results = lr_finder.plot(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        skip_start=skip_start, skip_end=skip_end, suggest_lr=suggest_lr, ax=ax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; num_iter - skip_start - skip_end &amp;lt;= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# handle data with one or zero lr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ax.lines) == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; results &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; ax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# handle different suggest_lr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# for &amp;#x27;steepest&amp;#x27;: the point with steepest gradient (minimal gradient)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ax.lines) == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(ax.collections) == &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;(suggest_lr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; results &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; ax:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(results) == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_suggest_lr&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax, lr = lr_finder.plot(skip_start=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, skip_end=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suggest_lr=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, ax=ax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr == &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Loss with minimal gradient is the first element in history&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax, lr = lr_finder.plot(skip_start=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, skip_end=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suggest_lr=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, ax=ax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Loss with minimal gradient is the last element in history&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;] = [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fig, ax = plt.subplots()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ax, lr = lr_finder.plot(skip_start=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, skip_end=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, suggest_lr=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, ax=ax)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; lr == &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;llm自动填充assert后的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#llm自动填充assert后的代码&#34;&gt;#&lt;/a&gt; LLM 自动填充 assert 后的代码&lt;/h3&gt;
&lt;p&gt;**base prompt 为：** 该 tests case 缺少 assert 断言 请你自动填充它&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;320&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch.utils.data &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; DataLoader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch_lr_finder &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LRFinder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; torch_lr_finder.lr_finder &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataLoaderIter, TrainDataLoaderIter, ValDataLoaderIter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; task &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; mod_task&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; dataset &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; mod_dataset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Check available backends for mixed precision training&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AVAILABLE_AMP_BACKENDS = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; apex.amp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AVAILABLE_AMP_BACKENDS.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ImportError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch.amp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AVAILABLE_AMP_BACKENDS.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; ImportError:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;collect_task_classes&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    names = [v &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt;(mod_task) &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.endswith(&lt;span class=&#34;string&#34;&gt;&amp;quot;Task&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; v != &lt;span class=&#34;string&#34;&gt;&amp;quot;BaseTask&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    attrs = [&lt;span class=&#34;built_in&#34;&gt;getattr&lt;/span&gt;(mod_task, v) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; names]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    classes = [v &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; attrs &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;issubclass&lt;/span&gt;(v, mod_task.BaseTask)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; classes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;prepare_lr_finder&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;task, **kwargs&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = task.model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    optimizer = task.optimizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    criterion = task.criterion&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;device&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;device&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;memory_cache&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;memory_cache&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cache_dir&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;cache_dir&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;amp_backend&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;amp_backend&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;amp_config&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;amp_config&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;grad_scaler&amp;quot;&lt;/span&gt;: kwargs.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;grad_scaler&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lr_finder = LRFinder(model, optimizer, criterion, **config)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lr_finder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_optim_lr&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;optimizer&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [grp[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; grp &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; optimizer.param_groups]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run_loader_iter&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;loader_iter, desired_runs=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; desired_runs &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_runs = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(loader_iter.data_loader)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    count = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(desired_runs):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(loader_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            count += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;except&lt;/span&gt; StopIteration:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; desired_runs == count&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestRangeTest&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, collect_task_classes(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, collect_task_classes(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_with_val_loader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.SimplePOSTaggerTask]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_non_tensor_dataset&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.SimplePOSTaggerTask]&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_run_non_tensor_dataset_with_val_loader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task(validate=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestReset&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_reset&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.reset()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        restored_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; restored_lrs == init_lrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestLRHistory&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_linear_lr_history&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;linear&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;5e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_exponential_lr_history&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# prepare_lr_finder sets the starting lr to 1e-5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, step_mode=&lt;span class=&#34;string&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;, end_lr=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestGradientAccumulation&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(lr_finder, &lt;span class=&#34;string&#34;&gt;&amp;quot;criterion&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`apex` module and gpu is required to run this test.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation_with_apex_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# CUDA GPU. So we have to move model to GPU first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model, optimizer, device = task.model, task.optimizer, task.device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model = model.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.model, task.optimizer = apex.amp.initialize(model, optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(apex.amp, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale_loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`torch.amp` module and gpu is required to run this test.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_gradient_accumulation_with_torch_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        desired_bs, accum_steps = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        real_bs = desired_bs // accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=real_bs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Config for `torch.amp`. Though `torch.amp.autocast` supports various&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# device types, we test it with CUDA only.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        amp_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;dtype&amp;quot;&lt;/span&gt;: torch.float16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        grad_scaler = torch.cuda.amp.GradScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, amp_config=amp_config, grad_scaler=grad_scaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(grad_scaler, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, num_iter=num_iter, accumulation_steps=accum_steps&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == num_iter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`apex` module and gpu is required to run these tests.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestMixedPrecision&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mixed_precision_apex&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Wrap model and optimizer by `amp.initialize`. Beside, `amp` requires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# CUDA GPU. So we have to move model to GPU first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model, optimizer, device = task.model, task.optimizer, task.device&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        model = model.to(device)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task.model, task.optimizer = apex.amp.initialize(model, optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;apex&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(apex.amp, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale_loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# &lt;span class=&#34;doctag&#34;&gt;NOTE:&lt;/span&gt; Here we did not perform gradient accumulation, so that call count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# of `amp` could be only one in any situation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; AVAILABLE_AMP_BACKENDS&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;and&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;`torch.amp` module and gpu is required to run these tests.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestMixedPrecisionWithTorchAMP&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_mixed_precision_torch_amp&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, mocker&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        batch_size = &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num_iter = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = mod_task.XORTask(batch_size=batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Config for `torch.amp`. Though `torch.amp.autocast` supports various&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# device types, we test it with CUDA only.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        amp_config = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;device_type&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cuda&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;dtype&amp;quot;&lt;/span&gt;: torch.float16,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        grad_scaler = torch.cuda.amp.GradScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task, amp_backend=&lt;span class=&#34;string&#34;&gt;&amp;quot;torch&amp;quot;&lt;/span&gt;, amp_config=amp_config, grad_scaler=grad_scaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        spy = mocker.spy(grad_scaler, &lt;span class=&#34;string&#34;&gt;&amp;quot;scale&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, num_iter=num_iter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# &lt;span class=&#34;doctag&#34;&gt;NOTE:&lt;/span&gt; Here we did not perform gradient accumulation, so that call count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# of `amp` could be only one in any situation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; spy.call_count == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.skipif(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; mod_task.use_cuda(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;), reason=&lt;span class=&#34;string&#34;&gt;&amp;quot;CUDA GPU is required to run these tests.&amp;quot;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TestMultiPhase&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    @pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;cls_task&amp;quot;&lt;/span&gt;, [mod_task.XORTask, mod_task.DiscriminativeLearningRateTask],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;meta&#34;&gt;    &lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_multi_phase&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, cls_task&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        task = cls_task()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        init_lrs = get_optim_lr(task.optimizer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder = prepare_lr_finder(task)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(task.train_loader, val_loader=task.val_loader, num_iter=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Simulate a change in LR and perform another phase of LR range test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; param_group &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; task.optimizer.param_groups:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            param_group[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;] *= &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lr_finder.range_test(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            task.train_loader, val_loader=task.val_loader, num_iter=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, reset_lr=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# Assert statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;lr&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(lr_finder.history[&lt;span class=&#34;string&#34;&gt;&amp;quot;loss&amp;quot;&lt;/span&gt;]) &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:08:35.000Z</updated>
    </entry>
    <entry>
        <id>https://enjundu.github.io/LLMstestoracle/1/</id>
        <title>研究方法</title>
        <link rel="alternate" href="https://enjundu.github.io/LLMstestoracle/1/"/>
        <content type="html">&lt;h3 id=&#34;分析和理解步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分析和理解步骤&#34;&gt;#&lt;/a&gt; 分析和理解步骤&lt;/h3&gt;
&lt;h4 id=&#34;第一步找10个项目每个随机选10个左右的test-case包含assert&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一步找10个项目每个随机选10个左右的test-case包含assert&#34;&gt;#&lt;/a&gt; 第一步：找 10 个项目每个随机选 10 个左右的 test case（包含 assert）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;分析和理解&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;找 10 个项目&lt;/strong&gt;：我们需要选择 10 个开源项目，这些项目应该包含单元测试，并且测试用例使用了 assert 语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机选 10 个左右的 test case&lt;/strong&gt;：从每个项目中随机选择大约 10 个测试用例。每个测试用例必须包含至少一个 assert 语句。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;具体操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 GitHub 等平台上寻找 10 个开源项目。&lt;/li&gt;
&lt;li&gt;确保这些项目有单元测试（通常在 &lt;code&gt;tests&lt;/code&gt;  目录下）。&lt;/li&gt;
&lt;li&gt;在每个项目中随机选择 10 个包含 assert 语句的测试用例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第二步把test-case中的assert去掉&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二步把test-case中的assert去掉&#34;&gt;#&lt;/a&gt; 第二步：把 test case 中的 assert 去掉&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;分析和理解&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;去掉 assert 语句&lt;/strong&gt;：编辑选中的测试用例，删除其中的 assert 语句。这意味着我们要修改测试用例，使其保留其他逻辑，但去除验证部分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;具体操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开每个测试用例文件，找到 assert 语句。&lt;/li&gt;
&lt;li&gt;删除 assert 语句，保留其他代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第三步用llm补全assert&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三步用llm补全assert&#34;&gt;#&lt;/a&gt; 第三步：用 LLM 补全 assert&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;分析和理解&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用 LLM 补全&lt;/strong&gt;：将去掉 assert 语句的测试用例输入到大语言模型（LLM）中，让它自动补全缺失的 assert 语句。这里的 LLM 可以是一个经过训练的自然语言处理模型，例如 GPT-4。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;具体操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将去掉 assert 语句的测试用例逐个输入到 LLM 中。&lt;/li&gt;
&lt;li&gt;让 LLM 根据上下文补全 assert 语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;第四步看看结果是什么样子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四步看看结果是什么样子&#34;&gt;#&lt;/a&gt; 第四步：看看结果是什么样子&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;分析和理解&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;查看结果&lt;/strong&gt;：获取 LLM 补全后的测试用例，并对比原始测试用例，查看 LLM 补全的 assert 语句的正确性和合理性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;具体操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较 LLM 补全的 assert 语句和原始 assert 语句。&lt;/li&gt;
&lt;li&gt;记录 LLM 补全效果好的地方和不足之处。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;完整过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找 10 个开源项目，每个项目中随机选 10 个包含 assert 语句的测试用例。&lt;/li&gt;
&lt;li&gt;去掉这些测试用例中的 assert 语句，保留其他代码。&lt;/li&gt;
&lt;li&gt;使用 LLM 对去掉 assert 语句的测试用例进行补全，让 LLM 自动生成 assert 语句。&lt;/li&gt;
&lt;li&gt;对比 LLM 补全的结果与原始测试用例，分析 LLM 的表现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个过程将帮助我们评估 LLM 在自动补全测试用例中 assert 语句的能力，并找出其优缺点，以便进一步改进和优化。&lt;/p&gt;
&lt;h3 id=&#34;示例具体操作假设性示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例具体操作假设性示例&#34;&gt;#&lt;/a&gt; 示例具体操作（假设性示例）&lt;/h3&gt;
&lt;p&gt;假设我们从一个项目中选取了以下测试用例：&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;python&lt;/span&gt;复制代码def test_multiplication():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;result&lt;/span&gt; = multiply(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;assert&lt;/span&gt; result == &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;去掉 assert 语句后：&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;python&lt;/span&gt;复制代码def test_multiplication():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attribute&#34;&gt;result&lt;/span&gt; = multiply(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# assert result == 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入 LLM 进行补全后，假设 LLM 生成的结果是：&lt;/p&gt;
&lt;figure class=&#34;highlight livecodeserver&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python复制代码def test_multiplication():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;result&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;multiply&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    assert &lt;span class=&#34;built_in&#34;&gt;result&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# LLM补全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正确性&lt;/strong&gt;：LLM 正确地补全了 assert 语句，与原始测试用例一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上下文理解&lt;/strong&gt;：LLM 理解了测试函数的意图，并生成了合理的 assert 语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这样的操作，我们可以评估 LLM 在处理各种测试用例时的表现，并找出改进方向。&lt;/p&gt;
</content>
        <category term="Hexo" />
        <category term="Front Matter" />
        <updated>2024-07-02T18:07:35.000Z</updated>
    </entry>
</feed>
