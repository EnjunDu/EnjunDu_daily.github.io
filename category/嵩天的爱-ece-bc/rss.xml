<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Hexo • Posts by &#34;嵩天的爱-ece-bc&#34; category</title>
        <link>https://enjundu.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Wed, 03 Jul 2024 01:43:21 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jul 2024 01:43:21 +0800</lastBuildDate>
        <category>Hexo</category>
        <category>Front Matter</category>
        <category>code</category>
        <category>recommendation</category>
        <category>homework</category>
        <item>
            <guid isPermalink="true">https://enjundu.github.io/ECEBC/redis-dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
            <title>DICT.C源码阅读报告</title>
            <link>https://enjundu.github.io/ECEBC/redis-dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
            <category>Hexo</category>
            <category>Front Matter</category>
            <pubDate>Wed, 03 Jul 2024 01:43:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-各函数分部解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-各函数分部解析&#34;&gt;#&lt;/a&gt; 一、各函数分部解析&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;struct dictEntry 结构体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于表示字典中的键值对。&lt;/li&gt;
&lt;li&gt;成员变量：&lt;/li&gt;
&lt;li&gt;void *key：键的指针。&lt;/li&gt;
&lt;li&gt;union：联合体，可以存储值的不同类型（void *val, uint64_t u64, int64_t s64, double d）。&lt;/li&gt;
&lt;li&gt;struct dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;typedef struct dictEntryNoValue 结构体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表示字典中的无值 entry。&lt;/li&gt;
&lt;li&gt;成员变量：
&lt;ol&gt;
&lt;li&gt;void *key：键的指针。&lt;/li&gt;
&lt;li&gt;dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static dictResizeEnable dict_can_resize：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;全局变量，表示字典是否允许进行大小调整的标志。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static unsigned int dict_force_resize_ratio：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局变量，表示强制调整大小的比例阈值。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈希函数相关：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;static uint8_t dict_hash_function_seed [16]：字典哈希函数的种子。&lt;/li&gt;
&lt;li&gt;void dictSetHashFunctionSeed (uint8_t *seed)：设置哈希函数的种子。&lt;/li&gt;
&lt;li&gt;uint8_t *dictGetHashFunctionSeed (void)：获取哈希函数的种子。&lt;/li&gt;
&lt;li&gt;uint64_t dictGenHashFunction (const void *key, size_t len)：字典使用的哈希函数。&lt;/li&gt;
&lt;li&gt;uint64_t dictGenCaseHashFunction (const unsigned char *buf, size_t len)：字典使用的哈希函数，不区分大小写。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字典指针位操作相关：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;#define ENTRY_PTR_MASK 7：用于掩码操作的位掩码，表示字典指针的最低 3 位。&lt;/li&gt;
&lt;li&gt;#define ENTRY_PTR_NORMAL 0 和 #define ENTRY_PTR_NO_VALUE 2：表示不同类型的字典 entry。&lt;/li&gt;
&lt;li&gt;一系列辅助函数用于判断和操作不同类型的 entry。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈希表相关函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;_dictExpandIfNeeded (dict *d)：如果需要，扩展字典的哈希表大小的内部函数。&lt;/li&gt;
&lt;li&gt;_dictNextExp (unsigned long size)：返回大于等于给定大小的最小的 2 的整数次幂的对数的函数。&lt;/li&gt;
&lt;li&gt;_dictInit (dict *d, dictType *type)：初始化字典的内部函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 实现相关：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;_dictReset (dict *d, int htidx)：重置已使用 _dictInit () 初始化的哈希表参数。&lt;/li&gt;
&lt;li&gt;dictCreate (dictType *type)：创建一个新的哈希表。&lt;/li&gt;
&lt;li&gt;dictCreateMultiple (dictType *type, int count)：创建包含多个字典的数组。&lt;/li&gt;
&lt;li&gt;int _dictInit (dict *d, dictType *type)：初始化哈希表。&lt;/li&gt;
&lt;li&gt;int dictResize (dict *d)：调整表的大小，使其包含所有元素，且满足 USED/BUCKETS 比率接近 &amp;lt;= 1 的不变式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int _dictExpand(dict *d, unsigned long size, int *malloc_failed)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这个函数用于扩展或创建哈希表，增加或初始化新的哈希表。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;size：新的哈希表大小。&lt;/li&gt;
&lt;li&gt;malloc_failed：如果为非空指针，则在分配内存失败时设置为 1。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictExpand(dict *d, unsigned long size)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对外部接口的封装，用于扩展字典的哈希表。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;size：新的哈希表大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictTryExpand(dict *d, unsigned long size)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对外部接口的封装，用于尝试扩展字典的哈希表，当内存分配失败时返回 DICT_ERR。
&lt;ol&gt;
&lt;li&gt;参数：&lt;/li&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;size：新的哈希表大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;如果内存分配失败，返回 DICT_ERR；否则返回 DICT_OK。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictRehash(dict *d, int n)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行 N 步的增量重新哈希。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;n：步数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;如果还有从旧哈希表移动到新哈希表的键，则返回 1；否则返回 0。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long long timeInMilliseconds(void)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回当前时间戳，以毫秒为单位。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictRehashMilliseconds(dict *d, unsigned int ms)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在指定的时间内（毫秒为单位）执行重新哈希。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;ms：指定的时间（毫秒）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;返回实际进行的重新哈希步数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void _dictRehashStep(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行一步的增量重新哈希，仅在哈希表的重新哈希未暂停时执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictAdd(dict *d, void *key, void *val)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向字典中添加键值对。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;key：键。&lt;/li&gt;
&lt;li&gt;val：值。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;如果成功，返回 DICT_OK；否则返回 DICT_ERR。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;低级别的添加或查找函数，返回一个指向新键的 dictEntry 结构体。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;key：键。&lt;/li&gt;
&lt;li&gt;existing：如果键已经存在，则存储现有条目的指针。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;如果键已经存在，返回 NULL；否则返回指向新键的 dictEntry 结构体。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictInsertAtPosition(dict *d, void *key, void *position)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在指定位置插入键，该位置通常由 dictFindPositionForInsert 函数返回。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;key：键。&lt;/li&gt;
&lt;li&gt;position：插入位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回值：
&lt;ol&gt;
&lt;li&gt;返回指向新键的 dictEntry 结构体。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictReplace(dict *d, void *key, void *val)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尝试向字典中添加一个元素。如果键不存在，dictAddRaw 将成功。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;key：要添加或替换的键。&lt;/li&gt;
&lt;li&gt;val：要设置的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回：
&lt;ol&gt;
&lt;li&gt;如果添加成功，返回 1；否则，如果键已存在，则返回 0。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictAddOrFind(dict *d, void *key)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是 dictAddRaw 的一个版本，始终返回指定键的哈希条目，即使键已存在且无法添加。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;key：要添加或查找的键。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回：
&lt;ol&gt;
&lt;li&gt;如果添加成功，返回新的字典条目；如果键已存在，返回已存在的字典条目。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于在字典中搜索并删除元素。这是 dictDelete () 和 dictUnlink () 的辅助函数。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;key：要删除的键。&lt;/li&gt;
&lt;li&gt;nofree：指示是否释放内存的标志。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回：
&lt;ol&gt;
&lt;li&gt;如果找到并删除元素，返回被删除的字典条目；如果未找到，返回 NULL。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int dictDelete(dict *ht, const void *key)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从字典中删除元素，成功返回 DICT_OK，否则返回 DICT_ERR。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictUnlink(dict *d, const void *key)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从字典中删除元素，但不实际释放键、值和字典条目。返回被找到并从表中解链的字典条目。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictFreeUnlinkedEntry(dict *d, dictEntry *he)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于真正释放调用 dictUnlink () 后的字典条目。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int _dictClear(dict &lt;em&gt;d, int htidx, void(callback)(dict&lt;/em&gt;))：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;释放字典中的所有元素。&lt;/li&gt;
&lt;li&gt;参数：
&lt;ol&gt;
&lt;li&gt;d：字典。&lt;/li&gt;
&lt;li&gt;htidx：要清除的哈希表索引。&lt;/li&gt;
&lt;li&gt;callback：可选的回调函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;返回：
&lt;ol&gt;
&lt;li&gt;成功返回 DICT_OK。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictRelease(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;清空并释放哈希表。首先通过 _dictClear 清空两个哈希表，然后释放字典结构体占用的内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictFind(dict *d, const void *key)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在字典中查找给定键对应的字典条目。&lt;/li&gt;
&lt;li&gt;如果字典为空，返回 NULL。&lt;/li&gt;
&lt;li&gt;如果字典正在进行 rehash，执行一步 rehash 操作。&lt;/li&gt;
&lt;li&gt;遍历两个哈希表，查找匹配的键，找到则返回对应的字典条目。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void *dictFetchValue(dict *d, const void *key)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取字典中给定键对应的值。&lt;/li&gt;
&lt;li&gt;调用 dictFind 查找字典条目，如果找到则返回对应的值，否则返回 NULL。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictTwoPhaseUnlinkFind(dict *d, const void *key, dictEntry ***plink, int *table_index)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在字典中查找给定键对应的字典条目，并获取该条目的前一项的指针地址（plink）和哈希表索引（table_index）。&lt;/li&gt;
&lt;li&gt;这是一种两阶段解链的操作，用于在可能的 rehash 过程中执行解链。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictTwoPhaseUnlinkFree(dict *d, dictEntry *he, dictEntry **plink, int table_index)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两阶段解链并释放字典条目的函数。&lt;/li&gt;
&lt;li&gt;通过修改前一项的指针实现解链，然后释放键、值和字典条目的内存。&lt;/li&gt;
&lt;li&gt;恢复 rehash 过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一系列用于设置和获取字典条目键值的辅助函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dictSetKey、dictSetVal、dictSetSignedIntegerVal、dictSetUnsignedIntegerVal、dictSetDoubleVal 用于设置字典条目的键和值。&lt;/li&gt;
&lt;li&gt;dictIncrSignedIntegerVal、dictIncrUnsignedIntegerVal、dictIncrDoubleVal 用于自增字典条目的整数值和浮点数值。&lt;/li&gt;
&lt;li&gt;dictGetKey、dictGetVal、dictGetSignedIntegerVal、dictGetUnsignedIntegerVal、dictGetDoubleVal 用于获取字典条目的键和值。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static dictEntry *dictGetNext(const dictEntry *de)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回字典条目的 next 字段或 NULL，如果条目没有 next 字段则返回 NULL。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static dictEntry **dictGetNextRef(dictEntry *de)：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;返回指向字典条目的 next 字段的指针，或 NULL，如果条目没有 next 字段则返回 NULL。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;static void dictSetNext(dictEntry *de, dictEntry *next)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置字典条目的 next 字段。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size_t dictMemUsage(const dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回字典的内存使用，不包括键和值的大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size_t dictEntryMemUsage(void)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回字典条目的内存使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unsigned long long dictFingerprint(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成字典的指纹，用于检测在迭代期间是否对字典进行了禁止的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictInitIterator(dictIterator *iter, dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化字典迭代器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictInitSafeIterator(dictIterator *iter, dict *d)：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;初始化安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;void dictResetIterator(dictIterator *iter)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重置字典迭代器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictIterator *dictGetIterator(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取普通字典迭代器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictIterator *dictGetSafeIterator(dict *d)：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;获取安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictNext(dictIterator *iter)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取字典中的下一个条目。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictReleaseIterator(dictIterator *iter)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;释放字典迭代器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictGetRandomKey(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回字典中的随机条目，用于实现随机算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从字典中获取一些随机条目，用于采样目的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static void dictDefragBucket(dictEntry **bucketref, dictDefragFunctions *defragfns)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用提供的分配函数，重新分配字典条目、键和值在一个桶中的内存，以进行碎片整理。&lt;/li&gt;
&lt;li&gt;defragfns 是一个包含碎片整理分配函数的结构。&lt;/li&gt;
&lt;li&gt;dictEntry *dictGetFairRandomKey(dict *d)：&lt;/li&gt;
&lt;li&gt;类似于 dictGetRandomKey ()，但尝试确保返回元素的更好分布。&lt;/li&gt;
&lt;li&gt;通过考虑哈希表中可能由不同链长度组成的 N 个桶，选择范围内的一个随机元素，以平滑解决不同链长度的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static unsigned long rev(unsigned long v)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;位反转函数，用于迭代器中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unsigned long dictScan(dict *d, unsigned long v, dictScanFunction *fn, void *privdata)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于迭代字典中的元素，以确保在迭代开始和结束之间返回字典中的所有元素。&lt;/li&gt;
&lt;li&gt;通过反向游标迭代，以处理哈希表可能在迭代调用之间发生大小更改的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unsigned long dictScanDefrag(dict *d, unsigned long v, dictScanFunction *fn, dictDefragFunctions *defragfns, void *privdata)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类似于 dictScan ()，但额外使用提供的分配函数重新分配字典条目的内存。&lt;/li&gt;
&lt;li&gt;defragfns 包含用于碎片整理的分配函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static int dictTypeExpandAllowed(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查字典类型是否允许进行扩展。&lt;/li&gt;
&lt;li&gt;如果允许扩展，且达到了扩展的条件，调用 dictExpand 进行扩展。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static int _dictExpandIfNeeded(dict *d)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果正在进行渐进式 rehashing，直接返回。&lt;/li&gt;
&lt;li&gt;如果哈希表为空，将其扩展到初始大小。&lt;/li&gt;
&lt;li&gt;如果达到 1:1 的比率，并且允许调整哈希表大小，或者应该避免调整但元素 / 桶的比率超过安全阈值，就以两倍的速度扩展哈希表。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static signed char _dictNextExp(unsigned long size)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;返回给定大小的下一个有效的哈希表大小的指数。哈希表的大小是 2 的幂。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void *dictFindPositionForInsert(dict *d, const void *key, dictEntry **existing)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找插入位置，如果键已存在，则返回 NULL 并填充 existing，否则返回桶的引用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictEmpty(dict &lt;em&gt;d, void(callback)(dict&lt;/em&gt;))：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;清空字典，包括两个哈希表。可提供回调函数处理被删除的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictSetResizeEnabled(dictResizeEnable enable)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置是否允许字典调整大小。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;uint64_t dictGetHash(dict *d, const void *key)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取键的哈希值。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dictEntry *dictFindEntryByPtrAndHash(dict *d, const void *oldptr, uint64_t hash)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过指针和预计算的哈希查找字典中的条目，用于查找特定指针的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictRehashingInfo(dict *d, unsigned long long *from_size, unsigned long long *to_size)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提供正在进行 rehashing 的字典的旧哈希表大小和新哈希表大小信息。&lt;/li&gt;
&lt;li&gt;Debugging 相关函数：
&lt;ol&gt;
&lt;li&gt;void dictFreeStats (dictStats *stats)：释放字典统计信息的内存。&lt;/li&gt;
&lt;li&gt;void dictCombineStats (dictStats *from, dictStats *into)：将两个字典统计信息合并。&lt;/li&gt;
&lt;li&gt;dictStats *dictGetStatsHt (dict *d, int htidx, int full)：获取指定哈希表的统计信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size_t dictGetStatsMsg(char *buf, size_t bufsize, dictStats *stats, int full)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成字典统计信息的人类可读消息。&lt;/li&gt;
&lt;li&gt;如果字典为空，返回相关提示信息。&lt;/li&gt;
&lt;li&gt;如果 full 为真，还包括详细的统计信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void dictGetStats(char *buf, size_t bufsize, dict *d, int full)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取字典的统计信息，包括主哈希表和（如果正在进行 rehashing）rehash 哈希表的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Benchmark 相关函数：1.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BenchmarkDictType 结构体：定义了用于性能测试的字典类型。&lt;/li&gt;
&lt;li&gt;uint64_t hashCallback (const void *key)：哈希回调函数，计算键的哈希值。&lt;/li&gt;
&lt;li&gt;int compareCallback (dict *d, const void *key1, const void *key2)：比较回调函数，比较两个键是否相等。&lt;/li&gt;
&lt;li&gt;void freeCallback (dict *d, void *val)：释放回调函数，释放值的内存。&lt;/li&gt;
&lt;li&gt;char *stringFromLongLong (long long value)：将长长整型值转换为字符串。&lt;/li&gt;
&lt;li&gt;#define start_benchmark ()：宏定义，用于开始计时。&lt;/li&gt;
&lt;li&gt;#define end_benchmark (msg)：宏定义，用于结束计时并输出性能测试结果。&lt;/li&gt;
&lt;li&gt;int dictTest (int argc, char **argv, int flags)：主要的性能测试函数，用于测试字典的插入、访问、删除等操作的性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二-dictc的主要代码思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-dictc的主要代码思路&#34;&gt;#&lt;/a&gt; 二、dict.c 的主要代码思路&lt;/h1&gt;
&lt;h2 id=&#34;字典的创建和初始化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典的创建和初始化&#34;&gt;#&lt;/a&gt; 字典的创建和初始化：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 dictCreate 函数创建一个新的字典。&lt;/li&gt;
&lt;li&gt;初始化字典的字段，包括两个哈希表、字典类型等。&lt;/li&gt;
&lt;li&gt;通过 dictSetHashFunctionSeed 设置哈希函数种子。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字典的扩容和-rehash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字典的扩容和-rehash&#34;&gt;#&lt;/a&gt; 字典的扩容和 rehash：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 _dictExpandIfNeeded 函数检查是否需要扩容。&lt;/li&gt;
&lt;li&gt;如果需要扩容，调用 dictExpand 进行扩容。&lt;/li&gt;
&lt;li&gt;扩容时，可能触发 rehash 操作，将原哈希表的数据逐步迁移到新哈希表。&lt;/li&gt;
&lt;li&gt;通过 _dictRehashStep 函数完成一步 rehash 操作。&lt;/li&gt;
&lt;li&gt;在 rehash 过程中，遍历原哈希表的每个桶，将其中的元素逐个迁移到新哈希表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插入元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#插入元素&#34;&gt;#&lt;/a&gt; 插入元素：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 dictAdd 函数插入键值对。&lt;/li&gt;
&lt;li&gt;计算键的哈希值，找到对应的哈希桶。&lt;/li&gt;
&lt;li&gt;如果字典正在 rehash，先进行一步 rehash 操作。&lt;/li&gt;
&lt;li&gt;检查是否存在相同的键，如果存在，返回错误。&lt;/li&gt;
&lt;li&gt;创建一个新的 dictEntry，插入到哈希桶的链表中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查找元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找元素&#34;&gt;#&lt;/a&gt; 查找元素：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 dictFind 函数查找指定键的条目。&lt;/li&gt;
&lt;li&gt;计算键的哈希值，找到对应的哈希桶。&lt;/li&gt;
&lt;li&gt;在哈希桶的链表中遍历，比较键的值找到相应的条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;删除元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除元素&#34;&gt;#&lt;/a&gt; 删除元素：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 dictDelete 函数删除指定键的条目。&lt;/li&gt;
&lt;li&gt;计算键的哈希值，找到对应的哈希桶。&lt;/li&gt;
&lt;li&gt;在哈希桶的链表中遍历，找到并删除相应的条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代元素&#34;&gt;#&lt;/a&gt; 迭代元素 ##：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 dictGetRandomKey 函数随机获取一个键。&lt;/li&gt;
&lt;li&gt;使用 dictScan 函数迭代字典中的所有元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性能测试和统计信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#性能测试和统计信息&#34;&gt;#&lt;/a&gt; 性能测试和统计信息：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;提供了一系列的性能测试函数，例如 dictTest，用于测试字典操作的性能。&lt;/li&gt;
&lt;li&gt;提供了函数用于获取字典的统计信息，如 dictGetStats。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总体来说，dict.c 中的代码主要围绕字典的创建、扩容、插入、查找、删除等基本操作展开，同时提供了性能测试和统计信息功能。字典的实现采用了哈希表，支持渐进式 rehash，以确保字典的高效性能。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;三-dictc在-redis-中的主要运用方式和作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-dictc在-redis-中的主要运用方式和作用&#34;&gt;#&lt;/a&gt; 三、dict.c 在 Redis 中的主要运用方式和作用#&lt;/h1&gt;
&lt;h2 id=&#34;存储键值对&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储键值对&#34;&gt;#&lt;/a&gt; 存储键值对：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Redis 中的数据结构，如哈希表、有序集合等，都依赖于 dict.c 实现的字典结构。&lt;/li&gt;
&lt;li&gt;键值对是 Redis 数据模型的基础，而 dict.c 提供了高效的字典实现，用于存储这些键值对。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快速查找&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速查找&#34;&gt;#&lt;/a&gt; 快速查找：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Redis 中经常需要根据键快速查找对应的值，例如通过键获取字符串对象、获取哈希表中的字段等。&lt;/li&gt;
&lt;li&gt;dict.c 提供了高效的查找算法，使得在字典中查找元素的时间复杂度为 O (1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哈希算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希算法&#34;&gt;#&lt;/a&gt; 哈希算法：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dict.c 中包含了用于计算键的哈希值的算法，通过哈希值将键均匀地散列到哈希表的各个桶中。&lt;/li&gt;
&lt;li&gt;这有助于保持字典的高效性能，减少哈希冲突的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态扩容和-rehash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态扩容和-rehash&#34;&gt;#&lt;/a&gt; 动态扩容和 rehash：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dict.c 提供了动态扩容的机制，当字典中的元素数量增加时，自动调整哈希表的大小以保持性能。&lt;/li&gt;
&lt;li&gt;在扩容时，dict.c 还实现了渐进式 rehash，逐步将数据从旧哈希表迁移到新哈希表，避免了一次性大规模的数据迁移。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代器支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代器支持&#34;&gt;#&lt;/a&gt; 迭代器支持：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dict.c 提供了字典的迭代器，支持按顺序或随机遍历字典中的元素。&lt;/li&gt;
&lt;li&gt;迭代器的实现使得在 Redis 中可以轻松地实现像 HSCAN 这样的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;统计信息和性能测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#统计信息和性能测试&#34;&gt;#&lt;/a&gt; 统计信息和性能测试：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dict.c 提供了获取字典统计信息的功能，这对于监控和调优 Redis 实例至关重要。&lt;/li&gt;
&lt;li&gt;性能测试函数，如 dictTest，用于验证字典操作的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在-redis-服务器中的引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-redis-服务器中的引用&#34;&gt;#&lt;/a&gt; 在 Redis 服务器中的引用：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Redis 服务器的核心功能，包括数据存储、命令执行等，都依赖于字典结构。&lt;/li&gt;
&lt;li&gt;在 Redis 服务器的核心源码中，大量引用了 dict.c 中提供的字典操作函数，确保数据的高效存储和检索。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在-redis-模块中的引用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在-redis-模块中的引用&#34;&gt;#&lt;/a&gt; 在 Redis 模块中的引用：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Redis 允许用户通过编写模块扩展其功能，而许多模块也需要使用字典结构来管理自己的数据。&lt;/li&gt;
&lt;li&gt;模块开发者可以直接引用 dict.c 中的字典实现，以方便地处理键值对数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总体来说，dict.c 在 Redis 中扮演了关键的角色，为 Redis 提供了高效的键值对存储和检索能力，是 Redis 数据库引擎的重要组成部分。&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://enjundu.github.io/ECEBC/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/</guid>
            <title>Request阅读报告</title>
            <link>https://enjundu.github.io/ECEBC/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/</link>
            <category>Hexo</category>
            <category>Front Matter</category>
            <pubDate>Wed, 03 Jul 2024 01:41:31 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;requests-html-项目阅读报告&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#requests-html-项目阅读报告&#34;&gt;#&lt;/a&gt; Requests-HTML 项目阅读报告&lt;/h1&gt;
&lt;h2 id=&#34;项目概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目概述&#34;&gt;#&lt;/a&gt; 项目概述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;requests-html&lt;/strong&gt; 是一个用于简化 HTML 解析和网页抓取的 Python 库。它通过结合 requests 库的简单和强大，与&lt;strong&gt; pyquery、beautifulsoup4 和 lxml&lt;/strong&gt; 等工具进行二次封装，提供了一个直观的 API，使得网页抓取和 HTML 解析变得更容易。该库不仅支持同步请求，还支持异步请求，能够处理由 JavaScript 驱动的动态内容。&lt;/p&gt;
&lt;h2 id=&#34;关键特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键特性&#34;&gt;#&lt;/a&gt; 关键特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;完整的 JavaScript 支持&lt;/strong&gt;：通过 pyppeteer 支持渲染和解析由 JavaScript 动态生成的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS 选择器&lt;/strong&gt;：使用 pyquery 提供类似 jQuery 的选择器语法，方便选择 HTML 元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XPath 选择器&lt;/strong&gt;：提供对 XPath 的支持，方便使用 XPath 语法选择元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模拟用户代理&lt;/strong&gt;：模拟真实的浏览器用户代理，避免被反爬虫机制检测到。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动重定向&lt;/strong&gt;：自动处理 HTTP 重定向，保持会话的连续性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接池和 Cookie 持久化&lt;/strong&gt;：高效的连接处理，保持会话中的 Cookie 持久化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步支持&lt;/strong&gt;：允许异步的 HTTP 请求和渲染，提升爬虫的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;根据&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZXF1ZXN0cy1odG1sLmtlbm5ldGhyZWl0ei5vcmcv&#34;&gt; requests-html 项目文档&lt;/span&gt;可知安装方法为：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ pipenv install requests-html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;仅支持 python3.6 版本 ——Only &lt;strong&gt;Python 3.6&lt;/strong&gt; is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设计思路&#34;&gt;#&lt;/a&gt; 设计思路&lt;/h2&gt;
&lt;p&gt;requests-html 设计的核心思想是将常见的 HTML 解析和网页抓取任务简化为直观且强大的 API 操作。它通过结合现有的流行库（如 requests、pyquery、beautifulsoup4 和 lxml），增强了处理复杂网页抓取任务的能力。其主要设计理念包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;统一接口&lt;/strong&gt;：提供一个统一的接口来处理 HTTP 请求、HTML 解析和 JavaScript 渲染。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步支持&lt;/strong&gt;：允许用户以异步方式处理网页抓取任务，提高了效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模拟浏览器行为&lt;/strong&gt;：通过模拟用户代理和处理重定向，使其行为更像真实浏览器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全面的选择器支持&lt;/strong&gt;：结合 CSS 和 XPath 选择器，使用户可以灵活地选择和解析 HTML 元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;源代码分析核心类和函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源代码分析核心类和函数&#34;&gt;#&lt;/a&gt; 源代码分析 (核心类和函数)&lt;/h2&gt;
&lt;h3 id=&#34;htmlsession&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#htmlsession&#34;&gt;#&lt;/a&gt; HTMLSession&lt;/h3&gt;
&lt;h4 id=&#34;用于同步请求的会话类继承自-requestssession&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用于同步请求的会话类继承自-requestssession&#34;&gt;#&lt;/a&gt; 用于同步请求的会话类，继承自 requests.Session。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;get(url, **kwargs)&lt;/strong&gt;：发送 GET 请求，返回 HTMLResponse 对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;close()&lt;/strong&gt;：关闭会话并关闭浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;asynchtmlsession&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#asynchtmlsession&#34;&gt;#&lt;/a&gt; AsyncHTMLSession&lt;/h3&gt;
&lt;h4 id=&#34;用于异步请求的会话类继承自-requestssession&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用于异步请求的会话类继承自-requestssession&#34;&gt;#&lt;/a&gt; 用于异步请求的会话类，继承自 &lt;strong&gt;requests.Session&lt;/strong&gt;。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;run(*coros)&lt;/strong&gt;：运行多个协程，返回结果列表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;close()&lt;/strong&gt;：关闭会话并关闭浏览器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;html&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#html&#34;&gt;#&lt;/a&gt; HTML&lt;/h3&gt;
&lt;h4 id=&#34;表示一个-html-文档提供解析功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表示一个-html-文档提供解析功能&#34;&gt;#&lt;/a&gt; 表示一个 HTML 文档，提供解析功能。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;find(selector,*, containing=None, clean=False, first=False)&lt;/strong&gt;：使用 CSS 选择器查找元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xpath(selector, *, clean=False, first=False)&lt;/strong&gt;：使用 XPath 选择器查找元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;render(**kwargs)&lt;/strong&gt;：渲染 JavaScript 内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next(fetch=False, next_symbol=None)&lt;/strong&gt;：查找分页链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;element&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#element&#34;&gt;#&lt;/a&gt; Element&lt;/h3&gt;
&lt;h4 id=&#34;表示一个-html-元素继承自-baseparser&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表示一个-html-元素继承自-baseparser&#34;&gt;#&lt;/a&gt; 表示一个 HTML 元素，继承自 BaseParser。&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;attrs&lt;/strong&gt;：返回元素的属性字典。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;text&lt;/strong&gt;：返回元素的文本内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;full_text&lt;/strong&gt;：返回元素的完整文本内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设置和配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置和配置&#34;&gt;#&lt;/a&gt; 设置和配置&lt;/h2&gt;
&lt;h3 id=&#34;setuppy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#setuppy&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NldHVwLnB5&#34;&gt;setup.py&lt;/span&gt; 文件包含项目的元数据和依赖项：&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;setup(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;requests-html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;version=&lt;span class=&#34;string&#34;&gt;&amp;#x27;0.10.0&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;description=&lt;span class=&#34;string&#34;&gt;&amp;#x27;HTML Parsing for Humans.&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;author=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Kenneth Reitz&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;author_email=&lt;span class=&#34;string&#34;&gt;&amp;#x27;me@kennethreitz.org&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;url=&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://github.com/psf/requests-html&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python_requires=&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;gt;=3.6.0&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;install_requires=[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;requests&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;pyquery&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;fake-useragent&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;parse&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;beautifulsoup4&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;w3lib&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;pyppeteer&amp;gt;=0.0.14&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;packages=[&lt;span class=&#34;string&#34;&gt;&amp;#x27;requests_html&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;license=&lt;span class=&#34;string&#34;&gt;&amp;#x27;MIT&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;classifiers=[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;License :: OSI Approved :: MIT License&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;Programming Language :: Python :: 3.6&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;Programming Language :: Python :: Implementation :: CPython&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试&#34;&gt;#&lt;/a&gt; 测试&lt;/h3&gt;
&lt;p&gt;项目包含同步和异步操作的测试，确保分页、属性提取和 JavaScript 渲染的健壮性。例如：&lt;/p&gt;
&lt;h4 id=&#34;同步分页测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步分页测试&#34;&gt;#&lt;/a&gt; 同步分页测试&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pytest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; requests_html &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; HTMLSession&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;urls = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://xkcd.com/1957/&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.reddit.com/&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://github.com/psf/requests-html/issues&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://discord.com/category/engineering&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://stackoverflow.com/&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.frontiersin.org/&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://azure.microsoft.com/en-us&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.parametrize(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;url&amp;#x27;&lt;/span&gt;, urls&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@pytest.mark.internet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_pagination&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;url: &lt;span class=&#34;built_in&#34;&gt;str&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	session = HTMLSession()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	r = session.get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;next&lt;/span&gt;(r.html)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;异步分页测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步分页测试&#34;&gt;#&lt;/a&gt; 异步分页测试&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;import pytest
from requests_html import AsyncHTMLSession

urls = [
	&#39;https://xkcd.com/1957/&#39;,
	&#39;https://www.reddit.com/&#39;,
	&#39;https://github.com/psf/requests-html/issues&#39;,
	&#39;https://discord.com/category/engineering&#39;,
	&#39;https://stackoverflow.com/&#39;,
	&#39;https://www.frontiersin.org/&#39;,
	&#39;https://azure.microsoft.com/en-us&#39;
]

@pytest.mark.parametrize(&#39;url&#39;, urls)
@pytest.mark.internet
@pytest.mark.asyncio
async def test_async_pagination(event_loop, url):
	asession = AsyncHTMLSession()
	r = await asession.get(url)
	assert await r.html.__anext__()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;文件请求测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件请求测试&#34;&gt;#&lt;/a&gt; 文件请求测试&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; requests_html &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; HTMLSession&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;session = HTMLSession()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;session.mount(&lt;span class=&#34;string&#34;&gt;&amp;#x27;file://&amp;#x27;&lt;/span&gt;, FileAdapter())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	path = os.path.sep.join((os.path.dirname(os.path.abspath(__file__)), &lt;span class=&#34;string&#34;&gt;&amp;#x27;python.html&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	url = &lt;span class=&#34;string&#34;&gt;f&amp;#x27;file://&lt;span class=&#34;subst&#34;&gt;&amp;#123;path&amp;#125;&lt;/span&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; session.get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;test_file_get&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	r = get()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; r.status_code == &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;文档配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档配置&#34;&gt;#&lt;/a&gt; 文档配置&lt;/h3&gt;
&lt;h4 id=&#34;confpy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#confpy&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2NvbmYucHk=&#34;&gt;conf.py&lt;/span&gt; 文件设置了 Sphinx 文档，包括扩展和项目信息：&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests_html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;project = &lt;span class=&#34;string&#34;&gt;&amp;#x27;requests-HTML&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;author = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Kenneth Reitz&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;version = &lt;span class=&#34;string&#34;&gt;&amp;#x27;v0.3.4&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;extensions = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.autodoc&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.doctest&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.intersphinx&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.todo&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.coverage&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.viewcode&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;#x27;sphinx.ext.githubpages&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;使用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用方法&#34;&gt;#&lt;/a&gt; 使用方法&lt;/h2&gt;
&lt;h3 id=&#34;同步请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步请求&#34;&gt;#&lt;/a&gt; 同步请求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;向 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3B5dGhvbi5vcmc=&#34;&gt;python.org&lt;/span&gt; 发起同步 GET 请求并提取链接：&lt;br&gt;
from requests_html import HTMLSession&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;session = HTMLSession()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r = session.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://python.org/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 提取所有链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;links = r.html.links&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(links)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 提取绝对链接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;absolute_links = r.html.absolute_links&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(absolute_links)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例结果为：&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;//docs.python.org/3/tutorial/&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;/about/apps/&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://github.com/python/pythondotorg/issues&amp;#x27;&lt;/span&gt;, ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://docs.python.org/3/tutorial/&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.python.org/about/apps/&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://github.com/python/pythondotorg/issues&amp;#x27;&lt;/span&gt;, ...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;异步请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步请求&#34;&gt;#&lt;/a&gt; 异步请求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 requests_html 库发起异步 GET 请求并运行多个协程：&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; requests_html &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; AsyncHTMLSession&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	asession = AsyncHTMLSession()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_python&lt;/span&gt;():  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  r = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; asession.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://python.org/&amp;#x27;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;get_reddit&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  r = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; asession.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://reddit.com/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	results = asession.run(get_python, get_reddit)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; result &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; results:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(result.html.url)  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步请求结果示例&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;https://www.python.org/  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;https://www.reddit.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解析html&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析html&#34;&gt;#&lt;/a&gt; 解析 HTML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择元素并提取属性&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r = session.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://python.org/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;about = r.html.find(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#about&amp;#x27;&lt;/span&gt;, first=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 提取文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;text = about.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 提取属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;attributes = about.attrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(attributes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 渲染 HTML&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;html_content = about.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(html_content)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析 HTML 结果示例&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;About&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Applications&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Quotes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Getting Started&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Help&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Python Brochure&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;about&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;class&amp;#x27;&lt;/span&gt;: (&lt;span class=&#34;string&#34;&gt;&amp;#x27;tier-1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;element-1&amp;#x27;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;#x27;aria-haspopup&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;li aria-haspopup=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;tier-1 element-1 &amp;quot;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;about&amp;quot;&lt;/span&gt;&amp;gt;\n&amp;lt;a &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; href=&lt;span class=&#34;string&#34;&gt;&amp;quot;/about/&amp;quot;&lt;/span&gt; title=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;About&amp;lt;/a&amp;gt;\n&amp;lt;ul aria-hidden=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;subnav menu&amp;quot;&lt;/span&gt; role=&lt;span class=&#34;string&#34;&gt;&amp;quot;menu&amp;quot;&lt;/span&gt;&amp;gt;\n&amp;lt;li &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;tier-2 element-1&amp;quot;&lt;/span&gt; role=&lt;span class=&#34;string&#34;&gt;&amp;quot;treeitem&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;/about/apps/&amp;quot;&lt;/span&gt; title=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;Applications&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n&amp;lt;li &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;tier-2 element-2&amp;quot;&lt;/span&gt; role=&lt;span class=&#34;string&#34;&gt;&amp;quot;treeitem&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;/about/quotes/&amp;quot;&lt;/span&gt; title=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;Quotes&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n&amp;lt;li &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;tier-2 element-3&amp;quot;&lt;/span&gt; role=&lt;span class=&#34;string&#34;&gt;&amp;quot;treeitem&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;/about/gettingstarted/&amp;quot;&lt;/span&gt; title=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;Getting Started&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n&amp;lt;li &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;tier-2 element-4&amp;quot;&lt;/span&gt; role=&lt;span class=&#34;string&#34;&gt;&amp;quot;treeitem&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;/about/help/&amp;quot;&lt;/span&gt; title=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;Help&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n&amp;lt;li &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;tier-2 element-5&amp;quot;&lt;/span&gt; role=&lt;span class=&#34;string&#34;&gt;&amp;quot;treeitem&amp;quot;&lt;/span&gt;&amp;gt;&amp;lt;a href=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://brochure.getpython.info/&amp;quot;&lt;/span&gt; title=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;Python Brochure&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;\n&amp;lt;/ul&amp;gt;\n&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;xpath选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xpath选择器&#34;&gt;#&lt;/a&gt; XPath 选择器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提取 html 指定元素的 XPath&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r = session.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://python.org/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;about = r.html.xpath(&lt;span class=&#34;string&#34;&gt;&amp;#x27;//div[@id=&amp;quot;about&amp;quot;]&amp;#x27;&lt;/span&gt;, first=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 提取文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;text = about.text&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 提取属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;attributes = about.attrs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(attributes)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XPath 选择器结果示例：&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;About&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Applications&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Quotes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Getting Started&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Help&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Python Brochure&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;about&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;class&amp;#x27;&lt;/span&gt;: (&lt;span class=&#34;string&#34;&gt;&amp;#x27;tier-1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;element-1&amp;#x27;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;#x27;aria-haspopup&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;渲染-javascript-内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#渲染-javascript-内容&#34;&gt;#&lt;/a&gt; 渲染 JavaScript 内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r = session.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://python-requests.org/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r.html.render()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 搜索渲染后的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;months = r.html.search(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Python 2 will retire in only &amp;#123;months&amp;#125; months!&amp;#x27;&lt;/span&gt;)[&lt;span class=&#34;string&#34;&gt;&amp;#x27;months&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(months)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果示例：&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理分页&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理分页&#34;&gt;#&lt;/a&gt; 处理分页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码示例&lt;/p&gt;
&lt;p&gt;r = session.get(‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWRkaXQuY29t&#34;&gt;https://reddit.com&lt;/span&gt;’)&lt;br&gt;
for html in r.html:&lt;br&gt;
print(html)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果示例&lt;/p&gt;
  &lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;HTML url=&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.reddit.com/&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;HTML url=&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://www.reddit.com/?count=25&amp;amp;after=t3_81puu5&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结论&#34;&gt;#&lt;/a&gt; 结论&lt;/h2&gt;
&lt;p&gt;requests-html 是一个功能强大且易于使用的库，通过集成 JavaScript 渲染和异步请求，扩展了传统 HTML 解析和网页抓取的能力。它与 requests 库的无缝集成，使其成为处理复杂网页抓取任务的绝佳选择。无论是处理简单的静态页面还是复杂的动态内容，requests-html 都提供了一个直观且高效的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;项目心得&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目心得&#34;&gt;#&lt;/a&gt; 项目心得&lt;/h2&gt;
&lt;p&gt;在这个项目中，我深入研究了 requests-html 库，并对其功能和设计进行了详细分析和实践。通过这个项目，我不仅熟悉了 requests-html 的使用方法，还掌握了一些高级的网页抓取技巧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习与使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我被 requests-html 库的简洁性和强大功能所吸引。这个库基于 requests 构建，结合了 pyquery、beautifulsoup4 和 lxml 等工具，使得 HTML 解析和网页抓取变得更加直观和高效。安装和设置过程也非常简单，只需几行命令即可开始使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同步与异步请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际使用中，我发现 requests-html 对同步和异步请求的支持非常实用。通过 HTMLSession 和 AsyncHTMLSession，我可以轻松地发起同步和异步的 HTTP 请求，并处理由 JavaScript 动态生成的内容。特别是在处理大量请求时，异步支持显著提高了效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaScript 渲染&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个令我印象深刻的功能是 requests-html 对 JavaScript 渲染的支持。通过 pyppeteer，我能够渲染和解析动态生成的内容，这在现代网页抓取中是至关重要的。我尝试了多个网站，包括一些使用复杂 JavaScript 生成内容的网站，requests-html 都能顺利完成任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS 与 XPath 选择器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在解析 HTML 内容时，requests-html 提供的 CSS 和 XPath 选择器极大地方便了我的工作。我可以使用类似 jQuery 的语法快速定位和提取网页中的元素，同时也可以使用 XPath 进行更复杂的查询。这使得解析和处理网页内容变得更加灵活和高效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模拟用户代理与自动重定向&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际应用中，避免被反爬虫机制检测到是一个重要的考虑因素。requests-html 通过模拟真实的浏览器用户代理，有效减少了被封禁的风险。此外，它还自动处理 HTTP 重定向，保持会话的连续性，确保抓取过程顺利进行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码实现与测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在编写和测试代码的过程中，我进一步理解了 requests-html 的内部机制。通过阅读和分析源码，我了解到每个核心类和函数的具体实现原理。这不仅提升了我的编程技能，也让我对网页抓取有了更深入的认识。&lt;/p&gt;
&lt;p&gt;我编写了一些测试用例，包括同步和异步分页测试、文件请求测试等，确保了代码的健壮性和可靠性。通过这些测试，我验证了 requests-html 在不同场景下的表现，发现它确实是一个功能强大且易于使用的库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总的来说，这次项目经历让我受益匪浅。requests-html 不仅简化了网页抓取的复杂性，还提供了强大的功能，满足了我在处理动态内容和大量请求时的需求。通过这个项目，我对网页抓取技术有了更全面的理解，也积累了丰富的实践经验。今后，我会继续探索和使用这个库，进一步提升我的技术能力。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
