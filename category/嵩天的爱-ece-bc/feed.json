{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"嵩天的爱-ece-bc\" category",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/ECEBC/redis-dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "url": "https://enjundu.github.io/ECEBC/redis-dict.c%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/",
            "title": "DICT.C源码阅读报告",
            "date_published": "2024-07-02T17:43:21.000Z",
            "content_html": "<h1 id=\"一-各函数分部解析\"><a class=\"anchor\" href=\"#一-各函数分部解析\">#</a> 一、各函数分部解析</h1>\n<ul>\n<li>\n<p>struct dictEntry 结构体：</p>\n<ol>\n<li>用于表示字典中的键值对。</li>\n<li>成员变量：</li>\n<li>void *key：键的指针。</li>\n<li>union：联合体，可以存储值的不同类型（void *val, uint64_t u64, int64_t s64, double d）。</li>\n<li>struct dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。</li>\n</ol>\n</li>\n<li>\n<p>typedef struct dictEntryNoValue 结构体：</p>\n<ol>\n<li>表示字典中的无值 entry。</li>\n<li>成员变量：\n<ol>\n<li>void *key：键的指针。</li>\n<li>dictEntry *next：指向下一个相同哈希槽中的 entry 的指针。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>static dictResizeEnable dict_can_resize：</p>\n<ol>\n<li>\n<ul>\n<li>全局变量，表示字典是否允许进行大小调整的标志。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>static unsigned int dict_force_resize_ratio：</p>\n<ol>\n<li>全局变量，表示强制调整大小的比例阈值。</li>\n</ol>\n</li>\n<li>\n<p>哈希函数相关：</p>\n<ol>\n<li>static uint8_t dict_hash_function_seed [16]：字典哈希函数的种子。</li>\n<li>void dictSetHashFunctionSeed (uint8_t *seed)：设置哈希函数的种子。</li>\n<li>uint8_t *dictGetHashFunctionSeed (void)：获取哈希函数的种子。</li>\n<li>uint64_t dictGenHashFunction (const void *key, size_t len)：字典使用的哈希函数。</li>\n<li>uint64_t dictGenCaseHashFunction (const unsigned char *buf, size_t len)：字典使用的哈希函数，不区分大小写。</li>\n</ol>\n</li>\n<li>\n<p>字典指针位操作相关：</p>\n<ol>\n<li>#define ENTRY_PTR_MASK 7：用于掩码操作的位掩码，表示字典指针的最低 3 位。</li>\n<li>#define ENTRY_PTR_NORMAL 0 和 #define ENTRY_PTR_NO_VALUE 2：表示不同类型的字典 entry。</li>\n<li>一系列辅助函数用于判断和操作不同类型的 entry。</li>\n</ol>\n</li>\n<li>\n<p>哈希表相关函数：</p>\n<ol>\n<li>_dictExpandIfNeeded (dict *d)：如果需要，扩展字典的哈希表大小的内部函数。</li>\n<li>_dictNextExp (unsigned long size)：返回大于等于给定大小的最小的 2 的整数次幂的对数的函数。</li>\n<li>_dictInit (dict *d, dictType *type)：初始化字典的内部函数。</li>\n</ol>\n</li>\n<li>\n<p>API 实现相关：</p>\n<ol>\n<li>_dictReset (dict *d, int htidx)：重置已使用 _dictInit () 初始化的哈希表参数。</li>\n<li>dictCreate (dictType *type)：创建一个新的哈希表。</li>\n<li>dictCreateMultiple (dictType *type, int count)：创建包含多个字典的数组。</li>\n<li>int _dictInit (dict *d, dictType *type)：初始化哈希表。</li>\n<li>int dictResize (dict *d)：调整表的大小，使其包含所有元素，且满足 USED/BUCKETS 比率接近 &lt;= 1 的不变式。</li>\n</ol>\n</li>\n<li>\n<p>int _dictExpand(dict *d, unsigned long size, int *malloc_failed)：</p>\n<ol>\n<li>这个函数用于扩展或创建哈希表，增加或初始化新的哈希表。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n<li>malloc_failed：如果为非空指针，则在分配内存失败时设置为 1。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictExpand(dict *d, unsigned long size)：</p>\n<ol>\n<li>对外部接口的封装，用于扩展字典的哈希表。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果执行成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictTryExpand(dict *d, unsigned long size)：</p>\n<ol>\n<li>对外部接口的封装，用于尝试扩展字典的哈希表，当内存分配失败时返回 DICT_ERR。\n<ol>\n<li>参数：</li>\n<li>d：字典。</li>\n<li>size：新的哈希表大小。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果内存分配失败，返回 DICT_ERR；否则返回 DICT_OK。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictRehash(dict *d, int n)：</p>\n<ol>\n<li>执行 N 步的增量重新哈希。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>n：步数。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果还有从旧哈希表移动到新哈希表的键，则返回 1；否则返回 0。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>long long timeInMilliseconds(void)：</p>\n<ol>\n<li>返回当前时间戳，以毫秒为单位。</li>\n</ol>\n</li>\n<li>\n<p>int dictRehashMilliseconds(dict *d, unsigned int ms)：</p>\n<ol>\n<li>在指定的时间内（毫秒为单位）执行重新哈希。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>ms：指定的时间（毫秒）。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>返回实际进行的重新哈希步数。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>void _dictRehashStep(dict *d)：</p>\n<ol>\n<li>执行一步的增量重新哈希，仅在哈希表的重新哈希未暂停时执行。</li>\n</ol>\n</li>\n<li>\n<p>int dictAdd(dict *d, void *key, void *val)：</p>\n<ol>\n<li>向字典中添加键值对。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>val：值。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果成功，返回 DICT_OK；否则返回 DICT_ERR。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictAddRaw(dict *d, void *key, dictEntry **existing)：</p>\n<ol>\n<li>低级别的添加或查找函数，返回一个指向新键的 dictEntry 结构体。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>existing：如果键已经存在，则存储现有条目的指针。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>如果键已经存在，返回 NULL；否则返回指向新键的 dictEntry 结构体。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictInsertAtPosition(dict *d, void *key, void *position)：</p>\n<ol>\n<li>在指定位置插入键，该位置通常由 dictFindPositionForInsert 函数返回。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：键。</li>\n<li>position：插入位置。</li>\n</ol>\n</li>\n<li>返回值：\n<ol>\n<li>返回指向新键的 dictEntry 结构体。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictReplace(dict *d, void *key, void *val)：</p>\n<ol>\n<li>尝试向字典中添加一个元素。如果键不存在，dictAddRaw 将成功。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要添加或替换的键。</li>\n<li>val：要设置的值。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果添加成功，返回 1；否则，如果键已存在，则返回 0。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictAddOrFind(dict *d, void *key)：</p>\n<ol>\n<li>是 dictAddRaw 的一个版本，始终返回指定键的哈希条目，即使键已存在且无法添加。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要添加或查找的键。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果添加成功，返回新的字典条目；如果键已存在，返回已存在的字典条目。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry *dictGenericDelete(dict *d, const void *key, int nofree)：</p>\n<ol>\n<li>用于在字典中搜索并删除元素。这是 dictDelete () 和 dictUnlink () 的辅助函数。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>key：要删除的键。</li>\n<li>nofree：指示是否释放内存的标志。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>如果找到并删除元素，返回被删除的字典条目；如果未找到，返回 NULL。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>int dictDelete(dict *ht, const void *key)：</p>\n<ol>\n<li>从字典中删除元素，成功返回 DICT_OK，否则返回 DICT_ERR。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictUnlink(dict *d, const void *key)：</p>\n<ol>\n<li>从字典中删除元素，但不实际释放键、值和字典条目。返回被找到并从表中解链的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>void dictFreeUnlinkedEntry(dict *d, dictEntry *he)：</p>\n<ol>\n<li>用于真正释放调用 dictUnlink () 后的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>int _dictClear(dict <em>d, int htidx, void(callback)(dict</em>))：</p>\n<ol>\n<li>释放字典中的所有元素。</li>\n<li>参数：\n<ol>\n<li>d：字典。</li>\n<li>htidx：要清除的哈希表索引。</li>\n<li>callback：可选的回调函数。</li>\n</ol>\n</li>\n<li>返回：\n<ol>\n<li>成功返回 DICT_OK。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>void dictRelease(dict *d)：</p>\n<ol>\n<li>清空并释放哈希表。首先通过 _dictClear 清空两个哈希表，然后释放字典结构体占用的内存。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictFind(dict *d, const void *key)：</p>\n<ol>\n<li>在字典中查找给定键对应的字典条目。</li>\n<li>如果字典为空，返回 NULL。</li>\n<li>如果字典正在进行 rehash，执行一步 rehash 操作。</li>\n<li>遍历两个哈希表，查找匹配的键，找到则返回对应的字典条目。</li>\n</ol>\n</li>\n<li>\n<p>void *dictFetchValue(dict *d, const void *key)：</p>\n<ol>\n<li>获取字典中给定键对应的值。</li>\n<li>调用 dictFind 查找字典条目，如果找到则返回对应的值，否则返回 NULL。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictTwoPhaseUnlinkFind(dict *d, const void *key, dictEntry ***plink, int *table_index)：</p>\n<ol>\n<li>在字典中查找给定键对应的字典条目，并获取该条目的前一项的指针地址（plink）和哈希表索引（table_index）。</li>\n<li>这是一种两阶段解链的操作，用于在可能的 rehash 过程中执行解链。</li>\n</ol>\n</li>\n<li>\n<p>void dictTwoPhaseUnlinkFree(dict *d, dictEntry *he, dictEntry **plink, int table_index)：</p>\n<ol>\n<li>两阶段解链并释放字典条目的函数。</li>\n<li>通过修改前一项的指针实现解链，然后释放键、值和字典条目的内存。</li>\n<li>恢复 rehash 过程。</li>\n</ol>\n</li>\n<li>\n<p>一系列用于设置和获取字典条目键值的辅助函数：</p>\n<ol>\n<li>dictSetKey、dictSetVal、dictSetSignedIntegerVal、dictSetUnsignedIntegerVal、dictSetDoubleVal 用于设置字典条目的键和值。</li>\n<li>dictIncrSignedIntegerVal、dictIncrUnsignedIntegerVal、dictIncrDoubleVal 用于自增字典条目的整数值和浮点数值。</li>\n<li>dictGetKey、dictGetVal、dictGetSignedIntegerVal、dictGetUnsignedIntegerVal、dictGetDoubleVal 用于获取字典条目的键和值。</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry *dictGetNext(const dictEntry *de)：</p>\n<ol>\n<li>返回字典条目的 next 字段或 NULL，如果条目没有 next 字段则返回 NULL。</li>\n</ol>\n</li>\n<li>\n<p>static dictEntry **dictGetNextRef(dictEntry *de)：</p>\n</li>\n</ul>\n<ol>\n<li>返回指向字典条目的 next 字段的指针，或 NULL，如果条目没有 next 字段则返回 NULL。</li>\n</ol>\n<ul>\n<li>\n<p>static void dictSetNext(dictEntry *de, dictEntry *next)：</p>\n<ol>\n<li>设置字典条目的 next 字段。</li>\n</ol>\n</li>\n<li>\n<p>size_t dictMemUsage(const dict *d)：</p>\n<ol>\n<li>返回字典的内存使用，不包括键和值的大小。</li>\n</ol>\n</li>\n<li>\n<p>size_t dictEntryMemUsage(void)：</p>\n<ol>\n<li>返回字典条目的内存使用。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long long dictFingerprint(dict *d)：</p>\n<ol>\n<li>生成字典的指纹，用于检测在迭代期间是否对字典进行了禁止的操作。</li>\n</ol>\n</li>\n<li>\n<p>void dictInitIterator(dictIterator *iter, dict *d)：</p>\n<ol>\n<li>初始化字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>void dictInitSafeIterator(dictIterator *iter, dict *d)：</p>\n</li>\n</ul>\n<ol>\n<li>初始化安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。</li>\n</ol>\n<ul>\n<li>\n<p>void dictResetIterator(dictIterator *iter)：</p>\n<ol>\n<li>重置字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictIterator *dictGetIterator(dict *d)：</p>\n<ol>\n<li>获取普通字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictIterator *dictGetSafeIterator(dict *d)：</p>\n</li>\n</ul>\n<ol>\n<li>获取安全字典迭代器，用于在迭代过程中可能进行 rehash 操作的情况。</li>\n</ol>\n<ul>\n<li>\n<p>dictEntry *dictNext(dictIterator *iter)：</p>\n<ol>\n<li>获取字典中的下一个条目。</li>\n</ol>\n</li>\n<li>\n<p>void dictReleaseIterator(dictIterator *iter)：</p>\n<ol>\n<li>释放字典迭代器。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictGetRandomKey(dict *d)：</p>\n<ol>\n<li>返回字典中的随机条目，用于实现随机算法。</li>\n</ol>\n</li>\n<li>\n<p>unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count)：</p>\n<ol>\n<li>从字典中获取一些随机条目，用于采样目的。</li>\n</ol>\n</li>\n<li>\n<p>static void dictDefragBucket(dictEntry **bucketref, dictDefragFunctions *defragfns)：</p>\n<ol>\n<li>使用提供的分配函数，重新分配字典条目、键和值在一个桶中的内存，以进行碎片整理。</li>\n<li>defragfns 是一个包含碎片整理分配函数的结构。</li>\n<li>dictEntry *dictGetFairRandomKey(dict *d)：</li>\n<li>类似于 dictGetRandomKey ()，但尝试确保返回元素的更好分布。</li>\n<li>通过考虑哈希表中可能由不同链长度组成的 N 个桶，选择范围内的一个随机元素，以平滑解决不同链长度的问题。</li>\n</ol>\n</li>\n<li>\n<p>static unsigned long rev(unsigned long v)：</p>\n<ol>\n<li>位反转函数，用于迭代器中。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long dictScan(dict *d, unsigned long v, dictScanFunction *fn, void *privdata)：</p>\n<ol>\n<li>用于迭代字典中的元素，以确保在迭代开始和结束之间返回字典中的所有元素。</li>\n<li>通过反向游标迭代，以处理哈希表可能在迭代调用之间发生大小更改的情况。</li>\n</ol>\n</li>\n<li>\n<p>unsigned long dictScanDefrag(dict *d, unsigned long v, dictScanFunction *fn, dictDefragFunctions *defragfns, void *privdata)：</p>\n<ol>\n<li>类似于 dictScan ()，但额外使用提供的分配函数重新分配字典条目的内存。</li>\n<li>defragfns 包含用于碎片整理的分配函数。</li>\n</ol>\n</li>\n<li>\n<p>static int dictTypeExpandAllowed(dict *d)：</p>\n<ol>\n<li>检查字典类型是否允许进行扩展。</li>\n<li>如果允许扩展，且达到了扩展的条件，调用 dictExpand 进行扩展。</li>\n</ol>\n</li>\n<li>\n<p>static int _dictExpandIfNeeded(dict *d)：</p>\n<ol>\n<li>如果正在进行渐进式 rehashing，直接返回。</li>\n<li>如果哈希表为空，将其扩展到初始大小。</li>\n<li>如果达到 1:1 的比率，并且允许调整哈希表大小，或者应该避免调整但元素 / 桶的比率超过安全阈值，就以两倍的速度扩展哈希表。</li>\n</ol>\n</li>\n<li>\n<p>static signed char _dictNextExp(unsigned long size)：</p>\n<ol>\n<li>返回给定大小的下一个有效的哈希表大小的指数。哈希表的大小是 2 的幂。</li>\n</ol>\n</li>\n<li>\n<p>void *dictFindPositionForInsert(dict *d, const void *key, dictEntry **existing)：</p>\n<ol>\n<li>查找插入位置，如果键已存在，则返回 NULL 并填充 existing，否则返回桶的引用。</li>\n</ol>\n</li>\n<li>\n<p>void dictEmpty(dict <em>d, void(callback)(dict</em>))：</p>\n<ol>\n<li>清空字典，包括两个哈希表。可提供回调函数处理被删除的元素。</li>\n</ol>\n</li>\n<li>\n<p>void dictSetResizeEnabled(dictResizeEnable enable)：</p>\n<ol>\n<li>设置是否允许字典调整大小。</li>\n</ol>\n</li>\n<li>\n<p>uint64_t dictGetHash(dict *d, const void *key)：</p>\n<ol>\n<li>获取键的哈希值。</li>\n</ol>\n</li>\n<li>\n<p>dictEntry *dictFindEntryByPtrAndHash(dict *d, const void *oldptr, uint64_t hash)：</p>\n<ol>\n<li>通过指针和预计算的哈希查找字典中的条目，用于查找特定指针的元素。</li>\n</ol>\n</li>\n<li>\n<p>void dictRehashingInfo(dict *d, unsigned long long *from_size, unsigned long long *to_size)：</p>\n<ol>\n<li>提供正在进行 rehashing 的字典的旧哈希表大小和新哈希表大小信息。</li>\n<li>Debugging 相关函数：\n<ol>\n<li>void dictFreeStats (dictStats *stats)：释放字典统计信息的内存。</li>\n<li>void dictCombineStats (dictStats *from, dictStats *into)：将两个字典统计信息合并。</li>\n<li>dictStats *dictGetStatsHt (dict *d, int htidx, int full)：获取指定哈希表的统计信息。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>size_t dictGetStatsMsg(char *buf, size_t bufsize, dictStats *stats, int full)：</p>\n<ol>\n<li>生成字典统计信息的人类可读消息。</li>\n<li>如果字典为空，返回相关提示信息。</li>\n<li>如果 full 为真，还包括详细的统计信息。</li>\n</ol>\n</li>\n<li>\n<p>void dictGetStats(char *buf, size_t bufsize, dict *d, int full)：</p>\n<ol>\n<li>获取字典的统计信息，包括主哈希表和（如果正在进行 rehashing）rehash 哈希表的信息。</li>\n</ol>\n</li>\n<li>\n<p>Benchmark 相关函数：1.</p>\n<ol>\n<li>BenchmarkDictType 结构体：定义了用于性能测试的字典类型。</li>\n<li>uint64_t hashCallback (const void *key)：哈希回调函数，计算键的哈希值。</li>\n<li>int compareCallback (dict *d, const void *key1, const void *key2)：比较回调函数，比较两个键是否相等。</li>\n<li>void freeCallback (dict *d, void *val)：释放回调函数，释放值的内存。</li>\n<li>char *stringFromLongLong (long long value)：将长长整型值转换为字符串。</li>\n<li>#define start_benchmark ()：宏定义，用于开始计时。</li>\n<li>#define end_benchmark (msg)：宏定义，用于结束计时并输出性能测试结果。</li>\n<li>int dictTest (int argc, char **argv, int flags)：主要的性能测试函数，用于测试字典的插入、访问、删除等操作的性能。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"二-dictc的主要代码思路\"><a class=\"anchor\" href=\"#二-dictc的主要代码思路\">#</a> 二、dict.c 的主要代码思路</h1>\n<h2 id=\"字典的创建和初始化\"><a class=\"anchor\" href=\"#字典的创建和初始化\">#</a> 字典的创建和初始化：</h2>\n<ul>\n<li>使用 dictCreate 函数创建一个新的字典。</li>\n<li>初始化字典的字段，包括两个哈希表、字典类型等。</li>\n<li>通过 dictSetHashFunctionSeed 设置哈希函数种子。</li>\n</ul>\n<h2 id=\"字典的扩容和-rehash\"><a class=\"anchor\" href=\"#字典的扩容和-rehash\">#</a> 字典的扩容和 rehash：</h2>\n<ul>\n<li>使用 _dictExpandIfNeeded 函数检查是否需要扩容。</li>\n<li>如果需要扩容，调用 dictExpand 进行扩容。</li>\n<li>扩容时，可能触发 rehash 操作，将原哈希表的数据逐步迁移到新哈希表。</li>\n<li>通过 _dictRehashStep 函数完成一步 rehash 操作。</li>\n<li>在 rehash 过程中，遍历原哈希表的每个桶，将其中的元素逐个迁移到新哈希表。</li>\n</ul>\n<h2 id=\"插入元素\"><a class=\"anchor\" href=\"#插入元素\">#</a> 插入元素：</h2>\n<ul>\n<li>使用 dictAdd 函数插入键值对。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>如果字典正在 rehash，先进行一步 rehash 操作。</li>\n<li>检查是否存在相同的键，如果存在，返回错误。</li>\n<li>创建一个新的 dictEntry，插入到哈希桶的链表中。</li>\n</ul>\n<h2 id=\"查找元素\"><a class=\"anchor\" href=\"#查找元素\">#</a> 查找元素：</h2>\n<ul>\n<li>使用 dictFind 函数查找指定键的条目。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>在哈希桶的链表中遍历，比较键的值找到相应的条目。</li>\n</ul>\n<h2 id=\"删除元素\"><a class=\"anchor\" href=\"#删除元素\">#</a> 删除元素：</h2>\n<ul>\n<li>使用 dictDelete 函数删除指定键的条目。</li>\n<li>计算键的哈希值，找到对应的哈希桶。</li>\n<li>在哈希桶的链表中遍历，找到并删除相应的条目。</li>\n</ul>\n<h2 id=\"迭代元素\"><a class=\"anchor\" href=\"#迭代元素\">#</a> 迭代元素 ##：</h2>\n<ul>\n<li>使用 dictGetRandomKey 函数随机获取一个键。</li>\n<li>使用 dictScan 函数迭代字典中的所有元素。</li>\n</ul>\n<h2 id=\"性能测试和统计信息\"><a class=\"anchor\" href=\"#性能测试和统计信息\">#</a> 性能测试和统计信息：</h2>\n<ul>\n<li>提供了一系列的性能测试函数，例如 dictTest，用于测试字典操作的性能。</li>\n<li>提供了函数用于获取字典的统计信息，如 dictGetStats。</li>\n</ul>\n<p><strong>总体来说，dict.c 中的代码主要围绕字典的创建、扩容、插入、查找、删除等基本操作展开，同时提供了性能测试和统计信息功能。字典的实现采用了哈希表，支持渐进式 rehash，以确保字典的高效性能。</strong></p>\n<h1 id=\"三-dictc在-redis-中的主要运用方式和作用\"><a class=\"anchor\" href=\"#三-dictc在-redis-中的主要运用方式和作用\">#</a> 三、dict.c 在 Redis 中的主要运用方式和作用#</h1>\n<h2 id=\"存储键值对\"><a class=\"anchor\" href=\"#存储键值对\">#</a> 存储键值对：</h2>\n<ul>\n<li>Redis 中的数据结构，如哈希表、有序集合等，都依赖于 dict.c 实现的字典结构。</li>\n<li>键值对是 Redis 数据模型的基础，而 dict.c 提供了高效的字典实现，用于存储这些键值对。</li>\n</ul>\n<h2 id=\"快速查找\"><a class=\"anchor\" href=\"#快速查找\">#</a> 快速查找：</h2>\n<ul>\n<li>Redis 中经常需要根据键快速查找对应的值，例如通过键获取字符串对象、获取哈希表中的字段等。</li>\n<li>dict.c 提供了高效的查找算法，使得在字典中查找元素的时间复杂度为 O (1)。</li>\n</ul>\n<h2 id=\"哈希算法\"><a class=\"anchor\" href=\"#哈希算法\">#</a> 哈希算法：</h2>\n<ul>\n<li>dict.c 中包含了用于计算键的哈希值的算法，通过哈希值将键均匀地散列到哈希表的各个桶中。</li>\n<li>这有助于保持字典的高效性能，减少哈希冲突的可能性。</li>\n</ul>\n<h2 id=\"动态扩容和-rehash\"><a class=\"anchor\" href=\"#动态扩容和-rehash\">#</a> 动态扩容和 rehash：</h2>\n<ul>\n<li>dict.c 提供了动态扩容的机制，当字典中的元素数量增加时，自动调整哈希表的大小以保持性能。</li>\n<li>在扩容时，dict.c 还实现了渐进式 rehash，逐步将数据从旧哈希表迁移到新哈希表，避免了一次性大规模的数据迁移。</li>\n</ul>\n<h2 id=\"迭代器支持\"><a class=\"anchor\" href=\"#迭代器支持\">#</a> 迭代器支持：</h2>\n<ul>\n<li>dict.c 提供了字典的迭代器，支持按顺序或随机遍历字典中的元素。</li>\n<li>迭代器的实现使得在 Redis 中可以轻松地实现像 HSCAN 这样的命令。</li>\n</ul>\n<h2 id=\"统计信息和性能测试\"><a class=\"anchor\" href=\"#统计信息和性能测试\">#</a> 统计信息和性能测试：</h2>\n<ul>\n<li>dict.c 提供了获取字典统计信息的功能，这对于监控和调优 Redis 实例至关重要。</li>\n<li>性能测试函数，如 dictTest，用于验证字典操作的性能。</li>\n</ul>\n<h2 id=\"在-redis-服务器中的引用\"><a class=\"anchor\" href=\"#在-redis-服务器中的引用\">#</a> 在 Redis 服务器中的引用：</h2>\n<ul>\n<li>Redis 服务器的核心功能，包括数据存储、命令执行等，都依赖于字典结构。</li>\n<li>在 Redis 服务器的核心源码中，大量引用了 dict.c 中提供的字典操作函数，确保数据的高效存储和检索。</li>\n</ul>\n<h2 id=\"在-redis-模块中的引用\"><a class=\"anchor\" href=\"#在-redis-模块中的引用\">#</a> 在 Redis 模块中的引用：</h2>\n<ul>\n<li>Redis 允许用户通过编写模块扩展其功能，而许多模块也需要使用字典结构来管理自己的数据。</li>\n<li>模块开发者可以直接引用 dict.c 中的字典实现，以方便地处理键值对数据。</li>\n</ul>\n<p><strong>总体来说，dict.c 在 Redis 中扮演了关键的角色，为 Redis 提供了高效的键值对存储和检索能力，是 Redis 数据库引擎的重要组成部分。</strong></p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        },
        {
            "id": "https://enjundu.github.io/ECEBC/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/",
            "url": "https://enjundu.github.io/ECEBC/Request%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A/",
            "title": "Request阅读报告",
            "date_published": "2024-07-02T17:41:31.000Z",
            "content_html": "<h1 id=\"requests-html-项目阅读报告\"><a class=\"anchor\" href=\"#requests-html-项目阅读报告\">#</a> Requests-HTML 项目阅读报告</h1>\n<h2 id=\"项目概述\"><a class=\"anchor\" href=\"#项目概述\">#</a> 项目概述</h2>\n<p><strong>requests-html</strong> 是一个用于简化 HTML 解析和网页抓取的 Python 库。它通过结合 requests 库的简单和强大，与<strong> pyquery、beautifulsoup4 和 lxml</strong> 等工具进行二次封装，提供了一个直观的 API，使得网页抓取和 HTML 解析变得更容易。该库不仅支持同步请求，还支持异步请求，能够处理由 JavaScript 驱动的动态内容。</p>\n<h2 id=\"关键特性\"><a class=\"anchor\" href=\"#关键特性\">#</a> 关键特性</h2>\n<ul>\n<li><strong>完整的 JavaScript 支持</strong>：通过 pyppeteer 支持渲染和解析由 JavaScript 动态生成的内容。</li>\n<li><strong>CSS 选择器</strong>：使用 pyquery 提供类似 jQuery 的选择器语法，方便选择 HTML 元素。</li>\n<li><strong>XPath 选择器</strong>：提供对 XPath 的支持，方便使用 XPath 语法选择元素。</li>\n<li><strong>模拟用户代理</strong>：模拟真实的浏览器用户代理，避免被反爬虫机制检测到。</li>\n<li><strong>自动重定向</strong>：自动处理 HTTP 重定向，保持会话的连续性。</li>\n<li><strong>连接池和 Cookie 持久化</strong>：高效的连接处理，保持会话中的 Cookie 持久化。</li>\n<li><strong>异步支持</strong>：允许异步的 HTTP 请求和渲染，提升爬虫的效率。</li>\n</ul>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>根据<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1ZXN0cy1odG1sLmtlbm5ldGhyZWl0ei5vcmcv\"> requests-html 项目文档</span>可知安装方法为：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pipenv install requests-html</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>仅支持 python3.6 版本 ——Only <strong>Python 3.6</strong> is supported.</li>\n</ul>\n<h2 id=\"设计思路\"><a class=\"anchor\" href=\"#设计思路\">#</a> 设计思路</h2>\n<p>requests-html 设计的核心思想是将常见的 HTML 解析和网页抓取任务简化为直观且强大的 API 操作。它通过结合现有的流行库（如 requests、pyquery、beautifulsoup4 和 lxml），增强了处理复杂网页抓取任务的能力。其主要设计理念包括：</p>\n<ul>\n<li><strong>统一接口</strong>：提供一个统一的接口来处理 HTTP 请求、HTML 解析和 JavaScript 渲染。</li>\n<li><strong>异步支持</strong>：允许用户以异步方式处理网页抓取任务，提高了效率。</li>\n<li><strong>模拟浏览器行为</strong>：通过模拟用户代理和处理重定向，使其行为更像真实浏览器。</li>\n<li><strong>全面的选择器支持</strong>：结合 CSS 和 XPath 选择器，使用户可以灵活地选择和解析 HTML 元素。</li>\n</ul>\n<h2 id=\"源代码分析核心类和函数\"><a class=\"anchor\" href=\"#源代码分析核心类和函数\">#</a> 源代码分析 (核心类和函数)</h2>\n<h3 id=\"htmlsession\"><a class=\"anchor\" href=\"#htmlsession\">#</a> HTMLSession</h3>\n<h4 id=\"用于同步请求的会话类继承自-requestssession\"><a class=\"anchor\" href=\"#用于同步请求的会话类继承自-requestssession\">#</a> 用于同步请求的会话类，继承自 requests.Session。</h4>\n<ul>\n<li><strong>get(url, **kwargs)</strong>：发送 GET 请求，返回 HTMLResponse 对象。</li>\n<li><strong>close()</strong>：关闭会话并关闭浏览器。</li>\n</ul>\n<h3 id=\"asynchtmlsession\"><a class=\"anchor\" href=\"#asynchtmlsession\">#</a> AsyncHTMLSession</h3>\n<h4 id=\"用于异步请求的会话类继承自-requestssession\"><a class=\"anchor\" href=\"#用于异步请求的会话类继承自-requestssession\">#</a> 用于异步请求的会话类，继承自 <strong>requests.Session</strong>。</h4>\n<ul>\n<li><strong>run(*coros)</strong>：运行多个协程，返回结果列表。</li>\n<li><strong>close()</strong>：关闭会话并关闭浏览器。</li>\n</ul>\n<h3 id=\"html\"><a class=\"anchor\" href=\"#html\">#</a> HTML</h3>\n<h4 id=\"表示一个-html-文档提供解析功能\"><a class=\"anchor\" href=\"#表示一个-html-文档提供解析功能\">#</a> 表示一个 HTML 文档，提供解析功能。</h4>\n<ul>\n<li><strong>find(selector,*, containing=None, clean=False, first=False)</strong>：使用 CSS 选择器查找元素。</li>\n<li><strong>xpath(selector, *, clean=False, first=False)</strong>：使用 XPath 选择器查找元素。</li>\n<li><strong>render(**kwargs)</strong>：渲染 JavaScript 内容。</li>\n<li><strong>next(fetch=False, next_symbol=None)</strong>：查找分页链接。</li>\n</ul>\n<h3 id=\"element\"><a class=\"anchor\" href=\"#element\">#</a> Element</h3>\n<h4 id=\"表示一个-html-元素继承自-baseparser\"><a class=\"anchor\" href=\"#表示一个-html-元素继承自-baseparser\">#</a> 表示一个 HTML 元素，继承自 BaseParser。</h4>\n<ul>\n<li><strong>attrs</strong>：返回元素的属性字典。</li>\n<li><strong>text</strong>：返回元素的文本内容。</li>\n<li><strong>full_text</strong>：返回元素的完整文本内容。</li>\n</ul>\n<h2 id=\"设置和配置\"><a class=\"anchor\" href=\"#设置和配置\">#</a> 设置和配置</h2>\n<h3 id=\"setuppy\"><a class=\"anchor\" href=\"#setuppy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3NldHVwLnB5\">setup.py</span> 文件包含项目的元数据和依赖项：</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup(</span><br><span class=\"line\">name=<span class=\"string\">&#x27;requests-html&#x27;</span>,</span><br><span class=\"line\">version=<span class=\"string\">&#x27;0.10.0&#x27;</span>,</span><br><span class=\"line\">description=<span class=\"string\">&#x27;HTML Parsing for Humans.&#x27;</span>,</span><br><span class=\"line\">author=<span class=\"string\">&#x27;Kenneth Reitz&#x27;</span>,</span><br><span class=\"line\">author_email=<span class=\"string\">&#x27;me@kennethreitz.org&#x27;</span>,</span><br><span class=\"line\">url=<span class=\"string\">&#x27;https://github.com/psf/requests-html&#x27;</span>,</span><br><span class=\"line\">python_requires=<span class=\"string\">&#x27;&gt;=3.6.0&#x27;</span>,</span><br><span class=\"line\">install_requires=[</span><br><span class=\"line\">\t<span class=\"string\">&#x27;requests&#x27;</span>, <span class=\"string\">&#x27;pyquery&#x27;</span>, <span class=\"string\">&#x27;fake-useragent&#x27;</span>, <span class=\"string\">&#x27;parse&#x27;</span>, <span class=\"string\">&#x27;beautifulsoup4&#x27;</span>, <span class=\"string\">&#x27;w3lib&#x27;</span>, <span class=\"string\">&#x27;pyppeteer&gt;=0.0.14&#x27;</span></span><br><span class=\"line\">],</span><br><span class=\"line\">packages=[<span class=\"string\">&#x27;requests_html&#x27;</span>],</span><br><span class=\"line\">license=<span class=\"string\">&#x27;MIT&#x27;</span>,</span><br><span class=\"line\">classifiers=[</span><br><span class=\"line\">\t<span class=\"string\">&#x27;License :: OSI Approved :: MIT License&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;Programming Language :: Python :: 3.6&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;Programming Language :: Python :: Implementation :: CPython&#x27;</span>,</span><br><span class=\"line\">],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>项目包含同步和异步操作的测试，确保分页、属性提取和 JavaScript 渲染的健壮性。例如：</p>\n<h4 id=\"同步分页测试\"><a class=\"anchor\" href=\"#同步分页测试\">#</a> 同步分页测试</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pytest</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"></span><br><span class=\"line\">urls = [</span><br><span class=\"line\"><span class=\"string\">&#x27;https://xkcd.com/1957/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.reddit.com/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://github.com/psf/requests-html/issues&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://discord.com/category/engineering&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://stackoverflow.com/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://www.frontiersin.org/&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;https://azure.microsoft.com/en-us&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.parametrize(<span class=\"params\"><span class=\"string\">&#x27;url&#x27;</span>, urls</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@pytest.mark.internet</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_pagination</span>(<span class=\"params\">url: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">\tsession = HTMLSession()</span><br><span class=\"line\">\tr = session.get(url)</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> <span class=\"built_in\">next</span>(r.html)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"异步分页测试\"><a class=\"anchor\" href=\"#异步分页测试\">#</a> 异步分页测试</h4>\n<pre><code>import pytest\nfrom requests_html import AsyncHTMLSession\n\nurls = [\n\t'https://xkcd.com/1957/',\n\t'https://www.reddit.com/',\n\t'https://github.com/psf/requests-html/issues',\n\t'https://discord.com/category/engineering',\n\t'https://stackoverflow.com/',\n\t'https://www.frontiersin.org/',\n\t'https://azure.microsoft.com/en-us'\n]\n\n@pytest.mark.parametrize('url', urls)\n@pytest.mark.internet\n@pytest.mark.asyncio\nasync def test_async_pagination(event_loop, url):\n\tasession = AsyncHTMLSession()\n\tr = await asession.get(url)\n\tassert await r.html.__anext__()\n</code></pre>\n<h4 id=\"文件请求测试\"><a class=\"anchor\" href=\"#文件请求测试\">#</a> 文件请求测试</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> HTMLSession</span><br><span class=\"line\"></span><br><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">session.mount(<span class=\"string\">&#x27;file://&#x27;</span>, FileAdapter())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">\tpath = os.path.sep.join((os.path.dirname(os.path.abspath(__file__)), <span class=\"string\">&#x27;python.html&#x27;</span>))</span><br><span class=\"line\">\turl = <span class=\"string\">f&#x27;file://<span class=\"subst\">&#123;path&#125;</span>&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> session.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_file_get</span>():</span><br><span class=\"line\">\tr = get()</span><br><span class=\"line\">\t<span class=\"keyword\">assert</span> r.status_code == <span class=\"number\">200</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文档配置\"><a class=\"anchor\" href=\"#文档配置\">#</a> 文档配置</h3>\n<h4 id=\"confpy\"><a class=\"anchor\" href=\"#confpy\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL2NvbmYucHk=\">conf.py</span> 文件设置了 Sphinx 文档，包括扩展和项目信息：</h4>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests_html</span><br><span class=\"line\"></span><br><span class=\"line\">project = <span class=\"string\">&#x27;requests-HTML&#x27;</span></span><br><span class=\"line\">author = <span class=\"string\">&#x27;Kenneth Reitz&#x27;</span></span><br><span class=\"line\">version = <span class=\"string\">&#x27;v0.3.4&#x27;</span></span><br><span class=\"line\">extensions = [</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.autodoc&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.doctest&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.intersphinx&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.todo&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.coverage&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.viewcode&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&#x27;sphinx.ext.githubpages&#x27;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h2>\n<h3 id=\"同步请求\"><a class=\"anchor\" href=\"#同步请求\">#</a> 同步请求</h3>\n<ul>\n<li>\n<p>向 <span class=\"exturl\" data-url=\"aHR0cDovL3B5dGhvbi5vcmc=\">python.org</span> 发起同步 GET 请求并提取链接：<br />\nfrom requests_html import HTMLSession</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = HTMLSession()</span><br><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取所有链接</span></span><br><span class=\"line\">links = r.html.links</span><br><span class=\"line\"><span class=\"built_in\">print</span>(links)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取绝对链接</span></span><br><span class=\"line\">absolute_links = r.html.absolute_links</span><br><span class=\"line\"><span class=\"built_in\">print</span>(absolute_links)</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>示例结果为：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&#x27;//docs.python.org/3/tutorial/&#x27;</span>, <span class=\"string\">&#x27;/about/apps/&#x27;</span>, <span class=\"string\">&#x27;https://github.com/python/pythondotorg/issues&#x27;</span>, ...&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;https://docs.python.org/3/tutorial/&#x27;</span>, <span class=\"string\">&#x27;https://www.python.org/about/apps/&#x27;</span>, <span class=\"string\">&#x27;https://github.com/python/pythondotorg/issues&#x27;</span>, ...&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"异步请求\"><a class=\"anchor\" href=\"#异步请求\">#</a> 异步请求</h3>\n<ul>\n<li>\n<p>通过 requests_html 库发起异步 GET 请求并运行多个协程：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests_html <span class=\"keyword\">import</span> AsyncHTMLSession</span><br><span class=\"line\">\tasession = AsyncHTMLSession()</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_python</span>():  </span><br><span class=\"line\">\t  r = <span class=\"keyword\">await</span> asession.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)  </span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> r  </span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">get_reddit</span>():</span><br><span class=\"line\">\t  r = <span class=\"keyword\">await</span> asession.get(<span class=\"string\">&#x27;https://reddit.com/&#x27;</span>)</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> r </span><br><span class=\"line\">\tresults = asession.run(get_python, get_reddit)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> results:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(result.html.url)  </span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>异步请求结果示例</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.python.org/  </span><br><span class=\"line\">https://www.reddit.com/</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"解析html\"><a class=\"anchor\" href=\"#解析html\">#</a> 解析 HTML</h3>\n<ul>\n<li>\n<p>选择元素并提取属性</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\">about = r.html.find(<span class=\"string\">&#x27;#about&#x27;</span>, first=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取文本</span></span><br><span class=\"line\">text = about.text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取属性</span></span><br><span class=\"line\">attributes = about.attrs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(attributes)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 渲染 HTML</span></span><br><span class=\"line\">html_content = about.html</span><br><span class=\"line\"><span class=\"built_in\">print</span>(html_content)</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>解析 HTML 结果示例</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">About</span><br><span class=\"line\">Applications</span><br><span class=\"line\">Quotes</span><br><span class=\"line\">Getting Started</span><br><span class=\"line\">Help</span><br><span class=\"line\">Python Brochure</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: (<span class=\"string\">&#x27;tier-1&#x27;</span>, <span class=\"string\">&#x27;element-1&#x27;</span>), <span class=\"string\">&#x27;aria-haspopup&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;</span><br><span class=\"line\">&lt;li aria-haspopup=<span class=\"string\">&quot;true&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-1 element-1 &quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;about&quot;</span>&gt;\\n&lt;a <span class=\"keyword\">class</span>=<span class=\"string\">&quot;&quot;</span> href=<span class=\"string\">&quot;/about/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;About&lt;/a&gt;\\n&lt;ul aria-hidden=<span class=\"string\">&quot;true&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;subnav menu&quot;</span> role=<span class=\"string\">&quot;menu&quot;</span>&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-1&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/apps/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Applications&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-2&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/quotes/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Quotes&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-3&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/gettingstarted/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Getting Started&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-4&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;/about/help/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Help&lt;/a&gt;&lt;/li&gt;\\n&lt;li <span class=\"keyword\">class</span>=<span class=\"string\">&quot;tier-2 element-5&quot;</span> role=<span class=\"string\">&quot;treeitem&quot;</span>&gt;&lt;a href=<span class=\"string\">&quot;http://brochure.getpython.info/&quot;</span> title=<span class=\"string\">&quot;&quot;</span>&gt;Python Brochure&lt;/a&gt;&lt;/li&gt;\\n&lt;/ul&gt;\\n&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"xpath选择器\"><a class=\"anchor\" href=\"#xpath选择器\">#</a> XPath 选择器</h3>\n<ul>\n<li>\n<p>提取 html 指定元素的 XPath</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;https://python.org/&#x27;</span>)</span><br><span class=\"line\">about = r.html.xpath(<span class=\"string\">&#x27;//div[@id=&quot;about&quot;]&#x27;</span>, first=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取文本</span></span><br><span class=\"line\">text = about.text</span><br><span class=\"line\"><span class=\"built_in\">print</span>(text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取属性</span></span><br><span class=\"line\">attributes = about.attrs</span><br><span class=\"line\"><span class=\"built_in\">print</span>(attributes)</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>XPath 选择器结果示例：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">About</span><br><span class=\"line\">Applications</span><br><span class=\"line\">Quotes</span><br><span class=\"line\">Getting Started</span><br><span class=\"line\">Help</span><br><span class=\"line\">Python Brochure</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;about&#x27;</span>, <span class=\"string\">&#x27;class&#x27;</span>: (<span class=\"string\">&#x27;tier-1&#x27;</span>, <span class=\"string\">&#x27;element-1&#x27;</span>), <span class=\"string\">&#x27;aria-haspopup&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"渲染-javascript-内容\"><a class=\"anchor\" href=\"#渲染-javascript-内容\">#</a> 渲染 JavaScript 内容</h3>\n<ul>\n<li>\n<p>示例代码：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = session.get(<span class=\"string\">&#x27;http://python-requests.org/&#x27;</span>)</span><br><span class=\"line\">r.html.render()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 搜索渲染后的内容</span></span><br><span class=\"line\">months = r.html.search(<span class=\"string\">&#x27;Python 2 will retire in only &#123;months&#125; months!&#x27;</span>)[<span class=\"string\">&#x27;months&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(months)</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>结果示例：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h3 id=\"处理分页\"><a class=\"anchor\" href=\"#处理分页\">#</a> 处理分页</h3>\n<ul>\n<li>\n<p>代码示例</p>\n<p>r = session.get('<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRkaXQuY29t\">https://reddit.com</span>')<br />\nfor html in r.html:<br />\nprint(html)</p>\n</li>\n<li>\n<p>结果示例</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HTML url=<span class=\"string\">&#x27;https://www.reddit.com/&#x27;</span>&gt;</span><br><span class=\"line\">&lt;HTML url=<span class=\"string\">&#x27;https://www.reddit.com/?count=25&amp;after=t3_81puu5&#x27;</span>&gt;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h2>\n<p>requests-html 是一个功能强大且易于使用的库，通过集成 JavaScript 渲染和异步请求，扩展了传统 HTML 解析和网页抓取的能力。它与 requests 库的无缝集成，使其成为处理复杂网页抓取任务的绝佳选择。无论是处理简单的静态页面还是复杂的动态内容，requests-html 都提供了一个直观且高效的解决方案。</p>\n<h2 id=\"项目心得\"><a class=\"anchor\" href=\"#项目心得\">#</a> 项目心得</h2>\n<p>在这个项目中，我深入研究了 requests-html 库，并对其功能和设计进行了详细分析和实践。通过这个项目，我不仅熟悉了 requests-html 的使用方法，还掌握了一些高级的网页抓取技巧。</p>\n<p><strong>学习与使用</strong></p>\n<p>首先，我被 requests-html 库的简洁性和强大功能所吸引。这个库基于 requests 构建，结合了 pyquery、beautifulsoup4 和 lxml 等工具，使得 HTML 解析和网页抓取变得更加直观和高效。安装和设置过程也非常简单，只需几行命令即可开始使用。</p>\n<p><strong>同步与异步请求</strong></p>\n<p>在实际使用中，我发现 requests-html 对同步和异步请求的支持非常实用。通过 HTMLSession 和 AsyncHTMLSession，我可以轻松地发起同步和异步的 HTTP 请求，并处理由 JavaScript 动态生成的内容。特别是在处理大量请求时，异步支持显著提高了效率。</p>\n<p><strong>JavaScript 渲染</strong></p>\n<p>一个令我印象深刻的功能是 requests-html 对 JavaScript 渲染的支持。通过 pyppeteer，我能够渲染和解析动态生成的内容，这在现代网页抓取中是至关重要的。我尝试了多个网站，包括一些使用复杂 JavaScript 生成内容的网站，requests-html 都能顺利完成任务。</p>\n<p><strong>CSS 与 XPath 选择器</strong></p>\n<p>在解析 HTML 内容时，requests-html 提供的 CSS 和 XPath 选择器极大地方便了我的工作。我可以使用类似 jQuery 的语法快速定位和提取网页中的元素，同时也可以使用 XPath 进行更复杂的查询。这使得解析和处理网页内容变得更加灵活和高效。</p>\n<p><strong>模拟用户代理与自动重定向</strong></p>\n<p>在实际应用中，避免被反爬虫机制检测到是一个重要的考虑因素。requests-html 通过模拟真实的浏览器用户代理，有效减少了被封禁的风险。此外，它还自动处理 HTTP 重定向，保持会话的连续性，确保抓取过程顺利进行。</p>\n<p><strong>代码实现与测试</strong></p>\n<p>在编写和测试代码的过程中，我进一步理解了 requests-html 的内部机制。通过阅读和分析源码，我了解到每个核心类和函数的具体实现原理。这不仅提升了我的编程技能，也让我对网页抓取有了更深入的认识。</p>\n<p>我编写了一些测试用例，包括同步和异步分页测试、文件请求测试等，确保了代码的健壮性和可靠性。通过这些测试，我验证了 requests-html 在不同场景下的表现，发现它确实是一个功能强大且易于使用的库。</p>\n<p><strong>结论</strong></p>\n<p>总的来说，这次项目经历让我受益匪浅。requests-html 不仅简化了网页抓取的复杂性，还提供了强大的功能，满足了我在处理动态内容和大量请求时的需求。通过这个项目，我对网页抓取技术有了更全面的理解，也积累了丰富的实践经验。今后，我会继续探索和使用这个库，进一步提升我的技术能力。</p>\n",
            "tags": [
                "Hexo",
                "Front Matter"
            ]
        }
    ]
}