{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"capture-the-flag\" category",
    "description": "",
    "home_page_url": "https://enjundu.github.io",
    "items": [
        {
            "id": "https://enjundu.github.io/ctf/nscweb%E6%8E%88%E8%AF%BE/",
            "url": "https://enjundu.github.io/ctf/nscweb%E6%8E%88%E8%AF%BE/",
            "title": "NSC暑期培训——web",
            "date_published": "2024-07-07T01:41:31.000Z",
            "content_html": "<h1 id=\"java安装\"><a class=\"anchor\" href=\"#java安装\">#</a> Java 安装</h1>\n<ol>\n<li>打开点击链接进入下载界面</li>\n</ol>\n<p>​\t\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlOHUyMTEtbGF0ZXItYXJjaGl2ZS1kb3dubG9hZHMuaHRtbA==\">网页链接</span></p>\n<p>​\t\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamF2YXNlOHUyMTEtbGF0ZXItYXJjaGl2ZS1kb3dubG9hZHMuaHRtbA==\">https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html</span></p>\n<ol start=\"2\">\n<li>\n<p>选择制定版本 java jdk 下载</p>\n<ul>\n<li>Java SE Development Kit 8u211</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL290bi9qYXZhL2pkay84dTIxMS1iMTIvNDc4YTYyYjdkNGUzNGI3OGI2NzFjNzU0ZWFhZjM4YWIvamRrLTh1MjExLXdpbmRvd3MteDY0LmV4ZQ==\">jdk-8u211-windows-x64.exe</span></li>\n<li>点击下载后注册登录 Oracle 即可下载</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2024/07/07/WpQ5CIL8Hw1Olhs.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>点击下载包并且安装网页，记住你的下载地址【默认为 C:\\Program Files\\Java\\jdk1.8.0_211】<br />\n注：一般而言，计算机软件我们都<strong>不推荐在 C 盘安装</strong>。在 C 盘安装会影响计算机的运行。但是<strong> JAVA 特例</strong>，我们通常安在 C 盘，这样<strong>使得 Java 的优先级更高</strong>。无需去其他盘访问。</p>\n<p><img data-src=\"https://s2.loli.net/2024/07/07/OiWJjsR1oPdkgGm.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>安装后就会出现一个<strong> jdk 文件夹和 jar 文件夹</strong></p>\n</li>\n<li>\n<p>jre 是 java runtime environment, 是 java 程序的运行环境。既然是运行，当然要包含 jvm，也就是虚拟机，还有所有 java 类库的 class 文件，都在 lib 目录下打包成了 jar。在 windows 上的虚拟机是 jre/bin/client 里面是一个 jvm.dll。</p>\n</li>\n<li>\n<p>jdk 是 java development kit，是 java 的开发工具包，主要是给 ide 用的，里面包含了各种类库和工具。当然也包括了另外一个 Jre.，而且 jdk/jre/bin 里面也有一个 server 文件夹， server 文件夹下面也有一个 jvm.dll 虚拟机。（这个虚拟机是什么后，面会涉及）</p>\n</li>\n<li>\n<p><strong>环境配置</strong>：Windows 下面搜索框搜索并打开<strong>编辑系统环境变量</strong><br />\n<img data-src=\"https://s2.loli.net/2024/07/07/jtxluQsB1YobrAV.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>用户变量界面新建<br />\n<strong> JAVA_HOME</strong> 变量名 (一定要大写！)</p>\n<p>变量值为<strong> C:\\Program Files\\Java\\jdk1.8.0_211</strong>（替换为你实际的 jdk 地址）</p>\n<p>再次新建：</p>\n<p>变量名：classpath（这次要小写）</p>\n<p>变量值：有点难你直接复制就行</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">,;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/07/36vYcZ2eFGgLQJS.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>在系统变量里找到 Path 目录然后点击进去添加 jdk 的 bin 目录（一般是 C:\\Program Files\\Java\\jdk1.8.0_211\\bin）<br />\n<img data-src=\"https://s2.loli.net/2024/07/07/mxUqTHKiAjgCz1y.png\" alt=\"image.png\" /><img data-src=\"https://s2.loli.net/2024/07/07/bP6WM1hAOcd49pt.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>Win+R 弹出运行窗口，输入 cmd 后弹出 DOS 命令窗口</p>\n<p>然后输入<strong> java -version</strong>，如果出现如下信息，说明已经安装完成<br />\n<img data-src=\"https://s2.loli.net/2024/07/07/shXN3tuDwxdrCWc.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>over</p>\n</li>\n<li>\n<p>**What's more:**java 编译器：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3Iua2FrYW8uY29tL2VjbGlwc2UvdGVjaG5vbG9neS9lcHAvZG93bmxvYWRzL3JlbGVhc2UvMjAyNC0wNi9SL2VjbGlwc2UtamVlLTIwMjQtMDYtUi13aW4zMi14ODZfNjQuemlwJUVGJUJDJThDJUU5JTgwJTg5JUU2JThCJUE5JUU2JTgwJUE3JUU0JUI4JThCJUU4JUJEJUJEJUVGJUJDJTg4JUU2JTlDJUFDJUU4JUFGJUJFJUU3JUE4JThCJUU0JUI4JThEJUU3JUExJUFDJUU2JTgwJUE3JUU4JUE2JTgxJUU2JUIxJTgyJUVGJUJDJTg5JUUzJTgwJTgy\">https://mirror.kakao.com/eclipse/technology/epp/downloads/release/2024-06/R/eclipse-jee-2024-06-R-win32-x86_64.zip，选择性下载（本课程不硬性要求）。</span></p>\n</li>\n</ol>\n<h1 id=\"chorme浏览器安装\"><a class=\"anchor\" href=\"#chorme浏览器安装\">#</a> Chorme 浏览器安装</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUvI2V1bGE=\">最新稳定版（Stable Channel）Chrome 在线安装</span>:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUvI2V1bGE=\">https://www.google.com/chrome/#eula</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUvP2V4dHJhPWJldGFjaGFubmVs\">最新测试版（Beta Channel）Chrome 在线安装</span>:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9jaHJvbWUvP2V4dHJhPWJldGFjaGFubmVs\">https://www.google.com/chrome/?extra=betachannel</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RsLmdvb2dsZS5jb20vY2hyb21lL2luc3RhbGwvMjY2LjAvY2hyb21lX2luc3RhbGxlci5leGU=\">离线下载地址</span>:<span class=\"exturl\" data-url=\"aHR0cDovL2RsLmdvb2dsZS5jb20vY2hyb21lL2luc3RhbGwvMjY2LjAvY2hyb21lX2luc3RhbGxlci5leGU=\">http://dl.google.com/chrome/install/266.0/chrome_installer.exe</span></p>\n<h1 id=\"hackbar安装\"><a class=\"anchor\" href=\"#hackbar安装\">#</a> Hackbar 安装</h1>\n<ul>\n<li>打开 Chrome 浏览器，然后打开 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9jYXRlZ29yeS9leHRlbnNpb25z\">chrome 网上应用店</span>”，在搜索框搜索 “<strong>hackbar</strong>”</li>\n<li>搜索完成后，选择 hackbar 插件，点击 “<strong>添加至 Chrome</strong>”，会弹出框询问 “<strong>要添加‘HackBar’吗？</strong>”，点击 “<strong>添加扩展程序</strong>”</li>\n<li>等待几秒钟后，添加完成，浏览器右上角会出现一个黑色的小图标，表示 HackBar 已添加成功！</li>\n<li>随便找一个可注入网站，比如 https://www.xuetangx.com/，进入后按 F12，如果出现 Harckbar 选项，说明安装完成</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2024/07/08/aT2BLS6xV1dWmRE.png\" alt=\"image.png\" /></p>\n<h1 id=\"http协议入门\"><a class=\"anchor\" href=\"#http协议入门\">#</a> HTTP 协议入门</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>\n<p>HTTP 协议是 Hyper TextTransfer Protocol (超文本传输协议) 的缩写，主要用于网页的传输，现在也常应用网络 API 的开发 (Restfu API)。</p>\n</li>\n<li>\n<p>HTTP 是一个 TCP/IP 通信协议的最上层的协议之一 (HTML 文件，图片文件，查询结果等)</p>\n</li>\n<li>\n<p>TCP/IP 协议有需要的可以自行了解</p>\n</li>\n</ul>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p><strong>以访问北京理工大学数学实验中心为例</strong>：<span class=\"exturl\" data-url=\"aHR0cDovL21lYy5iaXQuZWR1LmNuLw==\">http://mec.bit.edu.cn/</span></p>\n<ul>\n<li>可以看到北京理工大学属性实验中心使用的是 http 协议传输而非通常的 https</li>\n<li>https 相当于对 http 添加了数字证书加密功能，（你可以理解为对传输内容进行加密），现在的大部分网站均用 https 进行传输，而身为顶尖学校的北理工官方网站却仍然使用 http，令人费解。（bushi）</li>\n<li>我们这里先介绍 http</li>\n</ul>\n<p><img data-src=\"https://s2.loli.net/2024/07/08/So9dnsr8j2v3feU.png\" alt=\"image.png\" /></p>\n<h2 id=\"基本工作原理\"><a class=\"anchor\" href=\"#基本工作原理\">#</a> 基本工作原理</h2>\n<ul>\n<li>HTTP 是浏览器或者其他客户端 (如手机 App) 和网站服务器之间沟通的协议。</li>\n<li>浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端即 WEB 服务器发送所有请求。</li>\n<li>常用的 Web 服务器有：Nginx，Apache，IlS 服务器 (微软的产品) 等。</li>\n<li>Web 服务器接收到的请求后，向客户端发送响应信息。</li>\n<li>HTTP 默认端口号为 80。（https 默认端口为 443）</li>\n</ul>\n<h2 id=\"http三个要点\"><a class=\"anchor\" href=\"#http三个要点\">#</a> HTTP 三个要点</h2>\n<ul>\n<li>\n<p><strong>HTTP 是无连接：</strong> 无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>\n</li>\n<li>\n<p><strong>HTTP 是媒体独立的：</strong> 这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过 HTTP 发送。客户端以及服务器指定使用适合的 MIME-type 内容类型。</p>\n</li>\n<li>\n<p><strong>HTTP 是无状态：</strong> HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>\n</li>\n</ul>\n<h2 id=\"http的消息结构\"><a class=\"anchor\" href=\"#http的消息结构\">#</a> HTTP 的消息结构</h2>\n<h3 id=\"请求\"><a class=\"anchor\" href=\"#请求\">#</a> 请求</h3>\n<ul>\n<li><strong>地址</strong>和<strong>动词</strong>：例如 <strong>GET <span class=\"exturl\" data-url=\"aHR0cDovL21lYy5iaXQuZWR1LmNuLw==\">http://mec.bit.edu.cn/</span></strong></li>\n<li><strong>请求头（header)</strong>：用来描述请求和发送者的一些信息</li>\n<li><strong>请求参数</strong>：以百度为例，要搜索的关键词。</li>\n</ul>\n<h3 id=\"响应\"><a class=\"anchor\" href=\"#响应\">#</a> 响应</h3>\n<ul>\n<li><strong>响应代码</strong>：200 表示成功，404 表示不存在等</li>\n<li><strong>响应头 header</strong>：描述相应内容的一些信息</li>\n<li><strong>响应内容</strong>：HTML, JSON, 图片等</li>\n</ul>\n<h3 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例</h3>\n<h4 id=\"客户端请求\"><a class=\"anchor\" href=\"#客户端请求\">#</a> 客户端请求</h4>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET http://www.example.com/hello.txt HTTP/1.1</span><br><span class=\"line\">User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class=\"line\">Accept-Language: en, mi</span><br><span class=\"line\">Host: www.example.com</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"服务端响应\"><a class=\"anchor\" href=\"#服务端响应\">#</a> 服务端响应:</h4>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class=\"line\">Server: Apache</span><br><span class=\"line\">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class=\"line\">ETag: <span class=\"string\">&quot;34aa387-d-1568eb00&quot;</span></span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Content-Length: 51</span><br><span class=\"line\">Vary: Accept-Encoding</span><br><span class=\"line\">Content-Type: text/plain</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"响应内容\"><a class=\"anchor\" href=\"#响应内容\">#</a> 响应内容</h4>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World! My payload includes a trailing CRLF.</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"url介绍\"><a class=\"anchor\" href=\"#url介绍\">#</a> url 介绍</h1>\n<h2 id=\"基础知识介绍\"><a class=\"anchor\" href=\"#基础知识介绍\">#</a> 基础知识介绍</h2>\n<h3 id=\"ascii码\"><a class=\"anchor\" href=\"#ascii码\">#</a> ascii 码</h3>\n<p>ASCII (American Standard Code for Information Interchange) 美国信息互换标准代码：</p>\n<h4 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h4>\n<ul>\n<li><strong>定义</strong>：ASCII 是一种字符编码标准，用于表示英文字符及一些控制字符。</li>\n<li><strong>范围</strong>：使用 7 位二进制数表示字符，共有 128 个字符。</li>\n</ul>\n<h4 id=\"字符集\"><a class=\"anchor\" href=\"#字符集\">#</a> 字符集</h4>\n<ul>\n<li><strong>控制字符 (0-31)</strong>：这些字符用于控制文本的格式，如换行、回车、制表等。例如，ASCII 值 10 表示换行（LF），ASCII 值 13 表示回车（CR）。</li>\n<li><strong>可打印字符 (32-126)</strong>：包括空格、标点符号、数字、大小写字母等。例如，ASCII 值 65 表示字母 'A'，ASCII 值 97 表示字母 'a'。</li>\n<li><strong>删除字符 (127)</strong>：用于表示删除操作（DEL）。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>ASCII 值</th>\n<th>控制字符</th>\n<th>ASCII 值</th>\n<th>控制字符</th>\n<th>ASCII 值</th>\n<th>控制字符</th>\n<th>ASCII 值</th>\n<th>控制字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUT</td>\n<td>32</td>\n<td>(space)</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>、</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>,</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DCI</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>\\</td>\n<td>124</td>\n<td></td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>`        |</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"utf-8码\"><a class=\"anchor\" href=\"#utf-8码\">#</a> UTF-8 码</h3>\n<p>UTF-8 (Unicode Transformation Format - 8-bit)：</p>\n<h4 id=\"概述-2\"><a class=\"anchor\" href=\"#概述-2\">#</a> 概述</h4>\n<ul>\n<li><strong>定义</strong>：UTF-8 是 Unicode 的一种可变长度字符编码，用于表示全球范围内的所有字符。</li>\n<li><strong>范围</strong>：使用 1 到 4 个字节表示字符，覆盖所有 Unicode 字符（最多可表示 1,112,064 个字符）。</li>\n</ul>\n<h4 id=\"编码机制\"><a class=\"anchor\" href=\"#编码机制\">#</a> 编码机制</h4>\n<ul>\n<li>\n<p><strong>单字节 (1 Byte)</strong>：用于表示标准 ASCII 字符（0-127），与 ASCII 完全兼容。</p>\n</li>\n<li>\n<p><strong>多字节 (2-4 Bytes)</strong>：用于表示其他 Unicode 字符，根据字符的位置不同，使用不同数量的字节。字节数越多，表示的字符范围越广。</p>\n<ul>\n<li><strong>2 字节</strong>：用于表示基本多语言平面（BMP）中的字符，范围是 U+0800 到 U+FFFF。</li>\n<li><strong>3 字节</strong>：用于表示更多语言字符，范围是 U+0800 到 U+FFFF。</li>\n<li><strong>4 字节</strong>：用于表示补充字符平面中的字符，范围是 U+010000 到 U+10FFFF。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h4>\n<ul>\n<li><strong>向后兼容 ASCII</strong>：单字节字符与 ASCII 完全兼容，确保旧系统的兼容性。</li>\n<li><strong>可变长度编码</strong>：对于常用字符，节省存储空间；对于特殊字符，提供足够的表示能力。</li>\n<li><strong>无字节序问题</strong>：UTF-8 是字节序独立的，避免了多字节编码中的字节序问题。</li>\n</ul>\n<h2 id=\"组成成分\"><a class=\"anchor\" href=\"#组成成分\">#</a> 组成成分</h2>\n<p>现在给一个示例 url:</p>\n<p><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://username:password@www.example.com:8080/path/to/resource.html?query1=value1&amp;query2=value2#section2</span><br></pre></td></tr></table></figure></p>\n<p>让我们来逐一解析这个 url 的组成成分</p>\n<ol>\n<li>协议（Scheme）： <code>https</code> ：表示使用的是超文本传输安全协议（HTTPS）。</li>\n<li><strong>用户信息（User Information）</strong>（可选）： <code>username:password</code> ：用于身份验证的信息，包含用户名和密码。这个部分很少使用，因为它会暴露在 URL 中，存在安全风险。</li>\n<li><strong>主机名（Host）</strong>： <code>www.example.com</code> ：这是服务器的域名，指向存储资源的服务器。</li>\n<li><strong>端口（Port）</strong>（可选）： <code>8080</code> ：指定了使用的端口号。默认的 HTTPS 端口是 443，但如果使用了非默认端口，则需要在 URL 中明确指定。</li>\n<li><strong>路径（Path）</strong>： <code>/path/to/resource.html</code> ：这是服务器上的资源路径，指向具体的文件或资源。在这个例子中，它是 <code>resource.html</code>  文件，位于 <code>/path/to</code>  目录下。</li>\n<li><strong>查询字符串（Query String）</strong>（可选）： <code>?query1=value1&amp;query2=value2</code> ：这是查询参数，通常用于传递参数给服务器。查询字符串以 <code>?</code>  开始，多个参数之间用 <code>&amp;</code>  分隔。在这个例子中，查询字符串包含两个参数 <code>query1</code>  和 <code>query2</code> ，它们的值分别为 <code>value1</code>  和 <code>value2</code> 。</li>\n<li><strong>片段标识符（也称锚点）（Fragment Identifier）</strong>（可选）： <code>#section2</code> ：用于在资源内进行定位或跳转到特定的部分。在这个例子中，它表示跳转到资源中的 <code>section2</code>  部分。</li>\n</ol>\n<h2 id=\"字符与转义\"><a class=\"anchor\" href=\"#字符与转义\">#</a> 字符与转义</h2>\n<p>URL 的各个组成部分，只能使用以下这些字符：</p>\n<ul>\n<li>26 个英语字母（包括大写和小写）</li>\n<li>10 个阿拉伯数字</li>\n<li>连词号（-）</li>\n<li>句点（.）</li>\n<li>下划线（_）</li>\n</ul>\n<p>如果出现了这些字符外的符号，则需要进行转义，url 的转义规则如下：</p>\n<ul>\n<li>转义是通过使用百分号（%）后跟字符的 ASCII 十六进制值来实现的</li>\n<li><strong>空格</strong>：空格在 URL 中不允许，可以使用 <code>%20</code>  或加号（ <code>+</code> ）来表示（但加号仅在查询字符串中有效）。</li>\n<li><strong>特殊字符</strong>：如 <code>&lt;</code> ,  <code>&gt;</code> ,  <code>#</code> ,  <code>%</code> ,  <code>&#123;</code> ,  <code>&#125;</code> ,  <code>|</code> ,  <code>\\</code> ,  <code>^</code> ,  <code>~</code> ,  <code>[</code> ,  <code>]</code> , 和  <code>&quot;</code>  等，在 URL 中需要转义。\n<ul>\n<li><code>#</code> ： <code>%23</code></li>\n<li><code>%</code> ： <code>%25</code></li>\n<li><code>/</code> ： <code>%2F</code></li>\n<li><code>:</code> ： <code>%3A</code></li>\n<li><code>@</code> ： <code>%40</code></li>\n<li><code>&amp;</code> ： <code>%26</code></li>\n<li><code>=</code> ： <code>%3D</code></li>\n<li><code>?</code> ： <code>%3F</code></li>\n</ul>\n</li>\n<li><strong>非 ASCII 字符</strong>：所有非 ASCII 字符都必须进行转义，使用其 UTF-8 编码的字节，然后每个字节转换为 <code>%HH</code>  格式。</li>\n</ul>\n<h3 id=\"中文的转义\"><a class=\"anchor\" href=\"#中文的转义\">#</a> 中文的转义</h3>\n<p>中文字符在 URL 中也必须进行转义。它们首先被转换为 UTF-8 编码，然后每个字节转换为 <code>%HH</code>  格式。</p>\n<p>示例： <code>https://enjundu.github.io/IntroductiontoNetSecurityLab/应用安全/</code></p>\n<ol>\n<li><strong>将中文字符转换为 UTF-8 编码</strong>：\n<ul>\n<li><code>应</code> 的 UTF-8 编码为 <code>E5 BA 94</code></li>\n<li><code>用</code> 的 UTF-8 编码为 <code>E7 94 A8</code></li>\n<li><code>安</code> 的 UTF-8 编码为 <code>E5 AE 89</code></li>\n<li><code>全</code> 的 UTF-8 编码为 <code>E5 85 A8</code></li>\n</ul>\n</li>\n<li><strong>将 UTF-8 编码的每个字节表示为两个十六进制数字，并在前面加上百分号（%）</strong>:\n<ul>\n<li><code>应</code> ： <code>%E5%BA%94</code></li>\n<li><code>用</code> ： <code>%E7%94%A8</code></li>\n<li><code>安</code> ： <code>%E5%AE%89</code></li>\n<li><code>全</code> ： <code>%E5%85%A8</code></li>\n</ul>\n</li>\n<li>因此最终的转义结果为 <code>https://enjundu.github.io/IntroductiontoNetSecurityLab/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8/</code></li>\n</ol>\n<h1 id=\"sql注入\"><a class=\"anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<p>**SQL 注入（SQL Injection）** 是一种代码注入技术，利用不当的输入处理来向应用程序的 SQL 查询中注入恶意的 SQL 代码，从而执行未经授权的数据库操作。</p>\n<h2 id=\"sql原理\"><a class=\"anchor\" href=\"#sql原理\">#</a> SQL 原理</h2>\n<ul>\n<li><strong>输入处理不当</strong>：当应用程序没有正确过滤或转义用户输入时，攻击者可以通过输入恶意的 SQL 代码来篡改应用程序生成的 SQL 查询。</li>\n<li><strong>注入 SQL 代码</strong>：攻击者在用户输入字段中插入特制的 SQL 片段，使得这些片段被直接包含在 SQL 查询中，从而改变查询的原意。</li>\n</ul>\n<h2 id=\"for-example\"><a class=\"anchor\" href=\"#for-example\">#</a> for example</h2>\n<p>假设有一个简单的登录表单，起 SQL 查询如下：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = <span class=\"string\">&#x27;user_input&#x27;</span> AND password = <span class=\"string\">&#x27;user_pass&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<p>如果应用程序直接将用户输入的内容插入到 SQL 查询中，而没有任何处理，那么攻击者可以在用户名字段中输入如下内容：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; OR &#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;=&#x27;</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>这样生成的 SQL 查询如下：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE username = <span class=\"string\">&#x27;&#x27;</span> OR <span class=\"string\">&#x27;1&#x27;</span>=<span class=\"string\">&#x27;1&#x27;</span> AND password = <span class=\"string\">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h3>\n<ul>\n<li><code>username = '' OR '1'='1'</code> ：由于 <code>'1'='1'</code>  总是为真，整个查询条件始终为真，导致查询返回所有用户记录。</li>\n<li><strong>结果</strong>：攻击者成功绕过了身份验证，可能访问到受保护的数据。</li>\n</ul>\n<h2 id=\"常见sql注入类型\"><a class=\"anchor\" href=\"#常见sql注入类型\">#</a> 常见 SQL 注入类型</h2>\n<ol>\n<li>\n<p>联合查询注入利用 SQL 的 <code>UNION</code>  关键字将恶意查询结果与合法查询结果合并。攻击者可以通过这种方式从数据库中获取额外的数据。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT name, email FROM users WHERE <span class=\"built_in\">id</span> = <span class=\"number\">1</span> UNION SELECT username, password FROM admin;</span><br></pre></td></tr></table></figure></p>\n<p>​\t在这个示例中，攻击者试图获取 <code>admin</code>  表中的 <code>username</code>  和 <code>password</code> 。原始查询是从 <code>users</code>  表中根据 ID 获取用户的 <code>name</code>  和 <code>email</code> ，但通过使用 <code>UNION</code>  关键字，攻击者能够将两个查询的结果合并在一起。</p>\n<ul>\n<li><code>UNION</code>  关键字用于将两个或多个 SELECT 语句的结果组合成一个结果集。</li>\n<li>攻击者将合法查询的结果（如 <code>SELECT name, email FROM users WHERE id = 1</code> ）与恶意查询的结果（如 <code>SELECT username, password FROM admin</code> ）合并。</li>\n<li>这样一来，如果数据库执行了整个联合查询，攻击者就能获取到 admin 表中的用户名和密码等敏感信息。</li>\n</ul>\n</li>\n<li>\n<p><strong>错误注入（Error-based SQL Injection）</strong>：错误注入通过故意引发 SQL 错误来获取数据库结构信息。通过分析错误消息中的信息，攻击者可以推断出数据库的结构或版本等敏感信息。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE <span class=\"built_in\">id</span> = <span class=\"number\">1</span><span class=\"string\">&#x27; AND 1=CONVERT(int,(SELECT @@version)); --&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>​\t在这个示例中，攻击者试图通过故意触发类型转换错误来获取数据库的版本信息。</p>\n<ul>\n<li><code>@@version</code>  是一个系统变量，返回数据库的版本信息。</li>\n<li>攻击者在原始查询的基础上加入一个引发错误的子查询，例如将 <code>@@version</code>  转换为整数。</li>\n<li>数据库在执行这个查询时会因为类型转换错误而返回一个错误消息。</li>\n<li>错误消息中通常包含有用的信息，攻击者可以利用这些信息来推断数据库的细节，如表结构、列名等。</li>\n</ul>\n</li>\n<li>\n<p><strong>盲注（Blind SQL Injection）</strong>：利用条件查询，通过判断应用程序响应的不同来推测数据库内容。</p>\n<p>​\t盲注利用条件查询，通过判断应用程序响应的不同来推测数据库内容。在盲注中，攻击者无法直接看到查询结果，但可以通过分析应用程序的响应（如页面是否正常加载、响应时间等）来推断数据。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM users WHERE <span class=\"built_in\">id</span> = <span class=\"number\">1</span> AND (SELECT SUBSTRING(database(), <span class=\"number\">1</span>, <span class=\"number\">1</span>)) = <span class=\"string\">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>SUBSTRING(database(), 1, 1)</code>  函数提取当前数据库名的第一个字符。</li>\n<li>攻击者将这个字符与字母 <code>'a'</code>  进行比较。</li>\n<li>如果条件为真（即第一个字符是 <code>'a'</code> ），查询将返回结果，应用程序的响应将显示正常。</li>\n<li>如果条件为假（即第一个字符不是 <code>'a'</code> ），查询将不返回结果，应用程序的响应将有所不同（如显示错误消息或页面加载不完全）。</li>\n<li>通过不断改变条件（如尝试 <code>'b'</code> 、 <code>'c'</code>  等），攻击者可以逐字符猜测出数据库的名称或其他敏感信息。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"防御措施\"><a class=\"anchor\" href=\"#防御措施\">#</a> 防御措施</h2>\n<ol>\n<li>\n<p><strong>使用参数化查询和预编译语句</strong>：避免将用户输入直接插入 SQL 查询中，使用预编译语句确保输入内容被当作数据处理。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor.execute(<span class=\"string\">&quot;SELECT * FROM users WHERE username = %s AND password = %s&quot;</span>, (user_input, user_pass))</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>输入验证和过滤</strong>：对用户输入进行严格的验证和过滤，确保输入符合预期格式。</p>\n</li>\n<li>\n<p><strong>最小权限原则</strong>：数据库用户仅应拥有最低权限，限制数据操作权限以减少被攻击后的损失。</p>\n</li>\n<li>\n<p><strong>使用 ORM 框架</strong>：利用 ORM 框架（如 Django ORM）生成 SQL 查询，自动防止 SQL 注入。</p>\n</li>\n<li>\n<p><strong>安全编码实践</strong>：遵循安全编码的最佳实践，定期进行安全审计和代码评审。</p>\n</li>\n</ol>\n<h2 id=\"动手感受\"><a class=\"anchor\" href=\"#动手感受\">#</a> 动手感受</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvU1FMLWV4YW1wbGU=\">源代码</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvU1FMLWV4YW1wbGU=\">https://github.com/EnjunDu/SQL-example</span></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, redirect, url_for, render_template, session</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.sql <span class=\"keyword\">import</span> text</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = <span class=\"string\">&#x27;zheshiyigeanquanmiyaoo~&#x27;</span></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class=\"string\">&#x27;sqlite:///signin.db&#x27;</span></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户模块</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(db.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">80</span>), unique=<span class=\"literal\">True</span>, nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    password = db.Column(db.String(<span class=\"number\">80</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    sign_ins = db.relationship(<span class=\"string\">&#x27;SignIn&#x27;</span>, backref=<span class=\"string\">&#x27;user&#x27;</span>, lazy=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 签到记录模块</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SignIn</span>(db.Model):</span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    sign_in_time = db.Column(db.DateTime, default=datetime.utcnow)</span><br><span class=\"line\">    user_id = db.Column(db.Integer, db.ForeignKey(<span class=\"string\">&#x27;user.id&#x27;</span>), nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建数据库表格</span></span><br><span class=\"line\"><span class=\"meta\">@app.before_request</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_tables</span>():</span><br><span class=\"line\">    db.create_all()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录检查装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login_required</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">f</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">decorated_function</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;user_id&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> session:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 管理员权限检查装饰器</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">admin_required</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">f</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">decorated_function</span>(<span class=\"params\">*args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> session.get(<span class=\"string\">&#x27;admin&#x27;</span>) != <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;admin_login&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorated_function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 主页</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户注册</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/register&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">register</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> username <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> password:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;用户名和密码不能为空&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> User.query.filter_by(username=username).first():</span><br><span class=\"line\">            new_user = User(username=username, password=password)</span><br><span class=\"line\">            db.session.add(new_user)</span><br><span class=\"line\">            db.session.commit()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;login&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;register.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 用户登录</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> username <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> password:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;用户名和密码不能为空&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        user = User.query.filter_by(username=username, password=password).first()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">            session[<span class=\"string\">&#x27;user_id&#x27;</span>] = user.<span class=\"built_in\">id</span></span><br><span class=\"line\">            session[<span class=\"string\">&#x27;admin&#x27;</span>] = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;signin&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;登录失败&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 签到</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/signin&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@login_required</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">signin</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        new_sign_in = SignIn(user_id=session[<span class=\"string\">&#x27;user_id&#x27;</span>])</span><br><span class=\"line\">        db.session.add(new_sign_in)</span><br><span class=\"line\">        db.session.commit()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">&#x27;签到成功！&#x27;</span>)</span><br><span class=\"line\">                <span class=\"string\">&#x27;LFXXKIDNMF4SA3TFMVSCA5DPEB2XGZJAM5ZG65LQEBSW4Y3SPFYHI2LPNYQQ====&#x27;</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;86,106,74,87,99,49,107,121,79,88,82,97,85,49,86,53,84,85,104,83,100,107,112,85,83,88,100,107,82,50,104,119,89,51,108,86,101,85,49,70,98,70,82,82,77,69,49,115,84,87,112,67,77,49,112,88,83,87,120,78,97,107,74,52,90,70,100,87,101,109,82,72,98,72,90,105,97,86,85,122,85,108,86,79,100,109,74,116,90,72,108,90,87,70,73,120,89,107,100,71,77,71,70,88,79,88,86,106,101,86,86,53,84,85,99,53,100,85,112,85,83,88,100,107,82,48,90,121,89,86,99,49,98,107,112,85,83,88,100,90,86,122,86,50,90,69,100,111,98,71,78,112,86,88,108,78,83,69,52,119,87,108,104,66,98,69,49,113,81,106,66,105,77,50,82,111,89,50,49,83,101,107,112,85,83,88,100,90,98,107,112,115,87,86,100,48,99,71,74,116,89,50,120,78,97,107,73,119,89,85,104,75,100,109,82,88,90,71,57,75,86,69,108,52,83,108,82,74,100,49,82,116,79,84,78,75,86,69,108,51,87,86,78,86,101,85,49,73,85,109,120,105,87,69,74,50,89,50,49,71,101,87,86,84,86,88,108,78,83,69,74,53,89,106,73,120,100,50,82,68,86,88,108,78,82,50,120,54,83,108,82,74,100,49,111,121,98,68,74,97,86,122,82,115,84,87,112,66,100,69,112,85,83,88,100,107,82,50,104,115,83,108,82,74,100,49,108,88,85,110,82,104,86,122,86,119,89,122,78,83,101,86,108,89,85,110,90,106,97,86,86,53,84,106,78,78,98,69,49,113,81,109,104,90,77,107,53,50,90,70,99,49,77,69,112,85,83,88,100,104,87,69,49,115,84,87,112,66,98,69,52,119,83,107,112,86,77,69,53,69,87,72,112,74,100,48,49,113,85,109,90,106,77,110,81,49,87,68,66,119,97,70,107,121,100,71,90,83,83,70,86,115,84,106,66,82,100,85,112,85,83,88,100,87,82,50,104,119,89,51,108,86,101,85,49,72,77,87,104,108,85,49,86,53,84,85,100,75,98,69,112,85,83,88,100,107,98,86,90,53,90,86,78,86,101,85,49,73,86,110,112,97,86,49,111,120,89,107,77,49,81,50,82,89,85,87,120,78,97,107,73,119,89,85,100,86,98,69,49,113,81,109,104,97,82,122,70,119,89,109,49,115,101,109,82,73,83,109,104,107,82,122,108,53,83,108,82,74,100,50,78,72,82,110,112,106,77,50,82,50,89,50,49,82,98,69,49,113,81,109,112,90,86,122,86,49,89,106,78,82,98,69,49,113,81,109,108,97,85,49,86,53,84,85,100,87,97,71,77,121,98,72,78,108,85,49,86,53,84,85,104,83,100,109,74,72,85,87,120,78,97,107,73,119,89,110,108,86,101,85,49,73,98,72,90,107,85,49,86,53,85,88,108,86,101,85,49,72,84,110,90,105,98,108,74,119,89,109,53,87,98,69,112,85,83,88,100,97,87,71,104,51,89,107,99,53,101,87,70,88,78,87,53,75,86,69,108,52&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;signin.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 管理员登录</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/admin&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">admin_login</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        username = request.form[<span class=\"string\">&#x27;username&#x27;</span>]</span><br><span class=\"line\">        password = request.form[<span class=\"string\">&#x27;password&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 设置一个专门的管理员账号密码</span></span><br><span class=\"line\">        admin_username = <span class=\"string\">&#x27;ISCC_2024_sky_Jack_Du&#x27;</span></span><br><span class=\"line\">        admin_password = <span class=\"string\">&#x27;sky_1s_S0_h@NdsOme~_1234678910&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 检查是否是特定管理员</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> username == admin_username:</span><br><span class=\"line\">            <span class=\"comment\"># 允许使用 SQL 注入，仅当用户名为 &quot;sky&quot;</span></span><br><span class=\"line\">            query = text(<span class=\"string\">f&quot;SELECT * FROM user WHERE username = &#x27;<span class=\"subst\">&#123;username&#125;</span>&#x27; AND password = &#x27;<span class=\"subst\">&#123;password&#125;</span>&#x27;&quot;</span>)</span><br><span class=\"line\">            result = db.session.execute(query).fetchone()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> result:</span><br><span class=\"line\">                session[<span class=\"string\">&#x27;admin&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">                session[<span class=\"string\">&#x27;user_id&#x27;</span>] = result.<span class=\"built_in\">id</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;admin_dashboard&#x27;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;登录失败&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 对于其他用户, 使用普通的安全验证</span></span><br><span class=\"line\">            user = User.query.filter_by(admin_username=username,admin_password=password).first()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> user:</span><br><span class=\"line\">                session[<span class=\"string\">&#x27;admin&#x27;</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">                session[<span class=\"string\">&#x27;user_id&#x27;</span>] = user.<span class=\"built_in\">id</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;admin_dashboard&#x27;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;登录失败&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;admin_login.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后台面板</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/admin/dashboard&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@login_required</span></span><br><span class=\"line\"><span class=\"meta\">@admin_required</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">admin_dashboard</span>():</span><br><span class=\"line\">    sign_ins = SignIn.query.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;admin_dashboard.html&#x27;</span>, sign_ins=sign_ins)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>, host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">8848</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"详细步骤\"><a class=\"anchor\" href=\"#详细步骤\">#</a> 详细步骤</h3>\n<ol>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1weXRob25hcHAtNWI2bnk1MWZmeGR3NTBqNGt5Y3R0eGEucHk=\">在 python 环境下运行 app.py</span>。app.py 配置推荐使用 Pycharm,requirements 为：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flask==3.0.3</span><br><span class=\"line\">flask_sqlalchemy==3.1.1</span><br><span class=\"line\">SQLAlchemy==2.0.30</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/09/b5QUaz2okmL8qSM.png\" alt=\"QQ_1720497160019.png\" /></p>\n</li>\n<li>\n<p>在浏览器输入 http://127.0.0.1:8848 或者 localhost:8848 登录页面</p>\n</li>\n<li>\n<p>点击管理员入口</p>\n</li>\n<li>\n<p>在管理员界面账号输入 <code>ISCC_2024_sky_Jack_Du</code></p>\n</li>\n<li>\n<p>密码输入 <code>' OR '1'='1</code></p>\n</li>\n<li>\n<p>点击登录，进入后台</p>\n</li>\n<li>\n<p><img data-src=\"https://s2.loli.net/2024/07/09/CyudBa3VrTSwqig.png\" alt=\"QQ_1720497597660.png\" /></p>\n</li>\n</ol>\n<h3 id=\"思考\"><a class=\"anchor\" href=\"#思考\">#</a> 思考</h3>\n<ul>\n<li>分析代码：为什么 username 不能使用 <code>' OR '1'='1</code>  进行注入？</li>\n<li>分析代码：为什么 password 进行注入的时候，username 必须为 <code>ISCC_2024_sky_Jack_Du</code> ？</li>\n<li>SQL 的原理是什么？你能把注入后代码判定的流程解释清楚吗？</li>\n</ul>\n<h1 id=\"xss攻击\"><a class=\"anchor\" href=\"#xss攻击\">#</a> XSS 攻击</h1>\n<p>XSS 攻击是通过在目标网站中注入恶意脚本，使得这些脚本在其他用户的浏览器中执行，通常用于窃取用户的敏感信息、劫持用户会话或者进行其他恶意操作。XSS 攻击主要分为三类：存储型 XSS、反射型 XSS 和基于 DOM 的 XSS。</p>\n<h3 id=\"存储型xssstored-xss\"><a class=\"anchor\" href=\"#存储型xssstored-xss\">#</a> 存储型 XSS（Stored XSS）</h3>\n<ul>\n<li>攻击者将恶意脚本提交到目标网站的数据库中。</li>\n<li>当其他用户访问包含恶意脚本的页面时，脚本会在用户的浏览器中执行。</li>\n<li>这种攻击常见于留言板、评论区或用户资料页面。</li>\n</ul>\n<h3 id=\"反射型xssreflected-xss\"><a class=\"anchor\" href=\"#反射型xssreflected-xss\">#</a> 反射型 XSS（Reflected XSS）</h3>\n<ul>\n<li>攻击者构造一个包含恶意脚本的 URL 并诱使用户点击。</li>\n<li>服务器将 URL 中的恶意脚本反射回响应中，直接在用户的浏览器中执行。</li>\n<li>这种攻击常见于搜索结果页面或错误信息页面。</li>\n</ul>\n<h3 id=\"基于dom的xssdom-based-xss\"><a class=\"anchor\" href=\"#基于dom的xssdom-based-xss\">#</a> 基于 DOM 的 XSS（DOM-based XSS）</h3>\n<ul>\n<li>恶意脚本在客户端通过修改 DOM（文档对象模型）直接执行。</li>\n<li>攻击者利用客户端的 JavaScript 代码动态生成恶意脚本，通常不经过服务器。</li>\n</ul>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvWFNTLWV4YW5wbGU=\">实验链接</span>:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuanVuRHUvWFNTLWV4YW5wbGU=\">https://github.com/EnjunDu/XSS-exanple</span></p>\n<h3 id=\"前期准备\"><a class=\"anchor\" href=\"#前期准备\">#</a> 前期准备</h3>\n<ol>\n<li>download 实验材料</li>\n<li>fork and star</li>\n<li>安装 VMware 虚拟机</li>\n<li>安装 kali or Ubuntu</li>\n</ol>\n<h3 id=\"实验开始\"><a class=\"anchor\" href=\"#实验开始\">#</a> 实验开始</h3>\n<ol>\n<li>先打开终端运行 sudo apt install python3 安装 python3 环境</li>\n<li>采用 sudo apt update 和 sudo apt install python3-flask -y 来安装 Flask 框架</li>\n<li>在 kali 中创建 XSS_example 文件夹，包含已经给出的代码资料。</li>\n<li>打开到目录后右键，点击 Open Terminal Here 调用终端</li>\n<li>在终端上输入命令 python <span class=\"exturl\" data-url=\"aHR0cDovL2FwcC5weQ==\">app.py</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hcHAtbzk5Zmg2Nmwyb2oucHk=\">来运行 app.py</span></li>\n<li>可通过在浏览器访问地址 localhost:5000 或者 127.0.0.1:5000 来访问该地址</li>\n</ol>\n<h3 id=\"正式操作\"><a class=\"anchor\" href=\"#正式操作\">#</a> 正式操作</h3>\n<h4 id=\"xss反射型实验\"><a class=\"anchor\" href=\"#xss反射型实验\">#</a> XSS 反射型实验</h4>\n<p>在浏览器 url 输入框里输入：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:5000/?content=&lt;script&gt;alert(&#x27;XSS反射实验成功！&#x27;)&lt;/script&gt;&amp;submit=提交</span><br></pre></td></tr></table></figure></p>\n<p>后回车，如果出现 “XSS 反射实验成功，则说明攻击成功”</p>\n<h4 id=\"xss存储型攻击\"><a class=\"anchor\" href=\"#xss存储型攻击\">#</a> XSS 存储型攻击</h4>\n<p>在评论栏输入：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>后回车点击提交，然后在评论框点击 “原神，启动！”，如果跳转至原神官网则说明攻击成功。</p>\n<h3 id=\"实验思考为何能成功\"><a class=\"anchor\" href=\"#实验思考为何能成功\">#</a> 实验思考 —— 为何能成功？</h3>\n<h4 id=\"xss反射型\"><a class=\"anchor\" href=\"#xss反射型\">#</a> XSS 反射型</h4>\n<p>反射型 XSS 攻击的成功原因主要是由于服务器<strong>没有对用户输入的内容进行任何过滤或编码处理</strong>，直接将其反射回页面。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query = request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip()</span><br><span class=\"line\"><span class=\"keyword\">if</span> query:</span><br><span class=\"line\">    sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br></pre></td></tr></table></figure></p>\n<p>用户通过 URL 参数传递恶意脚本：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:5000/?content=<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;XSS反射实验成功！&#x27;</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>&amp;submit=提交</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>服务器将 URL 参数 <code>content</code>  的值直接传递给变量 <code>query</code> ，没有进行任何过滤或编码。服务器获取 <code>content</code>  参数的值（ <code>&lt;script&gt;alert('XSS反射实验成功！')&lt;/script&gt;</code> ），并将其赋值给变量 <code>query</code> 。</li>\n<li>在生成 HTML 页面时，变量 <code>query</code>  被直接渲染到模板中，这意味着任何 HTML 或 JavaScript 代码都会被浏览器解析和执行。</li>\n</ul>\n<h4 id=\"xss存储型\"><a class=\"anchor\" href=\"#xss存储型\">#</a> XSS 存储型</h4>\n<p>存储型 XSS 攻击的成功原因主要是由于服务器在处理用户提交的内容时，没有对其进行任何过滤或编码处理，直接将其存储并在页面中展示。</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment = request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip()</span><br><span class=\"line\"><span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">    dataset.append(comment)</span><br></pre></td></tr></table></figure></p>\n<p>用户通过表单提交恶意脚本：</p>\n<p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;window.location=&#x27;https://www.yuanshen.com&#x27;;&quot;</span>&gt;</span>XSS持久型攻击——原神，启动！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>服务器将用户提交的内容存储在 <code>dataset</code>  列表中，没有进行任何过滤或编码。</li>\n<li>当页面渲染时，所有评论（包括恶意脚本）都会被直接输出到 HTML 页面中，导致恶意脚本在用户浏览器中执行。</li>\n</ul>\n<h3 id=\"防御方法\"><a class=\"anchor\" href=\"#防御方法\">#</a> 防御方法</h3>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, request, escape</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_wtf.csrf <span class=\"keyword\">import</span> CSRFProtect</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = <span class=\"string\">&#x27;your_secret_key&#x27;</span></span><br><span class=\"line\">csrf = CSRFProtect(app)</span><br><span class=\"line\"></span><br><span class=\"line\">dataset = [<span class=\"string\">&quot;BIT网络安全课程真有趣&quot;</span>, <span class=\"string\">&quot;Web安全演示实验打卡&quot;</span>, <span class=\"string\">&quot;祝同学们都能取得好成绩!&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>, methods=[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index</span>():</span><br><span class=\"line\">    query = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交新评论&quot;</span>:</span><br><span class=\"line\">            comment = escape(request.form.get(<span class=\"string\">&quot;newComment&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> comment:</span><br><span class=\"line\">                dataset.append(comment)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&quot;submit&quot;</span>) == <span class=\"string\">&quot;提交&quot;</span>:</span><br><span class=\"line\">            query = escape(request.args.get(<span class=\"string\">&quot;content&quot;</span>).strip())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> query:</span><br><span class=\"line\">                sub_dataset = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dataset <span class=\"keyword\">if</span> query <span class=\"keyword\">in</span> x]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=sub_dataset)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>, query=query, comments=dataset)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>输入过滤和编码</strong>：对用户输入的数据进行 HTML 转义，防止恶意脚本的执行。</li>\n<li><strong>使用 Flask 的 <code>escape</code>  函数</strong>：对用户输入的内容进行 HTML 转义，如上代码所示，使用 <code>escape</code>  函数对 <code>query</code>  和 <code>comment</code>  进行处理。</li>\n<li><strong>内容安全策略（CSP）</strong>：配置 HTTP 响应头，限制浏览器只执行可信任的脚本。</li>\n</ul>\n",
            "tags": [
                "Hexo",
                "Front Matter",
                "code",
                "recommendation"
            ]
        }
    ]
}